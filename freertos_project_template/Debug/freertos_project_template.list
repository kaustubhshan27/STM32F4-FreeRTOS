
freertos_project_template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000734c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  080074ec  080074ec  000174ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076d4  080076d4  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080076d4  080076d4  000176d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076dc  080076dc  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076dc  080076dc  000176dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076e0  080076e0  000176e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080076e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000184b4  20000084  08007768  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20018538  08007768  00028538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001920c  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003239  00000000  00000000  000392c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  0003c500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001168  00000000  00000000  0003d7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fda  00000000  00000000  0003e948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b46  00000000  00000000  00057922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a448  00000000  00000000  0006c468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001068b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052a8  00000000  00000000  00106904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080074d4 	.word	0x080074d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	080074d4 	.word	0x080074d4

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20018480 	.word	0x20018480
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96e 	b.w	8000614 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468c      	mov	ip, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8083 	bne.w	8000466 <__udivmoddi4+0x116>
 8000360:	428a      	cmp	r2, r1
 8000362:	4617      	mov	r7, r2
 8000364:	d947      	bls.n	80003f6 <__udivmoddi4+0xa6>
 8000366:	fab2 f282 	clz	r2, r2
 800036a:	b142      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036c:	f1c2 0020 	rsb	r0, r2, #32
 8000370:	fa24 f000 	lsr.w	r0, r4, r0
 8000374:	4091      	lsls	r1, r2
 8000376:	4097      	lsls	r7, r2
 8000378:	ea40 0c01 	orr.w	ip, r0, r1
 800037c:	4094      	lsls	r4, r2
 800037e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fbbc f6f8 	udiv	r6, ip, r8
 8000388:	fa1f fe87 	uxth.w	lr, r7
 800038c:	fb08 c116 	mls	r1, r8, r6, ip
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f10e 	mul.w	r1, r6, lr
 8000398:	4299      	cmp	r1, r3
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x60>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a2:	f080 8119 	bcs.w	80005d8 <__udivmoddi4+0x288>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 8116 	bls.w	80005d8 <__udivmoddi4+0x288>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ce:	f080 8105 	bcs.w	80005dc <__udivmoddi4+0x28c>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	f240 8102 	bls.w	80005dc <__udivmoddi4+0x28c>
 80003d8:	3802      	subs	r0, #2
 80003da:	443c      	add	r4, r7
 80003dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	2600      	movs	r6, #0
 80003e6:	b11d      	cbz	r5, 80003f0 <__udivmoddi4+0xa0>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c5 4300 	strd	r4, r3, [r5]
 80003f0:	4631      	mov	r1, r6
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	b902      	cbnz	r2, 80003fa <__udivmoddi4+0xaa>
 80003f8:	deff      	udf	#255	; 0xff
 80003fa:	fab2 f282 	clz	r2, r2
 80003fe:	2a00      	cmp	r2, #0
 8000400:	d150      	bne.n	80004a4 <__udivmoddi4+0x154>
 8000402:	1bcb      	subs	r3, r1, r7
 8000404:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000408:	fa1f f887 	uxth.w	r8, r7
 800040c:	2601      	movs	r6, #1
 800040e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000412:	0c21      	lsrs	r1, r4, #16
 8000414:	fb0e 331c 	mls	r3, lr, ip, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb08 f30c 	mul.w	r3, r8, ip
 8000420:	428b      	cmp	r3, r1
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0xe4>
 8000424:	1879      	adds	r1, r7, r1
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0xe2>
 800042c:	428b      	cmp	r3, r1
 800042e:	f200 80e9 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 8000432:	4684      	mov	ip, r0
 8000434:	1ac9      	subs	r1, r1, r3
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000440:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x10c>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x10a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80d9 	bhi.w	800060c <__udivmoddi4+0x2bc>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e7bf      	b.n	80003e6 <__udivmoddi4+0x96>
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x12e>
 800046a:	2d00      	cmp	r5, #0
 800046c:	f000 80b1 	beq.w	80005d2 <__udivmoddi4+0x282>
 8000470:	2600      	movs	r6, #0
 8000472:	e9c5 0100 	strd	r0, r1, [r5]
 8000476:	4630      	mov	r0, r6
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f683 	clz	r6, r3
 8000482:	2e00      	cmp	r6, #0
 8000484:	d14a      	bne.n	800051c <__udivmoddi4+0x1cc>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0x140>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80b8 	bhi.w	8000600 <__udivmoddi4+0x2b0>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0103 	sbc.w	r1, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	468c      	mov	ip, r1
 800049a:	2d00      	cmp	r5, #0
 800049c:	d0a8      	beq.n	80003f0 <__udivmoddi4+0xa0>
 800049e:	e9c5 4c00 	strd	r4, ip, [r5]
 80004a2:	e7a5      	b.n	80003f0 <__udivmoddi4+0xa0>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f603 	lsr.w	r6, r0, r3
 80004ac:	4097      	lsls	r7, r2
 80004ae:	fa01 f002 	lsl.w	r0, r1, r2
 80004b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b6:	40d9      	lsrs	r1, r3
 80004b8:	4330      	orrs	r0, r6
 80004ba:	0c03      	lsrs	r3, r0, #16
 80004bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80004c0:	fa1f f887 	uxth.w	r8, r7
 80004c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb06 f108 	mul.w	r1, r6, r8
 80004d0:	4299      	cmp	r1, r3
 80004d2:	fa04 f402 	lsl.w	r4, r4, r2
 80004d6:	d909      	bls.n	80004ec <__udivmoddi4+0x19c>
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	f106 3cff 	add.w	ip, r6, #4294967295
 80004de:	f080 808d 	bcs.w	80005fc <__udivmoddi4+0x2ac>
 80004e2:	4299      	cmp	r1, r3
 80004e4:	f240 808a 	bls.w	80005fc <__udivmoddi4+0x2ac>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	443b      	add	r3, r7
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b281      	uxth	r1, r0
 80004f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fc:	fb00 f308 	mul.w	r3, r0, r8
 8000500:	428b      	cmp	r3, r1
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x1c4>
 8000504:	1879      	adds	r1, r7, r1
 8000506:	f100 3cff 	add.w	ip, r0, #4294967295
 800050a:	d273      	bcs.n	80005f4 <__udivmoddi4+0x2a4>
 800050c:	428b      	cmp	r3, r1
 800050e:	d971      	bls.n	80005f4 <__udivmoddi4+0x2a4>
 8000510:	3802      	subs	r0, #2
 8000512:	4439      	add	r1, r7
 8000514:	1acb      	subs	r3, r1, r3
 8000516:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800051a:	e778      	b.n	800040e <__udivmoddi4+0xbe>
 800051c:	f1c6 0c20 	rsb	ip, r6, #32
 8000520:	fa03 f406 	lsl.w	r4, r3, r6
 8000524:	fa22 f30c 	lsr.w	r3, r2, ip
 8000528:	431c      	orrs	r4, r3
 800052a:	fa20 f70c 	lsr.w	r7, r0, ip
 800052e:	fa01 f306 	lsl.w	r3, r1, r6
 8000532:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000536:	fa21 f10c 	lsr.w	r1, r1, ip
 800053a:	431f      	orrs	r7, r3
 800053c:	0c3b      	lsrs	r3, r7, #16
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fa1f f884 	uxth.w	r8, r4
 8000546:	fb0e 1119 	mls	r1, lr, r9, r1
 800054a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800054e:	fb09 fa08 	mul.w	sl, r9, r8
 8000552:	458a      	cmp	sl, r1
 8000554:	fa02 f206 	lsl.w	r2, r2, r6
 8000558:	fa00 f306 	lsl.w	r3, r0, r6
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x220>
 800055e:	1861      	adds	r1, r4, r1
 8000560:	f109 30ff 	add.w	r0, r9, #4294967295
 8000564:	d248      	bcs.n	80005f8 <__udivmoddi4+0x2a8>
 8000566:	458a      	cmp	sl, r1
 8000568:	d946      	bls.n	80005f8 <__udivmoddi4+0x2a8>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4421      	add	r1, r4
 8000570:	eba1 010a 	sub.w	r1, r1, sl
 8000574:	b2bf      	uxth	r7, r7
 8000576:	fbb1 f0fe 	udiv	r0, r1, lr
 800057a:	fb0e 1110 	mls	r1, lr, r0, r1
 800057e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000582:	fb00 f808 	mul.w	r8, r0, r8
 8000586:	45b8      	cmp	r8, r7
 8000588:	d907      	bls.n	800059a <__udivmoddi4+0x24a>
 800058a:	19e7      	adds	r7, r4, r7
 800058c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000590:	d22e      	bcs.n	80005f0 <__udivmoddi4+0x2a0>
 8000592:	45b8      	cmp	r8, r7
 8000594:	d92c      	bls.n	80005f0 <__udivmoddi4+0x2a0>
 8000596:	3802      	subs	r0, #2
 8000598:	4427      	add	r7, r4
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	eba7 0708 	sub.w	r7, r7, r8
 80005a2:	fba0 8902 	umull	r8, r9, r0, r2
 80005a6:	454f      	cmp	r7, r9
 80005a8:	46c6      	mov	lr, r8
 80005aa:	4649      	mov	r1, r9
 80005ac:	d31a      	bcc.n	80005e4 <__udivmoddi4+0x294>
 80005ae:	d017      	beq.n	80005e0 <__udivmoddi4+0x290>
 80005b0:	b15d      	cbz	r5, 80005ca <__udivmoddi4+0x27a>
 80005b2:	ebb3 020e 	subs.w	r2, r3, lr
 80005b6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005be:	40f2      	lsrs	r2, r6
 80005c0:	ea4c 0202 	orr.w	r2, ip, r2
 80005c4:	40f7      	lsrs	r7, r6
 80005c6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ca:	2600      	movs	r6, #0
 80005cc:	4631      	mov	r1, r6
 80005ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e70b      	b.n	80003f0 <__udivmoddi4+0xa0>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0x60>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6fd      	b.n	80003dc <__udivmoddi4+0x8c>
 80005e0:	4543      	cmp	r3, r8
 80005e2:	d2e5      	bcs.n	80005b0 <__udivmoddi4+0x260>
 80005e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005e8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7df      	b.n	80005b0 <__udivmoddi4+0x260>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e7d2      	b.n	800059a <__udivmoddi4+0x24a>
 80005f4:	4660      	mov	r0, ip
 80005f6:	e78d      	b.n	8000514 <__udivmoddi4+0x1c4>
 80005f8:	4681      	mov	r9, r0
 80005fa:	e7b9      	b.n	8000570 <__udivmoddi4+0x220>
 80005fc:	4666      	mov	r6, ip
 80005fe:	e775      	b.n	80004ec <__udivmoddi4+0x19c>
 8000600:	4630      	mov	r0, r6
 8000602:	e74a      	b.n	800049a <__udivmoddi4+0x14a>
 8000604:	f1ac 0c02 	sub.w	ip, ip, #2
 8000608:	4439      	add	r1, r7
 800060a:	e713      	b.n	8000434 <__udivmoddi4+0xe4>
 800060c:	3802      	subs	r0, #2
 800060e:	443c      	add	r4, r7
 8000610:	e724      	b.n	800045c <__udivmoddi4+0x10c>
 8000612:	bf00      	nop

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b090      	sub	sp, #64	; 0x40
 800061c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061e:	f000 fa09 	bl	8000a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000622:	f000 f83d 	bl	80006a0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  //Enable CYCCNT for SEGGER SystemView
  DWT->CTRL |= (DWT_CTRL_CYCCNTENA_Msk);
 8000626:	4b16      	ldr	r3, [pc, #88]	; (8000680 <main+0x68>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a15      	ldr	r2, [pc, #84]	; (8000680 <main+0x68>)
 800062c:	f043 0301 	orr.w	r3, r3, #1
 8000630:	6013      	str	r3, [r2, #0]

  //Start SystemView Recording
  SEGGER_UART_init(9600);
 8000632:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8000636:	f004 f89b 	bl	8004770 <SEGGER_UART_init>
  SEGGER_SYSVIEW_Conf();
 800063a:	f003 fecb 	bl	80043d4 <SEGGER_SYSVIEW_Conf>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  xTaskCreate(vTask1_handler, "Task-1", configMINIMAL_STACK_SIZE, NULL, 2,
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <main+0x6c>)
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	2302      	movs	r3, #2
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	2300      	movs	r3, #0
 8000648:	2282      	movs	r2, #130	; 0x82
 800064a:	490f      	ldr	r1, [pc, #60]	; (8000688 <main+0x70>)
 800064c:	480f      	ldr	r0, [pc, #60]	; (800068c <main+0x74>)
 800064e:	f002 f809 	bl	8002664 <xTaskCreate>
  			&xTaskHandle1);
  xTaskCreate(vTask2_handler, "Task-2", configMINIMAL_STACK_SIZE, NULL, 2,
 8000652:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <main+0x78>)
 8000654:	9301      	str	r3, [sp, #4]
 8000656:	2302      	movs	r3, #2
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	2300      	movs	r3, #0
 800065c:	2282      	movs	r2, #130	; 0x82
 800065e:	490d      	ldr	r1, [pc, #52]	; (8000694 <main+0x7c>)
 8000660:	480d      	ldr	r0, [pc, #52]	; (8000698 <main+0x80>)
 8000662:	f001 ffff 	bl	8002664 <xTaskCreate>
  			&xTaskHandle2);

  char msg[50];
  sprintf(msg, "This is Hello World example code:\r\n");
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	490c      	ldr	r1, [pc, #48]	; (800069c <main+0x84>)
 800066a:	4618      	mov	r0, r3
 800066c:	f006 fb04 	bl	8006c78 <siprintf>
  //printmsg(msg);
  SEGGER_SYSVIEW_PrintfTarget(msg);
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	4618      	mov	r0, r3
 8000674:	f006 fa1a 	bl	8006aac <SEGGER_SYSVIEW_PrintfTarget>

  vTaskStartScheduler();
 8000678:	f002 f958 	bl	800292c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800067c:	e7fe      	b.n	800067c <main+0x64>
 800067e:	bf00      	nop
 8000680:	e0001000 	.word	0xe0001000
 8000684:	200000a0 	.word	0x200000a0
 8000688:	080074ec 	.word	0x080074ec
 800068c:	08000771 	.word	0x08000771
 8000690:	200000a4 	.word	0x200000a4
 8000694:	080074f4 	.word	0x080074f4
 8000698:	080007e1 	.word	0x080007e1
 800069c:	080074fc 	.word	0x080074fc

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	; 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	2230      	movs	r2, #48	; 0x30
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f006 fada 	bl	8006c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	4b27      	ldr	r3, [pc, #156]	; (8000768 <SystemClock_Config+0xc8>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	4a26      	ldr	r2, [pc, #152]	; (8000768 <SystemClock_Config+0xc8>)
 80006ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d2:	6413      	str	r3, [r2, #64]	; 0x40
 80006d4:	4b24      	ldr	r3, [pc, #144]	; (8000768 <SystemClock_Config+0xc8>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b21      	ldr	r3, [pc, #132]	; (800076c <SystemClock_Config+0xcc>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a20      	ldr	r2, [pc, #128]	; (800076c <SystemClock_Config+0xcc>)
 80006ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	4b1e      	ldr	r3, [pc, #120]	; (800076c <SystemClock_Config+0xcc>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fc:	2302      	movs	r3, #2
 80006fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000700:	2301      	movs	r3, #1
 8000702:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000704:	2310      	movs	r3, #16
 8000706:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000708:	2302      	movs	r3, #2
 800070a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800070c:	2300      	movs	r3, #0
 800070e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000710:	2308      	movs	r3, #8
 8000712:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000714:	2364      	movs	r3, #100	; 0x64
 8000716:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000718:	2302      	movs	r3, #2
 800071a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800071c:	2304      	movs	r3, #4
 800071e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f000 faa9 	bl	8000c7c <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000730:	f000 f89d 	bl	800086e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000738:	2302      	movs	r3, #2
 800073a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000744:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	2103      	movs	r1, #3
 8000750:	4618      	mov	r0, r3
 8000752:	f000 fd0b 	bl	800116c <HAL_RCC_ClockConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800075c:	f000 f887 	bl	800086e <Error_Handler>
  }
}
 8000760:	bf00      	nop
 8000762:	3750      	adds	r7, #80	; 0x50
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <vTask1_handler>:

/* USER CODE BEGIN 4 */

//had to introduce a key to prevent preemption of the task before it finishes sending data via UART
void vTask1_handler(void *params) {
 8000770:	b5b0      	push	{r4, r5, r7, lr}
 8000772:	b090      	sub	sp, #64	; 0x40
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	char msg[50] = "Hello-World from T1\r\n";
 8000778:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <vTask1_handler+0x64>)
 800077a:	f107 040c 	add.w	r4, r7, #12
 800077e:	461d      	mov	r5, r3
 8000780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000784:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000788:	6020      	str	r0, [r4, #0]
 800078a:	3404      	adds	r4, #4
 800078c:	8021      	strh	r1, [r4, #0]
 800078e:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
 800079e:	615a      	str	r2, [r3, #20]
 80007a0:	619a      	str	r2, [r3, #24]
	while (1) {
		if (uart_access_key == AVAILABLE) {
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <vTask1_handler+0x68>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d1fa      	bne.n	80007a2 <vTask1_handler+0x32>
			uart_access_key = UNAVAILABLE;
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <vTask1_handler+0x68>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	701a      	strb	r2, [r3, #0]
			SEGGER_SYSVIEW_PrintfTarget(msg);
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	4618      	mov	r0, r3
 80007b8:	f006 f978 	bl	8006aac <SEGGER_SYSVIEW_PrintfTarget>
			//printmsg("Hello-World from T1\r\n");
			uart_access_key = AVAILABLE;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <vTask1_handler+0x68>)
 80007be:	2201      	movs	r2, #1
 80007c0:	701a      	strb	r2, [r3, #0]
			taskYIELD(); //after UART is done, manually trigger context switch to the other task
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <vTask1_handler+0x6c>)
 80007c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	f3bf 8f4f 	dsb	sy
 80007ce:	f3bf 8f6f 	isb	sy
		if (uart_access_key == AVAILABLE) {
 80007d2:	e7e6      	b.n	80007a2 <vTask1_handler+0x32>
 80007d4:	08007520 	.word	0x08007520
 80007d8:	20000000 	.word	0x20000000
 80007dc:	e000ed04 	.word	0xe000ed04

080007e0 <vTask2_handler>:
		}
	}
}

//had to introduce a key to prevent preemption of the task before it finishes sending data via UART
void vTask2_handler(void *params) {
 80007e0:	b5b0      	push	{r4, r5, r7, lr}
 80007e2:	b090      	sub	sp, #64	; 0x40
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	char msg[50] = "Hello-World from T2\r\n";
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <vTask2_handler+0x64>)
 80007ea:	f107 040c 	add.w	r4, r7, #12
 80007ee:	461d      	mov	r5, r3
 80007f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007f8:	6020      	str	r0, [r4, #0]
 80007fa:	3404      	adds	r4, #4
 80007fc:	8021      	strh	r1, [r4, #0]
 80007fe:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]
 800080e:	615a      	str	r2, [r3, #20]
 8000810:	619a      	str	r2, [r3, #24]
	while (1) {
		if (uart_access_key == AVAILABLE) {
 8000812:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <vTask2_handler+0x68>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b2db      	uxtb	r3, r3
 8000818:	2b01      	cmp	r3, #1
 800081a:	d1fa      	bne.n	8000812 <vTask2_handler+0x32>
			uart_access_key = UNAVAILABLE;
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <vTask2_handler+0x68>)
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
			SEGGER_SYSVIEW_PrintfTarget(msg);
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	4618      	mov	r0, r3
 8000828:	f006 f940 	bl	8006aac <SEGGER_SYSVIEW_PrintfTarget>
			//printmsg("Hello-World from T2\r\n");
			uart_access_key = AVAILABLE;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <vTask2_handler+0x68>)
 800082e:	2201      	movs	r2, #1
 8000830:	701a      	strb	r2, [r3, #0]
			taskYIELD(); //after UART is done, manually trigger context switch to the other task
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <vTask2_handler+0x6c>)
 8000834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	f3bf 8f4f 	dsb	sy
 800083e:	f3bf 8f6f 	isb	sy
		if (uart_access_key == AVAILABLE) {
 8000842:	e7e6      	b.n	8000812 <vTask2_handler+0x32>
 8000844:	08007554 	.word	0x08007554
 8000848:	20000000 	.word	0x20000000
 800084c:	e000ed04 	.word	0xe000ed04

08000850 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000860:	d101      	bne.n	8000866 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000862:	f000 f909 	bl	8000a78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000872:	b672      	cpsid	i
}
 8000874:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000876:	e7fe      	b.n	8000876 <Error_Handler+0x8>

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <HAL_MspInit+0x4c>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	4a0f      	ldr	r2, [pc, #60]	; (80008c4 <HAL_MspInit+0x4c>)
 8000888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088c:	6453      	str	r3, [r2, #68]	; 0x44
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <HAL_MspInit+0x4c>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <HAL_MspInit+0x4c>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <HAL_MspInit+0x4c>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a8:	6413      	str	r3, [r2, #64]	; 0x40
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <HAL_MspInit+0x4c>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]
  /*
   * This function initializes a variable related to priority grouping. That initialization is actually
   * done by the scheduler. But the priority initialization is required by SEGGER_SYSVIEW_Start()
   * which is called before vTaskStartScheduler(). Therefore, this function is called before SEGGER_SYSVIEW_Start().
   */
  vInitPrioGroupValue();
 80008b6:	f003 f9d7 	bl	8003c68 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800

080008c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08c      	sub	sp, #48	; 0x30
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80008d8:	2200      	movs	r2, #0
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	201c      	movs	r0, #28
 80008de:	f000 f9a3 	bl	8000c28 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008e2:	201c      	movs	r0, #28
 80008e4:	f000 f9bc 	bl	8000c60 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	4b20      	ldr	r3, [pc, #128]	; (8000970 <HAL_InitTick+0xa8>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	4a1f      	ldr	r2, [pc, #124]	; (8000970 <HAL_InitTick+0xa8>)
 80008f2:	f043 0301 	orr.w	r3, r3, #1
 80008f6:	6413      	str	r3, [r2, #64]	; 0x40
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <HAL_InitTick+0xa8>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000904:	f107 0210 	add.w	r2, r7, #16
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4611      	mov	r1, r2
 800090e:	4618      	mov	r0, r3
 8000910:	f000 fde8 	bl	80014e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000914:	f000 fdd2 	bl	80014bc <HAL_RCC_GetPCLK1Freq>
 8000918:	4603      	mov	r3, r0
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800091e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000920:	4a14      	ldr	r2, [pc, #80]	; (8000974 <HAL_InitTick+0xac>)
 8000922:	fba2 2303 	umull	r2, r3, r2, r3
 8000926:	0c9b      	lsrs	r3, r3, #18
 8000928:	3b01      	subs	r3, #1
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_InitTick+0xb0>)
 800092e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000932:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000934:	4b10      	ldr	r3, [pc, #64]	; (8000978 <HAL_InitTick+0xb0>)
 8000936:	f240 32e7 	movw	r2, #999	; 0x3e7
 800093a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800093c:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <HAL_InitTick+0xb0>)
 800093e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000940:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <HAL_InitTick+0xb0>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <HAL_InitTick+0xb0>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 800094e:	480a      	ldr	r0, [pc, #40]	; (8000978 <HAL_InitTick+0xb0>)
 8000950:	f000 fdfa 	bl	8001548 <HAL_TIM_Base_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d104      	bne.n	8000964 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800095a:	4807      	ldr	r0, [pc, #28]	; (8000978 <HAL_InitTick+0xb0>)
 800095c:	f000 fe4e 	bl	80015fc <HAL_TIM_Base_Start_IT>
 8000960:	4603      	mov	r3, r0
 8000962:	e000      	b.n	8000966 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8000964:	2301      	movs	r3, #1
}
 8000966:	4618      	mov	r0, r3
 8000968:	3730      	adds	r7, #48	; 0x30
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800
 8000974:	431bde83 	.word	0x431bde83
 8000978:	200183f4 	.word	0x200183f4

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <NMI_Handler+0x4>

08000982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <MemManage_Handler+0x4>

0800098e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <UsageFault_Handler+0x4>

0800099a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009ac:	4802      	ldr	r0, [pc, #8]	; (80009b8 <TIM2_IRQHandler+0x10>)
 80009ae:	f000 fe87 	bl	80016c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200183f4 	.word	0x200183f4

080009bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <SystemInit+0x20>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c6:	4a05      	ldr	r2, [pc, #20]	; (80009dc <SystemInit+0x20>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009e4:	480d      	ldr	r0, [pc, #52]	; (8000a1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009e6:	490e      	ldr	r1, [pc, #56]	; (8000a20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009e8:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fa:	4a0b      	ldr	r2, [pc, #44]	; (8000a28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009fc:	4c0b      	ldr	r4, [pc, #44]	; (8000a2c <LoopFillZerobss+0x26>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a0a:	f7ff ffd7 	bl	80009bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a0e:	f006 f8eb 	bl	8006be8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a12:	f7ff fe01 	bl	8000618 <main>
  bx  lr    
 8000a16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a20:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000a24:	080076e4 	.word	0x080076e4
  ldr r2, =_sbss
 8000a28:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000a2c:	20018538 	.word	0x20018538

08000a30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a30:	e7fe      	b.n	8000a30 <ADC_IRQHandler>
	...

08000a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a38:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <HAL_Init+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <HAL_Init+0x40>)
 8000a3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a44:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <HAL_Init+0x40>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <HAL_Init+0x40>)
 8000a4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <HAL_Init+0x40>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <HAL_Init+0x40>)
 8000a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f000 f8d8 	bl	8000c12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a62:	2000      	movs	r0, #0
 8000a64:	f7ff ff30 	bl	80008c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a68:	f7ff ff06 	bl	8000878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40023c00 	.word	0x40023c00

08000a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_IncTick+0x20>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_IncTick+0x24>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4413      	add	r3, r2
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <HAL_IncTick+0x24>)
 8000a8a:	6013      	str	r3, [r2, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	2000000c 	.word	0x2000000c
 8000a9c:	2001843c 	.word	0x2001843c

08000aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <HAL_GetTick+0x14>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	2001843c 	.word	0x2001843c

08000ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <__NVIC_SetPriorityGrouping+0x44>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ace:	68ba      	ldr	r2, [r7, #8]
 8000ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aea:	4a04      	ldr	r2, [pc, #16]	; (8000afc <__NVIC_SetPriorityGrouping+0x44>)
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	60d3      	str	r3, [r2, #12]
}
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <__NVIC_GetPriorityGrouping+0x18>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	0a1b      	lsrs	r3, r3, #8
 8000b0a:	f003 0307 	and.w	r3, r3, #7
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	db0b      	blt.n	8000b46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	f003 021f 	and.w	r2, r3, #31
 8000b34:	4907      	ldr	r1, [pc, #28]	; (8000b54 <__NVIC_EnableIRQ+0x38>)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	095b      	lsrs	r3, r3, #5
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	e000e100 	.word	0xe000e100

08000b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	6039      	str	r1, [r7, #0]
 8000b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	db0a      	blt.n	8000b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	490c      	ldr	r1, [pc, #48]	; (8000ba4 <__NVIC_SetPriority+0x4c>)
 8000b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b76:	0112      	lsls	r2, r2, #4
 8000b78:	b2d2      	uxtb	r2, r2
 8000b7a:	440b      	add	r3, r1
 8000b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b80:	e00a      	b.n	8000b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	4908      	ldr	r1, [pc, #32]	; (8000ba8 <__NVIC_SetPriority+0x50>)
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	f003 030f 	and.w	r3, r3, #15
 8000b8e:	3b04      	subs	r3, #4
 8000b90:	0112      	lsls	r2, r2, #4
 8000b92:	b2d2      	uxtb	r2, r2
 8000b94:	440b      	add	r3, r1
 8000b96:	761a      	strb	r2, [r3, #24]
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	e000e100 	.word	0xe000e100
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b089      	sub	sp, #36	; 0x24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f003 0307 	and.w	r3, r3, #7
 8000bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	f1c3 0307 	rsb	r3, r3, #7
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	bf28      	it	cs
 8000bca:	2304      	movcs	r3, #4
 8000bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	2b06      	cmp	r3, #6
 8000bd4:	d902      	bls.n	8000bdc <NVIC_EncodePriority+0x30>
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3b03      	subs	r3, #3
 8000bda:	e000      	b.n	8000bde <NVIC_EncodePriority+0x32>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	f04f 32ff 	mov.w	r2, #4294967295
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43da      	mvns	r2, r3
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	401a      	ands	r2, r3
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfe:	43d9      	mvns	r1, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c04:	4313      	orrs	r3, r2
         );
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3724      	adds	r7, #36	; 0x24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff ff4c 	bl	8000ab8 <__NVIC_SetPriorityGrouping>
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
 8000c34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c3a:	f7ff ff61 	bl	8000b00 <__NVIC_GetPriorityGrouping>
 8000c3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	68b9      	ldr	r1, [r7, #8]
 8000c44:	6978      	ldr	r0, [r7, #20]
 8000c46:	f7ff ffb1 	bl	8000bac <NVIC_EncodePriority>
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c50:	4611      	mov	r1, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ff80 	bl	8000b58 <__NVIC_SetPriority>
}
 8000c58:	bf00      	nop
 8000c5a:	3718      	adds	r7, #24
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff ff54 	bl	8000b1c <__NVIC_EnableIRQ>
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e264      	b.n	8001158 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d075      	beq.n	8000d86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c9a:	4ba3      	ldr	r3, [pc, #652]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f003 030c 	and.w	r3, r3, #12
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	d00c      	beq.n	8000cc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ca6:	4ba0      	ldr	r3, [pc, #640]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000cae:	2b08      	cmp	r3, #8
 8000cb0:	d112      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cb2:	4b9d      	ldr	r3, [pc, #628]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000cbe:	d10b      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc0:	4b99      	ldr	r3, [pc, #612]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d05b      	beq.n	8000d84 <HAL_RCC_OscConfig+0x108>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d157      	bne.n	8000d84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e23f      	b.n	8001158 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ce0:	d106      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x74>
 8000ce2:	4b91      	ldr	r3, [pc, #580]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a90      	ldr	r2, [pc, #576]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	e01d      	b.n	8000d2c <HAL_RCC_OscConfig+0xb0>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cf8:	d10c      	bne.n	8000d14 <HAL_RCC_OscConfig+0x98>
 8000cfa:	4b8b      	ldr	r3, [pc, #556]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a8a      	ldr	r2, [pc, #552]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d04:	6013      	str	r3, [r2, #0]
 8000d06:	4b88      	ldr	r3, [pc, #544]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a87      	ldr	r2, [pc, #540]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	e00b      	b.n	8000d2c <HAL_RCC_OscConfig+0xb0>
 8000d14:	4b84      	ldr	r3, [pc, #528]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a83      	ldr	r2, [pc, #524]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	4b81      	ldr	r3, [pc, #516]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a80      	ldr	r2, [pc, #512]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d013      	beq.n	8000d5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d34:	f7ff feb4 	bl	8000aa0 <HAL_GetTick>
 8000d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d3a:	e008      	b.n	8000d4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d3c:	f7ff feb0 	bl	8000aa0 <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b64      	cmp	r3, #100	; 0x64
 8000d48:	d901      	bls.n	8000d4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e204      	b.n	8001158 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d4e:	4b76      	ldr	r3, [pc, #472]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d0f0      	beq.n	8000d3c <HAL_RCC_OscConfig+0xc0>
 8000d5a:	e014      	b.n	8000d86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d5c:	f7ff fea0 	bl	8000aa0 <HAL_GetTick>
 8000d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d62:	e008      	b.n	8000d76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d64:	f7ff fe9c 	bl	8000aa0 <HAL_GetTick>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	2b64      	cmp	r3, #100	; 0x64
 8000d70:	d901      	bls.n	8000d76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d72:	2303      	movs	r3, #3
 8000d74:	e1f0      	b.n	8001158 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d76:	4b6c      	ldr	r3, [pc, #432]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d1f0      	bne.n	8000d64 <HAL_RCC_OscConfig+0xe8>
 8000d82:	e000      	b.n	8000d86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d063      	beq.n	8000e5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d92:	4b65      	ldr	r3, [pc, #404]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000d94:	689b      	ldr	r3, [r3, #8]
 8000d96:	f003 030c 	and.w	r3, r3, #12
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d00b      	beq.n	8000db6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d9e:	4b62      	ldr	r3, [pc, #392]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000da6:	2b08      	cmp	r3, #8
 8000da8:	d11c      	bne.n	8000de4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000daa:	4b5f      	ldr	r3, [pc, #380]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d116      	bne.n	8000de4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000db6:	4b5c      	ldr	r3, [pc, #368]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d005      	beq.n	8000dce <HAL_RCC_OscConfig+0x152>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d001      	beq.n	8000dce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e1c4      	b.n	8001158 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dce:	4b56      	ldr	r3, [pc, #344]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	00db      	lsls	r3, r3, #3
 8000ddc:	4952      	ldr	r1, [pc, #328]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000dde:	4313      	orrs	r3, r2
 8000de0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000de2:	e03a      	b.n	8000e5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d020      	beq.n	8000e2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dec:	4b4f      	ldr	r3, [pc, #316]	; (8000f2c <HAL_RCC_OscConfig+0x2b0>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000df2:	f7ff fe55 	bl	8000aa0 <HAL_GetTick>
 8000df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df8:	e008      	b.n	8000e0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dfa:	f7ff fe51 	bl	8000aa0 <HAL_GetTick>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d901      	bls.n	8000e0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	e1a5      	b.n	8001158 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e0c:	4b46      	ldr	r3, [pc, #280]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d0f0      	beq.n	8000dfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e18:	4b43      	ldr	r3, [pc, #268]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	691b      	ldr	r3, [r3, #16]
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	4940      	ldr	r1, [pc, #256]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	600b      	str	r3, [r1, #0]
 8000e2c:	e015      	b.n	8000e5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e2e:	4b3f      	ldr	r3, [pc, #252]	; (8000f2c <HAL_RCC_OscConfig+0x2b0>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e34:	f7ff fe34 	bl	8000aa0 <HAL_GetTick>
 8000e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e3a:	e008      	b.n	8000e4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e3c:	f7ff fe30 	bl	8000aa0 <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d901      	bls.n	8000e4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e184      	b.n	8001158 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e4e:	4b36      	ldr	r3, [pc, #216]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1f0      	bne.n	8000e3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d030      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d016      	beq.n	8000e9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e6e:	4b30      	ldr	r3, [pc, #192]	; (8000f30 <HAL_RCC_OscConfig+0x2b4>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e74:	f7ff fe14 	bl	8000aa0 <HAL_GetTick>
 8000e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e7a:	e008      	b.n	8000e8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e7c:	f7ff fe10 	bl	8000aa0 <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d901      	bls.n	8000e8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e164      	b.n	8001158 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e8e:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d0f0      	beq.n	8000e7c <HAL_RCC_OscConfig+0x200>
 8000e9a:	e015      	b.n	8000ec8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e9c:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <HAL_RCC_OscConfig+0x2b4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea2:	f7ff fdfd 	bl	8000aa0 <HAL_GetTick>
 8000ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ea8:	e008      	b.n	8000ebc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eaa:	f7ff fdf9 	bl	8000aa0 <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	d901      	bls.n	8000ebc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e14d      	b.n	8001158 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ebc:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1f0      	bne.n	8000eaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 0304 	and.w	r3, r3, #4
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f000 80a0 	beq.w	8001016 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eda:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10f      	bne.n	8000f06 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	4a0e      	ldr	r2, [pc, #56]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <HAL_RCC_OscConfig+0x2ac>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f02:	2301      	movs	r3, #1
 8000f04:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_RCC_OscConfig+0x2b8>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d121      	bne.n	8000f56 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <HAL_RCC_OscConfig+0x2b8>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <HAL_RCC_OscConfig+0x2b8>)
 8000f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f1e:	f7ff fdbf 	bl	8000aa0 <HAL_GetTick>
 8000f22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f24:	e011      	b.n	8000f4a <HAL_RCC_OscConfig+0x2ce>
 8000f26:	bf00      	nop
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	42470000 	.word	0x42470000
 8000f30:	42470e80 	.word	0x42470e80
 8000f34:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f38:	f7ff fdb2 	bl	8000aa0 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d901      	bls.n	8000f4a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e106      	b.n	8001158 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f4a:	4b85      	ldr	r3, [pc, #532]	; (8001160 <HAL_RCC_OscConfig+0x4e4>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f0      	beq.n	8000f38 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d106      	bne.n	8000f6c <HAL_RCC_OscConfig+0x2f0>
 8000f5e:	4b81      	ldr	r3, [pc, #516]	; (8001164 <HAL_RCC_OscConfig+0x4e8>)
 8000f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f62:	4a80      	ldr	r2, [pc, #512]	; (8001164 <HAL_RCC_OscConfig+0x4e8>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6713      	str	r3, [r2, #112]	; 0x70
 8000f6a:	e01c      	b.n	8000fa6 <HAL_RCC_OscConfig+0x32a>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	2b05      	cmp	r3, #5
 8000f72:	d10c      	bne.n	8000f8e <HAL_RCC_OscConfig+0x312>
 8000f74:	4b7b      	ldr	r3, [pc, #492]	; (8001164 <HAL_RCC_OscConfig+0x4e8>)
 8000f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f78:	4a7a      	ldr	r2, [pc, #488]	; (8001164 <HAL_RCC_OscConfig+0x4e8>)
 8000f7a:	f043 0304 	orr.w	r3, r3, #4
 8000f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8000f80:	4b78      	ldr	r3, [pc, #480]	; (8001164 <HAL_RCC_OscConfig+0x4e8>)
 8000f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f84:	4a77      	ldr	r2, [pc, #476]	; (8001164 <HAL_RCC_OscConfig+0x4e8>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8000f8c:	e00b      	b.n	8000fa6 <HAL_RCC_OscConfig+0x32a>
 8000f8e:	4b75      	ldr	r3, [pc, #468]	; (8001164 <HAL_RCC_OscConfig+0x4e8>)
 8000f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f92:	4a74      	ldr	r2, [pc, #464]	; (8001164 <HAL_RCC_OscConfig+0x4e8>)
 8000f94:	f023 0301 	bic.w	r3, r3, #1
 8000f98:	6713      	str	r3, [r2, #112]	; 0x70
 8000f9a:	4b72      	ldr	r3, [pc, #456]	; (8001164 <HAL_RCC_OscConfig+0x4e8>)
 8000f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f9e:	4a71      	ldr	r2, [pc, #452]	; (8001164 <HAL_RCC_OscConfig+0x4e8>)
 8000fa0:	f023 0304 	bic.w	r3, r3, #4
 8000fa4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d015      	beq.n	8000fda <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fae:	f7ff fd77 	bl	8000aa0 <HAL_GetTick>
 8000fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb4:	e00a      	b.n	8000fcc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fb6:	f7ff fd73 	bl	8000aa0 <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d901      	bls.n	8000fcc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e0c5      	b.n	8001158 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fcc:	4b65      	ldr	r3, [pc, #404]	; (8001164 <HAL_RCC_OscConfig+0x4e8>)
 8000fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d0ee      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x33a>
 8000fd8:	e014      	b.n	8001004 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fda:	f7ff fd61 	bl	8000aa0 <HAL_GetTick>
 8000fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fe0:	e00a      	b.n	8000ff8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fe2:	f7ff fd5d 	bl	8000aa0 <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d901      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e0af      	b.n	8001158 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ff8:	4b5a      	ldr	r3, [pc, #360]	; (8001164 <HAL_RCC_OscConfig+0x4e8>)
 8000ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ffc:	f003 0302 	and.w	r3, r3, #2
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1ee      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001004:	7dfb      	ldrb	r3, [r7, #23]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d105      	bne.n	8001016 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800100a:	4b56      	ldr	r3, [pc, #344]	; (8001164 <HAL_RCC_OscConfig+0x4e8>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	4a55      	ldr	r2, [pc, #340]	; (8001164 <HAL_RCC_OscConfig+0x4e8>)
 8001010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001014:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	2b00      	cmp	r3, #0
 800101c:	f000 809b 	beq.w	8001156 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001020:	4b50      	ldr	r3, [pc, #320]	; (8001164 <HAL_RCC_OscConfig+0x4e8>)
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f003 030c 	and.w	r3, r3, #12
 8001028:	2b08      	cmp	r3, #8
 800102a:	d05c      	beq.n	80010e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	2b02      	cmp	r3, #2
 8001032:	d141      	bne.n	80010b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001034:	4b4c      	ldr	r3, [pc, #304]	; (8001168 <HAL_RCC_OscConfig+0x4ec>)
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103a:	f7ff fd31 	bl	8000aa0 <HAL_GetTick>
 800103e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001040:	e008      	b.n	8001054 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001042:	f7ff fd2d 	bl	8000aa0 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e081      	b.n	8001158 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001054:	4b43      	ldr	r3, [pc, #268]	; (8001164 <HAL_RCC_OscConfig+0x4e8>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1f0      	bne.n	8001042 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69da      	ldr	r2, [r3, #28]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a1b      	ldr	r3, [r3, #32]
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106e:	019b      	lsls	r3, r3, #6
 8001070:	431a      	orrs	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001076:	085b      	lsrs	r3, r3, #1
 8001078:	3b01      	subs	r3, #1
 800107a:	041b      	lsls	r3, r3, #16
 800107c:	431a      	orrs	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001082:	061b      	lsls	r3, r3, #24
 8001084:	4937      	ldr	r1, [pc, #220]	; (8001164 <HAL_RCC_OscConfig+0x4e8>)
 8001086:	4313      	orrs	r3, r2
 8001088:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800108a:	4b37      	ldr	r3, [pc, #220]	; (8001168 <HAL_RCC_OscConfig+0x4ec>)
 800108c:	2201      	movs	r2, #1
 800108e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001090:	f7ff fd06 	bl	8000aa0 <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001098:	f7ff fd02 	bl	8000aa0 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e056      	b.n	8001158 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010aa:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <HAL_RCC_OscConfig+0x4e8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0f0      	beq.n	8001098 <HAL_RCC_OscConfig+0x41c>
 80010b6:	e04e      	b.n	8001156 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010b8:	4b2b      	ldr	r3, [pc, #172]	; (8001168 <HAL_RCC_OscConfig+0x4ec>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010be:	f7ff fcef 	bl	8000aa0 <HAL_GetTick>
 80010c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010c4:	e008      	b.n	80010d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010c6:	f7ff fceb 	bl	8000aa0 <HAL_GetTick>
 80010ca:	4602      	mov	r2, r0
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e03f      	b.n	8001158 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010d8:	4b22      	ldr	r3, [pc, #136]	; (8001164 <HAL_RCC_OscConfig+0x4e8>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1f0      	bne.n	80010c6 <HAL_RCC_OscConfig+0x44a>
 80010e4:	e037      	b.n	8001156 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d101      	bne.n	80010f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e032      	b.n	8001158 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80010f2:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <HAL_RCC_OscConfig+0x4e8>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d028      	beq.n	8001152 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800110a:	429a      	cmp	r2, r3
 800110c:	d121      	bne.n	8001152 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001118:	429a      	cmp	r2, r3
 800111a:	d11a      	bne.n	8001152 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001122:	4013      	ands	r3, r2
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001128:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800112a:	4293      	cmp	r3, r2
 800112c:	d111      	bne.n	8001152 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001138:	085b      	lsrs	r3, r3, #1
 800113a:	3b01      	subs	r3, #1
 800113c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800113e:	429a      	cmp	r2, r3
 8001140:	d107      	bne.n	8001152 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800114e:	429a      	cmp	r2, r3
 8001150:	d001      	beq.n	8001156 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e000      	b.n	8001158 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40007000 	.word	0x40007000
 8001164:	40023800 	.word	0x40023800
 8001168:	42470060 	.word	0x42470060

0800116c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e0cc      	b.n	800131a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001180:	4b68      	ldr	r3, [pc, #416]	; (8001324 <HAL_RCC_ClockConfig+0x1b8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	429a      	cmp	r2, r3
 800118c:	d90c      	bls.n	80011a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800118e:	4b65      	ldr	r3, [pc, #404]	; (8001324 <HAL_RCC_ClockConfig+0x1b8>)
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001196:	4b63      	ldr	r3, [pc, #396]	; (8001324 <HAL_RCC_ClockConfig+0x1b8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d001      	beq.n	80011a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e0b8      	b.n	800131a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d020      	beq.n	80011f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d005      	beq.n	80011cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011c0:	4b59      	ldr	r3, [pc, #356]	; (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	4a58      	ldr	r2, [pc, #352]	; (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 80011c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d005      	beq.n	80011e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011d8:	4b53      	ldr	r3, [pc, #332]	; (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	4a52      	ldr	r2, [pc, #328]	; (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 80011de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011e4:	4b50      	ldr	r3, [pc, #320]	; (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	494d      	ldr	r1, [pc, #308]	; (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 80011f2:	4313      	orrs	r3, r2
 80011f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d044      	beq.n	800128c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d107      	bne.n	800121a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120a:	4b47      	ldr	r3, [pc, #284]	; (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d119      	bne.n	800124a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e07f      	b.n	800131a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b02      	cmp	r3, #2
 8001220:	d003      	beq.n	800122a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001226:	2b03      	cmp	r3, #3
 8001228:	d107      	bne.n	800123a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800122a:	4b3f      	ldr	r3, [pc, #252]	; (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d109      	bne.n	800124a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e06f      	b.n	800131a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123a:	4b3b      	ldr	r3, [pc, #236]	; (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e067      	b.n	800131a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800124a:	4b37      	ldr	r3, [pc, #220]	; (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f023 0203 	bic.w	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	4934      	ldr	r1, [pc, #208]	; (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 8001258:	4313      	orrs	r3, r2
 800125a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800125c:	f7ff fc20 	bl	8000aa0 <HAL_GetTick>
 8001260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001262:	e00a      	b.n	800127a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001264:	f7ff fc1c 	bl	8000aa0 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001272:	4293      	cmp	r3, r2
 8001274:	d901      	bls.n	800127a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e04f      	b.n	800131a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800127a:	4b2b      	ldr	r3, [pc, #172]	; (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 020c 	and.w	r2, r3, #12
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	429a      	cmp	r2, r3
 800128a:	d1eb      	bne.n	8001264 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800128c:	4b25      	ldr	r3, [pc, #148]	; (8001324 <HAL_RCC_ClockConfig+0x1b8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0307 	and.w	r3, r3, #7
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	d20c      	bcs.n	80012b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800129a:	4b22      	ldr	r3, [pc, #136]	; (8001324 <HAL_RCC_ClockConfig+0x1b8>)
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012a2:	4b20      	ldr	r3, [pc, #128]	; (8001324 <HAL_RCC_ClockConfig+0x1b8>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d001      	beq.n	80012b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e032      	b.n	800131a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d008      	beq.n	80012d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012c0:	4b19      	ldr	r3, [pc, #100]	; (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	4916      	ldr	r1, [pc, #88]	; (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d009      	beq.n	80012f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012de:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	490e      	ldr	r1, [pc, #56]	; (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012f2:	f000 f821 	bl	8001338 <HAL_RCC_GetSysClockFreq>
 80012f6:	4602      	mov	r2, r0
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	091b      	lsrs	r3, r3, #4
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	490a      	ldr	r1, [pc, #40]	; (800132c <HAL_RCC_ClockConfig+0x1c0>)
 8001304:	5ccb      	ldrb	r3, [r1, r3]
 8001306:	fa22 f303 	lsr.w	r3, r2, r3
 800130a:	4a09      	ldr	r2, [pc, #36]	; (8001330 <HAL_RCC_ClockConfig+0x1c4>)
 800130c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <HAL_RCC_ClockConfig+0x1c8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fad8 	bl	80008c8 <HAL_InitTick>

  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023c00 	.word	0x40023c00
 8001328:	40023800 	.word	0x40023800
 800132c:	08007660 	.word	0x08007660
 8001330:	20000004 	.word	0x20000004
 8001334:	20000008 	.word	0x20000008

08001338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001338:	b5b0      	push	{r4, r5, r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800133e:	2100      	movs	r1, #0
 8001340:	6079      	str	r1, [r7, #4]
 8001342:	2100      	movs	r1, #0
 8001344:	60f9      	str	r1, [r7, #12]
 8001346:	2100      	movs	r1, #0
 8001348:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800134a:	2100      	movs	r1, #0
 800134c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800134e:	4952      	ldr	r1, [pc, #328]	; (8001498 <HAL_RCC_GetSysClockFreq+0x160>)
 8001350:	6889      	ldr	r1, [r1, #8]
 8001352:	f001 010c 	and.w	r1, r1, #12
 8001356:	2908      	cmp	r1, #8
 8001358:	d00d      	beq.n	8001376 <HAL_RCC_GetSysClockFreq+0x3e>
 800135a:	2908      	cmp	r1, #8
 800135c:	f200 8094 	bhi.w	8001488 <HAL_RCC_GetSysClockFreq+0x150>
 8001360:	2900      	cmp	r1, #0
 8001362:	d002      	beq.n	800136a <HAL_RCC_GetSysClockFreq+0x32>
 8001364:	2904      	cmp	r1, #4
 8001366:	d003      	beq.n	8001370 <HAL_RCC_GetSysClockFreq+0x38>
 8001368:	e08e      	b.n	8001488 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800136a:	4b4c      	ldr	r3, [pc, #304]	; (800149c <HAL_RCC_GetSysClockFreq+0x164>)
 800136c:	60bb      	str	r3, [r7, #8]
       break;
 800136e:	e08e      	b.n	800148e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001370:	4b4b      	ldr	r3, [pc, #300]	; (80014a0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001372:	60bb      	str	r3, [r7, #8]
      break;
 8001374:	e08b      	b.n	800148e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001376:	4948      	ldr	r1, [pc, #288]	; (8001498 <HAL_RCC_GetSysClockFreq+0x160>)
 8001378:	6849      	ldr	r1, [r1, #4]
 800137a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800137e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001380:	4945      	ldr	r1, [pc, #276]	; (8001498 <HAL_RCC_GetSysClockFreq+0x160>)
 8001382:	6849      	ldr	r1, [r1, #4]
 8001384:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001388:	2900      	cmp	r1, #0
 800138a:	d024      	beq.n	80013d6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800138c:	4942      	ldr	r1, [pc, #264]	; (8001498 <HAL_RCC_GetSysClockFreq+0x160>)
 800138e:	6849      	ldr	r1, [r1, #4]
 8001390:	0989      	lsrs	r1, r1, #6
 8001392:	4608      	mov	r0, r1
 8001394:	f04f 0100 	mov.w	r1, #0
 8001398:	f240 14ff 	movw	r4, #511	; 0x1ff
 800139c:	f04f 0500 	mov.w	r5, #0
 80013a0:	ea00 0204 	and.w	r2, r0, r4
 80013a4:	ea01 0305 	and.w	r3, r1, r5
 80013a8:	493d      	ldr	r1, [pc, #244]	; (80014a0 <HAL_RCC_GetSysClockFreq+0x168>)
 80013aa:	fb01 f003 	mul.w	r0, r1, r3
 80013ae:	2100      	movs	r1, #0
 80013b0:	fb01 f102 	mul.w	r1, r1, r2
 80013b4:	1844      	adds	r4, r0, r1
 80013b6:	493a      	ldr	r1, [pc, #232]	; (80014a0 <HAL_RCC_GetSysClockFreq+0x168>)
 80013b8:	fba2 0101 	umull	r0, r1, r2, r1
 80013bc:	1863      	adds	r3, r4, r1
 80013be:	4619      	mov	r1, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	461a      	mov	r2, r3
 80013c4:	f04f 0300 	mov.w	r3, #0
 80013c8:	f7fe ffaa 	bl	8000320 <__aeabi_uldivmod>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4613      	mov	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	e04a      	b.n	800146c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013d6:	4b30      	ldr	r3, [pc, #192]	; (8001498 <HAL_RCC_GetSysClockFreq+0x160>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	099b      	lsrs	r3, r3, #6
 80013dc:	461a      	mov	r2, r3
 80013de:	f04f 0300 	mov.w	r3, #0
 80013e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80013e6:	f04f 0100 	mov.w	r1, #0
 80013ea:	ea02 0400 	and.w	r4, r2, r0
 80013ee:	ea03 0501 	and.w	r5, r3, r1
 80013f2:	4620      	mov	r0, r4
 80013f4:	4629      	mov	r1, r5
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	f04f 0300 	mov.w	r3, #0
 80013fe:	014b      	lsls	r3, r1, #5
 8001400:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001404:	0142      	lsls	r2, r0, #5
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	1b00      	subs	r0, r0, r4
 800140c:	eb61 0105 	sbc.w	r1, r1, r5
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	f04f 0300 	mov.w	r3, #0
 8001418:	018b      	lsls	r3, r1, #6
 800141a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800141e:	0182      	lsls	r2, r0, #6
 8001420:	1a12      	subs	r2, r2, r0
 8001422:	eb63 0301 	sbc.w	r3, r3, r1
 8001426:	f04f 0000 	mov.w	r0, #0
 800142a:	f04f 0100 	mov.w	r1, #0
 800142e:	00d9      	lsls	r1, r3, #3
 8001430:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001434:	00d0      	lsls	r0, r2, #3
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	1912      	adds	r2, r2, r4
 800143c:	eb45 0303 	adc.w	r3, r5, r3
 8001440:	f04f 0000 	mov.w	r0, #0
 8001444:	f04f 0100 	mov.w	r1, #0
 8001448:	0299      	lsls	r1, r3, #10
 800144a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800144e:	0290      	lsls	r0, r2, #10
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	461a      	mov	r2, r3
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	f7fe ff5e 	bl	8000320 <__aeabi_uldivmod>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4613      	mov	r3, r2
 800146a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <HAL_RCC_GetSysClockFreq+0x160>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	0c1b      	lsrs	r3, r3, #16
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	3301      	adds	r3, #1
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	fbb2 f3f3 	udiv	r3, r2, r3
 8001484:	60bb      	str	r3, [r7, #8]
      break;
 8001486:	e002      	b.n	800148e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001488:	4b04      	ldr	r3, [pc, #16]	; (800149c <HAL_RCC_GetSysClockFreq+0x164>)
 800148a:	60bb      	str	r3, [r7, #8]
      break;
 800148c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800148e:	68bb      	ldr	r3, [r7, #8]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bdb0      	pop	{r4, r5, r7, pc}
 8001498:	40023800 	.word	0x40023800
 800149c:	00f42400 	.word	0x00f42400
 80014a0:	017d7840 	.word	0x017d7840

080014a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80014aa:	681b      	ldr	r3, [r3, #0]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20000004 	.word	0x20000004

080014bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014c0:	f7ff fff0 	bl	80014a4 <HAL_RCC_GetHCLKFreq>
 80014c4:	4602      	mov	r2, r0
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	0a9b      	lsrs	r3, r3, #10
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	4903      	ldr	r1, [pc, #12]	; (80014e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014d2:	5ccb      	ldrb	r3, [r1, r3]
 80014d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014d8:	4618      	mov	r0, r3
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40023800 	.word	0x40023800
 80014e0:	08007670 	.word	0x08007670

080014e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	220f      	movs	r2, #15
 80014f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_RCC_GetClockConfig+0x5c>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f003 0203 	and.w	r2, r3, #3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001500:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <HAL_RCC_GetClockConfig+0x5c>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <HAL_RCC_GetClockConfig+0x5c>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_RCC_GetClockConfig+0x5c>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	08db      	lsrs	r3, r3, #3
 800151e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <HAL_RCC_GetClockConfig+0x60>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0207 	and.w	r2, r3, #7
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	601a      	str	r2, [r3, #0]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800
 8001544:	40023c00 	.word	0x40023c00

08001548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e041      	b.n	80015de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d106      	bne.n	8001574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 f839 	bl	80015e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2202      	movs	r2, #2
 8001578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3304      	adds	r3, #4
 8001584:	4619      	mov	r1, r3
 8001586:	4610      	mov	r0, r2
 8001588:	f000 f9ca 	bl	8001920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b01      	cmp	r3, #1
 800160e:	d001      	beq.n	8001614 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e044      	b.n	800169e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2202      	movs	r2, #2
 8001618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	68da      	ldr	r2, [r3, #12]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0201 	orr.w	r2, r2, #1
 800162a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a1e      	ldr	r2, [pc, #120]	; (80016ac <HAL_TIM_Base_Start_IT+0xb0>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d018      	beq.n	8001668 <HAL_TIM_Base_Start_IT+0x6c>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800163e:	d013      	beq.n	8001668 <HAL_TIM_Base_Start_IT+0x6c>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a1a      	ldr	r2, [pc, #104]	; (80016b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d00e      	beq.n	8001668 <HAL_TIM_Base_Start_IT+0x6c>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a19      	ldr	r2, [pc, #100]	; (80016b4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d009      	beq.n	8001668 <HAL_TIM_Base_Start_IT+0x6c>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a17      	ldr	r2, [pc, #92]	; (80016b8 <HAL_TIM_Base_Start_IT+0xbc>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d004      	beq.n	8001668 <HAL_TIM_Base_Start_IT+0x6c>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a16      	ldr	r2, [pc, #88]	; (80016bc <HAL_TIM_Base_Start_IT+0xc0>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d111      	bne.n	800168c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b06      	cmp	r3, #6
 8001678:	d010      	beq.n	800169c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f042 0201 	orr.w	r2, r2, #1
 8001688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800168a:	e007      	b.n	800169c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0201 	orr.w	r2, r2, #1
 800169a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40010000 	.word	0x40010000
 80016b0:	40000400 	.word	0x40000400
 80016b4:	40000800 	.word	0x40000800
 80016b8:	40000c00 	.word	0x40000c00
 80016bc:	40014000 	.word	0x40014000

080016c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d122      	bne.n	800171c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d11b      	bne.n	800171c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f06f 0202 	mvn.w	r2, #2
 80016ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	f003 0303 	and.w	r3, r3, #3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f8ee 	bl	80018e4 <HAL_TIM_IC_CaptureCallback>
 8001708:	e005      	b.n	8001716 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f8e0 	bl	80018d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 f8f1 	bl	80018f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	f003 0304 	and.w	r3, r3, #4
 8001726:	2b04      	cmp	r3, #4
 8001728:	d122      	bne.n	8001770 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b04      	cmp	r3, #4
 8001736:	d11b      	bne.n	8001770 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f06f 0204 	mvn.w	r2, #4
 8001740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2202      	movs	r2, #2
 8001746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f8c4 	bl	80018e4 <HAL_TIM_IC_CaptureCallback>
 800175c:	e005      	b.n	800176a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f8b6 	bl	80018d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f8c7 	bl	80018f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	f003 0308 	and.w	r3, r3, #8
 800177a:	2b08      	cmp	r3, #8
 800177c:	d122      	bne.n	80017c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	f003 0308 	and.w	r3, r3, #8
 8001788:	2b08      	cmp	r3, #8
 800178a:	d11b      	bne.n	80017c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f06f 0208 	mvn.w	r2, #8
 8001794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2204      	movs	r2, #4
 800179a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f89a 	bl	80018e4 <HAL_TIM_IC_CaptureCallback>
 80017b0:	e005      	b.n	80017be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f88c 	bl	80018d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 f89d 	bl	80018f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	f003 0310 	and.w	r3, r3, #16
 80017ce:	2b10      	cmp	r3, #16
 80017d0:	d122      	bne.n	8001818 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	f003 0310 	and.w	r3, r3, #16
 80017dc:	2b10      	cmp	r3, #16
 80017de:	d11b      	bne.n	8001818 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f06f 0210 	mvn.w	r2, #16
 80017e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2208      	movs	r2, #8
 80017ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f870 	bl	80018e4 <HAL_TIM_IC_CaptureCallback>
 8001804:	e005      	b.n	8001812 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f862 	bl	80018d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 f873 	bl	80018f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b01      	cmp	r3, #1
 8001824:	d10e      	bne.n	8001844 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b01      	cmp	r3, #1
 8001832:	d107      	bne.n	8001844 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f06f 0201 	mvn.w	r2, #1
 800183c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff f806 	bl	8000850 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800184e:	2b80      	cmp	r3, #128	; 0x80
 8001850:	d10e      	bne.n	8001870 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800185c:	2b80      	cmp	r3, #128	; 0x80
 800185e:	d107      	bne.n	8001870 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f8e2 	bl	8001a34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800187a:	2b40      	cmp	r3, #64	; 0x40
 800187c:	d10e      	bne.n	800189c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001888:	2b40      	cmp	r3, #64	; 0x40
 800188a:	d107      	bne.n	800189c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f838 	bl	800190c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	f003 0320 	and.w	r3, r3, #32
 80018a6:	2b20      	cmp	r3, #32
 80018a8:	d10e      	bne.n	80018c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	f003 0320 	and.w	r3, r3, #32
 80018b4:	2b20      	cmp	r3, #32
 80018b6:	d107      	bne.n	80018c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f06f 0220 	mvn.w	r2, #32
 80018c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f8ac 	bl	8001a20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a34      	ldr	r2, [pc, #208]	; (8001a04 <TIM_Base_SetConfig+0xe4>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d00f      	beq.n	8001958 <TIM_Base_SetConfig+0x38>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800193e:	d00b      	beq.n	8001958 <TIM_Base_SetConfig+0x38>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a31      	ldr	r2, [pc, #196]	; (8001a08 <TIM_Base_SetConfig+0xe8>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d007      	beq.n	8001958 <TIM_Base_SetConfig+0x38>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a30      	ldr	r2, [pc, #192]	; (8001a0c <TIM_Base_SetConfig+0xec>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d003      	beq.n	8001958 <TIM_Base_SetConfig+0x38>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a2f      	ldr	r2, [pc, #188]	; (8001a10 <TIM_Base_SetConfig+0xf0>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d108      	bne.n	800196a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800195e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	4313      	orrs	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a25      	ldr	r2, [pc, #148]	; (8001a04 <TIM_Base_SetConfig+0xe4>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d01b      	beq.n	80019aa <TIM_Base_SetConfig+0x8a>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001978:	d017      	beq.n	80019aa <TIM_Base_SetConfig+0x8a>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a22      	ldr	r2, [pc, #136]	; (8001a08 <TIM_Base_SetConfig+0xe8>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d013      	beq.n	80019aa <TIM_Base_SetConfig+0x8a>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a21      	ldr	r2, [pc, #132]	; (8001a0c <TIM_Base_SetConfig+0xec>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d00f      	beq.n	80019aa <TIM_Base_SetConfig+0x8a>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a20      	ldr	r2, [pc, #128]	; (8001a10 <TIM_Base_SetConfig+0xf0>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d00b      	beq.n	80019aa <TIM_Base_SetConfig+0x8a>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a1f      	ldr	r2, [pc, #124]	; (8001a14 <TIM_Base_SetConfig+0xf4>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d007      	beq.n	80019aa <TIM_Base_SetConfig+0x8a>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a1e      	ldr	r2, [pc, #120]	; (8001a18 <TIM_Base_SetConfig+0xf8>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d003      	beq.n	80019aa <TIM_Base_SetConfig+0x8a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a1d      	ldr	r2, [pc, #116]	; (8001a1c <TIM_Base_SetConfig+0xfc>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d108      	bne.n	80019bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <TIM_Base_SetConfig+0xe4>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d103      	bne.n	80019f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	615a      	str	r2, [r3, #20]
}
 80019f6:	bf00      	nop
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40010000 	.word	0x40010000
 8001a08:	40000400 	.word	0x40000400
 8001a0c:	40000800 	.word	0x40000800
 8001a10:	40000c00 	.word	0x40000c00
 8001a14:	40014000 	.word	0x40014000
 8001a18:	40014400 	.word	0x40014400
 8001a1c:	40014800 	.word	0x40014800

08001a20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f103 0208 	add.w	r2, r3, #8
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a60:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f103 0208 	add.w	r2, r3, #8
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f103 0208 	add.w	r2, r3, #8
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b085      	sub	sp, #20
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
 8001aaa:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	601a      	str	r2, [r3, #0]
}
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001aea:	b480      	push	{r7}
 8001aec:	b085      	sub	sp, #20
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b00:	d103      	bne.n	8001b0a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	e00c      	b.n	8001b24 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3308      	adds	r3, #8
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	e002      	b.n	8001b18 <vListInsert+0x2e>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d2f6      	bcs.n	8001b12 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	601a      	str	r2, [r3, #0]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	6892      	ldr	r2, [r2, #8]
 8001b72:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6852      	ldr	r2, [r2, #4]
 8001b7c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d103      	bne.n	8001b90 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	1e5a      	subs	r2, r3, #1
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10a      	bne.n	8001bda <xQueueGenericReset+0x2a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bc8:	f383 8811 	msr	BASEPRI, r3
 8001bcc:	f3bf 8f6f 	isb	sy
 8001bd0:	f3bf 8f4f 	dsb	sy
 8001bd4:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001bd6:	bf00      	nop
 8001bd8:	e7fe      	b.n	8001bd8 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8001bda:	f002 f8c3 	bl	8003d64 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be6:	68f9      	ldr	r1, [r7, #12]
 8001be8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001bea:	fb01 f303 	mul.w	r3, r1, r3
 8001bee:	441a      	add	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	68f9      	ldr	r1, [r7, #12]
 8001c0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001c10:	fb01 f303 	mul.w	r3, r1, r3
 8001c14:	441a      	add	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	22ff      	movs	r2, #255	; 0xff
 8001c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	22ff      	movs	r2, #255	; 0xff
 8001c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d114      	bne.n	8001c5a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d01a      	beq.n	8001c6e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	3310      	adds	r3, #16
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f001 f91f 	bl	8002e80 <xTaskRemoveFromEventList>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d012      	beq.n	8001c6e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <xQueueGenericReset+0xcc>)
 8001c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	f3bf 8f4f 	dsb	sy
 8001c54:	f3bf 8f6f 	isb	sy
 8001c58:	e009      	b.n	8001c6e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	3310      	adds	r3, #16
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fef2 	bl	8001a48 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	3324      	adds	r3, #36	; 0x24
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff feed 	bl	8001a48 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8001c6e:	f002 f8a9 	bl	8003dc4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8001c72:	2301      	movs	r3, #1
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	e000ed04 	.word	0xe000ed04

08001c80 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08c      	sub	sp, #48	; 0x30
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10a      	bne.n	8001caa <xQueueGenericCreate+0x2a>
        __asm volatile
 8001c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c98:	f383 8811 	msr	BASEPRI, r3
 8001c9c:	f3bf 8f6f 	isb	sy
 8001ca0:	f3bf 8f4f 	dsb	sy
 8001ca4:	61bb      	str	r3, [r7, #24]
    }
 8001ca6:	bf00      	nop
 8001ca8:	e7fe      	b.n	8001ca8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	fb02 f303 	mul.w	r3, r2, r3
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d006      	beq.n	8001cc8 <xQueueGenericCreate+0x48>
 8001cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d101      	bne.n	8001ccc <xQueueGenericCreate+0x4c>
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <xQueueGenericCreate+0x4e>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10a      	bne.n	8001ce8 <xQueueGenericCreate+0x68>
        __asm volatile
 8001cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cd6:	f383 8811 	msr	BASEPRI, r3
 8001cda:	f3bf 8f6f 	isb	sy
 8001cde:	f3bf 8f4f 	dsb	sy
 8001ce2:	617b      	str	r3, [r7, #20]
    }
 8001ce4:	bf00      	nop
 8001ce6:	e7fe      	b.n	8001ce6 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001cee:	d90a      	bls.n	8001d06 <xQueueGenericCreate+0x86>
        __asm volatile
 8001cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cf4:	f383 8811 	msr	BASEPRI, r3
 8001cf8:	f3bf 8f6f 	isb	sy
 8001cfc:	f3bf 8f4f 	dsb	sy
 8001d00:	613b      	str	r3, [r7, #16]
    }
 8001d02:	bf00      	nop
 8001d04:	e7fe      	b.n	8001d04 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	3350      	adds	r3, #80	; 0x50
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f002 f956 	bl	8003fbc <pvPortMalloc>
 8001d10:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8001d12:	6a3b      	ldr	r3, [r7, #32]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00d      	beq.n	8001d34 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	3350      	adds	r3, #80	; 0x50
 8001d20:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001d22:	79fa      	ldrb	r2, [r7, #7]
 8001d24:	6a3b      	ldr	r3, [r7, #32]
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	69fa      	ldr	r2, [r7, #28]
 8001d2c:	68b9      	ldr	r1, [r7, #8]
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 f805 	bl	8001d3e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001d34:	6a3b      	ldr	r3, [r7, #32]
    }
 8001d36:	4618      	mov	r0, r3
 8001d38:	3728      	adds	r7, #40	; 0x28
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b084      	sub	sp, #16
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d103      	bne.n	8001d5a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	e002      	b.n	8001d60 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	68fa      	ldr	r2, [r7, #12]
 8001d64:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	68ba      	ldr	r2, [r7, #8]
 8001d6a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	69b8      	ldr	r0, [r7, #24]
 8001d70:	f7ff ff1e 	bl	8001bb0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	78fa      	ldrb	r2, [r7, #3]
 8001d78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	68f9      	ldr	r1, [r7, #12]
 8001d82:	2073      	movs	r0, #115	; 0x73
 8001d84:	f004 f818 	bl	8005db8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b090      	sub	sp, #64	; 0x40
 8001d94:	af02      	add	r7, sp, #8
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
 8001d9c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8001da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10a      	bne.n	8001dc2 <xQueueGenericSend+0x32>
        __asm volatile
 8001dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db0:	f383 8811 	msr	BASEPRI, r3
 8001db4:	f3bf 8f6f 	isb	sy
 8001db8:	f3bf 8f4f 	dsb	sy
 8001dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8001dbe:	bf00      	nop
 8001dc0:	e7fe      	b.n	8001dc0 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d103      	bne.n	8001dd0 <xQueueGenericSend+0x40>
 8001dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <xQueueGenericSend+0x44>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e000      	b.n	8001dd6 <xQueueGenericSend+0x46>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10a      	bne.n	8001df0 <xQueueGenericSend+0x60>
        __asm volatile
 8001dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dde:	f383 8811 	msr	BASEPRI, r3
 8001de2:	f3bf 8f6f 	isb	sy
 8001de6:	f3bf 8f4f 	dsb	sy
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8001dec:	bf00      	nop
 8001dee:	e7fe      	b.n	8001dee <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d103      	bne.n	8001dfe <xQueueGenericSend+0x6e>
 8001df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <xQueueGenericSend+0x72>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <xQueueGenericSend+0x74>
 8001e02:	2300      	movs	r3, #0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d10a      	bne.n	8001e1e <xQueueGenericSend+0x8e>
        __asm volatile
 8001e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e0c:	f383 8811 	msr	BASEPRI, r3
 8001e10:	f3bf 8f6f 	isb	sy
 8001e14:	f3bf 8f4f 	dsb	sy
 8001e18:	623b      	str	r3, [r7, #32]
    }
 8001e1a:	bf00      	nop
 8001e1c:	e7fe      	b.n	8001e1c <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001e1e:	f001 f9cf 	bl	80031c0 <xTaskGetSchedulerState>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d102      	bne.n	8001e2e <xQueueGenericSend+0x9e>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <xQueueGenericSend+0xa2>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <xQueueGenericSend+0xa4>
 8001e32:	2300      	movs	r3, #0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10a      	bne.n	8001e4e <xQueueGenericSend+0xbe>
        __asm volatile
 8001e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e3c:	f383 8811 	msr	BASEPRI, r3
 8001e40:	f3bf 8f6f 	isb	sy
 8001e44:	f3bf 8f4f 	dsb	sy
 8001e48:	61fb      	str	r3, [r7, #28]
    }
 8001e4a:	bf00      	nop
 8001e4c:	e7fe      	b.n	8001e4c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001e4e:	f001 ff89 	bl	8003d64 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d302      	bcc.n	8001e64 <xQueueGenericSend+0xd4>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d136      	bne.n	8001ed2 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8001e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e66:	4618      	mov	r0, r3
 8001e68:	f004 fd34 	bl	80068d4 <SEGGER_SYSVIEW_ShrinkId>
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	460b      	mov	r3, r1
 8001e76:	4601      	mov	r1, r0
 8001e78:	205a      	movs	r0, #90	; 0x5a
 8001e7a:	f004 f813 	bl	8005ea4 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	68b9      	ldr	r1, [r7, #8]
 8001e82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e84:	f000 fa78 	bl	8002378 <prvCopyDataToQueue>
 8001e88:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d010      	beq.n	8001eb4 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e94:	3324      	adds	r3, #36	; 0x24
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 fff2 	bl	8002e80 <xTaskRemoveFromEventList>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d013      	beq.n	8001eca <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8001ea2:	4b4d      	ldr	r3, [pc, #308]	; (8001fd8 <xQueueGenericSend+0x248>)
 8001ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	f3bf 8f4f 	dsb	sy
 8001eae:	f3bf 8f6f 	isb	sy
 8001eb2:	e00a      	b.n	8001eca <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8001eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d007      	beq.n	8001eca <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8001eba:	4b47      	ldr	r3, [pc, #284]	; (8001fd8 <xQueueGenericSend+0x248>)
 8001ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	f3bf 8f4f 	dsb	sy
 8001ec6:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8001eca:	f001 ff7b 	bl	8003dc4 <vPortExitCritical>
                return pdPASS;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e07d      	b.n	8001fce <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d110      	bne.n	8001efa <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001ed8:	f001 ff74 	bl	8003dc4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8001edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f004 fcf8 	bl	80068d4 <SEGGER_SYSVIEW_ShrinkId>
 8001ee4:	68ba      	ldr	r2, [r7, #8]
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	460b      	mov	r3, r1
 8001eee:	4601      	mov	r1, r0
 8001ef0:	205a      	movs	r0, #90	; 0x5a
 8001ef2:	f003 ffd7 	bl	8005ea4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e069      	b.n	8001fce <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d106      	bne.n	8001f0e <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	4618      	mov	r0, r3
 8001f06:	f001 f821 	bl	8002f4c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001f0e:	f001 ff59 	bl	8003dc4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001f12:	f000 fd6d 	bl	80029f0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001f16:	f001 ff25 	bl	8003d64 <vPortEnterCritical>
 8001f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f20:	b25b      	sxtb	r3, r3
 8001f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f26:	d103      	bne.n	8001f30 <xQueueGenericSend+0x1a0>
 8001f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f32:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f36:	b25b      	sxtb	r3, r3
 8001f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3c:	d103      	bne.n	8001f46 <xQueueGenericSend+0x1b6>
 8001f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f46:	f001 ff3d 	bl	8003dc4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001f4a:	1d3a      	adds	r2, r7, #4
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	4611      	mov	r1, r2
 8001f52:	4618      	mov	r0, r3
 8001f54:	f001 f810 	bl	8002f78 <xTaskCheckForTimeOut>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d124      	bne.n	8001fa8 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001f5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f60:	f000 fb02 	bl	8002568 <prvIsQueueFull>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d018      	beq.n	8001f9c <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6c:	3310      	adds	r3, #16
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 ff32 	bl	8002ddc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8001f78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f7a:	f000 fa8d 	bl	8002498 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8001f7e:	f000 fd45 	bl	8002a0c <xTaskResumeAll>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f47f af62 	bne.w	8001e4e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8001f8a:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <xQueueGenericSend+0x248>)
 8001f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	f3bf 8f4f 	dsb	sy
 8001f96:	f3bf 8f6f 	isb	sy
 8001f9a:	e758      	b.n	8001e4e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8001f9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f9e:	f000 fa7b 	bl	8002498 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001fa2:	f000 fd33 	bl	8002a0c <xTaskResumeAll>
 8001fa6:	e752      	b.n	8001e4e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8001fa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001faa:	f000 fa75 	bl	8002498 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001fae:	f000 fd2d 	bl	8002a0c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8001fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f004 fc8d 	bl	80068d4 <SEGGER_SYSVIEW_ShrinkId>
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	6879      	ldr	r1, [r7, #4]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4601      	mov	r1, r0
 8001fc6:	205a      	movs	r0, #90	; 0x5a
 8001fc8:	f003 ff6c 	bl	8005ea4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8001fcc:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3738      	adds	r7, #56	; 0x38
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	e000ed04 	.word	0xe000ed04

08001fdc <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b090      	sub	sp, #64	; 0x40
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8001fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10a      	bne.n	800200a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8001ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff8:	f383 8811 	msr	BASEPRI, r3
 8001ffc:	f3bf 8f6f 	isb	sy
 8002000:	f3bf 8f4f 	dsb	sy
 8002004:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002006:	bf00      	nop
 8002008:	e7fe      	b.n	8002008 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d103      	bne.n	8002018 <xQueueGenericSendFromISR+0x3c>
 8002010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <xQueueGenericSendFromISR+0x40>
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <xQueueGenericSendFromISR+0x42>
 800201c:	2300      	movs	r3, #0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10a      	bne.n	8002038 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002026:	f383 8811 	msr	BASEPRI, r3
 800202a:	f3bf 8f6f 	isb	sy
 800202e:	f3bf 8f4f 	dsb	sy
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002034:	bf00      	nop
 8002036:	e7fe      	b.n	8002036 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d103      	bne.n	8002046 <xQueueGenericSendFromISR+0x6a>
 800203e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <xQueueGenericSendFromISR+0x6e>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <xQueueGenericSendFromISR+0x70>
 800204a:	2300      	movs	r3, #0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10a      	bne.n	8002066 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002054:	f383 8811 	msr	BASEPRI, r3
 8002058:	f3bf 8f6f 	isb	sy
 800205c:	f3bf 8f4f 	dsb	sy
 8002060:	623b      	str	r3, [r7, #32]
    }
 8002062:	bf00      	nop
 8002064:	e7fe      	b.n	8002064 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002066:	f001 ff69 	bl	8003f3c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800206a:	f3ef 8211 	mrs	r2, BASEPRI
 800206e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002072:	f383 8811 	msr	BASEPRI, r3
 8002076:	f3bf 8f6f 	isb	sy
 800207a:	f3bf 8f4f 	dsb	sy
 800207e:	61fa      	str	r2, [r7, #28]
 8002080:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002082:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002084:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800208a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800208c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208e:	429a      	cmp	r2, r3
 8002090:	d302      	bcc.n	8002098 <xQueueGenericSendFromISR+0xbc>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2b02      	cmp	r3, #2
 8002096:	d148      	bne.n	800212a <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800209a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800209e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a6:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80020a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020aa:	4618      	mov	r0, r3
 80020ac:	f004 fc12 	bl	80068d4 <SEGGER_SYSVIEW_ShrinkId>
 80020b0:	4601      	mov	r1, r0
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	461a      	mov	r2, r3
 80020b6:	2060      	movs	r0, #96	; 0x60
 80020b8:	f003 fe24 	bl	8005d04 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	68b9      	ldr	r1, [r7, #8]
 80020c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80020c2:	f000 f959 	bl	8002378 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80020c6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80020ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ce:	d112      	bne.n	80020f6 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80020d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d025      	beq.n	8002124 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020da:	3324      	adds	r3, #36	; 0x24
 80020dc:	4618      	mov	r0, r3
 80020de:	f000 fecf 	bl	8002e80 <xTaskRemoveFromEventList>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01d      	beq.n	8002124 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d01a      	beq.n	8002124 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	e016      	b.n	8002124 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80020f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80020fa:	2b7f      	cmp	r3, #127	; 0x7f
 80020fc:	d10a      	bne.n	8002114 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 80020fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002102:	f383 8811 	msr	BASEPRI, r3
 8002106:	f3bf 8f6f 	isb	sy
 800210a:	f3bf 8f4f 	dsb	sy
 800210e:	617b      	str	r3, [r7, #20]
    }
 8002110:	bf00      	nop
 8002112:	e7fe      	b.n	8002112 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002114:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002118:	3301      	adds	r3, #1
 800211a:	b2db      	uxtb	r3, r3
 800211c:	b25a      	sxtb	r2, r3
 800211e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002124:	2301      	movs	r3, #1
 8002126:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002128:	e00b      	b.n	8002142 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 800212a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800212c:	4618      	mov	r0, r3
 800212e:	f004 fbd1 	bl	80068d4 <SEGGER_SYSVIEW_ShrinkId>
 8002132:	4601      	mov	r1, r0
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	461a      	mov	r2, r3
 8002138:	2060      	movs	r0, #96	; 0x60
 800213a:	f003 fde3 	bl	8005d04 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800213e:	2300      	movs	r3, #0
 8002140:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002144:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800214c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800214e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002150:	4618      	mov	r0, r3
 8002152:	3740      	adds	r7, #64	; 0x40
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002158:	b590      	push	{r4, r7, lr}
 800215a:	b08f      	sub	sp, #60	; 0x3c
 800215c:	af02      	add	r7, sp, #8
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002164:	2300      	movs	r3, #0
 8002166:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800216c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10a      	bne.n	8002188 <xQueueReceive+0x30>
        __asm volatile
 8002172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002176:	f383 8811 	msr	BASEPRI, r3
 800217a:	f3bf 8f6f 	isb	sy
 800217e:	f3bf 8f4f 	dsb	sy
 8002182:	623b      	str	r3, [r7, #32]
    }
 8002184:	bf00      	nop
 8002186:	e7fe      	b.n	8002186 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d103      	bne.n	8002196 <xQueueReceive+0x3e>
 800218e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <xQueueReceive+0x42>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <xQueueReceive+0x44>
 800219a:	2300      	movs	r3, #0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10a      	bne.n	80021b6 <xQueueReceive+0x5e>
        __asm volatile
 80021a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a4:	f383 8811 	msr	BASEPRI, r3
 80021a8:	f3bf 8f6f 	isb	sy
 80021ac:	f3bf 8f4f 	dsb	sy
 80021b0:	61fb      	str	r3, [r7, #28]
    }
 80021b2:	bf00      	nop
 80021b4:	e7fe      	b.n	80021b4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80021b6:	f001 f803 	bl	80031c0 <xTaskGetSchedulerState>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d102      	bne.n	80021c6 <xQueueReceive+0x6e>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <xQueueReceive+0x72>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <xQueueReceive+0x74>
 80021ca:	2300      	movs	r3, #0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10a      	bne.n	80021e6 <xQueueReceive+0x8e>
        __asm volatile
 80021d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d4:	f383 8811 	msr	BASEPRI, r3
 80021d8:	f3bf 8f6f 	isb	sy
 80021dc:	f3bf 8f4f 	dsb	sy
 80021e0:	61bb      	str	r3, [r7, #24]
    }
 80021e2:	bf00      	nop
 80021e4:	e7fe      	b.n	80021e4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80021e6:	f001 fdbd 	bl	8003d64 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d02f      	beq.n	8002256 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80021f6:	68b9      	ldr	r1, [r7, #8]
 80021f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80021fa:	f000 f927 	bl	800244c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80021fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002200:	4618      	mov	r0, r3
 8002202:	f004 fb67 	bl	80068d4 <SEGGER_SYSVIEW_ShrinkId>
 8002206:	4604      	mov	r4, r0
 8002208:	2000      	movs	r0, #0
 800220a:	f004 fb63 	bl	80068d4 <SEGGER_SYSVIEW_ShrinkId>
 800220e:	4602      	mov	r2, r0
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2101      	movs	r1, #1
 8002214:	9100      	str	r1, [sp, #0]
 8002216:	4621      	mov	r1, r4
 8002218:	205c      	movs	r0, #92	; 0x5c
 800221a:	f003 fe43 	bl	8005ea4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	1e5a      	subs	r2, r3, #1
 8002222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002224:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00f      	beq.n	800224e <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800222e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002230:	3310      	adds	r3, #16
 8002232:	4618      	mov	r0, r3
 8002234:	f000 fe24 	bl	8002e80 <xTaskRemoveFromEventList>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d007      	beq.n	800224e <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800223e:	4b4d      	ldr	r3, [pc, #308]	; (8002374 <xQueueReceive+0x21c>)
 8002240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	f3bf 8f4f 	dsb	sy
 800224a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800224e:	f001 fdb9 	bl	8003dc4 <vPortExitCritical>
                return pdPASS;
 8002252:	2301      	movs	r3, #1
 8002254:	e08a      	b.n	800236c <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d113      	bne.n	8002284 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800225c:	f001 fdb2 	bl	8003dc4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002262:	4618      	mov	r0, r3
 8002264:	f004 fb36 	bl	80068d4 <SEGGER_SYSVIEW_ShrinkId>
 8002268:	4604      	mov	r4, r0
 800226a:	2000      	movs	r0, #0
 800226c:	f004 fb32 	bl	80068d4 <SEGGER_SYSVIEW_ShrinkId>
 8002270:	4602      	mov	r2, r0
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2101      	movs	r1, #1
 8002276:	9100      	str	r1, [sp, #0]
 8002278:	4621      	mov	r1, r4
 800227a:	205c      	movs	r0, #92	; 0x5c
 800227c:	f003 fe12 	bl	8005ea4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002280:	2300      	movs	r3, #0
 8002282:	e073      	b.n	800236c <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002286:	2b00      	cmp	r3, #0
 8002288:	d106      	bne.n	8002298 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800228a:	f107 0310 	add.w	r3, r7, #16
 800228e:	4618      	mov	r0, r3
 8002290:	f000 fe5c 	bl	8002f4c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002294:	2301      	movs	r3, #1
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002298:	f001 fd94 	bl	8003dc4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800229c:	f000 fba8 	bl	80029f0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80022a0:	f001 fd60 	bl	8003d64 <vPortEnterCritical>
 80022a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022aa:	b25b      	sxtb	r3, r3
 80022ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b0:	d103      	bne.n	80022ba <xQueueReceive+0x162>
 80022b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022c0:	b25b      	sxtb	r3, r3
 80022c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c6:	d103      	bne.n	80022d0 <xQueueReceive+0x178>
 80022c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022d0:	f001 fd78 	bl	8003dc4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80022d4:	1d3a      	adds	r2, r7, #4
 80022d6:	f107 0310 	add.w	r3, r7, #16
 80022da:	4611      	mov	r1, r2
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 fe4b 	bl	8002f78 <xTaskCheckForTimeOut>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d124      	bne.n	8002332 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80022e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022ea:	f000 f927 	bl	800253c <prvIsQueueEmpty>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d018      	beq.n	8002326 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80022f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f6:	3324      	adds	r3, #36	; 0x24
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	4611      	mov	r1, r2
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 fd6d 	bl	8002ddc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002304:	f000 f8c8 	bl	8002498 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002308:	f000 fb80 	bl	8002a0c <xTaskResumeAll>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	f47f af69 	bne.w	80021e6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002314:	4b17      	ldr	r3, [pc, #92]	; (8002374 <xQueueReceive+0x21c>)
 8002316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	f3bf 8f4f 	dsb	sy
 8002320:	f3bf 8f6f 	isb	sy
 8002324:	e75f      	b.n	80021e6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002328:	f000 f8b6 	bl	8002498 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800232c:	f000 fb6e 	bl	8002a0c <xTaskResumeAll>
 8002330:	e759      	b.n	80021e6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002332:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002334:	f000 f8b0 	bl	8002498 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002338:	f000 fb68 	bl	8002a0c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800233c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800233e:	f000 f8fd 	bl	800253c <prvIsQueueEmpty>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	f43f af4e 	beq.w	80021e6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800234a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234c:	4618      	mov	r0, r3
 800234e:	f004 fac1 	bl	80068d4 <SEGGER_SYSVIEW_ShrinkId>
 8002352:	4604      	mov	r4, r0
 8002354:	2000      	movs	r0, #0
 8002356:	f004 fabd 	bl	80068d4 <SEGGER_SYSVIEW_ShrinkId>
 800235a:	4602      	mov	r2, r0
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2101      	movs	r1, #1
 8002360:	9100      	str	r1, [sp, #0]
 8002362:	4621      	mov	r1, r4
 8002364:	205c      	movs	r0, #92	; 0x5c
 8002366:	f003 fd9d 	bl	8005ea4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800236a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800236c:	4618      	mov	r0, r3
 800236e:	3734      	adds	r7, #52	; 0x34
 8002370:	46bd      	mov	sp, r7
 8002372:	bd90      	pop	{r4, r7, pc}
 8002374:	e000ed04 	.word	0xe000ed04

08002378 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10d      	bne.n	80023b2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d14d      	bne.n	800243a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 ff2a 	bl	80031fc <xTaskPriorityDisinherit>
 80023a8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	e043      	b.n	800243a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d119      	bne.n	80023ec <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6858      	ldr	r0, [r3, #4]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	461a      	mov	r2, r3
 80023c2:	68b9      	ldr	r1, [r7, #8]
 80023c4:	f004 fc42 	bl	8006c4c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	441a      	add	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d32b      	bcc.n	800243a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	e026      	b.n	800243a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	68d8      	ldr	r0, [r3, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	461a      	mov	r2, r3
 80023f6:	68b9      	ldr	r1, [r7, #8]
 80023f8:	f004 fc28 	bl	8006c4c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002404:	425b      	negs	r3, r3
 8002406:	441a      	add	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	68da      	ldr	r2, [r3, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d207      	bcs.n	8002428 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	425b      	negs	r3, r3
 8002422:	441a      	add	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d105      	bne.n	800243a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	3b01      	subs	r3, #1
 8002438:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002442:	697b      	ldr	r3, [r7, #20]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	2b00      	cmp	r3, #0
 800245c:	d018      	beq.n	8002490 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	441a      	add	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	429a      	cmp	r2, r3
 8002476:	d303      	bcc.n	8002480 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68d9      	ldr	r1, [r3, #12]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002488:	461a      	mov	r2, r3
 800248a:	6838      	ldr	r0, [r7, #0]
 800248c:	f004 fbde 	bl	8006c4c <memcpy>
    }
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80024a0:	f001 fc60 	bl	8003d64 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024aa:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80024ac:	e011      	b.n	80024d2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d012      	beq.n	80024dc <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	3324      	adds	r3, #36	; 0x24
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 fce0 	bl	8002e80 <xTaskRemoveFromEventList>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80024c6:	f000 fdbd 	bl	8003044 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80024d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	dce9      	bgt.n	80024ae <prvUnlockQueue+0x16>
 80024da:	e000      	b.n	80024de <prvUnlockQueue+0x46>
                        break;
 80024dc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	22ff      	movs	r2, #255	; 0xff
 80024e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80024e6:	f001 fc6d 	bl	8003dc4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80024ea:	f001 fc3b 	bl	8003d64 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024f4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80024f6:	e011      	b.n	800251c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d012      	beq.n	8002526 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3310      	adds	r3, #16
 8002504:	4618      	mov	r0, r3
 8002506:	f000 fcbb 	bl	8002e80 <xTaskRemoveFromEventList>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002510:	f000 fd98 	bl	8003044 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002514:	7bbb      	ldrb	r3, [r7, #14]
 8002516:	3b01      	subs	r3, #1
 8002518:	b2db      	uxtb	r3, r3
 800251a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800251c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002520:	2b00      	cmp	r3, #0
 8002522:	dce9      	bgt.n	80024f8 <prvUnlockQueue+0x60>
 8002524:	e000      	b.n	8002528 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002526:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	22ff      	movs	r2, #255	; 0xff
 800252c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002530:	f001 fc48 	bl	8003dc4 <vPortExitCritical>
}
 8002534:	bf00      	nop
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002544:	f001 fc0e 	bl	8003d64 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254c:	2b00      	cmp	r3, #0
 800254e:	d102      	bne.n	8002556 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002550:	2301      	movs	r3, #1
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	e001      	b.n	800255a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800255a:	f001 fc33 	bl	8003dc4 <vPortExitCritical>

    return xReturn;
 800255e:	68fb      	ldr	r3, [r7, #12]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002570:	f001 fbf8 	bl	8003d64 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257c:	429a      	cmp	r2, r3
 800257e:	d102      	bne.n	8002586 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002580:	2301      	movs	r3, #1
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	e001      	b.n	800258a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002586:	2300      	movs	r3, #0
 8002588:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800258a:	f001 fc1b 	bl	8003dc4 <vPortExitCritical>

    return xReturn;
 800258e:	68fb      	ldr	r3, [r7, #12]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	e01e      	b.n	80025e6 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80025a8:	4a13      	ldr	r2, [pc, #76]	; (80025f8 <vQueueAddToRegistry+0x60>)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d115      	bne.n	80025e0 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80025b4:	4910      	ldr	r1, [pc, #64]	; (80025f8 <vQueueAddToRegistry+0x60>)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80025be:	4a0e      	ldr	r2, [pc, #56]	; (80025f8 <vQueueAddToRegistry+0x60>)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4413      	add	r3, r2
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f004 f981 	bl	80068d4 <SEGGER_SYSVIEW_ShrinkId>
 80025d2:	4601      	mov	r1, r0
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	2071      	movs	r0, #113	; 0x71
 80025da:	f003 fb93 	bl	8005d04 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 80025de:	e006      	b.n	80025ee <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	3301      	adds	r3, #1
 80025e4:	60fb      	str	r3, [r7, #12]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2b07      	cmp	r3, #7
 80025ea:	d9dd      	bls.n	80025a8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20018440 	.word	0x20018440

080025fc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800260c:	f001 fbaa 	bl	8003d64 <vPortEnterCritical>
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002616:	b25b      	sxtb	r3, r3
 8002618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261c:	d103      	bne.n	8002626 <vQueueWaitForMessageRestricted+0x2a>
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800262c:	b25b      	sxtb	r3, r3
 800262e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002632:	d103      	bne.n	800263c <vQueueWaitForMessageRestricted+0x40>
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800263c:	f001 fbc2 	bl	8003dc4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002644:	2b00      	cmp	r3, #0
 8002646:	d106      	bne.n	8002656 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	3324      	adds	r3, #36	; 0x24
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	68b9      	ldr	r1, [r7, #8]
 8002650:	4618      	mov	r0, r3
 8002652:	f000 fbe7 	bl	8002e24 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002656:	6978      	ldr	r0, [r7, #20]
 8002658:	f7ff ff1e 	bl	8002498 <prvUnlockQueue>
    }
 800265c:	bf00      	nop
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002664:	b580      	push	{r7, lr}
 8002666:	b08c      	sub	sp, #48	; 0x30
 8002668:	af04      	add	r7, sp, #16
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	603b      	str	r3, [r7, #0]
 8002670:	4613      	mov	r3, r2
 8002672:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4618      	mov	r0, r3
 800267a:	f001 fc9f 	bl	8003fbc <pvPortMalloc>
 800267e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00e      	beq.n	80026a4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002686:	2058      	movs	r0, #88	; 0x58
 8002688:	f001 fc98 	bl	8003fbc <pvPortMalloc>
 800268c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	631a      	str	r2, [r3, #48]	; 0x30
 800269a:	e005      	b.n	80026a8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800269c:	6978      	ldr	r0, [r7, #20]
 800269e:	f001 fd6d 	bl	800417c <vPortFree>
 80026a2:	e001      	b.n	80026a8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d013      	beq.n	80026d6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80026ae:	88fa      	ldrh	r2, [r7, #6]
 80026b0:	2300      	movs	r3, #0
 80026b2:	9303      	str	r3, [sp, #12]
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	9302      	str	r3, [sp, #8]
 80026b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ba:	9301      	str	r3, [sp, #4]
 80026bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	68b9      	ldr	r1, [r7, #8]
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 f80e 	bl	80026e6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80026ca:	69f8      	ldr	r0, [r7, #28]
 80026cc:	f000 f8a2 	bl	8002814 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80026d0:	2301      	movs	r3, #1
 80026d2:	61bb      	str	r3, [r7, #24]
 80026d4:	e002      	b.n	80026dc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80026d6:	f04f 33ff 	mov.w	r3, #4294967295
 80026da:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80026dc:	69bb      	ldr	r3, [r7, #24]
    }
 80026de:	4618      	mov	r0, r3
 80026e0:	3720      	adds	r7, #32
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b088      	sub	sp, #32
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80026f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	461a      	mov	r2, r3
 80026fe:	21a5      	movs	r1, #165	; 0xa5
 8002700:	f004 fab2 	bl	8006c68 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800270e:	3b01      	subs	r3, #1
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	f023 0307 	bic.w	r3, r3, #7
 800271c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00a      	beq.n	800273e <prvInitialiseNewTask+0x58>
        __asm volatile
 8002728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272c:	f383 8811 	msr	BASEPRI, r3
 8002730:	f3bf 8f6f 	isb	sy
 8002734:	f3bf 8f4f 	dsb	sy
 8002738:	617b      	str	r3, [r7, #20]
    }
 800273a:	bf00      	nop
 800273c:	e7fe      	b.n	800273c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d01f      	beq.n	8002784 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002744:	2300      	movs	r3, #0
 8002746:	61fb      	str	r3, [r7, #28]
 8002748:	e012      	b.n	8002770 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	4413      	add	r3, r2
 8002750:	7819      	ldrb	r1, [r3, #0]
 8002752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	4413      	add	r3, r2
 8002758:	3334      	adds	r3, #52	; 0x34
 800275a:	460a      	mov	r2, r1
 800275c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	4413      	add	r3, r2
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d006      	beq.n	8002778 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3301      	adds	r3, #1
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	2b09      	cmp	r3, #9
 8002774:	d9e9      	bls.n	800274a <prvInitialiseNewTask+0x64>
 8002776:	e000      	b.n	800277a <prvInitialiseNewTask+0x94>
            {
                break;
 8002778:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800277a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002782:	e003      	b.n	800278c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800278c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278e:	2b04      	cmp	r3, #4
 8002790:	d901      	bls.n	8002796 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002792:	2304      	movs	r3, #4
 8002794:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002798:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800279a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800279c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027a0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80027a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a4:	2200      	movs	r2, #0
 80027a6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80027a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027aa:	3304      	adds	r3, #4
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff f96b 	bl	8001a88 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80027b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b4:	3318      	adds	r3, #24
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff f966 	bl	8001a88 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80027bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027c0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c4:	f1c3 0205 	rsb	r2, r3, #5
 80027c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ca:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80027cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027d0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80027d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d4:	3350      	adds	r3, #80	; 0x50
 80027d6:	2204      	movs	r2, #4
 80027d8:	2100      	movs	r1, #0
 80027da:	4618      	mov	r0, r3
 80027dc:	f004 fa44 	bl	8006c68 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80027e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e2:	3354      	adds	r3, #84	; 0x54
 80027e4:	2201      	movs	r2, #1
 80027e6:	2100      	movs	r1, #0
 80027e8:	4618      	mov	r0, r3
 80027ea:	f004 fa3d 	bl	8006c68 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	68f9      	ldr	r1, [r7, #12]
 80027f2:	69b8      	ldr	r0, [r7, #24]
 80027f4:	f001 f90c 	bl	8003a10 <pxPortInitialiseStack>
 80027f8:	4602      	mov	r2, r0
 80027fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fc:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80027fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002800:	2b00      	cmp	r3, #0
 8002802:	d002      	beq.n	800280a <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002808:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800280a:	bf00      	nop
 800280c:	3720      	adds	r7, #32
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002814:	b5b0      	push	{r4, r5, r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af02      	add	r7, sp, #8
 800281a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800281c:	f001 faa2 	bl	8003d64 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002820:	4b3b      	ldr	r3, [pc, #236]	; (8002910 <prvAddNewTaskToReadyList+0xfc>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	3301      	adds	r3, #1
 8002826:	4a3a      	ldr	r2, [pc, #232]	; (8002910 <prvAddNewTaskToReadyList+0xfc>)
 8002828:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800282a:	4b3a      	ldr	r3, [pc, #232]	; (8002914 <prvAddNewTaskToReadyList+0x100>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d109      	bne.n	8002846 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002832:	4a38      	ldr	r2, [pc, #224]	; (8002914 <prvAddNewTaskToReadyList+0x100>)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002838:	4b35      	ldr	r3, [pc, #212]	; (8002910 <prvAddNewTaskToReadyList+0xfc>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d110      	bne.n	8002862 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002840:	f000 fc24 	bl	800308c <prvInitialiseTaskLists>
 8002844:	e00d      	b.n	8002862 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002846:	4b34      	ldr	r3, [pc, #208]	; (8002918 <prvAddNewTaskToReadyList+0x104>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d109      	bne.n	8002862 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800284e:	4b31      	ldr	r3, [pc, #196]	; (8002914 <prvAddNewTaskToReadyList+0x100>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002858:	429a      	cmp	r2, r3
 800285a:	d802      	bhi.n	8002862 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800285c:	4a2d      	ldr	r2, [pc, #180]	; (8002914 <prvAddNewTaskToReadyList+0x100>)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002862:	4b2e      	ldr	r3, [pc, #184]	; (800291c <prvAddNewTaskToReadyList+0x108>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	3301      	adds	r3, #1
 8002868:	4a2c      	ldr	r2, [pc, #176]	; (800291c <prvAddNewTaskToReadyList+0x108>)
 800286a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800286c:	4b2b      	ldr	r3, [pc, #172]	; (800291c <prvAddNewTaskToReadyList+0x108>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d016      	beq.n	80028a8 <prvAddNewTaskToReadyList+0x94>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4618      	mov	r0, r3
 800287e:	f003 ff03 	bl	8006688 <SEGGER_SYSVIEW_OnTaskCreate>
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	461d      	mov	r5, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	461c      	mov	r4, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	1ae3      	subs	r3, r4, r3
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	462b      	mov	r3, r5
 80028a4:	f001 fe30 	bl	8004508 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f003 ff70 	bl	8006790 <SEGGER_SYSVIEW_OnTaskStartReady>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b4:	2201      	movs	r2, #1
 80028b6:	409a      	lsls	r2, r3
 80028b8:	4b19      	ldr	r3, [pc, #100]	; (8002920 <prvAddNewTaskToReadyList+0x10c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4313      	orrs	r3, r2
 80028be:	4a18      	ldr	r2, [pc, #96]	; (8002920 <prvAddNewTaskToReadyList+0x10c>)
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4a15      	ldr	r2, [pc, #84]	; (8002924 <prvAddNewTaskToReadyList+0x110>)
 80028d0:	441a      	add	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3304      	adds	r3, #4
 80028d6:	4619      	mov	r1, r3
 80028d8:	4610      	mov	r0, r2
 80028da:	f7ff f8e2 	bl	8001aa2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80028de:	f001 fa71 	bl	8003dc4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80028e2:	4b0d      	ldr	r3, [pc, #52]	; (8002918 <prvAddNewTaskToReadyList+0x104>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00e      	beq.n	8002908 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80028ea:	4b0a      	ldr	r3, [pc, #40]	; (8002914 <prvAddNewTaskToReadyList+0x100>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d207      	bcs.n	8002908 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80028f8:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <prvAddNewTaskToReadyList+0x114>)
 80028fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bdb0      	pop	{r4, r5, r7, pc}
 8002910:	20000180 	.word	0x20000180
 8002914:	200000a8 	.word	0x200000a8
 8002918:	2000018c 	.word	0x2000018c
 800291c:	2000019c 	.word	0x2000019c
 8002920:	20000188 	.word	0x20000188
 8002924:	200000ac 	.word	0x200000ac
 8002928:	e000ed04 	.word	0xe000ed04

0800292c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002932:	4b27      	ldr	r3, [pc, #156]	; (80029d0 <vTaskStartScheduler+0xa4>)
 8002934:	9301      	str	r3, [sp, #4]
 8002936:	2300      	movs	r3, #0
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	2300      	movs	r3, #0
 800293c:	2282      	movs	r2, #130	; 0x82
 800293e:	4925      	ldr	r1, [pc, #148]	; (80029d4 <vTaskStartScheduler+0xa8>)
 8002940:	4825      	ldr	r0, [pc, #148]	; (80029d8 <vTaskStartScheduler+0xac>)
 8002942:	f7ff fe8f 	bl	8002664 <xTaskCreate>
 8002946:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d102      	bne.n	8002954 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800294e:	f000 fd4d 	bl	80033ec <xTimerCreateTimerTask>
 8002952:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d124      	bne.n	80029a4 <vTaskStartScheduler+0x78>
        __asm volatile
 800295a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295e:	f383 8811 	msr	BASEPRI, r3
 8002962:	f3bf 8f6f 	isb	sy
 8002966:	f3bf 8f4f 	dsb	sy
 800296a:	60bb      	str	r3, [r7, #8]
    }
 800296c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800296e:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <vTaskStartScheduler+0xb0>)
 8002970:	f04f 32ff 	mov.w	r2, #4294967295
 8002974:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002976:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <vTaskStartScheduler+0xb4>)
 8002978:	2201      	movs	r2, #1
 800297a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800297c:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <vTaskStartScheduler+0xb8>)
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002982:	4b19      	ldr	r3, [pc, #100]	; (80029e8 <vTaskStartScheduler+0xbc>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <vTaskStartScheduler+0xa4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d102      	bne.n	8002994 <vTaskStartScheduler+0x68>
 800298e:	f003 fe5f 	bl	8006650 <SEGGER_SYSVIEW_OnIdle>
 8002992:	e004      	b.n	800299e <vTaskStartScheduler+0x72>
 8002994:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <vTaskStartScheduler+0xbc>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f003 feb7 	bl	800670c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800299e:	f001 f8c1 	bl	8003b24 <xPortStartScheduler>
 80029a2:	e00e      	b.n	80029c2 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029aa:	d10a      	bne.n	80029c2 <vTaskStartScheduler+0x96>
        __asm volatile
 80029ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b0:	f383 8811 	msr	BASEPRI, r3
 80029b4:	f3bf 8f6f 	isb	sy
 80029b8:	f3bf 8f4f 	dsb	sy
 80029bc:	607b      	str	r3, [r7, #4]
    }
 80029be:	bf00      	nop
 80029c0:	e7fe      	b.n	80029c0 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80029c2:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <vTaskStartScheduler+0xc0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
}
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	200001a4 	.word	0x200001a4
 80029d4:	08007588 	.word	0x08007588
 80029d8:	0800305d 	.word	0x0800305d
 80029dc:	200001a0 	.word	0x200001a0
 80029e0:	2000018c 	.word	0x2000018c
 80029e4:	20000184 	.word	0x20000184
 80029e8:	200000a8 	.word	0x200000a8
 80029ec:	20000010 	.word	0x20000010

080029f0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80029f4:	4b04      	ldr	r3, [pc, #16]	; (8002a08 <vTaskSuspendAll+0x18>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	3301      	adds	r3, #1
 80029fa:	4a03      	ldr	r2, [pc, #12]	; (8002a08 <vTaskSuspendAll+0x18>)
 80029fc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80029fe:	bf00      	nop
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	200001a8 	.word	0x200001a8

08002a0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002a16:	2300      	movs	r3, #0
 8002a18:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002a1a:	4b43      	ldr	r3, [pc, #268]	; (8002b28 <xTaskResumeAll+0x11c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10a      	bne.n	8002a38 <xTaskResumeAll+0x2c>
        __asm volatile
 8002a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a26:	f383 8811 	msr	BASEPRI, r3
 8002a2a:	f3bf 8f6f 	isb	sy
 8002a2e:	f3bf 8f4f 	dsb	sy
 8002a32:	603b      	str	r3, [r7, #0]
    }
 8002a34:	bf00      	nop
 8002a36:	e7fe      	b.n	8002a36 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002a38:	f001 f994 	bl	8003d64 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002a3c:	4b3a      	ldr	r3, [pc, #232]	; (8002b28 <xTaskResumeAll+0x11c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	4a39      	ldr	r2, [pc, #228]	; (8002b28 <xTaskResumeAll+0x11c>)
 8002a44:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a46:	4b38      	ldr	r3, [pc, #224]	; (8002b28 <xTaskResumeAll+0x11c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d165      	bne.n	8002b1a <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a4e:	4b37      	ldr	r3, [pc, #220]	; (8002b2c <xTaskResumeAll+0x120>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d061      	beq.n	8002b1a <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a56:	e032      	b.n	8002abe <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a58:	4b35      	ldr	r3, [pc, #212]	; (8002b30 <xTaskResumeAll+0x124>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3318      	adds	r3, #24
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff f879 	bl	8001b5c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff f874 	bl	8001b5c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f003 fe8a 	bl	8006790 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a80:	2201      	movs	r2, #1
 8002a82:	409a      	lsls	r2, r3
 8002a84:	4b2b      	ldr	r3, [pc, #172]	; (8002b34 <xTaskResumeAll+0x128>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	4a2a      	ldr	r2, [pc, #168]	; (8002b34 <xTaskResumeAll+0x128>)
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4a27      	ldr	r2, [pc, #156]	; (8002b38 <xTaskResumeAll+0x12c>)
 8002a9c:	441a      	add	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	f7fe fffc 	bl	8001aa2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aae:	4b23      	ldr	r3, [pc, #140]	; (8002b3c <xTaskResumeAll+0x130>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d302      	bcc.n	8002abe <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002ab8:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <xTaskResumeAll+0x134>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002abe:	4b1c      	ldr	r3, [pc, #112]	; (8002b30 <xTaskResumeAll+0x124>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1c8      	bne.n	8002a58 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002acc:	f000 fb5c 	bl	8003188 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002ad0:	4b1c      	ldr	r3, [pc, #112]	; (8002b44 <xTaskResumeAll+0x138>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d010      	beq.n	8002afe <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002adc:	f000 f858 	bl	8002b90 <xTaskIncrementTick>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002ae6:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <xTaskResumeAll+0x134>)
 8002ae8:	2201      	movs	r2, #1
 8002aea:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3b01      	subs	r3, #1
 8002af0:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1f1      	bne.n	8002adc <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002af8:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <xTaskResumeAll+0x138>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002afe:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <xTaskResumeAll+0x134>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d009      	beq.n	8002b1a <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002b06:	2301      	movs	r3, #1
 8002b08:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002b0a:	4b0f      	ldr	r3, [pc, #60]	; (8002b48 <xTaskResumeAll+0x13c>)
 8002b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	f3bf 8f4f 	dsb	sy
 8002b16:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002b1a:	f001 f953 	bl	8003dc4 <vPortExitCritical>

    return xAlreadyYielded;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	200001a8 	.word	0x200001a8
 8002b2c:	20000180 	.word	0x20000180
 8002b30:	20000140 	.word	0x20000140
 8002b34:	20000188 	.word	0x20000188
 8002b38:	200000ac 	.word	0x200000ac
 8002b3c:	200000a8 	.word	0x200000a8
 8002b40:	20000194 	.word	0x20000194
 8002b44:	20000190 	.word	0x20000190
 8002b48:	e000ed04 	.word	0xe000ed04

08002b4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002b52:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <xTaskGetTickCount+0x1c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002b58:	687b      	ldr	r3, [r7, #4]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	20000184 	.word	0x20000184

08002b6c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b72:	f001 f9e3 	bl	8003f3c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002b76:	2300      	movs	r3, #0
 8002b78:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002b7a:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <xTaskGetTickCountFromISR+0x20>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002b80:	683b      	ldr	r3, [r7, #0]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000184 	.word	0x20000184

08002b90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002b96:	2300      	movs	r3, #0
 8002b98:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b9a:	4b50      	ldr	r3, [pc, #320]	; (8002cdc <xTaskIncrementTick+0x14c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f040 8092 	bne.w	8002cc8 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ba4:	4b4e      	ldr	r3, [pc, #312]	; (8002ce0 <xTaskIncrementTick+0x150>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002bac:	4a4c      	ldr	r2, [pc, #304]	; (8002ce0 <xTaskIncrementTick+0x150>)
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d120      	bne.n	8002bfa <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002bb8:	4b4a      	ldr	r3, [pc, #296]	; (8002ce4 <xTaskIncrementTick+0x154>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00a      	beq.n	8002bd8 <xTaskIncrementTick+0x48>
        __asm volatile
 8002bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc6:	f383 8811 	msr	BASEPRI, r3
 8002bca:	f3bf 8f6f 	isb	sy
 8002bce:	f3bf 8f4f 	dsb	sy
 8002bd2:	603b      	str	r3, [r7, #0]
    }
 8002bd4:	bf00      	nop
 8002bd6:	e7fe      	b.n	8002bd6 <xTaskIncrementTick+0x46>
 8002bd8:	4b42      	ldr	r3, [pc, #264]	; (8002ce4 <xTaskIncrementTick+0x154>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	4b42      	ldr	r3, [pc, #264]	; (8002ce8 <xTaskIncrementTick+0x158>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a40      	ldr	r2, [pc, #256]	; (8002ce4 <xTaskIncrementTick+0x154>)
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	4a40      	ldr	r2, [pc, #256]	; (8002ce8 <xTaskIncrementTick+0x158>)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	4b3f      	ldr	r3, [pc, #252]	; (8002cec <xTaskIncrementTick+0x15c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	4a3e      	ldr	r2, [pc, #248]	; (8002cec <xTaskIncrementTick+0x15c>)
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	f000 fac7 	bl	8003188 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002bfa:	4b3d      	ldr	r3, [pc, #244]	; (8002cf0 <xTaskIncrementTick+0x160>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d34c      	bcc.n	8002c9e <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c04:	4b37      	ldr	r3, [pc, #220]	; (8002ce4 <xTaskIncrementTick+0x154>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d104      	bne.n	8002c18 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c0e:	4b38      	ldr	r3, [pc, #224]	; (8002cf0 <xTaskIncrementTick+0x160>)
 8002c10:	f04f 32ff 	mov.w	r2, #4294967295
 8002c14:	601a      	str	r2, [r3, #0]
                    break;
 8002c16:	e042      	b.n	8002c9e <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c18:	4b32      	ldr	r3, [pc, #200]	; (8002ce4 <xTaskIncrementTick+0x154>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d203      	bcs.n	8002c38 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002c30:	4a2f      	ldr	r2, [pc, #188]	; (8002cf0 <xTaskIncrementTick+0x160>)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002c36:	e032      	b.n	8002c9e <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7fe ff8d 	bl	8001b5c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d004      	beq.n	8002c54 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	3318      	adds	r3, #24
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fe ff84 	bl	8001b5c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f003 fd9a 	bl	8006790 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c60:	2201      	movs	r2, #1
 8002c62:	409a      	lsls	r2, r3
 8002c64:	4b23      	ldr	r3, [pc, #140]	; (8002cf4 <xTaskIncrementTick+0x164>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	4a22      	ldr	r2, [pc, #136]	; (8002cf4 <xTaskIncrementTick+0x164>)
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	4a1f      	ldr	r2, [pc, #124]	; (8002cf8 <xTaskIncrementTick+0x168>)
 8002c7c:	441a      	add	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	3304      	adds	r3, #4
 8002c82:	4619      	mov	r1, r3
 8002c84:	4610      	mov	r0, r2
 8002c86:	f7fe ff0c 	bl	8001aa2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c8e:	4b1b      	ldr	r3, [pc, #108]	; (8002cfc <xTaskIncrementTick+0x16c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d3b5      	bcc.n	8002c04 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c9c:	e7b2      	b.n	8002c04 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002c9e:	4b17      	ldr	r3, [pc, #92]	; (8002cfc <xTaskIncrementTick+0x16c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca4:	4914      	ldr	r1, [pc, #80]	; (8002cf8 <xTaskIncrementTick+0x168>)
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d901      	bls.n	8002cba <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002cba:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <xTaskIncrementTick+0x170>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d007      	beq.n	8002cd2 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	e004      	b.n	8002cd2 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002cc8:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <xTaskIncrementTick+0x174>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	4a0d      	ldr	r2, [pc, #52]	; (8002d04 <xTaskIncrementTick+0x174>)
 8002cd0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002cd2:	697b      	ldr	r3, [r7, #20]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	200001a8 	.word	0x200001a8
 8002ce0:	20000184 	.word	0x20000184
 8002ce4:	20000138 	.word	0x20000138
 8002ce8:	2000013c 	.word	0x2000013c
 8002cec:	20000198 	.word	0x20000198
 8002cf0:	200001a0 	.word	0x200001a0
 8002cf4:	20000188 	.word	0x20000188
 8002cf8:	200000ac 	.word	0x200000ac
 8002cfc:	200000a8 	.word	0x200000a8
 8002d00:	20000194 	.word	0x20000194
 8002d04:	20000190 	.word	0x20000190

08002d08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002d0e:	4b2d      	ldr	r3, [pc, #180]	; (8002dc4 <vTaskSwitchContext+0xbc>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002d16:	4b2c      	ldr	r3, [pc, #176]	; (8002dc8 <vTaskSwitchContext+0xc0>)
 8002d18:	2201      	movs	r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002d1c:	e04d      	b.n	8002dba <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002d1e:	4b2a      	ldr	r3, [pc, #168]	; (8002dc8 <vTaskSwitchContext+0xc0>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d24:	4b29      	ldr	r3, [pc, #164]	; (8002dcc <vTaskSwitchContext+0xc4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	fab3 f383 	clz	r3, r3
 8002d30:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002d32:	7afb      	ldrb	r3, [r7, #11]
 8002d34:	f1c3 031f 	rsb	r3, r3, #31
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	4925      	ldr	r1, [pc, #148]	; (8002dd0 <vTaskSwitchContext+0xc8>)
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10a      	bne.n	8002d64 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d52:	f383 8811 	msr	BASEPRI, r3
 8002d56:	f3bf 8f6f 	isb	sy
 8002d5a:	f3bf 8f4f 	dsb	sy
 8002d5e:	607b      	str	r3, [r7, #4]
    }
 8002d60:	bf00      	nop
 8002d62:	e7fe      	b.n	8002d62 <vTaskSwitchContext+0x5a>
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	4613      	mov	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4a18      	ldr	r2, [pc, #96]	; (8002dd0 <vTaskSwitchContext+0xc8>)
 8002d70:	4413      	add	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	3308      	adds	r3, #8
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d104      	bne.n	8002d94 <vTaskSwitchContext+0x8c>
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	605a      	str	r2, [r3, #4]
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	4a0e      	ldr	r2, [pc, #56]	; (8002dd4 <vTaskSwitchContext+0xcc>)
 8002d9c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002d9e:	4b0d      	ldr	r3, [pc, #52]	; (8002dd4 <vTaskSwitchContext+0xcc>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <vTaskSwitchContext+0xd0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d102      	bne.n	8002db0 <vTaskSwitchContext+0xa8>
 8002daa:	f003 fc51 	bl	8006650 <SEGGER_SYSVIEW_OnIdle>
}
 8002dae:	e004      	b.n	8002dba <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002db0:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <vTaskSwitchContext+0xcc>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f003 fca9 	bl	800670c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002dba:	bf00      	nop
 8002dbc:	3718      	adds	r7, #24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	200001a8 	.word	0x200001a8
 8002dc8:	20000194 	.word	0x20000194
 8002dcc:	20000188 	.word	0x20000188
 8002dd0:	200000ac 	.word	0x200000ac
 8002dd4:	200000a8 	.word	0x200000a8
 8002dd8:	200001a4 	.word	0x200001a4

08002ddc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10a      	bne.n	8002e02 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8002dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df0:	f383 8811 	msr	BASEPRI, r3
 8002df4:	f3bf 8f6f 	isb	sy
 8002df8:	f3bf 8f4f 	dsb	sy
 8002dfc:	60fb      	str	r3, [r7, #12]
    }
 8002dfe:	bf00      	nop
 8002e00:	e7fe      	b.n	8002e00 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e02:	4b07      	ldr	r3, [pc, #28]	; (8002e20 <vTaskPlaceOnEventList+0x44>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	3318      	adds	r3, #24
 8002e08:	4619      	mov	r1, r3
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fe fe6d 	bl	8001aea <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002e10:	2101      	movs	r1, #1
 8002e12:	6838      	ldr	r0, [r7, #0]
 8002e14:	f000 fa72 	bl	80032fc <prvAddCurrentTaskToDelayedList>
}
 8002e18:	bf00      	nop
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	200000a8 	.word	0x200000a8

08002e24 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10a      	bne.n	8002e4c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3a:	f383 8811 	msr	BASEPRI, r3
 8002e3e:	f3bf 8f6f 	isb	sy
 8002e42:	f3bf 8f4f 	dsb	sy
 8002e46:	617b      	str	r3, [r7, #20]
    }
 8002e48:	bf00      	nop
 8002e4a:	e7fe      	b.n	8002e4a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <vTaskPlaceOnEventListRestricted+0x58>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3318      	adds	r3, #24
 8002e52:	4619      	mov	r1, r3
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f7fe fe24 	bl	8001aa2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8002e60:	f04f 33ff 	mov.w	r3, #4294967295
 8002e64:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002e66:	2024      	movs	r0, #36	; 0x24
 8002e68:	f002 fef2 	bl	8005c50 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	68b8      	ldr	r0, [r7, #8]
 8002e70:	f000 fa44 	bl	80032fc <prvAddCurrentTaskToDelayedList>
    }
 8002e74:	bf00      	nop
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	200000a8 	.word	0x200000a8

08002e80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10a      	bne.n	8002eac <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9a:	f383 8811 	msr	BASEPRI, r3
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	f3bf 8f4f 	dsb	sy
 8002ea6:	60fb      	str	r3, [r7, #12]
    }
 8002ea8:	bf00      	nop
 8002eaa:	e7fe      	b.n	8002eaa <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	3318      	adds	r3, #24
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fe fe53 	bl	8001b5c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eb6:	4b1f      	ldr	r3, [pc, #124]	; (8002f34 <xTaskRemoveFromEventList+0xb4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d120      	bne.n	8002f00 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fe fe4a 	bl	8001b5c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f003 fc60 	bl	8006790 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	4b17      	ldr	r3, [pc, #92]	; (8002f38 <xTaskRemoveFromEventList+0xb8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	4a16      	ldr	r2, [pc, #88]	; (8002f38 <xTaskRemoveFromEventList+0xb8>)
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4a13      	ldr	r2, [pc, #76]	; (8002f3c <xTaskRemoveFromEventList+0xbc>)
 8002ef0:	441a      	add	r2, r3
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4610      	mov	r0, r2
 8002efa:	f7fe fdd2 	bl	8001aa2 <vListInsertEnd>
 8002efe:	e005      	b.n	8002f0c <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	3318      	adds	r3, #24
 8002f04:	4619      	mov	r1, r3
 8002f06:	480e      	ldr	r0, [pc, #56]	; (8002f40 <xTaskRemoveFromEventList+0xc0>)
 8002f08:	f7fe fdcb 	bl	8001aa2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f10:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <xTaskRemoveFromEventList+0xc4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d905      	bls.n	8002f26 <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <xTaskRemoveFromEventList+0xc8>)
 8002f20:	2201      	movs	r2, #1
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	e001      	b.n	8002f2a <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8002f2a:	697b      	ldr	r3, [r7, #20]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	200001a8 	.word	0x200001a8
 8002f38:	20000188 	.word	0x20000188
 8002f3c:	200000ac 	.word	0x200000ac
 8002f40:	20000140 	.word	0x20000140
 8002f44:	200000a8 	.word	0x200000a8
 8002f48:	20000194 	.word	0x20000194

08002f4c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002f54:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <vTaskInternalSetTimeOutState+0x24>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <vTaskInternalSetTimeOutState+0x28>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	605a      	str	r2, [r3, #4]
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr
 8002f70:	20000198 	.word	0x20000198
 8002f74:	20000184 	.word	0x20000184

08002f78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10a      	bne.n	8002f9e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8c:	f383 8811 	msr	BASEPRI, r3
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	613b      	str	r3, [r7, #16]
    }
 8002f9a:	bf00      	nop
 8002f9c:	e7fe      	b.n	8002f9c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10a      	bne.n	8002fba <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	60fb      	str	r3, [r7, #12]
    }
 8002fb6:	bf00      	nop
 8002fb8:	e7fe      	b.n	8002fb8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8002fba:	f000 fed3 	bl	8003d64 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002fbe:	4b1f      	ldr	r3, [pc, #124]	; (800303c <xTaskCheckForTimeOut+0xc4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd6:	d102      	bne.n	8002fde <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61fb      	str	r3, [r7, #28]
 8002fdc:	e026      	b.n	800302c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	4b17      	ldr	r3, [pc, #92]	; (8003040 <xTaskCheckForTimeOut+0xc8>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d00a      	beq.n	8003000 <xTaskCheckForTimeOut+0x88>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d305      	bcc.n	8003000 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	e015      	b.n	800302c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	429a      	cmp	r2, r3
 8003008:	d20b      	bcs.n	8003022 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff ff98 	bl	8002f4c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800301c:	2300      	movs	r3, #0
 800301e:	61fb      	str	r3, [r7, #28]
 8003020:	e004      	b.n	800302c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003028:	2301      	movs	r3, #1
 800302a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800302c:	f000 feca 	bl	8003dc4 <vPortExitCritical>

    return xReturn;
 8003030:	69fb      	ldr	r3, [r7, #28]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3720      	adds	r7, #32
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20000184 	.word	0x20000184
 8003040:	20000198 	.word	0x20000198

08003044 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003048:	4b03      	ldr	r3, [pc, #12]	; (8003058 <vTaskMissedYield+0x14>)
 800304a:	2201      	movs	r2, #1
 800304c:	601a      	str	r2, [r3, #0]
}
 800304e:	bf00      	nop
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	20000194 	.word	0x20000194

0800305c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003064:	f000 f852 	bl	800310c <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <prvIdleTask+0x28>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d9f9      	bls.n	8003064 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <prvIdleTask+0x2c>)
 8003072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003080:	e7f0      	b.n	8003064 <prvIdleTask+0x8>
 8003082:	bf00      	nop
 8003084:	200000ac 	.word	0x200000ac
 8003088:	e000ed04 	.word	0xe000ed04

0800308c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003092:	2300      	movs	r3, #0
 8003094:	607b      	str	r3, [r7, #4]
 8003096:	e00c      	b.n	80030b2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4a12      	ldr	r2, [pc, #72]	; (80030ec <prvInitialiseTaskLists+0x60>)
 80030a4:	4413      	add	r3, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fe fcce 	bl	8001a48 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	3301      	adds	r3, #1
 80030b0:	607b      	str	r3, [r7, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d9ef      	bls.n	8003098 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80030b8:	480d      	ldr	r0, [pc, #52]	; (80030f0 <prvInitialiseTaskLists+0x64>)
 80030ba:	f7fe fcc5 	bl	8001a48 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80030be:	480d      	ldr	r0, [pc, #52]	; (80030f4 <prvInitialiseTaskLists+0x68>)
 80030c0:	f7fe fcc2 	bl	8001a48 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80030c4:	480c      	ldr	r0, [pc, #48]	; (80030f8 <prvInitialiseTaskLists+0x6c>)
 80030c6:	f7fe fcbf 	bl	8001a48 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80030ca:	480c      	ldr	r0, [pc, #48]	; (80030fc <prvInitialiseTaskLists+0x70>)
 80030cc:	f7fe fcbc 	bl	8001a48 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80030d0:	480b      	ldr	r0, [pc, #44]	; (8003100 <prvInitialiseTaskLists+0x74>)
 80030d2:	f7fe fcb9 	bl	8001a48 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <prvInitialiseTaskLists+0x78>)
 80030d8:	4a05      	ldr	r2, [pc, #20]	; (80030f0 <prvInitialiseTaskLists+0x64>)
 80030da:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80030dc:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <prvInitialiseTaskLists+0x7c>)
 80030de:	4a05      	ldr	r2, [pc, #20]	; (80030f4 <prvInitialiseTaskLists+0x68>)
 80030e0:	601a      	str	r2, [r3, #0]
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	200000ac 	.word	0x200000ac
 80030f0:	20000110 	.word	0x20000110
 80030f4:	20000124 	.word	0x20000124
 80030f8:	20000140 	.word	0x20000140
 80030fc:	20000154 	.word	0x20000154
 8003100:	2000016c 	.word	0x2000016c
 8003104:	20000138 	.word	0x20000138
 8003108:	2000013c 	.word	0x2000013c

0800310c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003112:	e019      	b.n	8003148 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003114:	f000 fe26 	bl	8003d64 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003118:	4b10      	ldr	r3, [pc, #64]	; (800315c <prvCheckTasksWaitingTermination+0x50>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3304      	adds	r3, #4
 8003124:	4618      	mov	r0, r3
 8003126:	f7fe fd19 	bl	8001b5c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800312a:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <prvCheckTasksWaitingTermination+0x54>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	3b01      	subs	r3, #1
 8003130:	4a0b      	ldr	r2, [pc, #44]	; (8003160 <prvCheckTasksWaitingTermination+0x54>)
 8003132:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003134:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <prvCheckTasksWaitingTermination+0x58>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	3b01      	subs	r3, #1
 800313a:	4a0a      	ldr	r2, [pc, #40]	; (8003164 <prvCheckTasksWaitingTermination+0x58>)
 800313c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800313e:	f000 fe41 	bl	8003dc4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f810 	bl	8003168 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003148:	4b06      	ldr	r3, [pc, #24]	; (8003164 <prvCheckTasksWaitingTermination+0x58>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1e1      	bne.n	8003114 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003150:	bf00      	nop
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20000154 	.word	0x20000154
 8003160:	20000180 	.word	0x20000180
 8003164:	20000168 	.word	0x20000168

08003168 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	4618      	mov	r0, r3
 8003176:	f001 f801 	bl	800417c <vPortFree>
                vPortFree( pxTCB );
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 fffe 	bl	800417c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800318c:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <prvResetNextTaskUnblockTime+0x30>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d104      	bne.n	80031a0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003196:	4b09      	ldr	r3, [pc, #36]	; (80031bc <prvResetNextTaskUnblockTime+0x34>)
 8003198:	f04f 32ff 	mov.w	r2, #4294967295
 800319c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800319e:	e005      	b.n	80031ac <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80031a0:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <prvResetNextTaskUnblockTime+0x30>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a04      	ldr	r2, [pc, #16]	; (80031bc <prvResetNextTaskUnblockTime+0x34>)
 80031aa:	6013      	str	r3, [r2, #0]
}
 80031ac:	bf00      	nop
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	20000138 	.word	0x20000138
 80031bc:	200001a0 	.word	0x200001a0

080031c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80031c6:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <xTaskGetSchedulerState+0x34>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d102      	bne.n	80031d4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80031ce:	2301      	movs	r3, #1
 80031d0:	607b      	str	r3, [r7, #4]
 80031d2:	e008      	b.n	80031e6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031d4:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <xTaskGetSchedulerState+0x38>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d102      	bne.n	80031e2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80031dc:	2302      	movs	r3, #2
 80031de:	607b      	str	r3, [r7, #4]
 80031e0:	e001      	b.n	80031e6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80031e2:	2300      	movs	r3, #0
 80031e4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80031e6:	687b      	ldr	r3, [r7, #4]
    }
 80031e8:	4618      	mov	r0, r3
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	2000018c 	.word	0x2000018c
 80031f8:	200001a8 	.word	0x200001a8

080031fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003208:	2300      	movs	r3, #0
 800320a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d068      	beq.n	80032e4 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003212:	4b37      	ldr	r3, [pc, #220]	; (80032f0 <xTaskPriorityDisinherit+0xf4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	429a      	cmp	r2, r3
 800321a:	d00a      	beq.n	8003232 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800321c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003220:	f383 8811 	msr	BASEPRI, r3
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	60fb      	str	r3, [r7, #12]
    }
 800322e:	bf00      	nop
 8003230:	e7fe      	b.n	8003230 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10a      	bne.n	8003250 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800323a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323e:	f383 8811 	msr	BASEPRI, r3
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	60bb      	str	r3, [r7, #8]
    }
 800324c:	bf00      	nop
 800324e:	e7fe      	b.n	800324e <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003254:	1e5a      	subs	r2, r3, #1
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003262:	429a      	cmp	r2, r3
 8003264:	d03e      	beq.n	80032e4 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326a:	2b00      	cmp	r3, #0
 800326c:	d13a      	bne.n	80032e4 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	3304      	adds	r3, #4
 8003272:	4618      	mov	r0, r3
 8003274:	f7fe fc72 	bl	8001b5c <uxListRemove>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10a      	bne.n	8003294 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003282:	2201      	movs	r2, #1
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43da      	mvns	r2, r3
 800328a:	4b1a      	ldr	r3, [pc, #104]	; (80032f4 <xTaskPriorityDisinherit+0xf8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4013      	ands	r3, r2
 8003290:	4a18      	ldr	r2, [pc, #96]	; (80032f4 <xTaskPriorityDisinherit+0xf8>)
 8003292:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4619      	mov	r1, r3
 8003298:	204a      	movs	r0, #74	; 0x4a
 800329a:	f002 fcf7 	bl	8005c8c <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	f1c3 0205 	rsb	r2, r3, #5
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b6:	2201      	movs	r2, #1
 80032b8:	409a      	lsls	r2, r3
 80032ba:	4b0e      	ldr	r3, [pc, #56]	; (80032f4 <xTaskPriorityDisinherit+0xf8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4313      	orrs	r3, r2
 80032c0:	4a0c      	ldr	r2, [pc, #48]	; (80032f4 <xTaskPriorityDisinherit+0xf8>)
 80032c2:	6013      	str	r3, [r2, #0]
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4a09      	ldr	r2, [pc, #36]	; (80032f8 <xTaskPriorityDisinherit+0xfc>)
 80032d2:	441a      	add	r2, r3
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	3304      	adds	r3, #4
 80032d8:	4619      	mov	r1, r3
 80032da:	4610      	mov	r0, r2
 80032dc:	f7fe fbe1 	bl	8001aa2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80032e0:	2301      	movs	r3, #1
 80032e2:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80032e4:	697b      	ldr	r3, [r7, #20]
    }
 80032e6:	4618      	mov	r0, r3
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	200000a8 	.word	0x200000a8
 80032f4:	20000188 	.word	0x20000188
 80032f8:	200000ac 	.word	0x200000ac

080032fc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003306:	4b32      	ldr	r3, [pc, #200]	; (80033d0 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800330c:	4b31      	ldr	r3, [pc, #196]	; (80033d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	3304      	adds	r3, #4
 8003312:	4618      	mov	r0, r3
 8003314:	f7fe fc22 	bl	8001b5c <uxListRemove>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10b      	bne.n	8003336 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800331e:	4b2d      	ldr	r3, [pc, #180]	; (80033d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	2201      	movs	r2, #1
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43da      	mvns	r2, r3
 800332c:	4b2a      	ldr	r3, [pc, #168]	; (80033d8 <prvAddCurrentTaskToDelayedList+0xdc>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4013      	ands	r3, r2
 8003332:	4a29      	ldr	r2, [pc, #164]	; (80033d8 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003334:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333c:	d110      	bne.n	8003360 <prvAddCurrentTaskToDelayedList+0x64>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00d      	beq.n	8003360 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003344:	4b23      	ldr	r3, [pc, #140]	; (80033d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	211b      	movs	r1, #27
 800334a:	4618      	mov	r0, r3
 800334c:	f003 fa62 	bl	8006814 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003350:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3304      	adds	r3, #4
 8003356:	4619      	mov	r1, r3
 8003358:	4820      	ldr	r0, [pc, #128]	; (80033dc <prvAddCurrentTaskToDelayedList+0xe0>)
 800335a:	f7fe fba2 	bl	8001aa2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800335e:	e032      	b.n	80033c6 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4413      	add	r3, r2
 8003366:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003368:	4b1a      	ldr	r3, [pc, #104]	; (80033d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	429a      	cmp	r2, r3
 8003376:	d20f      	bcs.n	8003398 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003378:	4b16      	ldr	r3, [pc, #88]	; (80033d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2104      	movs	r1, #4
 800337e:	4618      	mov	r0, r3
 8003380:	f003 fa48 	bl	8006814 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003384:	4b16      	ldr	r3, [pc, #88]	; (80033e0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	4b12      	ldr	r3, [pc, #72]	; (80033d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	3304      	adds	r3, #4
 800338e:	4619      	mov	r1, r3
 8003390:	4610      	mov	r0, r2
 8003392:	f7fe fbaa 	bl	8001aea <vListInsert>
}
 8003396:	e016      	b.n	80033c6 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003398:	4b0e      	ldr	r3, [pc, #56]	; (80033d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2104      	movs	r1, #4
 800339e:	4618      	mov	r0, r3
 80033a0:	f003 fa38 	bl	8006814 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033a4:	4b0f      	ldr	r3, [pc, #60]	; (80033e4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	4b0a      	ldr	r3, [pc, #40]	; (80033d4 <prvAddCurrentTaskToDelayedList+0xd8>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3304      	adds	r3, #4
 80033ae:	4619      	mov	r1, r3
 80033b0:	4610      	mov	r0, r2
 80033b2:	f7fe fb9a 	bl	8001aea <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80033b6:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <prvAddCurrentTaskToDelayedList+0xec>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d202      	bcs.n	80033c6 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80033c0:	4a09      	ldr	r2, [pc, #36]	; (80033e8 <prvAddCurrentTaskToDelayedList+0xec>)
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	6013      	str	r3, [r2, #0]
}
 80033c6:	bf00      	nop
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	20000184 	.word	0x20000184
 80033d4:	200000a8 	.word	0x200000a8
 80033d8:	20000188 	.word	0x20000188
 80033dc:	2000016c 	.word	0x2000016c
 80033e0:	2000013c 	.word	0x2000013c
 80033e4:	20000138 	.word	0x20000138
 80033e8:	200001a0 	.word	0x200001a0

080033ec <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80033f2:	2300      	movs	r3, #0
 80033f4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80033f6:	f000 fad5 	bl	80039a4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80033fa:	4b11      	ldr	r3, [pc, #68]	; (8003440 <xTimerCreateTimerTask+0x54>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00b      	beq.n	800341a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003402:	4b10      	ldr	r3, [pc, #64]	; (8003444 <xTimerCreateTimerTask+0x58>)
 8003404:	9301      	str	r3, [sp, #4]
 8003406:	2302      	movs	r3, #2
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	2300      	movs	r3, #0
 800340c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003410:	490d      	ldr	r1, [pc, #52]	; (8003448 <xTimerCreateTimerTask+0x5c>)
 8003412:	480e      	ldr	r0, [pc, #56]	; (800344c <xTimerCreateTimerTask+0x60>)
 8003414:	f7ff f926 	bl	8002664 <xTaskCreate>
 8003418:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10a      	bne.n	8003436 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003424:	f383 8811 	msr	BASEPRI, r3
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	603b      	str	r3, [r7, #0]
    }
 8003432:	bf00      	nop
 8003434:	e7fe      	b.n	8003434 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003436:	687b      	ldr	r3, [r7, #4]
    }
 8003438:	4618      	mov	r0, r3
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	200001dc 	.word	0x200001dc
 8003444:	200001e0 	.word	0x200001e0
 8003448:	08007590 	.word	0x08007590
 800344c:	08003585 	.word	0x08003585

08003450 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	; 0x28
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
 800345c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800345e:	2300      	movs	r3, #0
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10a      	bne.n	800347e <xTimerGenericCommand+0x2e>
        __asm volatile
 8003468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	623b      	str	r3, [r7, #32]
    }
 800347a:	bf00      	nop
 800347c:	e7fe      	b.n	800347c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800347e:	4b1a      	ldr	r3, [pc, #104]	; (80034e8 <xTimerGenericCommand+0x98>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d02a      	beq.n	80034dc <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b05      	cmp	r3, #5
 8003496:	dc18      	bgt.n	80034ca <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003498:	f7ff fe92 	bl	80031c0 <xTaskGetSchedulerState>
 800349c:	4603      	mov	r3, r0
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d109      	bne.n	80034b6 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80034a2:	4b11      	ldr	r3, [pc, #68]	; (80034e8 <xTimerGenericCommand+0x98>)
 80034a4:	6818      	ldr	r0, [r3, #0]
 80034a6:	f107 0114 	add.w	r1, r7, #20
 80034aa:	2300      	movs	r3, #0
 80034ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ae:	f7fe fc6f 	bl	8001d90 <xQueueGenericSend>
 80034b2:	6278      	str	r0, [r7, #36]	; 0x24
 80034b4:	e012      	b.n	80034dc <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80034b6:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <xTimerGenericCommand+0x98>)
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	f107 0114 	add.w	r1, r7, #20
 80034be:	2300      	movs	r3, #0
 80034c0:	2200      	movs	r2, #0
 80034c2:	f7fe fc65 	bl	8001d90 <xQueueGenericSend>
 80034c6:	6278      	str	r0, [r7, #36]	; 0x24
 80034c8:	e008      	b.n	80034dc <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80034ca:	4b07      	ldr	r3, [pc, #28]	; (80034e8 <xTimerGenericCommand+0x98>)
 80034cc:	6818      	ldr	r0, [r3, #0]
 80034ce:	f107 0114 	add.w	r1, r7, #20
 80034d2:	2300      	movs	r3, #0
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	f7fe fd81 	bl	8001fdc <xQueueGenericSendFromISR>
 80034da:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80034de:	4618      	mov	r0, r3
 80034e0:	3728      	adds	r7, #40	; 0x28
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	200001dc 	.word	0x200001dc

080034ec <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034f6:	4b22      	ldr	r3, [pc, #136]	; (8003580 <prvProcessExpiredTimer+0x94>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	3304      	adds	r3, #4
 8003504:	4618      	mov	r0, r3
 8003506:	f7fe fb29 	bl	8001b5c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d022      	beq.n	800355e <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	699a      	ldr	r2, [r3, #24]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	18d1      	adds	r1, r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	6978      	ldr	r0, [r7, #20]
 8003526:	f000 f8d1 	bl	80036cc <prvInsertTimerInActiveList>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01f      	beq.n	8003570 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003530:	2300      	movs	r3, #0
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	2300      	movs	r3, #0
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	2100      	movs	r1, #0
 800353a:	6978      	ldr	r0, [r7, #20]
 800353c:	f7ff ff88 	bl	8003450 <xTimerGenericCommand>
 8003540:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d113      	bne.n	8003570 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354c:	f383 8811 	msr	BASEPRI, r3
 8003550:	f3bf 8f6f 	isb	sy
 8003554:	f3bf 8f4f 	dsb	sy
 8003558:	60fb      	str	r3, [r7, #12]
    }
 800355a:	bf00      	nop
 800355c:	e7fe      	b.n	800355c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003564:	f023 0301 	bic.w	r3, r3, #1
 8003568:	b2da      	uxtb	r2, r3
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	6978      	ldr	r0, [r7, #20]
 8003576:	4798      	blx	r3
    }
 8003578:	bf00      	nop
 800357a:	3718      	adds	r7, #24
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	200001d4 	.word	0x200001d4

08003584 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800358c:	f107 0308 	add.w	r3, r7, #8
 8003590:	4618      	mov	r0, r3
 8003592:	f000 f857 	bl	8003644 <prvGetNextExpireTime>
 8003596:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4619      	mov	r1, r3
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 f803 	bl	80035a8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80035a2:	f000 f8d5 	bl	8003750 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80035a6:	e7f1      	b.n	800358c <prvTimerTask+0x8>

080035a8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80035b2:	f7ff fa1d 	bl	80029f0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80035b6:	f107 0308 	add.w	r3, r7, #8
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 f866 	bl	800368c <prvSampleTimeNow>
 80035c0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d130      	bne.n	800362a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10a      	bne.n	80035e4 <prvProcessTimerOrBlockTask+0x3c>
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d806      	bhi.n	80035e4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80035d6:	f7ff fa19 	bl	8002a0c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80035da:	68f9      	ldr	r1, [r7, #12]
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff ff85 	bl	80034ec <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80035e2:	e024      	b.n	800362e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d008      	beq.n	80035fc <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80035ea:	4b13      	ldr	r3, [pc, #76]	; (8003638 <prvProcessTimerOrBlockTask+0x90>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <prvProcessTimerOrBlockTask+0x50>
 80035f4:	2301      	movs	r3, #1
 80035f6:	e000      	b.n	80035fa <prvProcessTimerOrBlockTask+0x52>
 80035f8:	2300      	movs	r3, #0
 80035fa:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80035fc:	4b0f      	ldr	r3, [pc, #60]	; (800363c <prvProcessTimerOrBlockTask+0x94>)
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	4619      	mov	r1, r3
 800360a:	f7fe fff7 	bl	80025fc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800360e:	f7ff f9fd 	bl	8002a0c <xTaskResumeAll>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10a      	bne.n	800362e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003618:	4b09      	ldr	r3, [pc, #36]	; (8003640 <prvProcessTimerOrBlockTask+0x98>)
 800361a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	f3bf 8f4f 	dsb	sy
 8003624:	f3bf 8f6f 	isb	sy
    }
 8003628:	e001      	b.n	800362e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800362a:	f7ff f9ef 	bl	8002a0c <xTaskResumeAll>
    }
 800362e:	bf00      	nop
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	200001d8 	.word	0x200001d8
 800363c:	200001dc 	.word	0x200001dc
 8003640:	e000ed04 	.word	0xe000ed04

08003644 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800364c:	4b0e      	ldr	r3, [pc, #56]	; (8003688 <prvGetNextExpireTime+0x44>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <prvGetNextExpireTime+0x16>
 8003656:	2201      	movs	r2, #1
 8003658:	e000      	b.n	800365c <prvGetNextExpireTime+0x18>
 800365a:	2200      	movs	r2, #0
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d105      	bne.n	8003674 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003668:	4b07      	ldr	r3, [pc, #28]	; (8003688 <prvGetNextExpireTime+0x44>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	e001      	b.n	8003678 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003678:	68fb      	ldr	r3, [r7, #12]
    }
 800367a:	4618      	mov	r0, r3
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	200001d4 	.word	0x200001d4

0800368c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003694:	f7ff fa5a 	bl	8002b4c <xTaskGetTickCount>
 8003698:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800369a:	4b0b      	ldr	r3, [pc, #44]	; (80036c8 <prvSampleTimeNow+0x3c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d205      	bcs.n	80036b0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80036a4:	f000 f91a 	bl	80038dc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	e002      	b.n	80036b6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80036b6:	4a04      	ldr	r2, [pc, #16]	; (80036c8 <prvSampleTimeNow+0x3c>)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80036bc:	68fb      	ldr	r3, [r7, #12]
    }
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	200001e4 	.word	0x200001e4

080036cc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
 80036d8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d812      	bhi.n	8003718 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	1ad2      	subs	r2, r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d302      	bcc.n	8003706 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003700:	2301      	movs	r3, #1
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	e01b      	b.n	800373e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003706:	4b10      	ldr	r3, [pc, #64]	; (8003748 <prvInsertTimerInActiveList+0x7c>)
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	3304      	adds	r3, #4
 800370e:	4619      	mov	r1, r3
 8003710:	4610      	mov	r0, r2
 8003712:	f7fe f9ea 	bl	8001aea <vListInsert>
 8003716:	e012      	b.n	800373e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d206      	bcs.n	800372e <prvInsertTimerInActiveList+0x62>
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	429a      	cmp	r2, r3
 8003726:	d302      	bcc.n	800372e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003728:	2301      	movs	r3, #1
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	e007      	b.n	800373e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800372e:	4b07      	ldr	r3, [pc, #28]	; (800374c <prvInsertTimerInActiveList+0x80>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	3304      	adds	r3, #4
 8003736:	4619      	mov	r1, r3
 8003738:	4610      	mov	r0, r2
 800373a:	f7fe f9d6 	bl	8001aea <vListInsert>
            }
        }

        return xProcessTimerNow;
 800373e:	697b      	ldr	r3, [r7, #20]
    }
 8003740:	4618      	mov	r0, r3
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	200001d8 	.word	0x200001d8
 800374c:	200001d4 	.word	0x200001d4

08003750 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003750:	b580      	push	{r7, lr}
 8003752:	b08c      	sub	sp, #48	; 0x30
 8003754:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003756:	e0ae      	b.n	80038b6 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f2c0 80aa 	blt.w	80038b4 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d004      	beq.n	8003776 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	3304      	adds	r3, #4
 8003770:	4618      	mov	r0, r3
 8003772:	f7fe f9f3 	bl	8001b5c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003776:	1d3b      	adds	r3, r7, #4
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff ff87 	bl	800368c <prvSampleTimeNow>
 800377e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2b09      	cmp	r3, #9
 8003784:	f200 8097 	bhi.w	80038b6 <prvProcessReceivedCommands+0x166>
 8003788:	a201      	add	r2, pc, #4	; (adr r2, 8003790 <prvProcessReceivedCommands+0x40>)
 800378a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378e:	bf00      	nop
 8003790:	080037b9 	.word	0x080037b9
 8003794:	080037b9 	.word	0x080037b9
 8003798:	080037b9 	.word	0x080037b9
 800379c:	0800382d 	.word	0x0800382d
 80037a0:	08003841 	.word	0x08003841
 80037a4:	0800388b 	.word	0x0800388b
 80037a8:	080037b9 	.word	0x080037b9
 80037ac:	080037b9 	.word	0x080037b9
 80037b0:	0800382d 	.word	0x0800382d
 80037b4:	08003841 	.word	0x08003841
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	18d1      	adds	r1, r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6a3a      	ldr	r2, [r7, #32]
 80037d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037d8:	f7ff ff78 	bl	80036cc <prvInsertTimerInActiveList>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d069      	beq.n	80038b6 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037e8:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d05e      	beq.n	80038b6 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	441a      	add	r2, r3
 8003800:	2300      	movs	r3, #0
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	2300      	movs	r3, #0
 8003806:	2100      	movs	r1, #0
 8003808:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800380a:	f7ff fe21 	bl	8003450 <xTimerGenericCommand>
 800380e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d14f      	bne.n	80038b6 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381a:	f383 8811 	msr	BASEPRI, r3
 800381e:	f3bf 8f6f 	isb	sy
 8003822:	f3bf 8f4f 	dsb	sy
 8003826:	61bb      	str	r3, [r7, #24]
    }
 8003828:	bf00      	nop
 800382a:	e7fe      	b.n	800382a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003832:	f023 0301 	bic.w	r3, r3, #1
 8003836:	b2da      	uxtb	r2, r3
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800383e:	e03a      	b.n	80038b6 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003846:	f043 0301 	orr.w	r3, r3, #1
 800384a:	b2da      	uxtb	r2, r3
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10a      	bne.n	8003876 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003864:	f383 8811 	msr	BASEPRI, r3
 8003868:	f3bf 8f6f 	isb	sy
 800386c:	f3bf 8f4f 	dsb	sy
 8003870:	617b      	str	r3, [r7, #20]
    }
 8003872:	bf00      	nop
 8003874:	e7fe      	b.n	8003874 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003878:	699a      	ldr	r2, [r3, #24]
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	18d1      	adds	r1, r2, r3
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	6a3a      	ldr	r2, [r7, #32]
 8003882:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003884:	f7ff ff22 	bl	80036cc <prvInsertTimerInActiveList>
                        break;
 8003888:	e015      	b.n	80038b6 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d103      	bne.n	80038a0 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003898:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800389a:	f000 fc6f 	bl	800417c <vPortFree>
 800389e:	e00a      	b.n	80038b6 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80038a6:	f023 0301 	bic.w	r3, r3, #1
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80038b2:	e000      	b.n	80038b6 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80038b4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80038b6:	4b08      	ldr	r3, [pc, #32]	; (80038d8 <prvProcessReceivedCommands+0x188>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f107 0108 	add.w	r1, r7, #8
 80038be:	2200      	movs	r2, #0
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fe fc49 	bl	8002158 <xQueueReceive>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f47f af45 	bne.w	8003758 <prvProcessReceivedCommands+0x8>
        }
    }
 80038ce:	bf00      	nop
 80038d0:	bf00      	nop
 80038d2:	3728      	adds	r7, #40	; 0x28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	200001dc 	.word	0x200001dc

080038dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80038e2:	e048      	b.n	8003976 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80038e4:	4b2d      	ldr	r3, [pc, #180]	; (800399c <prvSwitchTimerLists+0xc0>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038ee:	4b2b      	ldr	r3, [pc, #172]	; (800399c <prvSwitchTimerLists+0xc0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	3304      	adds	r3, #4
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fe f92d 	bl	8001b5c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d02e      	beq.n	8003976 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	4413      	add	r3, r2
 8003920:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	429a      	cmp	r2, r3
 8003928:	d90e      	bls.n	8003948 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003936:	4b19      	ldr	r3, [pc, #100]	; (800399c <prvSwitchTimerLists+0xc0>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	3304      	adds	r3, #4
 800393e:	4619      	mov	r1, r3
 8003940:	4610      	mov	r0, r2
 8003942:	f7fe f8d2 	bl	8001aea <vListInsert>
 8003946:	e016      	b.n	8003976 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003948:	2300      	movs	r3, #0
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	2300      	movs	r3, #0
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	2100      	movs	r1, #0
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f7ff fd7c 	bl	8003450 <xTimerGenericCommand>
 8003958:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10a      	bne.n	8003976 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	603b      	str	r3, [r7, #0]
    }
 8003972:	bf00      	nop
 8003974:	e7fe      	b.n	8003974 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003976:	4b09      	ldr	r3, [pc, #36]	; (800399c <prvSwitchTimerLists+0xc0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1b1      	bne.n	80038e4 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003980:	4b06      	ldr	r3, [pc, #24]	; (800399c <prvSwitchTimerLists+0xc0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003986:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <prvSwitchTimerLists+0xc4>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a04      	ldr	r2, [pc, #16]	; (800399c <prvSwitchTimerLists+0xc0>)
 800398c:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800398e:	4a04      	ldr	r2, [pc, #16]	; (80039a0 <prvSwitchTimerLists+0xc4>)
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	6013      	str	r3, [r2, #0]
    }
 8003994:	bf00      	nop
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	200001d4 	.word	0x200001d4
 80039a0:	200001d8 	.word	0x200001d8

080039a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80039a8:	f000 f9dc 	bl	8003d64 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80039ac:	4b12      	ldr	r3, [pc, #72]	; (80039f8 <prvCheckForValidListAndQueue+0x54>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d11d      	bne.n	80039f0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80039b4:	4811      	ldr	r0, [pc, #68]	; (80039fc <prvCheckForValidListAndQueue+0x58>)
 80039b6:	f7fe f847 	bl	8001a48 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80039ba:	4811      	ldr	r0, [pc, #68]	; (8003a00 <prvCheckForValidListAndQueue+0x5c>)
 80039bc:	f7fe f844 	bl	8001a48 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80039c0:	4b10      	ldr	r3, [pc, #64]	; (8003a04 <prvCheckForValidListAndQueue+0x60>)
 80039c2:	4a0e      	ldr	r2, [pc, #56]	; (80039fc <prvCheckForValidListAndQueue+0x58>)
 80039c4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80039c6:	4b10      	ldr	r3, [pc, #64]	; (8003a08 <prvCheckForValidListAndQueue+0x64>)
 80039c8:	4a0d      	ldr	r2, [pc, #52]	; (8003a00 <prvCheckForValidListAndQueue+0x5c>)
 80039ca:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80039cc:	2200      	movs	r2, #0
 80039ce:	210c      	movs	r1, #12
 80039d0:	200a      	movs	r0, #10
 80039d2:	f7fe f955 	bl	8001c80 <xQueueGenericCreate>
 80039d6:	4603      	mov	r3, r0
 80039d8:	4a07      	ldr	r2, [pc, #28]	; (80039f8 <prvCheckForValidListAndQueue+0x54>)
 80039da:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80039dc:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <prvCheckForValidListAndQueue+0x54>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d005      	beq.n	80039f0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80039e4:	4b04      	ldr	r3, [pc, #16]	; (80039f8 <prvCheckForValidListAndQueue+0x54>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4908      	ldr	r1, [pc, #32]	; (8003a0c <prvCheckForValidListAndQueue+0x68>)
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fe fdd4 	bl	8002598 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80039f0:	f000 f9e8 	bl	8003dc4 <vPortExitCritical>
    }
 80039f4:	bf00      	nop
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	200001dc 	.word	0x200001dc
 80039fc:	200001ac 	.word	0x200001ac
 8003a00:	200001c0 	.word	0x200001c0
 8003a04:	200001d4 	.word	0x200001d4
 8003a08:	200001d8 	.word	0x200001d8
 8003a0c:	08007598 	.word	0x08007598

08003a10 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	3b04      	subs	r3, #4
 8003a20:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a28:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	3b04      	subs	r3, #4
 8003a2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f023 0201 	bic.w	r2, r3, #1
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	3b04      	subs	r3, #4
 8003a3e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003a40:	4a0c      	ldr	r2, [pc, #48]	; (8003a74 <pxPortInitialiseStack+0x64>)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	3b14      	subs	r3, #20
 8003a4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	3b04      	subs	r3, #4
 8003a56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f06f 0202 	mvn.w	r2, #2
 8003a5e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	3b20      	subs	r3, #32
 8003a64:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003a66:	68fb      	ldr	r3, [r7, #12]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr
 8003a74:	08003a79 	.word	0x08003a79

08003a78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003a82:	4b12      	ldr	r3, [pc, #72]	; (8003acc <prvTaskExitError+0x54>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8a:	d00a      	beq.n	8003aa2 <prvTaskExitError+0x2a>
        __asm volatile
 8003a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	60fb      	str	r3, [r7, #12]
    }
 8003a9e:	bf00      	nop
 8003aa0:	e7fe      	b.n	8003aa0 <prvTaskExitError+0x28>
        __asm volatile
 8003aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa6:	f383 8811 	msr	BASEPRI, r3
 8003aaa:	f3bf 8f6f 	isb	sy
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	60bb      	str	r3, [r7, #8]
    }
 8003ab4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003ab6:	bf00      	nop
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0fc      	beq.n	8003ab8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003abe:	bf00      	nop
 8003ac0:	bf00      	nop
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	20000014 	.word	0x20000014

08003ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003ad0:	4b07      	ldr	r3, [pc, #28]	; (8003af0 <pxCurrentTCBConst2>)
 8003ad2:	6819      	ldr	r1, [r3, #0]
 8003ad4:	6808      	ldr	r0, [r1, #0]
 8003ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ada:	f380 8809 	msr	PSP, r0
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f04f 0000 	mov.w	r0, #0
 8003ae6:	f380 8811 	msr	BASEPRI, r0
 8003aea:	4770      	bx	lr
 8003aec:	f3af 8000 	nop.w

08003af0 <pxCurrentTCBConst2>:
 8003af0:	200000a8 	.word	0x200000a8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003af4:	bf00      	nop
 8003af6:	bf00      	nop

08003af8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003af8:	4808      	ldr	r0, [pc, #32]	; (8003b1c <prvPortStartFirstTask+0x24>)
 8003afa:	6800      	ldr	r0, [r0, #0]
 8003afc:	6800      	ldr	r0, [r0, #0]
 8003afe:	f380 8808 	msr	MSP, r0
 8003b02:	f04f 0000 	mov.w	r0, #0
 8003b06:	f380 8814 	msr	CONTROL, r0
 8003b0a:	b662      	cpsie	i
 8003b0c:	b661      	cpsie	f
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	f3bf 8f6f 	isb	sy
 8003b16:	df00      	svc	0
 8003b18:	bf00      	nop
 8003b1a:	0000      	.short	0x0000
 8003b1c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003b20:	bf00      	nop
 8003b22:	bf00      	nop

08003b24 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b2a:	4b46      	ldr	r3, [pc, #280]	; (8003c44 <xPortStartScheduler+0x120>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a46      	ldr	r2, [pc, #280]	; (8003c48 <xPortStartScheduler+0x124>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d10a      	bne.n	8003b4a <xPortStartScheduler+0x26>
        __asm volatile
 8003b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b38:	f383 8811 	msr	BASEPRI, r3
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	f3bf 8f4f 	dsb	sy
 8003b44:	613b      	str	r3, [r7, #16]
    }
 8003b46:	bf00      	nop
 8003b48:	e7fe      	b.n	8003b48 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003b4a:	4b3e      	ldr	r3, [pc, #248]	; (8003c44 <xPortStartScheduler+0x120>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a3f      	ldr	r2, [pc, #252]	; (8003c4c <xPortStartScheduler+0x128>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d10a      	bne.n	8003b6a <xPortStartScheduler+0x46>
        __asm volatile
 8003b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	60fb      	str	r3, [r7, #12]
    }
 8003b66:	bf00      	nop
 8003b68:	e7fe      	b.n	8003b68 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b6a:	4b39      	ldr	r3, [pc, #228]	; (8003c50 <xPortStartScheduler+0x12c>)
 8003b6c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	22ff      	movs	r2, #255	; 0xff
 8003b7a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b84:	78fb      	ldrb	r3, [r7, #3]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	4b31      	ldr	r3, [pc, #196]	; (8003c54 <xPortStartScheduler+0x130>)
 8003b90:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003b92:	4b31      	ldr	r3, [pc, #196]	; (8003c58 <xPortStartScheduler+0x134>)
 8003b94:	2207      	movs	r2, #7
 8003b96:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003b98:	e009      	b.n	8003bae <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003b9a:	4b2f      	ldr	r3, [pc, #188]	; (8003c58 <xPortStartScheduler+0x134>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	4a2d      	ldr	r2, [pc, #180]	; (8003c58 <xPortStartScheduler+0x134>)
 8003ba2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003bae:	78fb      	ldrb	r3, [r7, #3]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb6:	2b80      	cmp	r3, #128	; 0x80
 8003bb8:	d0ef      	beq.n	8003b9a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003bba:	4b27      	ldr	r3, [pc, #156]	; (8003c58 <xPortStartScheduler+0x134>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f1c3 0307 	rsb	r3, r3, #7
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d00a      	beq.n	8003bdc <xPortStartScheduler+0xb8>
        __asm volatile
 8003bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bca:	f383 8811 	msr	BASEPRI, r3
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	60bb      	str	r3, [r7, #8]
    }
 8003bd8:	bf00      	nop
 8003bda:	e7fe      	b.n	8003bda <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003bdc:	4b1e      	ldr	r3, [pc, #120]	; (8003c58 <xPortStartScheduler+0x134>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	021b      	lsls	r3, r3, #8
 8003be2:	4a1d      	ldr	r2, [pc, #116]	; (8003c58 <xPortStartScheduler+0x134>)
 8003be4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003be6:	4b1c      	ldr	r3, [pc, #112]	; (8003c58 <xPortStartScheduler+0x134>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003bee:	4a1a      	ldr	r2, [pc, #104]	; (8003c58 <xPortStartScheduler+0x134>)
 8003bf0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003bfa:	4b18      	ldr	r3, [pc, #96]	; (8003c5c <xPortStartScheduler+0x138>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a17      	ldr	r2, [pc, #92]	; (8003c5c <xPortStartScheduler+0x138>)
 8003c00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c04:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003c06:	4b15      	ldr	r3, [pc, #84]	; (8003c5c <xPortStartScheduler+0x138>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a14      	ldr	r2, [pc, #80]	; (8003c5c <xPortStartScheduler+0x138>)
 8003c0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003c10:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003c12:	f000 f963 	bl	8003edc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003c16:	4b12      	ldr	r3, [pc, #72]	; (8003c60 <xPortStartScheduler+0x13c>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003c1c:	f000 f982 	bl	8003f24 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003c20:	4b10      	ldr	r3, [pc, #64]	; (8003c64 <xPortStartScheduler+0x140>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a0f      	ldr	r2, [pc, #60]	; (8003c64 <xPortStartScheduler+0x140>)
 8003c26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003c2a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003c2c:	f7ff ff64 	bl	8003af8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003c30:	f7ff f86a 	bl	8002d08 <vTaskSwitchContext>
    prvTaskExitError();
 8003c34:	f7ff ff20 	bl	8003a78 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	e000ed00 	.word	0xe000ed00
 8003c48:	410fc271 	.word	0x410fc271
 8003c4c:	410fc270 	.word	0x410fc270
 8003c50:	e000e400 	.word	0xe000e400
 8003c54:	200001e8 	.word	0x200001e8
 8003c58:	200001ec 	.word	0x200001ec
 8003c5c:	e000ed20 	.word	0xe000ed20
 8003c60:	20000014 	.word	0x20000014
 8003c64:	e000ef34 	.word	0xe000ef34

08003c68 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003c6e:	4b37      	ldr	r3, [pc, #220]	; (8003d4c <vInitPrioGroupValue+0xe4>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a37      	ldr	r2, [pc, #220]	; (8003d50 <vInitPrioGroupValue+0xe8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d10a      	bne.n	8003c8e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7c:	f383 8811 	msr	BASEPRI, r3
 8003c80:	f3bf 8f6f 	isb	sy
 8003c84:	f3bf 8f4f 	dsb	sy
 8003c88:	613b      	str	r3, [r7, #16]
    }
 8003c8a:	bf00      	nop
 8003c8c:	e7fe      	b.n	8003c8c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003c8e:	4b2f      	ldr	r3, [pc, #188]	; (8003d4c <vInitPrioGroupValue+0xe4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a30      	ldr	r2, [pc, #192]	; (8003d54 <vInitPrioGroupValue+0xec>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d10a      	bne.n	8003cae <vInitPrioGroupValue+0x46>
        __asm volatile
 8003c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9c:	f383 8811 	msr	BASEPRI, r3
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	60fb      	str	r3, [r7, #12]
    }
 8003caa:	bf00      	nop
 8003cac:	e7fe      	b.n	8003cac <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003cae:	4b2a      	ldr	r3, [pc, #168]	; (8003d58 <vInitPrioGroupValue+0xf0>)
 8003cb0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	22ff      	movs	r2, #255	; 0xff
 8003cbe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003cc8:	78fb      	ldrb	r3, [r7, #3]
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003cd0:	b2da      	uxtb	r2, r3
 8003cd2:	4b22      	ldr	r3, [pc, #136]	; (8003d5c <vInitPrioGroupValue+0xf4>)
 8003cd4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003cd6:	4b22      	ldr	r3, [pc, #136]	; (8003d60 <vInitPrioGroupValue+0xf8>)
 8003cd8:	2207      	movs	r2, #7
 8003cda:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cdc:	e009      	b.n	8003cf2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003cde:	4b20      	ldr	r3, [pc, #128]	; (8003d60 <vInitPrioGroupValue+0xf8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	4a1e      	ldr	r2, [pc, #120]	; (8003d60 <vInitPrioGroupValue+0xf8>)
 8003ce6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ce8:	78fb      	ldrb	r3, [r7, #3]
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cf2:	78fb      	ldrb	r3, [r7, #3]
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfa:	2b80      	cmp	r3, #128	; 0x80
 8003cfc:	d0ef      	beq.n	8003cde <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003cfe:	4b18      	ldr	r3, [pc, #96]	; (8003d60 <vInitPrioGroupValue+0xf8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f1c3 0307 	rsb	r3, r3, #7
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d00a      	beq.n	8003d20 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8003d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d0e:	f383 8811 	msr	BASEPRI, r3
 8003d12:	f3bf 8f6f 	isb	sy
 8003d16:	f3bf 8f4f 	dsb	sy
 8003d1a:	60bb      	str	r3, [r7, #8]
    }
 8003d1c:	bf00      	nop
 8003d1e:	e7fe      	b.n	8003d1e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d20:	4b0f      	ldr	r3, [pc, #60]	; (8003d60 <vInitPrioGroupValue+0xf8>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	021b      	lsls	r3, r3, #8
 8003d26:	4a0e      	ldr	r2, [pc, #56]	; (8003d60 <vInitPrioGroupValue+0xf8>)
 8003d28:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d2a:	4b0d      	ldr	r3, [pc, #52]	; (8003d60 <vInitPrioGroupValue+0xf8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d32:	4a0b      	ldr	r2, [pc, #44]	; (8003d60 <vInitPrioGroupValue+0xf8>)
 8003d34:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003d3e:	bf00      	nop
 8003d40:	371c      	adds	r7, #28
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	e000ed00 	.word	0xe000ed00
 8003d50:	410fc271 	.word	0x410fc271
 8003d54:	410fc270 	.word	0x410fc270
 8003d58:	e000e400 	.word	0xe000e400
 8003d5c:	200001e8 	.word	0x200001e8
 8003d60:	200001ec 	.word	0x200001ec

08003d64 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
        __asm volatile
 8003d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	607b      	str	r3, [r7, #4]
    }
 8003d7c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003d7e:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <vPortEnterCritical+0x58>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3301      	adds	r3, #1
 8003d84:	4a0d      	ldr	r2, [pc, #52]	; (8003dbc <vPortEnterCritical+0x58>)
 8003d86:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003d88:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <vPortEnterCritical+0x58>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d10f      	bne.n	8003db0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003d90:	4b0b      	ldr	r3, [pc, #44]	; (8003dc0 <vPortEnterCritical+0x5c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <vPortEnterCritical+0x4c>
        __asm volatile
 8003d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9e:	f383 8811 	msr	BASEPRI, r3
 8003da2:	f3bf 8f6f 	isb	sy
 8003da6:	f3bf 8f4f 	dsb	sy
 8003daa:	603b      	str	r3, [r7, #0]
    }
 8003dac:	bf00      	nop
 8003dae:	e7fe      	b.n	8003dae <vPortEnterCritical+0x4a>
    }
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	20000014 	.word	0x20000014
 8003dc0:	e000ed04 	.word	0xe000ed04

08003dc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003dca:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <vPortExitCritical+0x50>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10a      	bne.n	8003de8 <vPortExitCritical+0x24>
        __asm volatile
 8003dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd6:	f383 8811 	msr	BASEPRI, r3
 8003dda:	f3bf 8f6f 	isb	sy
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	607b      	str	r3, [r7, #4]
    }
 8003de4:	bf00      	nop
 8003de6:	e7fe      	b.n	8003de6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003de8:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <vPortExitCritical+0x50>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	4a09      	ldr	r2, [pc, #36]	; (8003e14 <vPortExitCritical+0x50>)
 8003df0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003df2:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <vPortExitCritical+0x50>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d105      	bne.n	8003e06 <vPortExitCritical+0x42>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	f383 8811 	msr	BASEPRI, r3
    }
 8003e04:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003e06:	bf00      	nop
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	20000014 	.word	0x20000014
	...

08003e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003e20:	f3ef 8009 	mrs	r0, PSP
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	4b15      	ldr	r3, [pc, #84]	; (8003e80 <pxCurrentTCBConst>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	f01e 0f10 	tst.w	lr, #16
 8003e30:	bf08      	it	eq
 8003e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e3a:	6010      	str	r0, [r2, #0]
 8003e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003e40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003e44:	f380 8811 	msr	BASEPRI, r0
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f7fe ff5a 	bl	8002d08 <vTaskSwitchContext>
 8003e54:	f04f 0000 	mov.w	r0, #0
 8003e58:	f380 8811 	msr	BASEPRI, r0
 8003e5c:	bc09      	pop	{r0, r3}
 8003e5e:	6819      	ldr	r1, [r3, #0]
 8003e60:	6808      	ldr	r0, [r1, #0]
 8003e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e66:	f01e 0f10 	tst.w	lr, #16
 8003e6a:	bf08      	it	eq
 8003e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003e70:	f380 8809 	msr	PSP, r0
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	f3af 8000 	nop.w

08003e80 <pxCurrentTCBConst>:
 8003e80:	200000a8 	.word	0x200000a8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003e84:	bf00      	nop
 8003e86:	bf00      	nop

08003e88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
        __asm volatile
 8003e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e92:	f383 8811 	msr	BASEPRI, r3
 8003e96:	f3bf 8f6f 	isb	sy
 8003e9a:	f3bf 8f4f 	dsb	sy
 8003e9e:	607b      	str	r3, [r7, #4]
    }
 8003ea0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003ea2:	f002 fb5b 	bl	800655c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003ea6:	f7fe fe73 	bl	8002b90 <xTaskIncrementTick>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d006      	beq.n	8003ebe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003eb0:	f002 fbb2 	bl	8006618 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003eb4:	4b08      	ldr	r3, [pc, #32]	; (8003ed8 <SysTick_Handler+0x50>)
 8003eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	e001      	b.n	8003ec2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8003ebe:	f002 fb8f 	bl	80065e0 <SEGGER_SYSVIEW_RecordExitISR>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	f383 8811 	msr	BASEPRI, r3
    }
 8003ecc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8003ece:	bf00      	nop
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	e000ed04 	.word	0xe000ed04

08003edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ee0:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <vPortSetupTimerInterrupt+0x34>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ee6:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <vPortSetupTimerInterrupt+0x38>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003eec:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <vPortSetupTimerInterrupt+0x3c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a0a      	ldr	r2, [pc, #40]	; (8003f1c <vPortSetupTimerInterrupt+0x40>)
 8003ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef6:	099b      	lsrs	r3, r3, #6
 8003ef8:	4a09      	ldr	r2, [pc, #36]	; (8003f20 <vPortSetupTimerInterrupt+0x44>)
 8003efa:	3b01      	subs	r3, #1
 8003efc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003efe:	4b04      	ldr	r3, [pc, #16]	; (8003f10 <vPortSetupTimerInterrupt+0x34>)
 8003f00:	2207      	movs	r2, #7
 8003f02:	601a      	str	r2, [r3, #0]
}
 8003f04:	bf00      	nop
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	e000e010 	.word	0xe000e010
 8003f14:	e000e018 	.word	0xe000e018
 8003f18:	20000004 	.word	0x20000004
 8003f1c:	10624dd3 	.word	0x10624dd3
 8003f20:	e000e014 	.word	0xe000e014

08003f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003f24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003f34 <vPortEnableVFP+0x10>
 8003f28:	6801      	ldr	r1, [r0, #0]
 8003f2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003f2e:	6001      	str	r1, [r0, #0]
 8003f30:	4770      	bx	lr
 8003f32:	0000      	.short	0x0000
 8003f34:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003f38:	bf00      	nop
 8003f3a:	bf00      	nop

08003f3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003f42:	f3ef 8305 	mrs	r3, IPSR
 8003f46:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b0f      	cmp	r3, #15
 8003f4c:	d914      	bls.n	8003f78 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003f4e:	4a17      	ldr	r2, [pc, #92]	; (8003fac <vPortValidateInterruptPriority+0x70>)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4413      	add	r3, r2
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003f58:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <vPortValidateInterruptPriority+0x74>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	7afa      	ldrb	r2, [r7, #11]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d20a      	bcs.n	8003f78 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8003f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f66:	f383 8811 	msr	BASEPRI, r3
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	f3bf 8f4f 	dsb	sy
 8003f72:	607b      	str	r3, [r7, #4]
    }
 8003f74:	bf00      	nop
 8003f76:	e7fe      	b.n	8003f76 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003f78:	4b0e      	ldr	r3, [pc, #56]	; (8003fb4 <vPortValidateInterruptPriority+0x78>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f80:	4b0d      	ldr	r3, [pc, #52]	; (8003fb8 <vPortValidateInterruptPriority+0x7c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d90a      	bls.n	8003f9e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8003f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	603b      	str	r3, [r7, #0]
    }
 8003f9a:	bf00      	nop
 8003f9c:	e7fe      	b.n	8003f9c <vPortValidateInterruptPriority+0x60>
    }
 8003f9e:	bf00      	nop
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	e000e3f0 	.word	0xe000e3f0
 8003fb0:	200001e8 	.word	0x200001e8
 8003fb4:	e000ed0c 	.word	0xe000ed0c
 8003fb8:	200001ec 	.word	0x200001ec

08003fbc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08a      	sub	sp, #40	; 0x28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003fc8:	f7fe fd12 	bl	80029f0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003fcc:	4b65      	ldr	r3, [pc, #404]	; (8004164 <pvPortMalloc+0x1a8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003fd4:	f000 f934 	bl	8004240 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003fd8:	4b63      	ldr	r3, [pc, #396]	; (8004168 <pvPortMalloc+0x1ac>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f040 80a7 	bne.w	8004134 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d02d      	beq.n	8004048 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003fec:	2208      	movs	r2, #8
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d227      	bcs.n	8004048 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003ff8:	2208      	movs	r2, #8
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	2b00      	cmp	r3, #0
 8004008:	d021      	beq.n	800404e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f023 0307 	bic.w	r3, r3, #7
 8004010:	3308      	adds	r3, #8
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	429a      	cmp	r2, r3
 8004016:	d214      	bcs.n	8004042 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f023 0307 	bic.w	r3, r3, #7
 800401e:	3308      	adds	r3, #8
 8004020:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	2b00      	cmp	r3, #0
 800402a:	d010      	beq.n	800404e <pvPortMalloc+0x92>
        __asm volatile
 800402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	617b      	str	r3, [r7, #20]
    }
 800403e:	bf00      	nop
 8004040:	e7fe      	b.n	8004040 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004042:	2300      	movs	r3, #0
 8004044:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004046:	e002      	b.n	800404e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004048:	2300      	movs	r3, #0
 800404a:	607b      	str	r3, [r7, #4]
 800404c:	e000      	b.n	8004050 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800404e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d06e      	beq.n	8004134 <pvPortMalloc+0x178>
 8004056:	4b45      	ldr	r3, [pc, #276]	; (800416c <pvPortMalloc+0x1b0>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	429a      	cmp	r2, r3
 800405e:	d869      	bhi.n	8004134 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004060:	4b43      	ldr	r3, [pc, #268]	; (8004170 <pvPortMalloc+0x1b4>)
 8004062:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004064:	4b42      	ldr	r3, [pc, #264]	; (8004170 <pvPortMalloc+0x1b4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800406a:	e004      	b.n	8004076 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	429a      	cmp	r2, r3
 800407e:	d903      	bls.n	8004088 <pvPortMalloc+0xcc>
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1f1      	bne.n	800406c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004088:	4b36      	ldr	r3, [pc, #216]	; (8004164 <pvPortMalloc+0x1a8>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800408e:	429a      	cmp	r2, r3
 8004090:	d050      	beq.n	8004134 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2208      	movs	r2, #8
 8004098:	4413      	add	r3, r2
 800409a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	1ad2      	subs	r2, r2, r3
 80040ac:	2308      	movs	r3, #8
 80040ae:	005b      	lsls	r3, r3, #1
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d91f      	bls.n	80040f4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80040b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4413      	add	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <pvPortMalloc+0x120>
        __asm volatile
 80040c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ca:	f383 8811 	msr	BASEPRI, r3
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	613b      	str	r3, [r7, #16]
    }
 80040d8:	bf00      	nop
 80040da:	e7fe      	b.n	80040da <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	1ad2      	subs	r2, r2, r3
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80040ee:	69b8      	ldr	r0, [r7, #24]
 80040f0:	f000 f908 	bl	8004304 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80040f4:	4b1d      	ldr	r3, [pc, #116]	; (800416c <pvPortMalloc+0x1b0>)
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	4a1b      	ldr	r2, [pc, #108]	; (800416c <pvPortMalloc+0x1b0>)
 8004100:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004102:	4b1a      	ldr	r3, [pc, #104]	; (800416c <pvPortMalloc+0x1b0>)
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	4b1b      	ldr	r3, [pc, #108]	; (8004174 <pvPortMalloc+0x1b8>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d203      	bcs.n	8004116 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800410e:	4b17      	ldr	r3, [pc, #92]	; (800416c <pvPortMalloc+0x1b0>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a18      	ldr	r2, [pc, #96]	; (8004174 <pvPortMalloc+0x1b8>)
 8004114:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	4b13      	ldr	r3, [pc, #76]	; (8004168 <pvPortMalloc+0x1ac>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	431a      	orrs	r2, r3
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800412a:	4b13      	ldr	r3, [pc, #76]	; (8004178 <pvPortMalloc+0x1bc>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3301      	adds	r3, #1
 8004130:	4a11      	ldr	r2, [pc, #68]	; (8004178 <pvPortMalloc+0x1bc>)
 8004132:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004134:	f7fe fc6a 	bl	8002a0c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <pvPortMalloc+0x19c>
        __asm volatile
 8004142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	60fb      	str	r3, [r7, #12]
    }
 8004154:	bf00      	nop
 8004156:	e7fe      	b.n	8004156 <pvPortMalloc+0x19a>
    return pvReturn;
 8004158:	69fb      	ldr	r3, [r7, #28]
}
 800415a:	4618      	mov	r0, r3
 800415c:	3728      	adds	r7, #40	; 0x28
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	20012df8 	.word	0x20012df8
 8004168:	20012e0c 	.word	0x20012e0c
 800416c:	20012dfc 	.word	0x20012dfc
 8004170:	20012df0 	.word	0x20012df0
 8004174:	20012e00 	.word	0x20012e00
 8004178:	20012e04 	.word	0x20012e04

0800417c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d04d      	beq.n	800422a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800418e:	2308      	movs	r3, #8
 8004190:	425b      	negs	r3, r3
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	4413      	add	r3, r2
 8004196:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	4b24      	ldr	r3, [pc, #144]	; (8004234 <vPortFree+0xb8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4013      	ands	r3, r2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10a      	bne.n	80041c0 <vPortFree+0x44>
        __asm volatile
 80041aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ae:	f383 8811 	msr	BASEPRI, r3
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	60fb      	str	r3, [r7, #12]
    }
 80041bc:	bf00      	nop
 80041be:	e7fe      	b.n	80041be <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00a      	beq.n	80041de <vPortFree+0x62>
        __asm volatile
 80041c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041cc:	f383 8811 	msr	BASEPRI, r3
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	60bb      	str	r3, [r7, #8]
    }
 80041da:	bf00      	nop
 80041dc:	e7fe      	b.n	80041dc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	4b14      	ldr	r3, [pc, #80]	; (8004234 <vPortFree+0xb8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4013      	ands	r3, r2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d01e      	beq.n	800422a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d11a      	bne.n	800422a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	4b0e      	ldr	r3, [pc, #56]	; (8004234 <vPortFree+0xb8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	43db      	mvns	r3, r3
 80041fe:	401a      	ands	r2, r3
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004204:	f7fe fbf4 	bl	80029f0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	4b0a      	ldr	r3, [pc, #40]	; (8004238 <vPortFree+0xbc>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4413      	add	r3, r2
 8004212:	4a09      	ldr	r2, [pc, #36]	; (8004238 <vPortFree+0xbc>)
 8004214:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004216:	6938      	ldr	r0, [r7, #16]
 8004218:	f000 f874 	bl	8004304 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800421c:	4b07      	ldr	r3, [pc, #28]	; (800423c <vPortFree+0xc0>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3301      	adds	r3, #1
 8004222:	4a06      	ldr	r2, [pc, #24]	; (800423c <vPortFree+0xc0>)
 8004224:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004226:	f7fe fbf1 	bl	8002a0c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800422a:	bf00      	nop
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	20012e0c 	.word	0x20012e0c
 8004238:	20012dfc 	.word	0x20012dfc
 800423c:	20012e08 	.word	0x20012e08

08004240 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004246:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800424a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800424c:	4b27      	ldr	r3, [pc, #156]	; (80042ec <prvHeapInit+0xac>)
 800424e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00c      	beq.n	8004274 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	3307      	adds	r3, #7
 800425e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 0307 	bic.w	r3, r3, #7
 8004266:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	4a1f      	ldr	r2, [pc, #124]	; (80042ec <prvHeapInit+0xac>)
 8004270:	4413      	add	r3, r2
 8004272:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004278:	4a1d      	ldr	r2, [pc, #116]	; (80042f0 <prvHeapInit+0xb0>)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800427e:	4b1c      	ldr	r3, [pc, #112]	; (80042f0 <prvHeapInit+0xb0>)
 8004280:	2200      	movs	r2, #0
 8004282:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	4413      	add	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800428c:	2208      	movs	r2, #8
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0307 	bic.w	r3, r3, #7
 800429a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4a15      	ldr	r2, [pc, #84]	; (80042f4 <prvHeapInit+0xb4>)
 80042a0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80042a2:	4b14      	ldr	r3, [pc, #80]	; (80042f4 <prvHeapInit+0xb4>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2200      	movs	r2, #0
 80042a8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80042aa:	4b12      	ldr	r3, [pc, #72]	; (80042f4 <prvHeapInit+0xb4>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2200      	movs	r2, #0
 80042b0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	1ad2      	subs	r2, r2, r3
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80042c0:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <prvHeapInit+0xb4>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	4a0a      	ldr	r2, [pc, #40]	; (80042f8 <prvHeapInit+0xb8>)
 80042ce:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	4a09      	ldr	r2, [pc, #36]	; (80042fc <prvHeapInit+0xbc>)
 80042d6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80042d8:	4b09      	ldr	r3, [pc, #36]	; (8004300 <prvHeapInit+0xc0>)
 80042da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80042de:	601a      	str	r2, [r3, #0]
}
 80042e0:	bf00      	nop
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	200001f0 	.word	0x200001f0
 80042f0:	20012df0 	.word	0x20012df0
 80042f4:	20012df8 	.word	0x20012df8
 80042f8:	20012e00 	.word	0x20012e00
 80042fc:	20012dfc 	.word	0x20012dfc
 8004300:	20012e0c 	.word	0x20012e0c

08004304 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800430c:	4b28      	ldr	r3, [pc, #160]	; (80043b0 <prvInsertBlockIntoFreeList+0xac>)
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	e002      	b.n	8004318 <prvInsertBlockIntoFreeList+0x14>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	429a      	cmp	r2, r3
 8004320:	d8f7      	bhi.n	8004312 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	4413      	add	r3, r2
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	429a      	cmp	r2, r3
 8004332:	d108      	bne.n	8004346 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	441a      	add	r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	441a      	add	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	429a      	cmp	r2, r3
 8004358:	d118      	bne.n	800438c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	4b15      	ldr	r3, [pc, #84]	; (80043b4 <prvInsertBlockIntoFreeList+0xb0>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d00d      	beq.n	8004382 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	441a      	add	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	601a      	str	r2, [r3, #0]
 8004380:	e008      	b.n	8004394 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004382:	4b0c      	ldr	r3, [pc, #48]	; (80043b4 <prvInsertBlockIntoFreeList+0xb0>)
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	601a      	str	r2, [r3, #0]
 800438a:	e003      	b.n	8004394 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	429a      	cmp	r2, r3
 800439a:	d002      	beq.n	80043a2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80043a2:	bf00      	nop
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	20012df0 	.word	0x20012df0
 80043b4:	20012df8 	.word	0x20012df8

080043b8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80043bc:	4803      	ldr	r0, [pc, #12]	; (80043cc <_cbSendSystemDesc+0x14>)
 80043be:	f002 f877 	bl	80064b0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80043c2:	4803      	ldr	r0, [pc, #12]	; (80043d0 <_cbSendSystemDesc+0x18>)
 80043c4:	f002 f874 	bl	80064b0 <SEGGER_SYSVIEW_SendSysDesc>
}
 80043c8:	bf00      	nop
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	080075a0 	.word	0x080075a0
 80043d0:	080075d8 	.word	0x080075d8

080043d4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80043d8:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <SEGGER_SYSVIEW_Conf+0x20>)
 80043da:	6818      	ldr	r0, [r3, #0]
 80043dc:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <SEGGER_SYSVIEW_Conf+0x20>)
 80043de:	6819      	ldr	r1, [r3, #0]
 80043e0:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <SEGGER_SYSVIEW_Conf+0x24>)
 80043e2:	4a06      	ldr	r2, [pc, #24]	; (80043fc <SEGGER_SYSVIEW_Conf+0x28>)
 80043e4:	f001 fbe0 	bl	8005ba8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80043e8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80043ec:	f001 fc20 	bl	8005c30 <SEGGER_SYSVIEW_SetRAMBase>
}
 80043f0:	bf00      	nop
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	20000004 	.word	0x20000004
 80043f8:	080043b9 	.word	0x080043b9
 80043fc:	08007678 	.word	0x08007678

08004400 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004402:	b085      	sub	sp, #20
 8004404:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004406:	2300      	movs	r3, #0
 8004408:	607b      	str	r3, [r7, #4]
 800440a:	e033      	b.n	8004474 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800440c:	491e      	ldr	r1, [pc, #120]	; (8004488 <_cbSendTaskList+0x88>)
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	4613      	mov	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	6818      	ldr	r0, [r3, #0]
 800441c:	491a      	ldr	r1, [pc, #104]	; (8004488 <_cbSendTaskList+0x88>)
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	4613      	mov	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	3304      	adds	r3, #4
 800442c:	6819      	ldr	r1, [r3, #0]
 800442e:	4c16      	ldr	r4, [pc, #88]	; (8004488 <_cbSendTaskList+0x88>)
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4423      	add	r3, r4
 800443c:	3308      	adds	r3, #8
 800443e:	681c      	ldr	r4, [r3, #0]
 8004440:	4d11      	ldr	r5, [pc, #68]	; (8004488 <_cbSendTaskList+0x88>)
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	4613      	mov	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	4413      	add	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	442b      	add	r3, r5
 800444e:	330c      	adds	r3, #12
 8004450:	681d      	ldr	r5, [r3, #0]
 8004452:	4e0d      	ldr	r6, [pc, #52]	; (8004488 <_cbSendTaskList+0x88>)
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	4613      	mov	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4433      	add	r3, r6
 8004460:	3310      	adds	r3, #16
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	462b      	mov	r3, r5
 8004468:	4622      	mov	r2, r4
 800446a:	f000 f8b5 	bl	80045d8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3301      	adds	r3, #1
 8004472:	607b      	str	r3, [r7, #4]
 8004474:	4b05      	ldr	r3, [pc, #20]	; (800448c <_cbSendTaskList+0x8c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	429a      	cmp	r2, r3
 800447c:	d3c6      	bcc.n	800440c <_cbSendTaskList+0xc>
  }
}
 800447e:	bf00      	nop
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004488:	20012e10 	.word	0x20012e10
 800448c:	20012eb0 	.word	0x20012eb0

08004490 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004490:	b5b0      	push	{r4, r5, r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004496:	f7fe fb69 	bl	8002b6c <xTaskGetTickCountFromISR>
 800449a:	4603      	mov	r3, r0
 800449c:	461a      	mov	r2, r3
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80044a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	f04f 0400 	mov.w	r4, #0
 80044b2:	f04f 0500 	mov.w	r5, #0
 80044b6:	015d      	lsls	r5, r3, #5
 80044b8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80044bc:	0154      	lsls	r4, r2, #5
 80044be:	4622      	mov	r2, r4
 80044c0:	462b      	mov	r3, r5
 80044c2:	1a12      	subs	r2, r2, r0
 80044c4:	eb63 0301 	sbc.w	r3, r3, r1
 80044c8:	f04f 0400 	mov.w	r4, #0
 80044cc:	f04f 0500 	mov.w	r5, #0
 80044d0:	009d      	lsls	r5, r3, #2
 80044d2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 80044d6:	0094      	lsls	r4, r2, #2
 80044d8:	4622      	mov	r2, r4
 80044da:	462b      	mov	r3, r5
 80044dc:	1812      	adds	r2, r2, r0
 80044de:	eb41 0303 	adc.w	r3, r1, r3
 80044e2:	f04f 0000 	mov.w	r0, #0
 80044e6:	f04f 0100 	mov.w	r1, #0
 80044ea:	00d9      	lsls	r1, r3, #3
 80044ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044f0:	00d0      	lsls	r0, r2, #3
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 80044fa:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80044fe:	4610      	mov	r0, r2
 8004500:	4619      	mov	r1, r3
 8004502:	3708      	adds	r7, #8
 8004504:	46bd      	mov	sp, r7
 8004506:	bdb0      	pop	{r4, r5, r7, pc}

08004508 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af02      	add	r7, sp, #8
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004516:	2205      	movs	r2, #5
 8004518:	492b      	ldr	r1, [pc, #172]	; (80045c8 <SYSVIEW_AddTask+0xc0>)
 800451a:	68b8      	ldr	r0, [r7, #8]
 800451c:	f002 fb88 	bl	8006c30 <memcmp>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d04b      	beq.n	80045be <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004526:	4b29      	ldr	r3, [pc, #164]	; (80045cc <SYSVIEW_AddTask+0xc4>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b07      	cmp	r3, #7
 800452c:	d903      	bls.n	8004536 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800452e:	4828      	ldr	r0, [pc, #160]	; (80045d0 <SYSVIEW_AddTask+0xc8>)
 8004530:	f002 fad0 	bl	8006ad4 <SEGGER_SYSVIEW_Warn>
    return;
 8004534:	e044      	b.n	80045c0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004536:	4b25      	ldr	r3, [pc, #148]	; (80045cc <SYSVIEW_AddTask+0xc4>)
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	4926      	ldr	r1, [pc, #152]	; (80045d4 <SYSVIEW_AddTask+0xcc>)
 800453c:	4613      	mov	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800454a:	4b20      	ldr	r3, [pc, #128]	; (80045cc <SYSVIEW_AddTask+0xc4>)
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	4921      	ldr	r1, [pc, #132]	; (80045d4 <SYSVIEW_AddTask+0xcc>)
 8004550:	4613      	mov	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	440b      	add	r3, r1
 800455a:	3304      	adds	r3, #4
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004560:	4b1a      	ldr	r3, [pc, #104]	; (80045cc <SYSVIEW_AddTask+0xc4>)
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	491b      	ldr	r1, [pc, #108]	; (80045d4 <SYSVIEW_AddTask+0xcc>)
 8004566:	4613      	mov	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	440b      	add	r3, r1
 8004570:	3308      	adds	r3, #8
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004576:	4b15      	ldr	r3, [pc, #84]	; (80045cc <SYSVIEW_AddTask+0xc4>)
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	4916      	ldr	r1, [pc, #88]	; (80045d4 <SYSVIEW_AddTask+0xcc>)
 800457c:	4613      	mov	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	330c      	adds	r3, #12
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800458c:	4b0f      	ldr	r3, [pc, #60]	; (80045cc <SYSVIEW_AddTask+0xc4>)
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	4910      	ldr	r1, [pc, #64]	; (80045d4 <SYSVIEW_AddTask+0xcc>)
 8004592:	4613      	mov	r3, r2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	3310      	adds	r3, #16
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80045a2:	4b0a      	ldr	r3, [pc, #40]	; (80045cc <SYSVIEW_AddTask+0xc4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3301      	adds	r3, #1
 80045a8:	4a08      	ldr	r2, [pc, #32]	; (80045cc <SYSVIEW_AddTask+0xc4>)
 80045aa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	68b9      	ldr	r1, [r7, #8]
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f80e 	bl	80045d8 <SYSVIEW_SendTaskInfo>
 80045bc:	e000      	b.n	80045c0 <SYSVIEW_AddTask+0xb8>
    return;
 80045be:	bf00      	nop

}
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	080075e8 	.word	0x080075e8
 80045cc:	20012eb0 	.word	0x20012eb0
 80045d0:	080075f0 	.word	0x080075f0
 80045d4:	20012e10 	.word	0x20012e10

080045d8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08a      	sub	sp, #40	; 0x28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80045e6:	f107 0314 	add.w	r3, r7, #20
 80045ea:	2214      	movs	r2, #20
 80045ec:	2100      	movs	r1, #0
 80045ee:	4618      	mov	r0, r3
 80045f0:	f002 fb3a 	bl	8006c68 <memset>
  TaskInfo.TaskID     = TaskID;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004606:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004608:	f107 0314 	add.w	r3, r7, #20
 800460c:	4618      	mov	r0, r3
 800460e:	f001 fe57 	bl	80062c0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004612:	bf00      	nop
 8004614:	3728      	adds	r7, #40	; 0x28
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
	...

0800461c <__NVIC_EnableIRQ>:
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	4603      	mov	r3, r0
 8004624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800462a:	2b00      	cmp	r3, #0
 800462c:	db0b      	blt.n	8004646 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	f003 021f 	and.w	r2, r3, #31
 8004634:	4907      	ldr	r1, [pc, #28]	; (8004654 <__NVIC_EnableIRQ+0x38>)
 8004636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463a:	095b      	lsrs	r3, r3, #5
 800463c:	2001      	movs	r0, #1
 800463e:	fa00 f202 	lsl.w	r2, r0, r2
 8004642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	e000e100 	.word	0xe000e100

08004658 <__NVIC_SetPriority>:
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	6039      	str	r1, [r7, #0]
 8004662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004668:	2b00      	cmp	r3, #0
 800466a:	db0a      	blt.n	8004682 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	b2da      	uxtb	r2, r3
 8004670:	490c      	ldr	r1, [pc, #48]	; (80046a4 <__NVIC_SetPriority+0x4c>)
 8004672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004676:	0112      	lsls	r2, r2, #4
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	440b      	add	r3, r1
 800467c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004680:	e00a      	b.n	8004698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	b2da      	uxtb	r2, r3
 8004686:	4908      	ldr	r1, [pc, #32]	; (80046a8 <__NVIC_SetPriority+0x50>)
 8004688:	79fb      	ldrb	r3, [r7, #7]
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	3b04      	subs	r3, #4
 8004690:	0112      	lsls	r2, r2, #4
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	440b      	add	r3, r1
 8004696:	761a      	strb	r2, [r3, #24]
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	e000e100 	.word	0xe000e100
 80046a8:	e000ed00 	.word	0xe000ed00

080046ac <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80046b2:	f002 fa6b 	bl	8006b8c <SEGGER_SYSVIEW_IsStarted>
 80046b6:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80046be:	f001 fc83 	bl	8005fc8 <SEGGER_SYSVIEW_Start>
  }
}
 80046c2:	bf00      	nop
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4603      	mov	r3, r0
 80046d4:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80046d6:	4b0c      	ldr	r3, [pc, #48]	; (8004708 <_cbOnUARTRx+0x3c>)
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d806      	bhi.n	80046ec <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80046de:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <_cbOnUARTRx+0x3c>)
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	3301      	adds	r3, #1
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	4b08      	ldr	r3, [pc, #32]	; (8004708 <_cbOnUARTRx+0x3c>)
 80046e8:	701a      	strb	r2, [r3, #0]
    goto Done;
 80046ea:	e009      	b.n	8004700 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80046ec:	f7ff ffde 	bl	80046ac <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80046f0:	4b05      	ldr	r3, [pc, #20]	; (8004708 <_cbOnUARTRx+0x3c>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	4618      	mov	r0, r3
 80046f6:	1dfb      	adds	r3, r7, #7
 80046f8:	2201      	movs	r2, #1
 80046fa:	4619      	mov	r1, r3
 80046fc:	f000 fb9a 	bl	8004e34 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004700:	bf00      	nop
}
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	20000018 	.word	0x20000018

0800470c <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004714:	4b14      	ldr	r3, [pc, #80]	; (8004768 <_cbOnUARTTx+0x5c>)
 8004716:	785b      	ldrb	r3, [r3, #1]
 8004718:	2b03      	cmp	r3, #3
 800471a:	d80f      	bhi.n	800473c <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 800471c:	4b12      	ldr	r3, [pc, #72]	; (8004768 <_cbOnUARTTx+0x5c>)
 800471e:	785b      	ldrb	r3, [r3, #1]
 8004720:	461a      	mov	r2, r3
 8004722:	4b12      	ldr	r3, [pc, #72]	; (800476c <_cbOnUARTTx+0x60>)
 8004724:	5c9a      	ldrb	r2, [r3, r2]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800472a:	4b0f      	ldr	r3, [pc, #60]	; (8004768 <_cbOnUARTTx+0x5c>)
 800472c:	785b      	ldrb	r3, [r3, #1]
 800472e:	3301      	adds	r3, #1
 8004730:	b2da      	uxtb	r2, r3
 8004732:	4b0d      	ldr	r3, [pc, #52]	; (8004768 <_cbOnUARTTx+0x5c>)
 8004734:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004736:	2301      	movs	r3, #1
 8004738:	60fb      	str	r3, [r7, #12]
    goto Done;
 800473a:	e00f      	b.n	800475c <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 800473c:	4b0a      	ldr	r3, [pc, #40]	; (8004768 <_cbOnUARTTx+0x5c>)
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fa19 	bl	8004b7c <SEGGER_RTT_ReadUpBufferNoLock>
 800474a:	4603      	mov	r3, r0
 800474c:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b00      	cmp	r3, #0
 8004752:	da02      	bge.n	800475a <_cbOnUARTTx+0x4e>
    r = 0;
 8004754:	2300      	movs	r3, #0
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	e000      	b.n	800475c <_cbOnUARTTx+0x50>
  }
Done:
 800475a:	bf00      	nop
  return r;
 800475c:	68fb      	ldr	r3, [r7, #12]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20000018 	.word	0x20000018
 800476c:	08007680 	.word	0x08007680

08004770 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004778:	4a04      	ldr	r2, [pc, #16]	; (800478c <SEGGER_UART_init+0x1c>)
 800477a:	4905      	ldr	r1, [pc, #20]	; (8004790 <SEGGER_UART_init+0x20>)
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f863 	bl	8004848 <HIF_UART_Init>
}
 8004782:	bf00      	nop
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	080046cd 	.word	0x080046cd
 8004790:	0800470d 	.word	0x0800470d

08004794 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800479a:	4b1e      	ldr	r3, [pc, #120]	; (8004814 <USART2_IRQHandler+0x80>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f003 0320 	and.w	r3, r3, #32
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d011      	beq.n	80047ce <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80047aa:	4b1b      	ldr	r3, [pc, #108]	; (8004818 <USART2_IRQHandler+0x84>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f003 030b 	and.w	r3, r3, #11
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d108      	bne.n	80047ce <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80047bc:	4b17      	ldr	r3, [pc, #92]	; (800481c <USART2_IRQHandler+0x88>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d004      	beq.n	80047ce <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80047c4:	4b15      	ldr	r3, [pc, #84]	; (800481c <USART2_IRQHandler+0x88>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	79fa      	ldrb	r2, [r7, #7]
 80047ca:	4610      	mov	r0, r2
 80047cc:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d01a      	beq.n	800480e <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80047d8:	4b11      	ldr	r3, [pc, #68]	; (8004820 <USART2_IRQHandler+0x8c>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d015      	beq.n	800480c <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80047e0:	4b0f      	ldr	r3, [pc, #60]	; (8004820 <USART2_IRQHandler+0x8c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	1dfa      	adds	r2, r7, #7
 80047e6:	4610      	mov	r0, r2
 80047e8:	4798      	blx	r3
 80047ea:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d106      	bne.n	8004800 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80047f2:	4b0c      	ldr	r3, [pc, #48]	; (8004824 <USART2_IRQHandler+0x90>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a0b      	ldr	r2, [pc, #44]	; (8004824 <USART2_IRQHandler+0x90>)
 80047f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	e006      	b.n	800480e <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004800:	4b04      	ldr	r3, [pc, #16]	; (8004814 <USART2_IRQHandler+0x80>)
 8004802:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004804:	79fa      	ldrb	r2, [r7, #7]
 8004806:	4b04      	ldr	r3, [pc, #16]	; (8004818 <USART2_IRQHandler+0x84>)
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	e000      	b.n	800480e <USART2_IRQHandler+0x7a>
      return;
 800480c:	bf00      	nop
    }
  }
}
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	40004400 	.word	0x40004400
 8004818:	40004404 	.word	0x40004404
 800481c:	20012eb4 	.word	0x20012eb4
 8004820:	20012eb8 	.word	0x20012eb8
 8004824:	4000440c 	.word	0x4000440c

08004828 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 800482c:	4b05      	ldr	r3, [pc, #20]	; (8004844 <HIF_UART_EnableTXEInterrupt+0x1c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a04      	ldr	r2, [pc, #16]	; (8004844 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004836:	6013      	str	r3, [r2, #0]
}
 8004838:	bf00      	nop
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	4000440c 	.word	0x4000440c

08004848 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004854:	4b2e      	ldr	r3, [pc, #184]	; (8004910 <HIF_UART_Init+0xc8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a2d      	ldr	r2, [pc, #180]	; (8004910 <HIF_UART_Init+0xc8>)
 800485a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800485e:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004860:	4b2c      	ldr	r3, [pc, #176]	; (8004914 <HIF_UART_Init+0xcc>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a2b      	ldr	r2, [pc, #172]	; (8004914 <HIF_UART_Init+0xcc>)
 8004866:	f043 0301 	orr.w	r3, r3, #1
 800486a:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 800486c:	4b2a      	ldr	r3, [pc, #168]	; (8004918 <HIF_UART_Init+0xd0>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004878:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8004880:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004882:	4a25      	ldr	r2, [pc, #148]	; (8004918 <HIF_UART_Init+0xd0>)
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004888:	4b24      	ldr	r3, [pc, #144]	; (800491c <HIF_UART_Init+0xd4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004894:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800489c:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800489e:	4a1f      	ldr	r2, [pc, #124]	; (800491c <HIF_UART_Init+0xd4>)
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80048a4:	4b1e      	ldr	r3, [pc, #120]	; (8004920 <HIF_UART_Init+0xd8>)
 80048a6:	f24a 022c 	movw	r2, #41004	; 0xa02c
 80048aa:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80048ac:	4b1d      	ldr	r3, [pc, #116]	; (8004924 <HIF_UART_Init+0xdc>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80048b2:	4b1d      	ldr	r3, [pc, #116]	; (8004928 <HIF_UART_Init+0xe0>)
 80048b4:	2280      	movs	r2, #128	; 0x80
 80048b6:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80048be:	4a1b      	ldr	r2, [pc, #108]	; (800492c <HIF_UART_Init+0xe4>)
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c6:	3301      	adds	r3, #1
 80048c8:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	085b      	lsrs	r3, r3, #1
 80048ce:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d6:	d302      	bcc.n	80048de <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80048d8:	f640 73ff 	movw	r3, #4095	; 0xfff
 80048dc:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d004      	beq.n	80048ee <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	011b      	lsls	r3, r3, #4
 80048e8:	4a11      	ldr	r2, [pc, #68]	; (8004930 <HIF_UART_Init+0xe8>)
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80048ee:	4a11      	ldr	r2, [pc, #68]	; (8004934 <HIF_UART_Init+0xec>)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80048f4:	4a10      	ldr	r2, [pc, #64]	; (8004938 <HIF_UART_Init+0xf0>)
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80048fa:	2106      	movs	r1, #6
 80048fc:	2026      	movs	r0, #38	; 0x26
 80048fe:	f7ff feab 	bl	8004658 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004902:	2026      	movs	r0, #38	; 0x26
 8004904:	f7ff fe8a 	bl	800461c <__NVIC_EnableIRQ>
}
 8004908:	bf00      	nop
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40023840 	.word	0x40023840
 8004914:	40023830 	.word	0x40023830
 8004918:	40020020 	.word	0x40020020
 800491c:	40020000 	.word	0x40020000
 8004920:	4000440c 	.word	0x4000440c
 8004924:	40004410 	.word	0x40004410
 8004928:	40004414 	.word	0x40004414
 800492c:	05f5e100 	.word	0x05f5e100
 8004930:	40004408 	.word	0x40004408
 8004934:	20012eb4 	.word	0x20012eb4
 8004938:	20012eb8 	.word	0x20012eb8

0800493c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004942:	4b24      	ldr	r3, [pc, #144]	; (80049d4 <_DoInit+0x98>)
 8004944:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2203      	movs	r2, #3
 800494a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2203      	movs	r2, #3
 8004950:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a20      	ldr	r2, [pc, #128]	; (80049d8 <_DoInit+0x9c>)
 8004956:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a20      	ldr	r2, [pc, #128]	; (80049dc <_DoInit+0xa0>)
 800495c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004964:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a17      	ldr	r2, [pc, #92]	; (80049d8 <_DoInit+0x9c>)
 800497c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a17      	ldr	r2, [pc, #92]	; (80049e0 <_DoInit+0xa4>)
 8004982:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2210      	movs	r2, #16
 8004988:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3307      	adds	r3, #7
 80049a0:	4a10      	ldr	r2, [pc, #64]	; (80049e4 <_DoInit+0xa8>)
 80049a2:	6810      	ldr	r0, [r2, #0]
 80049a4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80049a6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a0e      	ldr	r2, [pc, #56]	; (80049e8 <_DoInit+0xac>)
 80049ae:	6810      	ldr	r0, [r2, #0]
 80049b0:	6018      	str	r0, [r3, #0]
 80049b2:	8891      	ldrh	r1, [r2, #4]
 80049b4:	7992      	ldrb	r2, [r2, #6]
 80049b6:	8099      	strh	r1, [r3, #4]
 80049b8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80049ba:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2220      	movs	r2, #32
 80049c2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80049c4:	f3bf 8f5f 	dmb	sy
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	20018480 	.word	0x20018480
 80049d8:	08007640 	.word	0x08007640
 80049dc:	20012ebc 	.word	0x20012ebc
 80049e0:	200132bc 	.word	0x200132bc
 80049e4:	0800764c 	.word	0x0800764c
 80049e8:	08007650 	.word	0x08007650

080049ec <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b08a      	sub	sp, #40	; 0x28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80049f8:	2300      	movs	r3, #0
 80049fa:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d905      	bls.n	8004a1c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	3b01      	subs	r3, #1
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
 8004a1a:	e007      	b.n	8004a2c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	69b9      	ldr	r1, [r7, #24]
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	1acb      	subs	r3, r1, r3
 8004a26:	4413      	add	r3, r2
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a36:	4293      	cmp	r3, r2
 8004a38:	bf28      	it	cs
 8004a3a:	4613      	movcs	r3, r2
 8004a3c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4293      	cmp	r3, r2
 8004a44:	bf28      	it	cs
 8004a46:	4613      	movcs	r3, r2
 8004a48:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	4413      	add	r3, r2
 8004a52:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a56:	68b9      	ldr	r1, [r7, #8]
 8004a58:	6978      	ldr	r0, [r7, #20]
 8004a5a:	f002 f8f7 	bl	8006c4c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004a5e:	6a3a      	ldr	r2, [r7, #32]
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	4413      	add	r3, r2
 8004a64:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	4413      	add	r3, r2
 8004a6c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004a76:	69fa      	ldr	r2, [r7, #28]
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	4413      	add	r3, r2
 8004a7c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	69fa      	ldr	r2, [r7, #28]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d101      	bne.n	8004a8c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004a8c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	69fa      	ldr	r2, [r7, #28]
 8004a94:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1b2      	bne.n	8004a02 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3728      	adds	r7, #40	; 0x28
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b088      	sub	sp, #32
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	60f8      	str	r0, [r7, #12]
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d911      	bls.n	8004aee <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	68b9      	ldr	r1, [r7, #8]
 8004ad8:	6938      	ldr	r0, [r7, #16]
 8004ada:	f002 f8b7 	bl	8006c4c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004ade:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004ae2:	69fa      	ldr	r2, [r7, #28]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	441a      	add	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004aec:	e01f      	b.n	8004b2e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	4413      	add	r3, r2
 8004afa:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	68b9      	ldr	r1, [r7, #8]
 8004b00:	6938      	ldr	r0, [r7, #16]
 8004b02:	f002 f8a3 	bl	8006c4c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	1ad3      	subs	r3, r2, r3
 8004b0c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	4413      	add	r3, r2
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	6938      	ldr	r0, [r7, #16]
 8004b20:	f002 f894 	bl	8006c4c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004b24:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	60da      	str	r2, [r3, #12]
}
 8004b2e:	bf00      	nop
 8004b30:	3720      	adds	r7, #32
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004b36:	b480      	push	{r7}
 8004b38:	b087      	sub	sp, #28
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d808      	bhi.n	8004b64 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689a      	ldr	r2, [r3, #8]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	1ad2      	subs	r2, r2, r3
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	e004      	b.n	8004b6e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004b6e:	697b      	ldr	r3, [r7, #20]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	371c      	adds	r7, #28
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08c      	sub	sp, #48	; 0x30
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004b88:	4b3e      	ldr	r3, [pc, #248]	; (8004c84 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004b8a:	623b      	str	r3, [r7, #32]
 8004b8c:	6a3b      	ldr	r3, [r7, #32]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004b96:	f7ff fed1 	bl	800493c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	4413      	add	r3, r2
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	4a37      	ldr	r2, [pc, #220]	; (8004c84 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004ba8:	4413      	add	r3, r2
 8004baa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d92b      	bls.n	8004c20 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	bf28      	it	cs
 8004bda:	4613      	movcs	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be4:	4413      	add	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	6939      	ldr	r1, [r7, #16]
 8004bec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bee:	f002 f82d 	bl	8006c4c <memcpy>
    NumBytesRead += NumBytesRem;
 8004bf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	4413      	add	r3, r2
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004c0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	4413      	add	r3, r2
 8004c10:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d101      	bne.n	8004c20 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	bf28      	it	cs
 8004c30:	4613      	movcs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d019      	beq.n	8004c6e <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c40:	4413      	add	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	6939      	ldr	r1, [r7, #16]
 8004c48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c4a:	f001 ffff 	bl	8006c4c <memcpy>
    NumBytesRead += NumBytesRem;
 8004c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	4413      	add	r3, r2
 8004c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004c66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c78:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3730      	adds	r7, #48	; 0x30
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	20018480 	.word	0x20018480

08004c88 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08c      	sub	sp, #48	; 0x30
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004c94:	4b3e      	ldr	r3, [pc, #248]	; (8004d90 <SEGGER_RTT_ReadNoLock+0x108>)
 8004c96:	623b      	str	r3, [r7, #32]
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <SEGGER_RTT_ReadNoLock+0x1e>
 8004ca2:	f7ff fe4b 	bl	800493c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	4413      	add	r3, r2
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	3360      	adds	r3, #96	; 0x60
 8004cb2:	4a37      	ldr	r2, [pc, #220]	; (8004d90 <SEGGER_RTT_ReadNoLock+0x108>)
 8004cb4:	4413      	add	r3, r2
 8004cb6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004ccc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d92b      	bls.n	8004d2c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	bf28      	it	cs
 8004ce6:	4613      	movcs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	4413      	add	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	6939      	ldr	r1, [r7, #16]
 8004cf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cfa:	f001 ffa7 	bl	8006c4c <memcpy>
    NumBytesRead += NumBytesRem;
 8004cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	4413      	add	r3, r2
 8004d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d101      	bne.n	8004d2c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	bf28      	it	cs
 8004d3c:	4613      	movcs	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d019      	beq.n	8004d7a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4c:	4413      	add	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	6939      	ldr	r1, [r7, #16]
 8004d54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d56:	f001 ff79 	bl	8006c4c <memcpy>
    NumBytesRead += NumBytesRem;
 8004d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	4413      	add	r3, r2
 8004d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	4413      	add	r3, r2
 8004d68:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	4413      	add	r3, r2
 8004d78:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d84:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3730      	adds	r7, #48	; 0x30
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	20018480 	.word	0x20018480

08004d94 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b088      	sub	sp, #32
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4613      	mov	r3, r2
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	4413      	add	r3, r2
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	3360      	adds	r3, #96	; 0x60
 8004db0:	4a1f      	ldr	r2, [pc, #124]	; (8004e30 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8004db2:	4413      	add	r3, r2
 8004db4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d029      	beq.n	8004e12 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d82e      	bhi.n	8004e20 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d013      	beq.n	8004df2 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8004dca:	e029      	b.n	8004e20 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004dcc:	6978      	ldr	r0, [r7, #20]
 8004dce:	f7ff feb2 	bl	8004b36 <_GetAvailWriteSpace>
 8004dd2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d202      	bcs.n	8004de2 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004de0:	e021      	b.n	8004e26 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	69b9      	ldr	r1, [r7, #24]
 8004dea:	6978      	ldr	r0, [r7, #20]
 8004dec:	f7ff fe5b 	bl	8004aa6 <_WriteNoCheck>
    break;
 8004df0:	e019      	b.n	8004e26 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004df2:	6978      	ldr	r0, [r7, #20]
 8004df4:	f7ff fe9f 	bl	8004b36 <_GetAvailWriteSpace>
 8004df8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	bf28      	it	cs
 8004e02:	4613      	movcs	r3, r2
 8004e04:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	69b9      	ldr	r1, [r7, #24]
 8004e0a:	6978      	ldr	r0, [r7, #20]
 8004e0c:	f7ff fe4b 	bl	8004aa6 <_WriteNoCheck>
    break;
 8004e10:	e009      	b.n	8004e26 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	69b9      	ldr	r1, [r7, #24]
 8004e16:	6978      	ldr	r0, [r7, #20]
 8004e18:	f7ff fde8 	bl	80049ec <_WriteBlocking>
 8004e1c:	61f8      	str	r0, [r7, #28]
    break;
 8004e1e:	e002      	b.n	8004e26 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8004e20:	2300      	movs	r3, #0
 8004e22:	61fb      	str	r3, [r7, #28]
    break;
 8004e24:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004e26:	69fb      	ldr	r3, [r7, #28]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3720      	adds	r7, #32
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	20018480 	.word	0x20018480

08004e34 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b088      	sub	sp, #32
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004e40:	4b0e      	ldr	r3, [pc, #56]	; (8004e7c <SEGGER_RTT_WriteDownBuffer+0x48>)
 8004e42:	61fb      	str	r3, [r7, #28]
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8004e4e:	f7ff fd75 	bl	800493c <_DoInit>
  SEGGER_RTT_LOCK();
 8004e52:	f3ef 8311 	mrs	r3, BASEPRI
 8004e56:	f04f 0120 	mov.w	r1, #32
 8004e5a:	f381 8811 	msr	BASEPRI, r1
 8004e5e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	68b9      	ldr	r1, [r7, #8]
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f7ff ff95 	bl	8004d94 <SEGGER_RTT_WriteDownBufferNoLock>
 8004e6a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004e72:	697b      	ldr	r3, [r7, #20]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3720      	adds	r7, #32
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	20018480 	.word	0x20018480

08004e80 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b088      	sub	sp, #32
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004e8e:	4b3d      	ldr	r3, [pc, #244]	; (8004f84 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004e90:	61bb      	str	r3, [r7, #24]
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004e9c:	f7ff fd4e 	bl	800493c <_DoInit>
  SEGGER_RTT_LOCK();
 8004ea0:	f3ef 8311 	mrs	r3, BASEPRI
 8004ea4:	f04f 0120 	mov.w	r1, #32
 8004ea8:	f381 8811 	msr	BASEPRI, r1
 8004eac:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004eae:	4b35      	ldr	r3, [pc, #212]	; (8004f84 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004eb0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004eb6:	6939      	ldr	r1, [r7, #16]
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	4413      	add	r3, r2
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	440b      	add	r3, r1
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d008      	beq.n	8004ee0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	dbeb      	blt.n	8004eb6 <SEGGER_RTT_AllocUpBuffer+0x36>
 8004ede:	e000      	b.n	8004ee2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004ee0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	69fa      	ldr	r2, [r7, #28]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	da3f      	bge.n	8004f6c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004eec:	6939      	ldr	r1, [r7, #16]
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	1c5a      	adds	r2, r3, #1
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	4413      	add	r3, r2
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	440b      	add	r3, r1
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004f00:	6939      	ldr	r1, [r7, #16]
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	4613      	mov	r3, r2
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	4413      	add	r3, r2
 8004f0c:	00db      	lsls	r3, r3, #3
 8004f0e:	440b      	add	r3, r1
 8004f10:	3304      	adds	r3, #4
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004f16:	6939      	ldr	r1, [r7, #16]
 8004f18:	69fa      	ldr	r2, [r7, #28]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	005b      	lsls	r3, r3, #1
 8004f1e:	4413      	add	r3, r2
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	440b      	add	r3, r1
 8004f24:	3320      	adds	r3, #32
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004f2a:	6939      	ldr	r1, [r7, #16]
 8004f2c:	69fa      	ldr	r2, [r7, #28]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	4413      	add	r3, r2
 8004f34:	00db      	lsls	r3, r3, #3
 8004f36:	440b      	add	r3, r1
 8004f38:	3328      	adds	r3, #40	; 0x28
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004f3e:	6939      	ldr	r1, [r7, #16]
 8004f40:	69fa      	ldr	r2, [r7, #28]
 8004f42:	4613      	mov	r3, r2
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	4413      	add	r3, r2
 8004f48:	00db      	lsls	r3, r3, #3
 8004f4a:	440b      	add	r3, r1
 8004f4c:	3324      	adds	r3, #36	; 0x24
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004f52:	6939      	ldr	r1, [r7, #16]
 8004f54:	69fa      	ldr	r2, [r7, #28]
 8004f56:	4613      	mov	r3, r2
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	4413      	add	r3, r2
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	440b      	add	r3, r1
 8004f60:	332c      	adds	r3, #44	; 0x2c
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004f66:	f3bf 8f5f 	dmb	sy
 8004f6a:	e002      	b.n	8004f72 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f70:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004f78:	69fb      	ldr	r3, [r7, #28]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3720      	adds	r7, #32
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	20018480 	.word	0x20018480

08004f88 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b08a      	sub	sp, #40	; 0x28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004f96:	4b21      	ldr	r3, [pc, #132]	; (800501c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004f98:	623b      	str	r3, [r7, #32]
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004fa4:	f7ff fcca 	bl	800493c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004fa8:	4b1c      	ldr	r3, [pc, #112]	; (800501c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004faa:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d82c      	bhi.n	800500c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004fb2:	f3ef 8311 	mrs	r3, BASEPRI
 8004fb6:	f04f 0120 	mov.w	r1, #32
 8004fba:	f381 8811 	msr	BASEPRI, r1
 8004fbe:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	4413      	add	r3, r2
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	3360      	adds	r3, #96	; 0x60
 8004fcc:	69fa      	ldr	r2, [r7, #28]
 8004fce:	4413      	add	r3, r2
 8004fd0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00e      	beq.n	8004ff6 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2200      	movs	r2, #0
 8004fee:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ffa:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004ffc:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005006:	2300      	movs	r3, #0
 8005008:	627b      	str	r3, [r7, #36]	; 0x24
 800500a:	e002      	b.n	8005012 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800500c:	f04f 33ff 	mov.w	r3, #4294967295
 8005010:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005014:	4618      	mov	r0, r3
 8005016:	3728      	adds	r7, #40	; 0x28
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	20018480 	.word	0x20018480

08005020 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800502c:	2300      	movs	r3, #0
 800502e:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00f      	beq.n	8005056 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8005036:	e002      	b.n	800503e <_EncodeStr+0x1e>
      Len++;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	3301      	adds	r3, #1
 800503c:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	4413      	add	r3, r2
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1f6      	bne.n	8005038 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	429a      	cmp	r2, r3
 8005050:	d901      	bls.n	8005056 <_EncodeStr+0x36>
      Len = Limit;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	2bfe      	cmp	r3, #254	; 0xfe
 800505a:	d806      	bhi.n	800506a <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	60fa      	str	r2, [r7, #12]
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	701a      	strb	r2, [r3, #0]
 8005068:	e011      	b.n	800508e <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	1c5a      	adds	r2, r3, #1
 800506e:	60fa      	str	r2, [r7, #12]
 8005070:	22ff      	movs	r2, #255	; 0xff
 8005072:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	1c5a      	adds	r2, r3, #1
 8005078:	60fa      	str	r2, [r7, #12]
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	b2d2      	uxtb	r2, r2
 800507e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	0a19      	lsrs	r1, r3, #8
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	60fa      	str	r2, [r7, #12]
 800508a:	b2ca      	uxtb	r2, r1
 800508c:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800508e:	2300      	movs	r3, #0
 8005090:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005092:	e00a      	b.n	80050aa <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	1c53      	adds	r3, r2, #1
 8005098:	60bb      	str	r3, [r7, #8]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	1c59      	adds	r1, r3, #1
 800509e:	60f9      	str	r1, [r7, #12]
 80050a0:	7812      	ldrb	r2, [r2, #0]
 80050a2:	701a      	strb	r2, [r3, #0]
    n++;
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	3301      	adds	r3, #1
 80050a8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d3f0      	bcc.n	8005094 <_EncodeStr+0x74>
  }
  return pPayload;
 80050b2:	68fb      	ldr	r3, [r7, #12]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	371c      	adds	r7, #28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3304      	adds	r3, #4
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80050de:	4b36      	ldr	r3, [pc, #216]	; (80051b8 <_HandleIncomingPacket+0xe0>)
 80050e0:	7e1b      	ldrb	r3, [r3, #24]
 80050e2:	4618      	mov	r0, r3
 80050e4:	1cfb      	adds	r3, r7, #3
 80050e6:	2201      	movs	r2, #1
 80050e8:	4619      	mov	r1, r3
 80050ea:	f7ff fdcd 	bl	8004c88 <SEGGER_RTT_ReadNoLock>
 80050ee:	4603      	mov	r3, r0
 80050f0:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	dd54      	ble.n	80051a2 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80050f8:	78fb      	ldrb	r3, [r7, #3]
 80050fa:	2b80      	cmp	r3, #128	; 0x80
 80050fc:	d032      	beq.n	8005164 <_HandleIncomingPacket+0x8c>
 80050fe:	2b80      	cmp	r3, #128	; 0x80
 8005100:	dc42      	bgt.n	8005188 <_HandleIncomingPacket+0xb0>
 8005102:	2b07      	cmp	r3, #7
 8005104:	dc16      	bgt.n	8005134 <_HandleIncomingPacket+0x5c>
 8005106:	2b00      	cmp	r3, #0
 8005108:	dd3e      	ble.n	8005188 <_HandleIncomingPacket+0xb0>
 800510a:	3b01      	subs	r3, #1
 800510c:	2b06      	cmp	r3, #6
 800510e:	d83b      	bhi.n	8005188 <_HandleIncomingPacket+0xb0>
 8005110:	a201      	add	r2, pc, #4	; (adr r2, 8005118 <_HandleIncomingPacket+0x40>)
 8005112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005116:	bf00      	nop
 8005118:	0800513b 	.word	0x0800513b
 800511c:	08005141 	.word	0x08005141
 8005120:	08005147 	.word	0x08005147
 8005124:	0800514d 	.word	0x0800514d
 8005128:	08005153 	.word	0x08005153
 800512c:	08005159 	.word	0x08005159
 8005130:	0800515f 	.word	0x0800515f
 8005134:	2b7f      	cmp	r3, #127	; 0x7f
 8005136:	d036      	beq.n	80051a6 <_HandleIncomingPacket+0xce>
 8005138:	e026      	b.n	8005188 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800513a:	f000 ff45 	bl	8005fc8 <SEGGER_SYSVIEW_Start>
      break;
 800513e:	e037      	b.n	80051b0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005140:	f000 fffe 	bl	8006140 <SEGGER_SYSVIEW_Stop>
      break;
 8005144:	e034      	b.n	80051b0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005146:	f001 f9d7 	bl	80064f8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800514a:	e031      	b.n	80051b0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800514c:	f001 f99c 	bl	8006488 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005150:	e02e      	b.n	80051b0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005152:	f001 f81b 	bl	800618c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005156:	e02b      	b.n	80051b0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005158:	f001 fc6a 	bl	8006a30 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800515c:	e028      	b.n	80051b0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800515e:	f001 fc49 	bl	80069f4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005162:	e025      	b.n	80051b0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005164:	4b14      	ldr	r3, [pc, #80]	; (80051b8 <_HandleIncomingPacket+0xe0>)
 8005166:	7e1b      	ldrb	r3, [r3, #24]
 8005168:	4618      	mov	r0, r3
 800516a:	1cfb      	adds	r3, r7, #3
 800516c:	2201      	movs	r2, #1
 800516e:	4619      	mov	r1, r3
 8005170:	f7ff fd8a 	bl	8004c88 <SEGGER_RTT_ReadNoLock>
 8005174:	4603      	mov	r3, r0
 8005176:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	dd15      	ble.n	80051aa <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800517e:	78fb      	ldrb	r3, [r7, #3]
 8005180:	4618      	mov	r0, r3
 8005182:	f001 fbb7 	bl	80068f4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005186:	e010      	b.n	80051aa <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005188:	78fb      	ldrb	r3, [r7, #3]
 800518a:	b25b      	sxtb	r3, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	da0e      	bge.n	80051ae <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005190:	4b09      	ldr	r3, [pc, #36]	; (80051b8 <_HandleIncomingPacket+0xe0>)
 8005192:	7e1b      	ldrb	r3, [r3, #24]
 8005194:	4618      	mov	r0, r3
 8005196:	1cfb      	adds	r3, r7, #3
 8005198:	2201      	movs	r2, #1
 800519a:	4619      	mov	r1, r3
 800519c:	f7ff fd74 	bl	8004c88 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80051a0:	e005      	b.n	80051ae <_HandleIncomingPacket+0xd6>
    }
  }
 80051a2:	bf00      	nop
 80051a4:	e004      	b.n	80051b0 <_HandleIncomingPacket+0xd8>
      break;
 80051a6:	bf00      	nop
 80051a8:	e002      	b.n	80051b0 <_HandleIncomingPacket+0xd8>
      break;
 80051aa:	bf00      	nop
 80051ac:	e000      	b.n	80051b0 <_HandleIncomingPacket+0xd8>
      break;
 80051ae:	bf00      	nop
}
 80051b0:	bf00      	nop
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	200182d4 	.word	0x200182d4

080051bc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08c      	sub	sp, #48	; 0x30
 80051c0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80051c2:	2301      	movs	r3, #1
 80051c4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80051c6:	1d3b      	adds	r3, r7, #4
 80051c8:	3301      	adds	r3, #1
 80051ca:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051d0:	4b32      	ldr	r3, [pc, #200]	; (800529c <_TrySendOverflowPacket+0xe0>)
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80051d6:	e00b      	b.n	80051f0 <_TrySendOverflowPacket+0x34>
 80051d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051de:	1c59      	adds	r1, r3, #1
 80051e0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80051e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051e6:	b2d2      	uxtb	r2, r2
 80051e8:	701a      	strb	r2, [r3, #0]
 80051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ec:	09db      	lsrs	r3, r3, #7
 80051ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	2b7f      	cmp	r3, #127	; 0x7f
 80051f4:	d8f0      	bhi.n	80051d8 <_TrySendOverflowPacket+0x1c>
 80051f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f8:	1c5a      	adds	r2, r3, #1
 80051fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051fe:	b2d2      	uxtb	r2, r2
 8005200:	701a      	strb	r2, [r3, #0]
 8005202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005204:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005206:	4b26      	ldr	r3, [pc, #152]	; (80052a0 <_TrySendOverflowPacket+0xe4>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800520c:	4b23      	ldr	r3, [pc, #140]	; (800529c <_TrySendOverflowPacket+0xe0>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	623b      	str	r3, [r7, #32]
 800521e:	e00b      	b.n	8005238 <_TrySendOverflowPacket+0x7c>
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	b2da      	uxtb	r2, r3
 8005224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005226:	1c59      	adds	r1, r3, #1
 8005228:	6279      	str	r1, [r7, #36]	; 0x24
 800522a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800522e:	b2d2      	uxtb	r2, r2
 8005230:	701a      	strb	r2, [r3, #0]
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	09db      	lsrs	r3, r3, #7
 8005236:	623b      	str	r3, [r7, #32]
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	2b7f      	cmp	r3, #127	; 0x7f
 800523c:	d8f0      	bhi.n	8005220 <_TrySendOverflowPacket+0x64>
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	627a      	str	r2, [r7, #36]	; 0x24
 8005244:	6a3a      	ldr	r2, [r7, #32]
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	701a      	strb	r2, [r3, #0]
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800524e:	4b13      	ldr	r3, [pc, #76]	; (800529c <_TrySendOverflowPacket+0xe0>)
 8005250:	785b      	ldrb	r3, [r3, #1]
 8005252:	4618      	mov	r0, r3
 8005254:	1d3b      	adds	r3, r7, #4
 8005256:	69fa      	ldr	r2, [r7, #28]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	461a      	mov	r2, r3
 800525c:	1d3b      	adds	r3, r7, #4
 800525e:	4619      	mov	r1, r3
 8005260:	f7fa ffbe 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005264:	4603      	mov	r3, r0
 8005266:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005268:	f7ff fade 	bl	8004828 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d009      	beq.n	8005286 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005272:	4a0a      	ldr	r2, [pc, #40]	; (800529c <_TrySendOverflowPacket+0xe0>)
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005278:	4b08      	ldr	r3, [pc, #32]	; (800529c <_TrySendOverflowPacket+0xe0>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	3b01      	subs	r3, #1
 800527e:	b2da      	uxtb	r2, r3
 8005280:	4b06      	ldr	r3, [pc, #24]	; (800529c <_TrySendOverflowPacket+0xe0>)
 8005282:	701a      	strb	r2, [r3, #0]
 8005284:	e004      	b.n	8005290 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005286:	4b05      	ldr	r3, [pc, #20]	; (800529c <_TrySendOverflowPacket+0xe0>)
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	3301      	adds	r3, #1
 800528c:	4a03      	ldr	r2, [pc, #12]	; (800529c <_TrySendOverflowPacket+0xe0>)
 800528e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005290:	693b      	ldr	r3, [r7, #16]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3730      	adds	r7, #48	; 0x30
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	200182d4 	.word	0x200182d4
 80052a0:	e0001004 	.word	0xe0001004

080052a4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08a      	sub	sp, #40	; 0x28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80052b0:	4b6d      	ldr	r3, [pc, #436]	; (8005468 <_SendPacket+0x1c4>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d010      	beq.n	80052da <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80052b8:	4b6b      	ldr	r3, [pc, #428]	; (8005468 <_SendPacket+0x1c4>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 80a5 	beq.w	800540c <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80052c2:	4b69      	ldr	r3, [pc, #420]	; (8005468 <_SendPacket+0x1c4>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d109      	bne.n	80052de <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80052ca:	f7ff ff77 	bl	80051bc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80052ce:	4b66      	ldr	r3, [pc, #408]	; (8005468 <_SendPacket+0x1c4>)
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	f040 809c 	bne.w	8005410 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 80052d8:	e001      	b.n	80052de <_SendPacket+0x3a>
    goto Send;
 80052da:	bf00      	nop
 80052dc:	e000      	b.n	80052e0 <_SendPacket+0x3c>
Send:
 80052de:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b1f      	cmp	r3, #31
 80052e4:	d809      	bhi.n	80052fa <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80052e6:	4b60      	ldr	r3, [pc, #384]	; (8005468 <_SendPacket+0x1c4>)
 80052e8:	69da      	ldr	r2, [r3, #28]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	fa22 f303 	lsr.w	r3, r2, r3
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f040 808d 	bne.w	8005414 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b17      	cmp	r3, #23
 80052fe:	d807      	bhi.n	8005310 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	3b01      	subs	r3, #1
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	b2da      	uxtb	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	701a      	strb	r2, [r3, #0]
 800530e:	e03d      	b.n	800538c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	2b7f      	cmp	r3, #127	; 0x7f
 800531c:	d912      	bls.n	8005344 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	09da      	lsrs	r2, r3, #7
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3b01      	subs	r3, #1
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	b2d2      	uxtb	r2, r2
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	b2db      	uxtb	r3, r3
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	3a01      	subs	r2, #1
 8005336:	60fa      	str	r2, [r7, #12]
 8005338:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800533c:	b2da      	uxtb	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	701a      	strb	r2, [r3, #0]
 8005342:	e006      	b.n	8005352 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	3b01      	subs	r3, #1
 8005348:	60fb      	str	r3, [r7, #12]
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	b2da      	uxtb	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b7f      	cmp	r3, #127	; 0x7f
 8005356:	d912      	bls.n	800537e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	09da      	lsrs	r2, r3, #7
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	3b01      	subs	r3, #1
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	b2d2      	uxtb	r2, r2
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	b2db      	uxtb	r3, r3
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	3a01      	subs	r2, #1
 8005370:	60fa      	str	r2, [r7, #12]
 8005372:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005376:	b2da      	uxtb	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	701a      	strb	r2, [r3, #0]
 800537c:	e006      	b.n	800538c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	3b01      	subs	r3, #1
 8005382:	60fb      	str	r3, [r7, #12]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	b2da      	uxtb	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800538c:	4b37      	ldr	r3, [pc, #220]	; (800546c <_SendPacket+0x1c8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005392:	4b35      	ldr	r3, [pc, #212]	; (8005468 <_SendPacket+0x1c4>)
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	627b      	str	r3, [r7, #36]	; 0x24
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	623b      	str	r3, [r7, #32]
 80053a4:	e00b      	b.n	80053be <_SendPacket+0x11a>
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	1c59      	adds	r1, r3, #1
 80053ae:	6279      	str	r1, [r7, #36]	; 0x24
 80053b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	701a      	strb	r2, [r3, #0]
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	09db      	lsrs	r3, r3, #7
 80053bc:	623b      	str	r3, [r7, #32]
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	2b7f      	cmp	r3, #127	; 0x7f
 80053c2:	d8f0      	bhi.n	80053a6 <_SendPacket+0x102>
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	1c5a      	adds	r2, r3, #1
 80053c8:	627a      	str	r2, [r7, #36]	; 0x24
 80053ca:	6a3a      	ldr	r2, [r7, #32]
 80053cc:	b2d2      	uxtb	r2, r2
 80053ce:	701a      	strb	r2, [r3, #0]
 80053d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80053d4:	4b24      	ldr	r3, [pc, #144]	; (8005468 <_SendPacket+0x1c4>)
 80053d6:	785b      	ldrb	r3, [r3, #1]
 80053d8:	4618      	mov	r0, r3
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	461a      	mov	r2, r3
 80053e2:	68f9      	ldr	r1, [r7, #12]
 80053e4:	f7fa fefc 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80053e8:	4603      	mov	r3, r0
 80053ea:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 80053ec:	f7ff fa1c 	bl	8004828 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80053f6:	4a1c      	ldr	r2, [pc, #112]	; (8005468 <_SendPacket+0x1c4>)
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	60d3      	str	r3, [r2, #12]
 80053fc:	e00b      	b.n	8005416 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80053fe:	4b1a      	ldr	r3, [pc, #104]	; (8005468 <_SendPacket+0x1c4>)
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	3301      	adds	r3, #1
 8005404:	b2da      	uxtb	r2, r3
 8005406:	4b18      	ldr	r3, [pc, #96]	; (8005468 <_SendPacket+0x1c4>)
 8005408:	701a      	strb	r2, [r3, #0]
 800540a:	e004      	b.n	8005416 <_SendPacket+0x172>
    goto SendDone;
 800540c:	bf00      	nop
 800540e:	e002      	b.n	8005416 <_SendPacket+0x172>
      goto SendDone;
 8005410:	bf00      	nop
 8005412:	e000      	b.n	8005416 <_SendPacket+0x172>
      goto SendDone;
 8005414:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005416:	4b14      	ldr	r3, [pc, #80]	; (8005468 <_SendPacket+0x1c4>)
 8005418:	7e1b      	ldrb	r3, [r3, #24]
 800541a:	4619      	mov	r1, r3
 800541c:	4a14      	ldr	r2, [pc, #80]	; (8005470 <_SendPacket+0x1cc>)
 800541e:	460b      	mov	r3, r1
 8005420:	005b      	lsls	r3, r3, #1
 8005422:	440b      	add	r3, r1
 8005424:	00db      	lsls	r3, r3, #3
 8005426:	4413      	add	r3, r2
 8005428:	336c      	adds	r3, #108	; 0x6c
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	4b0e      	ldr	r3, [pc, #56]	; (8005468 <_SendPacket+0x1c4>)
 800542e:	7e1b      	ldrb	r3, [r3, #24]
 8005430:	4618      	mov	r0, r3
 8005432:	490f      	ldr	r1, [pc, #60]	; (8005470 <_SendPacket+0x1cc>)
 8005434:	4603      	mov	r3, r0
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	4403      	add	r3, r0
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	440b      	add	r3, r1
 800543e:	3370      	adds	r3, #112	; 0x70
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	429a      	cmp	r2, r3
 8005444:	d00b      	beq.n	800545e <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005446:	4b08      	ldr	r3, [pc, #32]	; (8005468 <_SendPacket+0x1c4>)
 8005448:	789b      	ldrb	r3, [r3, #2]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d107      	bne.n	800545e <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800544e:	4b06      	ldr	r3, [pc, #24]	; (8005468 <_SendPacket+0x1c4>)
 8005450:	2201      	movs	r2, #1
 8005452:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005454:	f7ff fe40 	bl	80050d8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005458:	4b03      	ldr	r3, [pc, #12]	; (8005468 <_SendPacket+0x1c4>)
 800545a:	2200      	movs	r2, #0
 800545c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800545e:	bf00      	nop
 8005460:	3728      	adds	r7, #40	; 0x28
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	200182d4 	.word	0x200182d4
 800546c:	e0001004 	.word	0xe0001004
 8005470:	20018480 	.word	0x20018480

08005474 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005474:	b580      	push	{r7, lr}
 8005476:	b08a      	sub	sp, #40	; 0x28
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	460b      	mov	r3, r1
 800547e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	3301      	adds	r3, #1
 800548a:	2b80      	cmp	r3, #128	; 0x80
 800548c:	d80a      	bhi.n	80054a4 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	1c59      	adds	r1, r3, #1
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	6051      	str	r1, [r2, #4]
 8005498:	78fa      	ldrb	r2, [r7, #3]
 800549a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	2b80      	cmp	r3, #128	; 0x80
 80054aa:	d15a      	bne.n	8005562 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	691a      	ldr	r2, [r3, #16]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	b2d2      	uxtb	r2, r2
 80054b6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	627b      	str	r3, [r7, #36]	; 0x24
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	623b      	str	r3, [r7, #32]
 80054cc:	e00b      	b.n	80054e6 <_StoreChar+0x72>
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	1c59      	adds	r1, r3, #1
 80054d6:	6279      	str	r1, [r7, #36]	; 0x24
 80054d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054dc:	b2d2      	uxtb	r2, r2
 80054de:	701a      	strb	r2, [r3, #0]
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	09db      	lsrs	r3, r3, #7
 80054e4:	623b      	str	r3, [r7, #32]
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	2b7f      	cmp	r3, #127	; 0x7f
 80054ea:	d8f0      	bhi.n	80054ce <_StoreChar+0x5a>
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	1c5a      	adds	r2, r3, #1
 80054f0:	627a      	str	r2, [r7, #36]	; 0x24
 80054f2:	6a3a      	ldr	r2, [r7, #32]
 80054f4:	b2d2      	uxtb	r2, r2
 80054f6:	701a      	strb	r2, [r3, #0]
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	61fb      	str	r3, [r7, #28]
 8005500:	2300      	movs	r3, #0
 8005502:	61bb      	str	r3, [r7, #24]
 8005504:	e00b      	b.n	800551e <_StoreChar+0xaa>
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	b2da      	uxtb	r2, r3
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	1c59      	adds	r1, r3, #1
 800550e:	61f9      	str	r1, [r7, #28]
 8005510:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005514:	b2d2      	uxtb	r2, r2
 8005516:	701a      	strb	r2, [r3, #0]
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	09db      	lsrs	r3, r3, #7
 800551c:	61bb      	str	r3, [r7, #24]
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	2b7f      	cmp	r3, #127	; 0x7f
 8005522:	d8f0      	bhi.n	8005506 <_StoreChar+0x92>
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	1c5a      	adds	r2, r3, #1
 8005528:	61fa      	str	r2, [r7, #28]
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	701a      	strb	r2, [r3, #0]
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	221a      	movs	r2, #26
 800553a:	6939      	ldr	r1, [r7, #16]
 800553c:	4618      	mov	r0, r3
 800553e:	f7ff feb1 	bl	80052a4 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4618      	mov	r0, r3
 8005548:	f7ff fdba 	bl	80050c0 <_PreparePacket>
 800554c:	4602      	mov	r2, r0
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	611a      	str	r2, [r3, #16]
  }
}
 8005562:	bf00      	nop
 8005564:	3728      	adds	r7, #40	; 0x28
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
	...

0800556c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800556c:	b580      	push	{r7, lr}
 800556e:	b08a      	sub	sp, #40	; 0x28
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
 8005578:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800557e:	2301      	movs	r3, #1
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005582:	2301      	movs	r3, #1
 8005584:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005586:	e007      	b.n	8005598 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005588:	6a3a      	ldr	r2, [r7, #32]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005590:	623b      	str	r3, [r7, #32]
    Width++;
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	3301      	adds	r3, #1
 8005596:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005598:	6a3a      	ldr	r2, [r7, #32]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	429a      	cmp	r2, r3
 800559e:	d2f3      	bcs.n	8005588 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d901      	bls.n	80055ac <_PrintUnsigned+0x40>
    Width = NumDigits;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80055ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d11f      	bne.n	80055f6 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d01c      	beq.n	80055f6 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80055bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d005      	beq.n	80055d2 <_PrintUnsigned+0x66>
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d102      	bne.n	80055d2 <_PrintUnsigned+0x66>
        c = '0';
 80055cc:	2330      	movs	r3, #48	; 0x30
 80055ce:	76fb      	strb	r3, [r7, #27]
 80055d0:	e001      	b.n	80055d6 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80055d2:	2320      	movs	r3, #32
 80055d4:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80055d6:	e007      	b.n	80055e8 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055da:	3b01      	subs	r3, #1
 80055dc:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80055de:	7efb      	ldrb	r3, [r7, #27]
 80055e0:	4619      	mov	r1, r3
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f7ff ff46 	bl	8005474 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80055e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <_PrintUnsigned+0x8a>
 80055ee:	69fa      	ldr	r2, [r7, #28]
 80055f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d3f0      	bcc.n	80055d8 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d903      	bls.n	8005604 <_PrintUnsigned+0x98>
      NumDigits--;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	3b01      	subs	r3, #1
 8005600:	603b      	str	r3, [r7, #0]
 8005602:	e009      	b.n	8005618 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	fbb2 f3f3 	udiv	r3, r2, r3
 800560c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	429a      	cmp	r2, r3
 8005614:	d200      	bcs.n	8005618 <_PrintUnsigned+0xac>
        break;
 8005616:	e005      	b.n	8005624 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	fb02 f303 	mul.w	r3, r2, r3
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005622:	e7e8      	b.n	80055f6 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	fbb2 f3f3 	udiv	r3, r2, r3
 800562c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005632:	fb02 f303 	mul.w	r3, r2, r3
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800563c:	4a15      	ldr	r2, [pc, #84]	; (8005694 <_PrintUnsigned+0x128>)
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	4413      	add	r3, r2
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	4619      	mov	r1, r3
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f7ff ff14 	bl	8005474 <_StoreChar>
    Digit /= Base;
 800564c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	fbb2 f3f3 	udiv	r3, r2, r3
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e3      	bne.n	8005624 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800565c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	d011      	beq.n	800568a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00e      	beq.n	800568a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800566c:	e006      	b.n	800567c <_PrintUnsigned+0x110>
        FieldWidth--;
 800566e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005670:	3b01      	subs	r3, #1
 8005672:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005674:	2120      	movs	r1, #32
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f7ff fefc 	bl	8005474 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800567c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <_PrintUnsigned+0x11e>
 8005682:	69fa      	ldr	r2, [r7, #28]
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005686:	429a      	cmp	r2, r3
 8005688:	d3f1      	bcc.n	800566e <_PrintUnsigned+0x102>
      }
    }
  }
}
 800568a:	bf00      	nop
 800568c:	3728      	adds	r7, #40	; 0x28
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	08007690 	.word	0x08007690

08005698 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005698:	b580      	push	{r7, lr}
 800569a:	b088      	sub	sp, #32
 800569c:	af02      	add	r7, sp, #8
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	bfb8      	it	lt
 80056ac:	425b      	neglt	r3, r3
 80056ae:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80056b0:	2301      	movs	r3, #1
 80056b2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80056b4:	e007      	b.n	80056c6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80056be:	613b      	str	r3, [r7, #16]
    Width++;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	3301      	adds	r3, #1
 80056c4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	daf3      	bge.n	80056b6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d901      	bls.n	80056da <_PrintInt+0x42>
    Width = NumDigits;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00a      	beq.n	80056f6 <_PrintInt+0x5e>
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	db04      	blt.n	80056f0 <_PrintInt+0x58>
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d002      	beq.n	80056f6 <_PrintInt+0x5e>
    FieldWidth--;
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	f003 0302 	and.w	r3, r3, #2
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <_PrintInt+0x6e>
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d016      	beq.n	8005734 <_PrintInt+0x9c>
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d111      	bne.n	8005734 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005710:	6a3b      	ldr	r3, [r7, #32]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00e      	beq.n	8005734 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005716:	e006      	b.n	8005726 <_PrintInt+0x8e>
        FieldWidth--;
 8005718:	6a3b      	ldr	r3, [r7, #32]
 800571a:	3b01      	subs	r3, #1
 800571c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800571e:	2120      	movs	r1, #32
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f7ff fea7 	bl	8005474 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <_PrintInt+0x9c>
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	429a      	cmp	r2, r3
 8005732:	d3f1      	bcc.n	8005718 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2b00      	cmp	r3, #0
 8005738:	da07      	bge.n	800574a <_PrintInt+0xb2>
    v = -v;
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	425b      	negs	r3, r3
 800573e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005740:	212d      	movs	r1, #45	; 0x2d
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f7ff fe96 	bl	8005474 <_StoreChar>
 8005748:	e008      	b.n	800575c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800574a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b00      	cmp	r3, #0
 8005752:	d003      	beq.n	800575c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005754:	212b      	movs	r1, #43	; 0x2b
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f7ff fe8c 	bl	8005474 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800575c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d019      	beq.n	800579a <_PrintInt+0x102>
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b00      	cmp	r3, #0
 800576e:	d114      	bne.n	800579a <_PrintInt+0x102>
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d111      	bne.n	800579a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00e      	beq.n	800579a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800577c:	e006      	b.n	800578c <_PrintInt+0xf4>
        FieldWidth--;
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	3b01      	subs	r3, #1
 8005782:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005784:	2130      	movs	r1, #48	; 0x30
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f7ff fe74 	bl	8005474 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800578c:	6a3b      	ldr	r3, [r7, #32]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <_PrintInt+0x102>
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	429a      	cmp	r2, r3
 8005798:	d3f1      	bcc.n	800577e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800579a:	68b9      	ldr	r1, [r7, #8]
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	9301      	str	r3, [sp, #4]
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f7ff fedf 	bl	800556c <_PrintUnsigned>
}
 80057ae:	bf00      	nop
 80057b0:	3718      	adds	r7, #24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
	...

080057b8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b098      	sub	sp, #96	; 0x60
 80057bc:	af02      	add	r7, sp, #8
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80057c4:	f3ef 8311 	mrs	r3, BASEPRI
 80057c8:	f04f 0120 	mov.w	r1, #32
 80057cc:	f381 8811 	msr	BASEPRI, r1
 80057d0:	633b      	str	r3, [r7, #48]	; 0x30
 80057d2:	48b7      	ldr	r0, [pc, #732]	; (8005ab0 <_VPrintTarget+0x2f8>)
 80057d4:	f7ff fc74 	bl	80050c0 <_PreparePacket>
 80057d8:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80057da:	4bb5      	ldr	r3, [pc, #724]	; (8005ab0 <_VPrintTarget+0x2f8>)
 80057dc:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80057de:	2300      	movs	r3, #0
 80057e0:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80057e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e4:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	3301      	adds	r3, #1
 80057ea:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	3301      	adds	r3, #1
 80057fc:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80057fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 8183 	beq.w	8005b0e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005808:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800580c:	2b25      	cmp	r3, #37	; 0x25
 800580e:	f040 8170 	bne.w	8005af2 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005812:	2300      	movs	r3, #0
 8005814:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005816:	2301      	movs	r3, #1
 8005818:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005822:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005826:	3b23      	subs	r3, #35	; 0x23
 8005828:	2b0d      	cmp	r3, #13
 800582a:	d83f      	bhi.n	80058ac <_VPrintTarget+0xf4>
 800582c:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <_VPrintTarget+0x7c>)
 800582e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005832:	bf00      	nop
 8005834:	0800589d 	.word	0x0800589d
 8005838:	080058ad 	.word	0x080058ad
 800583c:	080058ad 	.word	0x080058ad
 8005840:	080058ad 	.word	0x080058ad
 8005844:	080058ad 	.word	0x080058ad
 8005848:	080058ad 	.word	0x080058ad
 800584c:	080058ad 	.word	0x080058ad
 8005850:	080058ad 	.word	0x080058ad
 8005854:	0800588d 	.word	0x0800588d
 8005858:	080058ad 	.word	0x080058ad
 800585c:	0800586d 	.word	0x0800586d
 8005860:	080058ad 	.word	0x080058ad
 8005864:	080058ad 	.word	0x080058ad
 8005868:	0800587d 	.word	0x0800587d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800586c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800586e:	f043 0301 	orr.w	r3, r3, #1
 8005872:	64bb      	str	r3, [r7, #72]	; 0x48
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	3301      	adds	r3, #1
 8005878:	60fb      	str	r3, [r7, #12]
 800587a:	e01a      	b.n	80058b2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800587c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800587e:	f043 0302 	orr.w	r3, r3, #2
 8005882:	64bb      	str	r3, [r7, #72]	; 0x48
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	3301      	adds	r3, #1
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	e012      	b.n	80058b2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800588c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800588e:	f043 0304 	orr.w	r3, r3, #4
 8005892:	64bb      	str	r3, [r7, #72]	; 0x48
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3301      	adds	r3, #1
 8005898:	60fb      	str	r3, [r7, #12]
 800589a:	e00a      	b.n	80058b2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800589c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800589e:	f043 0308 	orr.w	r3, r3, #8
 80058a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	3301      	adds	r3, #1
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	e002      	b.n	80058b2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80058ac:	2300      	movs	r3, #0
 80058ae:	653b      	str	r3, [r7, #80]	; 0x50
 80058b0:	bf00      	nop
        }
      } while (v);
 80058b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1b0      	bne.n	800581a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80058b8:	2300      	movs	r3, #0
 80058ba:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80058c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058c8:	2b2f      	cmp	r3, #47	; 0x2f
 80058ca:	d912      	bls.n	80058f2 <_VPrintTarget+0x13a>
 80058cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058d0:	2b39      	cmp	r3, #57	; 0x39
 80058d2:	d80e      	bhi.n	80058f2 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	3301      	adds	r3, #1
 80058d8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80058da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058dc:	4613      	mov	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4413      	add	r3, r2
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	461a      	mov	r2, r3
 80058e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058ea:	4413      	add	r3, r2
 80058ec:	3b30      	subs	r3, #48	; 0x30
 80058ee:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80058f0:	e7e4      	b.n	80058bc <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80058f2:	2300      	movs	r3, #0
 80058f4:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80058fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005902:	2b2e      	cmp	r3, #46	; 0x2e
 8005904:	d11d      	bne.n	8005942 <_VPrintTarget+0x18a>
        sFormat++;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	3301      	adds	r3, #1
 800590a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005914:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005918:	2b2f      	cmp	r3, #47	; 0x2f
 800591a:	d912      	bls.n	8005942 <_VPrintTarget+0x18a>
 800591c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005920:	2b39      	cmp	r3, #57	; 0x39
 8005922:	d80e      	bhi.n	8005942 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3301      	adds	r3, #1
 8005928:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800592a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800592c:	4613      	mov	r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	4413      	add	r3, r2
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	461a      	mov	r2, r3
 8005936:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800593a:	4413      	add	r3, r2
 800593c:	3b30      	subs	r3, #48	; 0x30
 800593e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005940:	e7e4      	b.n	800590c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800594a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800594e:	2b6c      	cmp	r3, #108	; 0x6c
 8005950:	d003      	beq.n	800595a <_VPrintTarget+0x1a2>
 8005952:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005956:	2b68      	cmp	r3, #104	; 0x68
 8005958:	d107      	bne.n	800596a <_VPrintTarget+0x1b2>
          c = *sFormat;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	3301      	adds	r3, #1
 8005966:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005968:	e7ef      	b.n	800594a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800596a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800596e:	2b25      	cmp	r3, #37	; 0x25
 8005970:	f000 80b3 	beq.w	8005ada <_VPrintTarget+0x322>
 8005974:	2b25      	cmp	r3, #37	; 0x25
 8005976:	f2c0 80b7 	blt.w	8005ae8 <_VPrintTarget+0x330>
 800597a:	2b78      	cmp	r3, #120	; 0x78
 800597c:	f300 80b4 	bgt.w	8005ae8 <_VPrintTarget+0x330>
 8005980:	2b58      	cmp	r3, #88	; 0x58
 8005982:	f2c0 80b1 	blt.w	8005ae8 <_VPrintTarget+0x330>
 8005986:	3b58      	subs	r3, #88	; 0x58
 8005988:	2b20      	cmp	r3, #32
 800598a:	f200 80ad 	bhi.w	8005ae8 <_VPrintTarget+0x330>
 800598e:	a201      	add	r2, pc, #4	; (adr r2, 8005994 <_VPrintTarget+0x1dc>)
 8005990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005994:	08005a8b 	.word	0x08005a8b
 8005998:	08005ae9 	.word	0x08005ae9
 800599c:	08005ae9 	.word	0x08005ae9
 80059a0:	08005ae9 	.word	0x08005ae9
 80059a4:	08005ae9 	.word	0x08005ae9
 80059a8:	08005ae9 	.word	0x08005ae9
 80059ac:	08005ae9 	.word	0x08005ae9
 80059b0:	08005ae9 	.word	0x08005ae9
 80059b4:	08005ae9 	.word	0x08005ae9
 80059b8:	08005ae9 	.word	0x08005ae9
 80059bc:	08005ae9 	.word	0x08005ae9
 80059c0:	08005a19 	.word	0x08005a19
 80059c4:	08005a3f 	.word	0x08005a3f
 80059c8:	08005ae9 	.word	0x08005ae9
 80059cc:	08005ae9 	.word	0x08005ae9
 80059d0:	08005ae9 	.word	0x08005ae9
 80059d4:	08005ae9 	.word	0x08005ae9
 80059d8:	08005ae9 	.word	0x08005ae9
 80059dc:	08005ae9 	.word	0x08005ae9
 80059e0:	08005ae9 	.word	0x08005ae9
 80059e4:	08005ae9 	.word	0x08005ae9
 80059e8:	08005ae9 	.word	0x08005ae9
 80059ec:	08005ae9 	.word	0x08005ae9
 80059f0:	08005ae9 	.word	0x08005ae9
 80059f4:	08005ab5 	.word	0x08005ab5
 80059f8:	08005ae9 	.word	0x08005ae9
 80059fc:	08005ae9 	.word	0x08005ae9
 8005a00:	08005ae9 	.word	0x08005ae9
 8005a04:	08005ae9 	.word	0x08005ae9
 8005a08:	08005a65 	.word	0x08005a65
 8005a0c:	08005ae9 	.word	0x08005ae9
 8005a10:	08005ae9 	.word	0x08005ae9
 8005a14:	08005a8b 	.word	0x08005a8b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	1d19      	adds	r1, r3, #4
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	6011      	str	r1, [r2, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005a2c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005a30:	f107 0314 	add.w	r3, r7, #20
 8005a34:	4611      	mov	r1, r2
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7ff fd1c 	bl	8005474 <_StoreChar>
        break;
 8005a3c:	e055      	b.n	8005aea <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	1d19      	adds	r1, r3, #4
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	6011      	str	r1, [r2, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005a4c:	f107 0014 	add.w	r0, r7, #20
 8005a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a52:	9301      	str	r3, [sp, #4]
 8005a54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a5a:	220a      	movs	r2, #10
 8005a5c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a5e:	f7ff fe1b 	bl	8005698 <_PrintInt>
        break;
 8005a62:	e042      	b.n	8005aea <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	1d19      	adds	r1, r3, #4
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6011      	str	r1, [r2, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005a72:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a74:	f107 0014 	add.w	r0, r7, #20
 8005a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a7a:	9301      	str	r3, [sp, #4]
 8005a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a82:	220a      	movs	r2, #10
 8005a84:	f7ff fd72 	bl	800556c <_PrintUnsigned>
        break;
 8005a88:	e02f      	b.n	8005aea <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	1d19      	adds	r1, r3, #4
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6011      	str	r1, [r2, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005a98:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005a9a:	f107 0014 	add.w	r0, r7, #20
 8005a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aa0:	9301      	str	r3, [sp, #4]
 8005aa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa8:	2210      	movs	r2, #16
 8005aaa:	f7ff fd5f 	bl	800556c <_PrintUnsigned>
        break;
 8005aae:	e01c      	b.n	8005aea <_VPrintTarget+0x332>
 8005ab0:	20018304 	.word	0x20018304
      case 'p':
        v = va_arg(*pParamList, int);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	1d19      	adds	r1, r3, #4
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	6011      	str	r1, [r2, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005ac2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005ac4:	f107 0014 	add.w	r0, r7, #20
 8005ac8:	2300      	movs	r3, #0
 8005aca:	9301      	str	r3, [sp, #4]
 8005acc:	2308      	movs	r3, #8
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	2308      	movs	r3, #8
 8005ad2:	2210      	movs	r2, #16
 8005ad4:	f7ff fd4a 	bl	800556c <_PrintUnsigned>
        break;
 8005ad8:	e007      	b.n	8005aea <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005ada:	f107 0314 	add.w	r3, r7, #20
 8005ade:	2125      	movs	r1, #37	; 0x25
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7ff fcc7 	bl	8005474 <_StoreChar>
        break;
 8005ae6:	e000      	b.n	8005aea <_VPrintTarget+0x332>
      default:
        break;
 8005ae8:	bf00      	nop
      }
      sFormat++;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	3301      	adds	r3, #1
 8005aee:	60fb      	str	r3, [r7, #12]
 8005af0:	e007      	b.n	8005b02 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005af2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005af6:	f107 0314 	add.w	r3, r7, #20
 8005afa:	4611      	mov	r1, r2
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7ff fcb9 	bl	8005474 <_StoreChar>
    }
  } while (*sFormat);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f47f ae72 	bne.w	80057f0 <_VPrintTarget+0x38>
 8005b0c:	e000      	b.n	8005b10 <_VPrintTarget+0x358>
      break;
 8005b0e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d041      	beq.n	8005b9a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	b2d2      	uxtb	r2, r2
 8005b1c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	643b      	str	r3, [r7, #64]	; 0x40
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b26:	e00b      	b.n	8005b40 <_VPrintTarget+0x388>
 8005b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b2e:	1c59      	adds	r1, r3, #1
 8005b30:	6439      	str	r1, [r7, #64]	; 0x40
 8005b32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b36:	b2d2      	uxtb	r2, r2
 8005b38:	701a      	strb	r2, [r3, #0]
 8005b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b3c:	09db      	lsrs	r3, r3, #7
 8005b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b42:	2b7f      	cmp	r3, #127	; 0x7f
 8005b44:	d8f0      	bhi.n	8005b28 <_VPrintTarget+0x370>
 8005b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	643a      	str	r2, [r7, #64]	; 0x40
 8005b4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b4e:	b2d2      	uxtb	r2, r2
 8005b50:	701a      	strb	r2, [r3, #0]
 8005b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b54:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b5e:	e00b      	b.n	8005b78 <_VPrintTarget+0x3c0>
 8005b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b66:	1c59      	adds	r1, r3, #1
 8005b68:	63b9      	str	r1, [r7, #56]	; 0x38
 8005b6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b6e:	b2d2      	uxtb	r2, r2
 8005b70:	701a      	strb	r2, [r3, #0]
 8005b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b74:	09db      	lsrs	r3, r3, #7
 8005b76:	637b      	str	r3, [r7, #52]	; 0x34
 8005b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b7a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b7c:	d8f0      	bhi.n	8005b60 <_VPrintTarget+0x3a8>
 8005b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	63ba      	str	r2, [r7, #56]	; 0x38
 8005b84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b86:	b2d2      	uxtb	r2, r2
 8005b88:	701a      	strb	r2, [r3, #0]
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	69b9      	ldr	r1, [r7, #24]
 8005b92:	221a      	movs	r2, #26
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7ff fb85 	bl	80052a4 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005ba0:	bf00      	nop
 8005ba2:	3758      	adds	r7, #88	; 0x58
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af02      	add	r7, sp, #8
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
 8005bb4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8005bbc:	4917      	ldr	r1, [pc, #92]	; (8005c1c <SEGGER_SYSVIEW_Init+0x74>)
 8005bbe:	4818      	ldr	r0, [pc, #96]	; (8005c20 <SEGGER_SYSVIEW_Init+0x78>)
 8005bc0:	f7ff f95e 	bl	8004e80 <SEGGER_RTT_AllocUpBuffer>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	b2da      	uxtb	r2, r3
 8005bc8:	4b16      	ldr	r3, [pc, #88]	; (8005c24 <SEGGER_SYSVIEW_Init+0x7c>)
 8005bca:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005bcc:	4b15      	ldr	r3, [pc, #84]	; (8005c24 <SEGGER_SYSVIEW_Init+0x7c>)
 8005bce:	785a      	ldrb	r2, [r3, #1]
 8005bd0:	4b14      	ldr	r3, [pc, #80]	; (8005c24 <SEGGER_SYSVIEW_Init+0x7c>)
 8005bd2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005bd4:	4b13      	ldr	r3, [pc, #76]	; (8005c24 <SEGGER_SYSVIEW_Init+0x7c>)
 8005bd6:	7e1b      	ldrb	r3, [r3, #24]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	2300      	movs	r3, #0
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	2308      	movs	r3, #8
 8005be0:	4a11      	ldr	r2, [pc, #68]	; (8005c28 <SEGGER_SYSVIEW_Init+0x80>)
 8005be2:	490f      	ldr	r1, [pc, #60]	; (8005c20 <SEGGER_SYSVIEW_Init+0x78>)
 8005be4:	f7ff f9d0 	bl	8004f88 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005be8:	4b0e      	ldr	r3, [pc, #56]	; (8005c24 <SEGGER_SYSVIEW_Init+0x7c>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005bee:	4b0f      	ldr	r3, [pc, #60]	; (8005c2c <SEGGER_SYSVIEW_Init+0x84>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a0c      	ldr	r2, [pc, #48]	; (8005c24 <SEGGER_SYSVIEW_Init+0x7c>)
 8005bf4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005bf6:	4a0b      	ldr	r2, [pc, #44]	; (8005c24 <SEGGER_SYSVIEW_Init+0x7c>)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005bfc:	4a09      	ldr	r2, [pc, #36]	; (8005c24 <SEGGER_SYSVIEW_Init+0x7c>)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005c02:	4a08      	ldr	r2, [pc, #32]	; (8005c24 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005c08:	4a06      	ldr	r2, [pc, #24]	; (8005c24 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005c0e:	4b05      	ldr	r3, [pc, #20]	; (8005c24 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005c14:	bf00      	nop
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	200132cc 	.word	0x200132cc
 8005c20:	08007658 	.word	0x08007658
 8005c24:	200182d4 	.word	0x200182d4
 8005c28:	200182cc 	.word	0x200182cc
 8005c2c:	e0001004 	.word	0xe0001004

08005c30 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005c38:	4a04      	ldr	r2, [pc, #16]	; (8005c4c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6113      	str	r3, [r2, #16]
}
 8005c3e:	bf00      	nop
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	200182d4 	.word	0x200182d4

08005c50 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c58:	f3ef 8311 	mrs	r3, BASEPRI
 8005c5c:	f04f 0120 	mov.w	r1, #32
 8005c60:	f381 8811 	msr	BASEPRI, r1
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	4808      	ldr	r0, [pc, #32]	; (8005c88 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005c68:	f7ff fa2a 	bl	80050c0 <_PreparePacket>
 8005c6c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	68b9      	ldr	r1, [r7, #8]
 8005c72:	68b8      	ldr	r0, [r7, #8]
 8005c74:	f7ff fb16 	bl	80052a4 <_SendPacket>
  RECORD_END();
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f383 8811 	msr	BASEPRI, r3
}
 8005c7e:	bf00      	nop
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	20018304 	.word	0x20018304

08005c8c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b088      	sub	sp, #32
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005c96:	f3ef 8311 	mrs	r3, BASEPRI
 8005c9a:	f04f 0120 	mov.w	r1, #32
 8005c9e:	f381 8811 	msr	BASEPRI, r1
 8005ca2:	617b      	str	r3, [r7, #20]
 8005ca4:	4816      	ldr	r0, [pc, #88]	; (8005d00 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005ca6:	f7ff fa0b 	bl	80050c0 <_PreparePacket>
 8005caa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	61fb      	str	r3, [r7, #28]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	61bb      	str	r3, [r7, #24]
 8005cb8:	e00b      	b.n	8005cd2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	1c59      	adds	r1, r3, #1
 8005cc2:	61f9      	str	r1, [r7, #28]
 8005cc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005cc8:	b2d2      	uxtb	r2, r2
 8005cca:	701a      	strb	r2, [r3, #0]
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	09db      	lsrs	r3, r3, #7
 8005cd0:	61bb      	str	r3, [r7, #24]
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8005cd6:	d8f0      	bhi.n	8005cba <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	1c5a      	adds	r2, r3, #1
 8005cdc:	61fa      	str	r2, [r7, #28]
 8005cde:	69ba      	ldr	r2, [r7, #24]
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	701a      	strb	r2, [r3, #0]
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	68f9      	ldr	r1, [r7, #12]
 8005cec:	6938      	ldr	r0, [r7, #16]
 8005cee:	f7ff fad9 	bl	80052a4 <_SendPacket>
  RECORD_END();
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f383 8811 	msr	BASEPRI, r3
}
 8005cf8:	bf00      	nop
 8005cfa:	3720      	adds	r7, #32
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	20018304 	.word	0x20018304

08005d04 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b08c      	sub	sp, #48	; 0x30
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d10:	f3ef 8311 	mrs	r3, BASEPRI
 8005d14:	f04f 0120 	mov.w	r1, #32
 8005d18:	f381 8811 	msr	BASEPRI, r1
 8005d1c:	61fb      	str	r3, [r7, #28]
 8005d1e:	4825      	ldr	r0, [pc, #148]	; (8005db4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005d20:	f7ff f9ce 	bl	80050c0 <_PreparePacket>
 8005d24:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d32:	e00b      	b.n	8005d4c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3a:	1c59      	adds	r1, r3, #1
 8005d3c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d42:	b2d2      	uxtb	r2, r2
 8005d44:	701a      	strb	r2, [r3, #0]
 8005d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d48:	09db      	lsrs	r3, r3, #7
 8005d4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d50:	d8f0      	bhi.n	8005d34 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	701a      	strb	r2, [r3, #0]
 8005d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d60:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	627b      	str	r3, [r7, #36]	; 0x24
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	623b      	str	r3, [r7, #32]
 8005d6a:	e00b      	b.n	8005d84 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005d6c:	6a3b      	ldr	r3, [r7, #32]
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	1c59      	adds	r1, r3, #1
 8005d74:	6279      	str	r1, [r7, #36]	; 0x24
 8005d76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d7a:	b2d2      	uxtb	r2, r2
 8005d7c:	701a      	strb	r2, [r3, #0]
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	09db      	lsrs	r3, r3, #7
 8005d82:	623b      	str	r3, [r7, #32]
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	2b7f      	cmp	r3, #127	; 0x7f
 8005d88:	d8f0      	bhi.n	8005d6c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	627a      	str	r2, [r7, #36]	; 0x24
 8005d90:	6a3a      	ldr	r2, [r7, #32]
 8005d92:	b2d2      	uxtb	r2, r2
 8005d94:	701a      	strb	r2, [r3, #0]
 8005d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d98:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	6979      	ldr	r1, [r7, #20]
 8005d9e:	69b8      	ldr	r0, [r7, #24]
 8005da0:	f7ff fa80 	bl	80052a4 <_SendPacket>
  RECORD_END();
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f383 8811 	msr	BASEPRI, r3
}
 8005daa:	bf00      	nop
 8005dac:	3730      	adds	r7, #48	; 0x30
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	20018304 	.word	0x20018304

08005db8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b08e      	sub	sp, #56	; 0x38
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005dc6:	f3ef 8311 	mrs	r3, BASEPRI
 8005dca:	f04f 0120 	mov.w	r1, #32
 8005dce:	f381 8811 	msr	BASEPRI, r1
 8005dd2:	61fb      	str	r3, [r7, #28]
 8005dd4:	4832      	ldr	r0, [pc, #200]	; (8005ea0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005dd6:	f7ff f973 	bl	80050c0 <_PreparePacket>
 8005dda:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	637b      	str	r3, [r7, #52]	; 0x34
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	633b      	str	r3, [r7, #48]	; 0x30
 8005de8:	e00b      	b.n	8005e02 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df0:	1c59      	adds	r1, r3, #1
 8005df2:	6379      	str	r1, [r7, #52]	; 0x34
 8005df4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005df8:	b2d2      	uxtb	r2, r2
 8005dfa:	701a      	strb	r2, [r3, #0]
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	09db      	lsrs	r3, r3, #7
 8005e00:	633b      	str	r3, [r7, #48]	; 0x30
 8005e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e04:	2b7f      	cmp	r3, #127	; 0x7f
 8005e06:	d8f0      	bhi.n	8005dea <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	637a      	str	r2, [r7, #52]	; 0x34
 8005e0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e10:	b2d2      	uxtb	r2, r2
 8005e12:	701a      	strb	r2, [r3, #0]
 8005e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e16:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e20:	e00b      	b.n	8005e3a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e28:	1c59      	adds	r1, r3, #1
 8005e2a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e30:	b2d2      	uxtb	r2, r2
 8005e32:	701a      	strb	r2, [r3, #0]
 8005e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e36:	09db      	lsrs	r3, r3, #7
 8005e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3c:	2b7f      	cmp	r3, #127	; 0x7f
 8005e3e:	d8f0      	bhi.n	8005e22 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e42:	1c5a      	adds	r2, r3, #1
 8005e44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e48:	b2d2      	uxtb	r2, r2
 8005e4a:	701a      	strb	r2, [r3, #0]
 8005e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	627b      	str	r3, [r7, #36]	; 0x24
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	623b      	str	r3, [r7, #32]
 8005e58:	e00b      	b.n	8005e72 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	1c59      	adds	r1, r3, #1
 8005e62:	6279      	str	r1, [r7, #36]	; 0x24
 8005e64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e68:	b2d2      	uxtb	r2, r2
 8005e6a:	701a      	strb	r2, [r3, #0]
 8005e6c:	6a3b      	ldr	r3, [r7, #32]
 8005e6e:	09db      	lsrs	r3, r3, #7
 8005e70:	623b      	str	r3, [r7, #32]
 8005e72:	6a3b      	ldr	r3, [r7, #32]
 8005e74:	2b7f      	cmp	r3, #127	; 0x7f
 8005e76:	d8f0      	bhi.n	8005e5a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	627a      	str	r2, [r7, #36]	; 0x24
 8005e7e:	6a3a      	ldr	r2, [r7, #32]
 8005e80:	b2d2      	uxtb	r2, r2
 8005e82:	701a      	strb	r2, [r3, #0]
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	6979      	ldr	r1, [r7, #20]
 8005e8c:	69b8      	ldr	r0, [r7, #24]
 8005e8e:	f7ff fa09 	bl	80052a4 <_SendPacket>
  RECORD_END();
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	f383 8811 	msr	BASEPRI, r3
}
 8005e98:	bf00      	nop
 8005e9a:	3738      	adds	r7, #56	; 0x38
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	20018304 	.word	0x20018304

08005ea4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b090      	sub	sp, #64	; 0x40
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
 8005eb0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005eb2:	f3ef 8311 	mrs	r3, BASEPRI
 8005eb6:	f04f 0120 	mov.w	r1, #32
 8005eba:	f381 8811 	msr	BASEPRI, r1
 8005ebe:	61fb      	str	r3, [r7, #28]
 8005ec0:	4840      	ldr	r0, [pc, #256]	; (8005fc4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005ec2:	f7ff f8fd 	bl	80050c0 <_PreparePacket>
 8005ec6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ed4:	e00b      	b.n	8005eee <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005edc:	1c59      	adds	r1, r3, #1
 8005ede:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005ee0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	701a      	strb	r2, [r3, #0]
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eea:	09db      	lsrs	r3, r3, #7
 8005eec:	63bb      	str	r3, [r7, #56]	; 0x38
 8005eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ef2:	d8f0      	bhi.n	8005ed6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005efa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005efc:	b2d2      	uxtb	r2, r2
 8005efe:	701a      	strb	r2, [r3, #0]
 8005f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f02:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	637b      	str	r3, [r7, #52]	; 0x34
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	633b      	str	r3, [r7, #48]	; 0x30
 8005f0c:	e00b      	b.n	8005f26 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f14:	1c59      	adds	r1, r3, #1
 8005f16:	6379      	str	r1, [r7, #52]	; 0x34
 8005f18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f1c:	b2d2      	uxtb	r2, r2
 8005f1e:	701a      	strb	r2, [r3, #0]
 8005f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f22:	09db      	lsrs	r3, r3, #7
 8005f24:	633b      	str	r3, [r7, #48]	; 0x30
 8005f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f28:	2b7f      	cmp	r3, #127	; 0x7f
 8005f2a:	d8f0      	bhi.n	8005f0e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2e:	1c5a      	adds	r2, r3, #1
 8005f30:	637a      	str	r2, [r7, #52]	; 0x34
 8005f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f34:	b2d2      	uxtb	r2, r2
 8005f36:	701a      	strb	r2, [r3, #0]
 8005f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f44:	e00b      	b.n	8005f5e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4c:	1c59      	adds	r1, r3, #1
 8005f4e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005f50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f54:	b2d2      	uxtb	r2, r2
 8005f56:	701a      	strb	r2, [r3, #0]
 8005f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5a:	09db      	lsrs	r3, r3, #7
 8005f5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f60:	2b7f      	cmp	r3, #127	; 0x7f
 8005f62:	d8f0      	bhi.n	8005f46 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f6c:	b2d2      	uxtb	r2, r2
 8005f6e:	701a      	strb	r2, [r3, #0]
 8005f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f72:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	627b      	str	r3, [r7, #36]	; 0x24
 8005f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f7a:	623b      	str	r3, [r7, #32]
 8005f7c:	e00b      	b.n	8005f96 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	1c59      	adds	r1, r3, #1
 8005f86:	6279      	str	r1, [r7, #36]	; 0x24
 8005f88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	701a      	strb	r2, [r3, #0]
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	09db      	lsrs	r3, r3, #7
 8005f94:	623b      	str	r3, [r7, #32]
 8005f96:	6a3b      	ldr	r3, [r7, #32]
 8005f98:	2b7f      	cmp	r3, #127	; 0x7f
 8005f9a:	d8f0      	bhi.n	8005f7e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	627a      	str	r2, [r7, #36]	; 0x24
 8005fa2:	6a3a      	ldr	r2, [r7, #32]
 8005fa4:	b2d2      	uxtb	r2, r2
 8005fa6:	701a      	strb	r2, [r3, #0]
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	6979      	ldr	r1, [r7, #20]
 8005fb0:	69b8      	ldr	r0, [r7, #24]
 8005fb2:	f7ff f977 	bl	80052a4 <_SendPacket>
  RECORD_END();
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	f383 8811 	msr	BASEPRI, r3
}
 8005fbc:	bf00      	nop
 8005fbe:	3740      	adds	r7, #64	; 0x40
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	20018304 	.word	0x20018304

08005fc8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b08c      	sub	sp, #48	; 0x30
 8005fcc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005fce:	4b59      	ldr	r3, [pc, #356]	; (8006134 <SEGGER_SYSVIEW_Start+0x16c>)
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005fd4:	f3ef 8311 	mrs	r3, BASEPRI
 8005fd8:	f04f 0120 	mov.w	r1, #32
 8005fdc:	f381 8811 	msr	BASEPRI, r1
 8005fe0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005fe2:	4b54      	ldr	r3, [pc, #336]	; (8006134 <SEGGER_SYSVIEW_Start+0x16c>)
 8005fe4:	785b      	ldrb	r3, [r3, #1]
 8005fe6:	220a      	movs	r2, #10
 8005fe8:	4953      	ldr	r1, [pc, #332]	; (8006138 <SEGGER_SYSVIEW_Start+0x170>)
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fa f8f8 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8005ff6:	f7fe fc17 	bl	8004828 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005ffa:	200a      	movs	r0, #10
 8005ffc:	f7ff fe28 	bl	8005c50 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006000:	f3ef 8311 	mrs	r3, BASEPRI
 8006004:	f04f 0120 	mov.w	r1, #32
 8006008:	f381 8811 	msr	BASEPRI, r1
 800600c:	60bb      	str	r3, [r7, #8]
 800600e:	484b      	ldr	r0, [pc, #300]	; (800613c <SEGGER_SYSVIEW_Start+0x174>)
 8006010:	f7ff f856 	bl	80050c0 <_PreparePacket>
 8006014:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800601e:	4b45      	ldr	r3, [pc, #276]	; (8006134 <SEGGER_SYSVIEW_Start+0x16c>)
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	62bb      	str	r3, [r7, #40]	; 0x28
 8006024:	e00b      	b.n	800603e <SEGGER_SYSVIEW_Start+0x76>
 8006026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006028:	b2da      	uxtb	r2, r3
 800602a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800602c:	1c59      	adds	r1, r3, #1
 800602e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006030:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006034:	b2d2      	uxtb	r2, r2
 8006036:	701a      	strb	r2, [r3, #0]
 8006038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800603a:	09db      	lsrs	r3, r3, #7
 800603c:	62bb      	str	r3, [r7, #40]	; 0x28
 800603e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006040:	2b7f      	cmp	r3, #127	; 0x7f
 8006042:	d8f0      	bhi.n	8006026 <SEGGER_SYSVIEW_Start+0x5e>
 8006044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006046:	1c5a      	adds	r2, r3, #1
 8006048:	62fa      	str	r2, [r7, #44]	; 0x2c
 800604a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800604c:	b2d2      	uxtb	r2, r2
 800604e:	701a      	strb	r2, [r3, #0]
 8006050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006052:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	627b      	str	r3, [r7, #36]	; 0x24
 8006058:	4b36      	ldr	r3, [pc, #216]	; (8006134 <SEGGER_SYSVIEW_Start+0x16c>)
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	623b      	str	r3, [r7, #32]
 800605e:	e00b      	b.n	8006078 <SEGGER_SYSVIEW_Start+0xb0>
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	b2da      	uxtb	r2, r3
 8006064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006066:	1c59      	adds	r1, r3, #1
 8006068:	6279      	str	r1, [r7, #36]	; 0x24
 800606a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800606e:	b2d2      	uxtb	r2, r2
 8006070:	701a      	strb	r2, [r3, #0]
 8006072:	6a3b      	ldr	r3, [r7, #32]
 8006074:	09db      	lsrs	r3, r3, #7
 8006076:	623b      	str	r3, [r7, #32]
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	2b7f      	cmp	r3, #127	; 0x7f
 800607c:	d8f0      	bhi.n	8006060 <SEGGER_SYSVIEW_Start+0x98>
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	1c5a      	adds	r2, r3, #1
 8006082:	627a      	str	r2, [r7, #36]	; 0x24
 8006084:	6a3a      	ldr	r2, [r7, #32]
 8006086:	b2d2      	uxtb	r2, r2
 8006088:	701a      	strb	r2, [r3, #0]
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	61fb      	str	r3, [r7, #28]
 8006092:	4b28      	ldr	r3, [pc, #160]	; (8006134 <SEGGER_SYSVIEW_Start+0x16c>)
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	61bb      	str	r3, [r7, #24]
 8006098:	e00b      	b.n	80060b2 <SEGGER_SYSVIEW_Start+0xea>
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	b2da      	uxtb	r2, r3
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	1c59      	adds	r1, r3, #1
 80060a2:	61f9      	str	r1, [r7, #28]
 80060a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	701a      	strb	r2, [r3, #0]
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	09db      	lsrs	r3, r3, #7
 80060b0:	61bb      	str	r3, [r7, #24]
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	2b7f      	cmp	r3, #127	; 0x7f
 80060b6:	d8f0      	bhi.n	800609a <SEGGER_SYSVIEW_Start+0xd2>
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	61fa      	str	r2, [r7, #28]
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	701a      	strb	r2, [r3, #0]
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	2300      	movs	r3, #0
 80060ce:	613b      	str	r3, [r7, #16]
 80060d0:	e00b      	b.n	80060ea <SEGGER_SYSVIEW_Start+0x122>
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	b2da      	uxtb	r2, r3
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	1c59      	adds	r1, r3, #1
 80060da:	6179      	str	r1, [r7, #20]
 80060dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060e0:	b2d2      	uxtb	r2, r2
 80060e2:	701a      	strb	r2, [r3, #0]
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	09db      	lsrs	r3, r3, #7
 80060e8:	613b      	str	r3, [r7, #16]
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	2b7f      	cmp	r3, #127	; 0x7f
 80060ee:	d8f0      	bhi.n	80060d2 <SEGGER_SYSVIEW_Start+0x10a>
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	1c5a      	adds	r2, r3, #1
 80060f4:	617a      	str	r2, [r7, #20]
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	b2d2      	uxtb	r2, r2
 80060fa:	701a      	strb	r2, [r3, #0]
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006100:	2218      	movs	r2, #24
 8006102:	6839      	ldr	r1, [r7, #0]
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f7ff f8cd 	bl	80052a4 <_SendPacket>
      RECORD_END();
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006110:	4b08      	ldr	r3, [pc, #32]	; (8006134 <SEGGER_SYSVIEW_Start+0x16c>)
 8006112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006118:	4b06      	ldr	r3, [pc, #24]	; (8006134 <SEGGER_SYSVIEW_Start+0x16c>)
 800611a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800611e:	f000 f9eb 	bl	80064f8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006122:	f000 f9b1 	bl	8006488 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006126:	f000 fc83 	bl	8006a30 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800612a:	bf00      	nop
 800612c:	3730      	adds	r7, #48	; 0x30
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	200182d4 	.word	0x200182d4
 8006138:	08007684 	.word	0x08007684
 800613c:	20018304 	.word	0x20018304

08006140 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006146:	f3ef 8311 	mrs	r3, BASEPRI
 800614a:	f04f 0120 	mov.w	r1, #32
 800614e:	f381 8811 	msr	BASEPRI, r1
 8006152:	607b      	str	r3, [r7, #4]
 8006154:	480b      	ldr	r0, [pc, #44]	; (8006184 <SEGGER_SYSVIEW_Stop+0x44>)
 8006156:	f7fe ffb3 	bl	80050c0 <_PreparePacket>
 800615a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800615c:	4b0a      	ldr	r3, [pc, #40]	; (8006188 <SEGGER_SYSVIEW_Stop+0x48>)
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d007      	beq.n	8006174 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006164:	220b      	movs	r2, #11
 8006166:	6839      	ldr	r1, [r7, #0]
 8006168:	6838      	ldr	r0, [r7, #0]
 800616a:	f7ff f89b 	bl	80052a4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800616e:	4b06      	ldr	r3, [pc, #24]	; (8006188 <SEGGER_SYSVIEW_Stop+0x48>)
 8006170:	2200      	movs	r2, #0
 8006172:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f383 8811 	msr	BASEPRI, r3
}
 800617a:	bf00      	nop
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	20018304 	.word	0x20018304
 8006188:	200182d4 	.word	0x200182d4

0800618c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800618c:	b580      	push	{r7, lr}
 800618e:	b08c      	sub	sp, #48	; 0x30
 8006190:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006192:	f3ef 8311 	mrs	r3, BASEPRI
 8006196:	f04f 0120 	mov.w	r1, #32
 800619a:	f381 8811 	msr	BASEPRI, r1
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	4845      	ldr	r0, [pc, #276]	; (80062b8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80061a2:	f7fe ff8d 	bl	80050c0 <_PreparePacket>
 80061a6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061b0:	4b42      	ldr	r3, [pc, #264]	; (80062bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80061b6:	e00b      	b.n	80061d0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ba:	b2da      	uxtb	r2, r3
 80061bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061be:	1c59      	adds	r1, r3, #1
 80061c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80061c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061c6:	b2d2      	uxtb	r2, r2
 80061c8:	701a      	strb	r2, [r3, #0]
 80061ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061cc:	09db      	lsrs	r3, r3, #7
 80061ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80061d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d2:	2b7f      	cmp	r3, #127	; 0x7f
 80061d4:	d8f0      	bhi.n	80061b8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80061d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d8:	1c5a      	adds	r2, r3, #1
 80061da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80061dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061de:	b2d2      	uxtb	r2, r2
 80061e0:	701a      	strb	r2, [r3, #0]
 80061e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	627b      	str	r3, [r7, #36]	; 0x24
 80061ea:	4b34      	ldr	r3, [pc, #208]	; (80062bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	623b      	str	r3, [r7, #32]
 80061f0:	e00b      	b.n	800620a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80061f2:	6a3b      	ldr	r3, [r7, #32]
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	1c59      	adds	r1, r3, #1
 80061fa:	6279      	str	r1, [r7, #36]	; 0x24
 80061fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006200:	b2d2      	uxtb	r2, r2
 8006202:	701a      	strb	r2, [r3, #0]
 8006204:	6a3b      	ldr	r3, [r7, #32]
 8006206:	09db      	lsrs	r3, r3, #7
 8006208:	623b      	str	r3, [r7, #32]
 800620a:	6a3b      	ldr	r3, [r7, #32]
 800620c:	2b7f      	cmp	r3, #127	; 0x7f
 800620e:	d8f0      	bhi.n	80061f2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006212:	1c5a      	adds	r2, r3, #1
 8006214:	627a      	str	r2, [r7, #36]	; 0x24
 8006216:	6a3a      	ldr	r2, [r7, #32]
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	701a      	strb	r2, [r3, #0]
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	61fb      	str	r3, [r7, #28]
 8006224:	4b25      	ldr	r3, [pc, #148]	; (80062bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	61bb      	str	r3, [r7, #24]
 800622a:	e00b      	b.n	8006244 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	b2da      	uxtb	r2, r3
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	1c59      	adds	r1, r3, #1
 8006234:	61f9      	str	r1, [r7, #28]
 8006236:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800623a:	b2d2      	uxtb	r2, r2
 800623c:	701a      	strb	r2, [r3, #0]
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	09db      	lsrs	r3, r3, #7
 8006242:	61bb      	str	r3, [r7, #24]
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	2b7f      	cmp	r3, #127	; 0x7f
 8006248:	d8f0      	bhi.n	800622c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	1c5a      	adds	r2, r3, #1
 800624e:	61fa      	str	r2, [r7, #28]
 8006250:	69ba      	ldr	r2, [r7, #24]
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	701a      	strb	r2, [r3, #0]
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	617b      	str	r3, [r7, #20]
 800625e:	2300      	movs	r3, #0
 8006260:	613b      	str	r3, [r7, #16]
 8006262:	e00b      	b.n	800627c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	b2da      	uxtb	r2, r3
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	1c59      	adds	r1, r3, #1
 800626c:	6179      	str	r1, [r7, #20]
 800626e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006272:	b2d2      	uxtb	r2, r2
 8006274:	701a      	strb	r2, [r3, #0]
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	09db      	lsrs	r3, r3, #7
 800627a:	613b      	str	r3, [r7, #16]
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	2b7f      	cmp	r3, #127	; 0x7f
 8006280:	d8f0      	bhi.n	8006264 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	1c5a      	adds	r2, r3, #1
 8006286:	617a      	str	r2, [r7, #20]
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	b2d2      	uxtb	r2, r2
 800628c:	701a      	strb	r2, [r3, #0]
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006292:	2218      	movs	r2, #24
 8006294:	6879      	ldr	r1, [r7, #4]
 8006296:	68b8      	ldr	r0, [r7, #8]
 8006298:	f7ff f804 	bl	80052a4 <_SendPacket>
  RECORD_END();
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80062a2:	4b06      	ldr	r3, [pc, #24]	; (80062bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80062aa:	4b04      	ldr	r3, [pc, #16]	; (80062bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	4798      	blx	r3
  }
}
 80062b0:	bf00      	nop
 80062b2:	3730      	adds	r7, #48	; 0x30
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	20018304 	.word	0x20018304
 80062bc:	200182d4 	.word	0x200182d4

080062c0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b092      	sub	sp, #72	; 0x48
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80062c8:	f3ef 8311 	mrs	r3, BASEPRI
 80062cc:	f04f 0120 	mov.w	r1, #32
 80062d0:	f381 8811 	msr	BASEPRI, r1
 80062d4:	617b      	str	r3, [r7, #20]
 80062d6:	486a      	ldr	r0, [pc, #424]	; (8006480 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80062d8:	f7fe fef2 	bl	80050c0 <_PreparePacket>
 80062dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	647b      	str	r3, [r7, #68]	; 0x44
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	4b66      	ldr	r3, [pc, #408]	; (8006484 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	643b      	str	r3, [r7, #64]	; 0x40
 80062f2:	e00b      	b.n	800630c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80062f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062f6:	b2da      	uxtb	r2, r3
 80062f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062fa:	1c59      	adds	r1, r3, #1
 80062fc:	6479      	str	r1, [r7, #68]	; 0x44
 80062fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006302:	b2d2      	uxtb	r2, r2
 8006304:	701a      	strb	r2, [r3, #0]
 8006306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006308:	09db      	lsrs	r3, r3, #7
 800630a:	643b      	str	r3, [r7, #64]	; 0x40
 800630c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800630e:	2b7f      	cmp	r3, #127	; 0x7f
 8006310:	d8f0      	bhi.n	80062f4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006312:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006314:	1c5a      	adds	r2, r3, #1
 8006316:	647a      	str	r2, [r7, #68]	; 0x44
 8006318:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800631a:	b2d2      	uxtb	r2, r2
 800631c:	701a      	strb	r2, [r3, #0]
 800631e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006320:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	63bb      	str	r3, [r7, #56]	; 0x38
 800632c:	e00b      	b.n	8006346 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800632e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006330:	b2da      	uxtb	r2, r3
 8006332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006334:	1c59      	adds	r1, r3, #1
 8006336:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006338:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800633c:	b2d2      	uxtb	r2, r2
 800633e:	701a      	strb	r2, [r3, #0]
 8006340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006342:	09db      	lsrs	r3, r3, #7
 8006344:	63bb      	str	r3, [r7, #56]	; 0x38
 8006346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006348:	2b7f      	cmp	r3, #127	; 0x7f
 800634a:	d8f0      	bhi.n	800632e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800634c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800634e:	1c5a      	adds	r2, r3, #1
 8006350:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006352:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006354:	b2d2      	uxtb	r2, r2
 8006356:	701a      	strb	r2, [r3, #0]
 8006358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800635a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	2220      	movs	r2, #32
 8006362:	4619      	mov	r1, r3
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f7fe fe5b 	bl	8005020 <_EncodeStr>
 800636a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800636c:	2209      	movs	r2, #9
 800636e:	68f9      	ldr	r1, [r7, #12]
 8006370:	6938      	ldr	r0, [r7, #16]
 8006372:	f7fe ff97 	bl	80052a4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	637b      	str	r3, [r7, #52]	; 0x34
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	4b40      	ldr	r3, [pc, #256]	; (8006484 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	633b      	str	r3, [r7, #48]	; 0x30
 800638a:	e00b      	b.n	80063a4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800638c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638e:	b2da      	uxtb	r2, r3
 8006390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006392:	1c59      	adds	r1, r3, #1
 8006394:	6379      	str	r1, [r7, #52]	; 0x34
 8006396:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800639a:	b2d2      	uxtb	r2, r2
 800639c:	701a      	strb	r2, [r3, #0]
 800639e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a0:	09db      	lsrs	r3, r3, #7
 80063a2:	633b      	str	r3, [r7, #48]	; 0x30
 80063a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a6:	2b7f      	cmp	r3, #127	; 0x7f
 80063a8:	d8f0      	bhi.n	800638c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80063aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ac:	1c5a      	adds	r2, r3, #1
 80063ae:	637a      	str	r2, [r7, #52]	; 0x34
 80063b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063b2:	b2d2      	uxtb	r2, r2
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80063c4:	e00b      	b.n	80063de <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80063c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063cc:	1c59      	adds	r1, r3, #1
 80063ce:	62f9      	str	r1, [r7, #44]	; 0x2c
 80063d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063d4:	b2d2      	uxtb	r2, r2
 80063d6:	701a      	strb	r2, [r3, #0]
 80063d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063da:	09db      	lsrs	r3, r3, #7
 80063dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80063de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e0:	2b7f      	cmp	r3, #127	; 0x7f
 80063e2:	d8f0      	bhi.n	80063c6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80063e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e6:	1c5a      	adds	r2, r3, #1
 80063e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063ec:	b2d2      	uxtb	r2, r2
 80063ee:	701a      	strb	r2, [r3, #0]
 80063f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	627b      	str	r3, [r7, #36]	; 0x24
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	623b      	str	r3, [r7, #32]
 80063fe:	e00b      	b.n	8006418 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006400:	6a3b      	ldr	r3, [r7, #32]
 8006402:	b2da      	uxtb	r2, r3
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	1c59      	adds	r1, r3, #1
 8006408:	6279      	str	r1, [r7, #36]	; 0x24
 800640a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800640e:	b2d2      	uxtb	r2, r2
 8006410:	701a      	strb	r2, [r3, #0]
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	09db      	lsrs	r3, r3, #7
 8006416:	623b      	str	r3, [r7, #32]
 8006418:	6a3b      	ldr	r3, [r7, #32]
 800641a:	2b7f      	cmp	r3, #127	; 0x7f
 800641c:	d8f0      	bhi.n	8006400 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	1c5a      	adds	r2, r3, #1
 8006422:	627a      	str	r2, [r7, #36]	; 0x24
 8006424:	6a3a      	ldr	r2, [r7, #32]
 8006426:	b2d2      	uxtb	r2, r2
 8006428:	701a      	strb	r2, [r3, #0]
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	61fb      	str	r3, [r7, #28]
 8006432:	2300      	movs	r3, #0
 8006434:	61bb      	str	r3, [r7, #24]
 8006436:	e00b      	b.n	8006450 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	b2da      	uxtb	r2, r3
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	1c59      	adds	r1, r3, #1
 8006440:	61f9      	str	r1, [r7, #28]
 8006442:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006446:	b2d2      	uxtb	r2, r2
 8006448:	701a      	strb	r2, [r3, #0]
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	09db      	lsrs	r3, r3, #7
 800644e:	61bb      	str	r3, [r7, #24]
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	2b7f      	cmp	r3, #127	; 0x7f
 8006454:	d8f0      	bhi.n	8006438 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	1c5a      	adds	r2, r3, #1
 800645a:	61fa      	str	r2, [r7, #28]
 800645c:	69ba      	ldr	r2, [r7, #24]
 800645e:	b2d2      	uxtb	r2, r2
 8006460:	701a      	strb	r2, [r3, #0]
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006466:	2215      	movs	r2, #21
 8006468:	68f9      	ldr	r1, [r7, #12]
 800646a:	6938      	ldr	r0, [r7, #16]
 800646c:	f7fe ff1a 	bl	80052a4 <_SendPacket>
  RECORD_END();
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f383 8811 	msr	BASEPRI, r3
}
 8006476:	bf00      	nop
 8006478:	3748      	adds	r7, #72	; 0x48
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	20018304 	.word	0x20018304
 8006484:	200182d4 	.word	0x200182d4

08006488 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006488:	b580      	push	{r7, lr}
 800648a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800648c:	4b07      	ldr	r3, [pc, #28]	; (80064ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d008      	beq.n	80064a6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006494:	4b05      	ldr	r3, [pc, #20]	; (80064ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006496:	6a1b      	ldr	r3, [r3, #32]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800649e:	4b03      	ldr	r3, [pc, #12]	; (80064ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	4798      	blx	r3
  }
}
 80064a6:	bf00      	nop
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	200182d4 	.word	0x200182d4

080064b0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064b8:	f3ef 8311 	mrs	r3, BASEPRI
 80064bc:	f04f 0120 	mov.w	r1, #32
 80064c0:	f381 8811 	msr	BASEPRI, r1
 80064c4:	617b      	str	r3, [r7, #20]
 80064c6:	480b      	ldr	r0, [pc, #44]	; (80064f4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80064c8:	f7fe fdfa 	bl	80050c0 <_PreparePacket>
 80064cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064ce:	2280      	movs	r2, #128	; 0x80
 80064d0:	6879      	ldr	r1, [r7, #4]
 80064d2:	6938      	ldr	r0, [r7, #16]
 80064d4:	f7fe fda4 	bl	8005020 <_EncodeStr>
 80064d8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80064da:	220e      	movs	r2, #14
 80064dc:	68f9      	ldr	r1, [r7, #12]
 80064de:	6938      	ldr	r0, [r7, #16]
 80064e0:	f7fe fee0 	bl	80052a4 <_SendPacket>
  RECORD_END();
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	f383 8811 	msr	BASEPRI, r3
}
 80064ea:	bf00      	nop
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	20018304 	.word	0x20018304

080064f8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80064f8:	b590      	push	{r4, r7, lr}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80064fe:	4b15      	ldr	r3, [pc, #84]	; (8006554 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d01a      	beq.n	800653c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006506:	4b13      	ldr	r3, [pc, #76]	; (8006554 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d015      	beq.n	800653c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006510:	4b10      	ldr	r3, [pc, #64]	; (8006554 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006512:	6a1b      	ldr	r3, [r3, #32]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4798      	blx	r3
 8006518:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800651c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800651e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006522:	f04f 0200 	mov.w	r2, #0
 8006526:	f04f 0300 	mov.w	r3, #0
 800652a:	000a      	movs	r2, r1
 800652c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800652e:	4613      	mov	r3, r2
 8006530:	461a      	mov	r2, r3
 8006532:	4621      	mov	r1, r4
 8006534:	200d      	movs	r0, #13
 8006536:	f7ff fbe5 	bl	8005d04 <SEGGER_SYSVIEW_RecordU32x2>
 800653a:	e006      	b.n	800654a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800653c:	4b06      	ldr	r3, [pc, #24]	; (8006558 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4619      	mov	r1, r3
 8006542:	200c      	movs	r0, #12
 8006544:	f7ff fba2 	bl	8005c8c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006548:	bf00      	nop
 800654a:	bf00      	nop
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	bd90      	pop	{r4, r7, pc}
 8006552:	bf00      	nop
 8006554:	200182d4 	.word	0x200182d4
 8006558:	e0001004 	.word	0xe0001004

0800655c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006562:	f3ef 8311 	mrs	r3, BASEPRI
 8006566:	f04f 0120 	mov.w	r1, #32
 800656a:	f381 8811 	msr	BASEPRI, r1
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	4819      	ldr	r0, [pc, #100]	; (80065d8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006572:	f7fe fda5 	bl	80050c0 <_PreparePacket>
 8006576:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800657c:	4b17      	ldr	r3, [pc, #92]	; (80065dc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006584:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	617b      	str	r3, [r7, #20]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	613b      	str	r3, [r7, #16]
 800658e:	e00b      	b.n	80065a8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	b2da      	uxtb	r2, r3
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	1c59      	adds	r1, r3, #1
 8006598:	6179      	str	r1, [r7, #20]
 800659a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	09db      	lsrs	r3, r3, #7
 80065a6:	613b      	str	r3, [r7, #16]
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	2b7f      	cmp	r3, #127	; 0x7f
 80065ac:	d8f0      	bhi.n	8006590 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	1c5a      	adds	r2, r3, #1
 80065b2:	617a      	str	r2, [r7, #20]
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	b2d2      	uxtb	r2, r2
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80065be:	2202      	movs	r2, #2
 80065c0:	6879      	ldr	r1, [r7, #4]
 80065c2:	68b8      	ldr	r0, [r7, #8]
 80065c4:	f7fe fe6e 	bl	80052a4 <_SendPacket>
  RECORD_END();
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f383 8811 	msr	BASEPRI, r3
}
 80065ce:	bf00      	nop
 80065d0:	3718      	adds	r7, #24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	20018304 	.word	0x20018304
 80065dc:	e000ed04 	.word	0xe000ed04

080065e0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80065e6:	f3ef 8311 	mrs	r3, BASEPRI
 80065ea:	f04f 0120 	mov.w	r1, #32
 80065ee:	f381 8811 	msr	BASEPRI, r1
 80065f2:	607b      	str	r3, [r7, #4]
 80065f4:	4807      	ldr	r0, [pc, #28]	; (8006614 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80065f6:	f7fe fd63 	bl	80050c0 <_PreparePacket>
 80065fa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80065fc:	2203      	movs	r2, #3
 80065fe:	6839      	ldr	r1, [r7, #0]
 8006600:	6838      	ldr	r0, [r7, #0]
 8006602:	f7fe fe4f 	bl	80052a4 <_SendPacket>
  RECORD_END();
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f383 8811 	msr	BASEPRI, r3
}
 800660c:	bf00      	nop
 800660e:	3708      	adds	r7, #8
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	20018304 	.word	0x20018304

08006618 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800661e:	f3ef 8311 	mrs	r3, BASEPRI
 8006622:	f04f 0120 	mov.w	r1, #32
 8006626:	f381 8811 	msr	BASEPRI, r1
 800662a:	607b      	str	r3, [r7, #4]
 800662c:	4807      	ldr	r0, [pc, #28]	; (800664c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800662e:	f7fe fd47 	bl	80050c0 <_PreparePacket>
 8006632:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006634:	2212      	movs	r2, #18
 8006636:	6839      	ldr	r1, [r7, #0]
 8006638:	6838      	ldr	r0, [r7, #0]
 800663a:	f7fe fe33 	bl	80052a4 <_SendPacket>
  RECORD_END();
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f383 8811 	msr	BASEPRI, r3
}
 8006644:	bf00      	nop
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	20018304 	.word	0x20018304

08006650 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006656:	f3ef 8311 	mrs	r3, BASEPRI
 800665a:	f04f 0120 	mov.w	r1, #32
 800665e:	f381 8811 	msr	BASEPRI, r1
 8006662:	607b      	str	r3, [r7, #4]
 8006664:	4807      	ldr	r0, [pc, #28]	; (8006684 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006666:	f7fe fd2b 	bl	80050c0 <_PreparePacket>
 800666a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800666c:	2211      	movs	r2, #17
 800666e:	6839      	ldr	r1, [r7, #0]
 8006670:	6838      	ldr	r0, [r7, #0]
 8006672:	f7fe fe17 	bl	80052a4 <_SendPacket>
  RECORD_END();
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f383 8811 	msr	BASEPRI, r3
}
 800667c:	bf00      	nop
 800667e:	3708      	adds	r7, #8
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	20018304 	.word	0x20018304

08006688 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006688:	b580      	push	{r7, lr}
 800668a:	b088      	sub	sp, #32
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006690:	f3ef 8311 	mrs	r3, BASEPRI
 8006694:	f04f 0120 	mov.w	r1, #32
 8006698:	f381 8811 	msr	BASEPRI, r1
 800669c:	617b      	str	r3, [r7, #20]
 800669e:	4819      	ldr	r0, [pc, #100]	; (8006704 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80066a0:	f7fe fd0e 	bl	80050c0 <_PreparePacket>
 80066a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80066aa:	4b17      	ldr	r3, [pc, #92]	; (8006708 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	61fb      	str	r3, [r7, #28]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	61bb      	str	r3, [r7, #24]
 80066bc:	e00b      	b.n	80066d6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	b2da      	uxtb	r2, r3
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	1c59      	adds	r1, r3, #1
 80066c6:	61f9      	str	r1, [r7, #28]
 80066c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066cc:	b2d2      	uxtb	r2, r2
 80066ce:	701a      	strb	r2, [r3, #0]
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	09db      	lsrs	r3, r3, #7
 80066d4:	61bb      	str	r3, [r7, #24]
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	2b7f      	cmp	r3, #127	; 0x7f
 80066da:	d8f0      	bhi.n	80066be <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	1c5a      	adds	r2, r3, #1
 80066e0:	61fa      	str	r2, [r7, #28]
 80066e2:	69ba      	ldr	r2, [r7, #24]
 80066e4:	b2d2      	uxtb	r2, r2
 80066e6:	701a      	strb	r2, [r3, #0]
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80066ec:	2208      	movs	r2, #8
 80066ee:	68f9      	ldr	r1, [r7, #12]
 80066f0:	6938      	ldr	r0, [r7, #16]
 80066f2:	f7fe fdd7 	bl	80052a4 <_SendPacket>
  RECORD_END();
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f383 8811 	msr	BASEPRI, r3
}
 80066fc:	bf00      	nop
 80066fe:	3720      	adds	r7, #32
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	20018304 	.word	0x20018304
 8006708:	200182d4 	.word	0x200182d4

0800670c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800670c:	b580      	push	{r7, lr}
 800670e:	b088      	sub	sp, #32
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006714:	f3ef 8311 	mrs	r3, BASEPRI
 8006718:	f04f 0120 	mov.w	r1, #32
 800671c:	f381 8811 	msr	BASEPRI, r1
 8006720:	617b      	str	r3, [r7, #20]
 8006722:	4819      	ldr	r0, [pc, #100]	; (8006788 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006724:	f7fe fccc 	bl	80050c0 <_PreparePacket>
 8006728:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800672e:	4b17      	ldr	r3, [pc, #92]	; (800678c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	61fb      	str	r3, [r7, #28]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	61bb      	str	r3, [r7, #24]
 8006740:	e00b      	b.n	800675a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	b2da      	uxtb	r2, r3
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	1c59      	adds	r1, r3, #1
 800674a:	61f9      	str	r1, [r7, #28]
 800674c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006750:	b2d2      	uxtb	r2, r2
 8006752:	701a      	strb	r2, [r3, #0]
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	09db      	lsrs	r3, r3, #7
 8006758:	61bb      	str	r3, [r7, #24]
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	2b7f      	cmp	r3, #127	; 0x7f
 800675e:	d8f0      	bhi.n	8006742 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	1c5a      	adds	r2, r3, #1
 8006764:	61fa      	str	r2, [r7, #28]
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	b2d2      	uxtb	r2, r2
 800676a:	701a      	strb	r2, [r3, #0]
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006770:	2204      	movs	r2, #4
 8006772:	68f9      	ldr	r1, [r7, #12]
 8006774:	6938      	ldr	r0, [r7, #16]
 8006776:	f7fe fd95 	bl	80052a4 <_SendPacket>
  RECORD_END();
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f383 8811 	msr	BASEPRI, r3
}
 8006780:	bf00      	nop
 8006782:	3720      	adds	r7, #32
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	20018304 	.word	0x20018304
 800678c:	200182d4 	.word	0x200182d4

08006790 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006790:	b580      	push	{r7, lr}
 8006792:	b088      	sub	sp, #32
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006798:	f3ef 8311 	mrs	r3, BASEPRI
 800679c:	f04f 0120 	mov.w	r1, #32
 80067a0:	f381 8811 	msr	BASEPRI, r1
 80067a4:	617b      	str	r3, [r7, #20]
 80067a6:	4819      	ldr	r0, [pc, #100]	; (800680c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80067a8:	f7fe fc8a 	bl	80050c0 <_PreparePacket>
 80067ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80067b2:	4b17      	ldr	r3, [pc, #92]	; (8006810 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	61fb      	str	r3, [r7, #28]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	61bb      	str	r3, [r7, #24]
 80067c4:	e00b      	b.n	80067de <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	1c59      	adds	r1, r3, #1
 80067ce:	61f9      	str	r1, [r7, #28]
 80067d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067d4:	b2d2      	uxtb	r2, r2
 80067d6:	701a      	strb	r2, [r3, #0]
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	09db      	lsrs	r3, r3, #7
 80067dc:	61bb      	str	r3, [r7, #24]
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	2b7f      	cmp	r3, #127	; 0x7f
 80067e2:	d8f0      	bhi.n	80067c6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	61fa      	str	r2, [r7, #28]
 80067ea:	69ba      	ldr	r2, [r7, #24]
 80067ec:	b2d2      	uxtb	r2, r2
 80067ee:	701a      	strb	r2, [r3, #0]
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80067f4:	2206      	movs	r2, #6
 80067f6:	68f9      	ldr	r1, [r7, #12]
 80067f8:	6938      	ldr	r0, [r7, #16]
 80067fa:	f7fe fd53 	bl	80052a4 <_SendPacket>
  RECORD_END();
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	f383 8811 	msr	BASEPRI, r3
}
 8006804:	bf00      	nop
 8006806:	3720      	adds	r7, #32
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	20018304 	.word	0x20018304
 8006810:	200182d4 	.word	0x200182d4

08006814 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006814:	b580      	push	{r7, lr}
 8006816:	b08a      	sub	sp, #40	; 0x28
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800681e:	f3ef 8311 	mrs	r3, BASEPRI
 8006822:	f04f 0120 	mov.w	r1, #32
 8006826:	f381 8811 	msr	BASEPRI, r1
 800682a:	617b      	str	r3, [r7, #20]
 800682c:	4827      	ldr	r0, [pc, #156]	; (80068cc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800682e:	f7fe fc47 	bl	80050c0 <_PreparePacket>
 8006832:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006838:	4b25      	ldr	r3, [pc, #148]	; (80068d0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	627b      	str	r3, [r7, #36]	; 0x24
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	623b      	str	r3, [r7, #32]
 800684a:	e00b      	b.n	8006864 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	b2da      	uxtb	r2, r3
 8006850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006852:	1c59      	adds	r1, r3, #1
 8006854:	6279      	str	r1, [r7, #36]	; 0x24
 8006856:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800685a:	b2d2      	uxtb	r2, r2
 800685c:	701a      	strb	r2, [r3, #0]
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	09db      	lsrs	r3, r3, #7
 8006862:	623b      	str	r3, [r7, #32]
 8006864:	6a3b      	ldr	r3, [r7, #32]
 8006866:	2b7f      	cmp	r3, #127	; 0x7f
 8006868:	d8f0      	bhi.n	800684c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	1c5a      	adds	r2, r3, #1
 800686e:	627a      	str	r2, [r7, #36]	; 0x24
 8006870:	6a3a      	ldr	r2, [r7, #32]
 8006872:	b2d2      	uxtb	r2, r2
 8006874:	701a      	strb	r2, [r3, #0]
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	61fb      	str	r3, [r7, #28]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	61bb      	str	r3, [r7, #24]
 8006882:	e00b      	b.n	800689c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	b2da      	uxtb	r2, r3
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	1c59      	adds	r1, r3, #1
 800688c:	61f9      	str	r1, [r7, #28]
 800688e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006892:	b2d2      	uxtb	r2, r2
 8006894:	701a      	strb	r2, [r3, #0]
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	09db      	lsrs	r3, r3, #7
 800689a:	61bb      	str	r3, [r7, #24]
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	2b7f      	cmp	r3, #127	; 0x7f
 80068a0:	d8f0      	bhi.n	8006884 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	1c5a      	adds	r2, r3, #1
 80068a6:	61fa      	str	r2, [r7, #28]
 80068a8:	69ba      	ldr	r2, [r7, #24]
 80068aa:	b2d2      	uxtb	r2, r2
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80068b2:	2207      	movs	r2, #7
 80068b4:	68f9      	ldr	r1, [r7, #12]
 80068b6:	6938      	ldr	r0, [r7, #16]
 80068b8:	f7fe fcf4 	bl	80052a4 <_SendPacket>
  RECORD_END();
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	f383 8811 	msr	BASEPRI, r3
}
 80068c2:	bf00      	nop
 80068c4:	3728      	adds	r7, #40	; 0x28
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	20018304 	.word	0x20018304
 80068d0:	200182d4 	.word	0x200182d4

080068d4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80068dc:	4b04      	ldr	r3, [pc, #16]	; (80068f0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	1ad3      	subs	r3, r2, r3
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr
 80068f0:	200182d4 	.word	0x200182d4

080068f4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b08c      	sub	sp, #48	; 0x30
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	4603      	mov	r3, r0
 80068fc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80068fe:	4b3b      	ldr	r3, [pc, #236]	; (80069ec <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d06d      	beq.n	80069e2 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006906:	4b39      	ldr	r3, [pc, #228]	; (80069ec <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800690c:	2300      	movs	r3, #0
 800690e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006910:	e008      	b.n	8006924 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691a:	2b00      	cmp	r3, #0
 800691c:	d007      	beq.n	800692e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800691e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006920:	3301      	adds	r3, #1
 8006922:	62bb      	str	r3, [r7, #40]	; 0x28
 8006924:	79fb      	ldrb	r3, [r7, #7]
 8006926:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006928:	429a      	cmp	r2, r3
 800692a:	d3f2      	bcc.n	8006912 <SEGGER_SYSVIEW_SendModule+0x1e>
 800692c:	e000      	b.n	8006930 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800692e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006932:	2b00      	cmp	r3, #0
 8006934:	d055      	beq.n	80069e2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006936:	f3ef 8311 	mrs	r3, BASEPRI
 800693a:	f04f 0120 	mov.w	r1, #32
 800693e:	f381 8811 	msr	BASEPRI, r1
 8006942:	617b      	str	r3, [r7, #20]
 8006944:	482a      	ldr	r0, [pc, #168]	; (80069f0 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006946:	f7fe fbbb 	bl	80050c0 <_PreparePacket>
 800694a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	627b      	str	r3, [r7, #36]	; 0x24
 8006954:	79fb      	ldrb	r3, [r7, #7]
 8006956:	623b      	str	r3, [r7, #32]
 8006958:	e00b      	b.n	8006972 <SEGGER_SYSVIEW_SendModule+0x7e>
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	b2da      	uxtb	r2, r3
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	1c59      	adds	r1, r3, #1
 8006962:	6279      	str	r1, [r7, #36]	; 0x24
 8006964:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006968:	b2d2      	uxtb	r2, r2
 800696a:	701a      	strb	r2, [r3, #0]
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	09db      	lsrs	r3, r3, #7
 8006970:	623b      	str	r3, [r7, #32]
 8006972:	6a3b      	ldr	r3, [r7, #32]
 8006974:	2b7f      	cmp	r3, #127	; 0x7f
 8006976:	d8f0      	bhi.n	800695a <SEGGER_SYSVIEW_SendModule+0x66>
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	1c5a      	adds	r2, r3, #1
 800697c:	627a      	str	r2, [r7, #36]	; 0x24
 800697e:	6a3a      	ldr	r2, [r7, #32]
 8006980:	b2d2      	uxtb	r2, r2
 8006982:	701a      	strb	r2, [r3, #0]
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	61fb      	str	r3, [r7, #28]
 800698c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	61bb      	str	r3, [r7, #24]
 8006992:	e00b      	b.n	80069ac <SEGGER_SYSVIEW_SendModule+0xb8>
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	b2da      	uxtb	r2, r3
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	1c59      	adds	r1, r3, #1
 800699c:	61f9      	str	r1, [r7, #28]
 800699e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069a2:	b2d2      	uxtb	r2, r2
 80069a4:	701a      	strb	r2, [r3, #0]
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	09db      	lsrs	r3, r3, #7
 80069aa:	61bb      	str	r3, [r7, #24]
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	2b7f      	cmp	r3, #127	; 0x7f
 80069b0:	d8f0      	bhi.n	8006994 <SEGGER_SYSVIEW_SendModule+0xa0>
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	1c5a      	adds	r2, r3, #1
 80069b6:	61fa      	str	r2, [r7, #28]
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	b2d2      	uxtb	r2, r2
 80069bc:	701a      	strb	r2, [r3, #0]
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2280      	movs	r2, #128	; 0x80
 80069c8:	4619      	mov	r1, r3
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f7fe fb28 	bl	8005020 <_EncodeStr>
 80069d0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80069d2:	2216      	movs	r2, #22
 80069d4:	68f9      	ldr	r1, [r7, #12]
 80069d6:	6938      	ldr	r0, [r7, #16]
 80069d8:	f7fe fc64 	bl	80052a4 <_SendPacket>
      RECORD_END();
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80069e2:	bf00      	nop
 80069e4:	3730      	adds	r7, #48	; 0x30
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	200182fc 	.word	0x200182fc
 80069f0:	20018304 	.word	0x20018304

080069f4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80069fa:	4b0c      	ldr	r3, [pc, #48]	; (8006a2c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00f      	beq.n	8006a22 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006a02:	4b0a      	ldr	r3, [pc, #40]	; (8006a2c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1f2      	bne.n	8006a08 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006a22:	bf00      	nop
 8006a24:	3708      	adds	r7, #8
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	200182fc 	.word	0x200182fc

08006a30 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006a36:	f3ef 8311 	mrs	r3, BASEPRI
 8006a3a:	f04f 0120 	mov.w	r1, #32
 8006a3e:	f381 8811 	msr	BASEPRI, r1
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	4817      	ldr	r0, [pc, #92]	; (8006aa4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006a46:	f7fe fb3b 	bl	80050c0 <_PreparePacket>
 8006a4a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	617b      	str	r3, [r7, #20]
 8006a54:	4b14      	ldr	r3, [pc, #80]	; (8006aa8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	613b      	str	r3, [r7, #16]
 8006a5a:	e00b      	b.n	8006a74 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	1c59      	adds	r1, r3, #1
 8006a64:	6179      	str	r1, [r7, #20]
 8006a66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a6a:	b2d2      	uxtb	r2, r2
 8006a6c:	701a      	strb	r2, [r3, #0]
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	09db      	lsrs	r3, r3, #7
 8006a72:	613b      	str	r3, [r7, #16]
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	2b7f      	cmp	r3, #127	; 0x7f
 8006a78:	d8f0      	bhi.n	8006a5c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	1c5a      	adds	r2, r3, #1
 8006a7e:	617a      	str	r2, [r7, #20]
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	b2d2      	uxtb	r2, r2
 8006a84:	701a      	strb	r2, [r3, #0]
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006a8a:	221b      	movs	r2, #27
 8006a8c:	6879      	ldr	r1, [r7, #4]
 8006a8e:	68b8      	ldr	r0, [r7, #8]
 8006a90:	f7fe fc08 	bl	80052a4 <_SendPacket>
  RECORD_END();
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f383 8811 	msr	BASEPRI, r3
}
 8006a9a:	bf00      	nop
 8006a9c:	3718      	adds	r7, #24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	20018304 	.word	0x20018304
 8006aa8:	20018300 	.word	0x20018300

08006aac <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006aac:	b40f      	push	{r0, r1, r2, r3}
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b082      	sub	sp, #8
 8006ab2:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006ab4:	f107 0314 	add.w	r3, r7, #20
 8006ab8:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006aba:	1d3b      	adds	r3, r7, #4
 8006abc:	461a      	mov	r2, r3
 8006abe:	2100      	movs	r1, #0
 8006ac0:	6938      	ldr	r0, [r7, #16]
 8006ac2:	f7fe fe79 	bl	80057b8 <_VPrintTarget>
  va_end(ParamList);
}
 8006ac6:	bf00      	nop
 8006ac8:	3708      	adds	r7, #8
 8006aca:	46bd      	mov	sp, r7
 8006acc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ad0:	b004      	add	sp, #16
 8006ad2:	4770      	bx	lr

08006ad4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b08a      	sub	sp, #40	; 0x28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006adc:	f3ef 8311 	mrs	r3, BASEPRI
 8006ae0:	f04f 0120 	mov.w	r1, #32
 8006ae4:	f381 8811 	msr	BASEPRI, r1
 8006ae8:	617b      	str	r3, [r7, #20]
 8006aea:	4827      	ldr	r0, [pc, #156]	; (8006b88 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006aec:	f7fe fae8 	bl	80050c0 <_PreparePacket>
 8006af0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006af2:	2280      	movs	r2, #128	; 0x80
 8006af4:	6879      	ldr	r1, [r7, #4]
 8006af6:	6938      	ldr	r0, [r7, #16]
 8006af8:	f7fe fa92 	bl	8005020 <_EncodeStr>
 8006afc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	627b      	str	r3, [r7, #36]	; 0x24
 8006b02:	2301      	movs	r3, #1
 8006b04:	623b      	str	r3, [r7, #32]
 8006b06:	e00b      	b.n	8006b20 <SEGGER_SYSVIEW_Warn+0x4c>
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	1c59      	adds	r1, r3, #1
 8006b10:	6279      	str	r1, [r7, #36]	; 0x24
 8006b12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b16:	b2d2      	uxtb	r2, r2
 8006b18:	701a      	strb	r2, [r3, #0]
 8006b1a:	6a3b      	ldr	r3, [r7, #32]
 8006b1c:	09db      	lsrs	r3, r3, #7
 8006b1e:	623b      	str	r3, [r7, #32]
 8006b20:	6a3b      	ldr	r3, [r7, #32]
 8006b22:	2b7f      	cmp	r3, #127	; 0x7f
 8006b24:	d8f0      	bhi.n	8006b08 <SEGGER_SYSVIEW_Warn+0x34>
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b28:	1c5a      	adds	r2, r3, #1
 8006b2a:	627a      	str	r2, [r7, #36]	; 0x24
 8006b2c:	6a3a      	ldr	r2, [r7, #32]
 8006b2e:	b2d2      	uxtb	r2, r2
 8006b30:	701a      	strb	r2, [r3, #0]
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	61fb      	str	r3, [r7, #28]
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	61bb      	str	r3, [r7, #24]
 8006b3e:	e00b      	b.n	8006b58 <SEGGER_SYSVIEW_Warn+0x84>
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	1c59      	adds	r1, r3, #1
 8006b48:	61f9      	str	r1, [r7, #28]
 8006b4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b4e:	b2d2      	uxtb	r2, r2
 8006b50:	701a      	strb	r2, [r3, #0]
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	09db      	lsrs	r3, r3, #7
 8006b56:	61bb      	str	r3, [r7, #24]
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b5c:	d8f0      	bhi.n	8006b40 <SEGGER_SYSVIEW_Warn+0x6c>
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	1c5a      	adds	r2, r3, #1
 8006b62:	61fa      	str	r2, [r7, #28]
 8006b64:	69ba      	ldr	r2, [r7, #24]
 8006b66:	b2d2      	uxtb	r2, r2
 8006b68:	701a      	strb	r2, [r3, #0]
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006b6e:	221a      	movs	r2, #26
 8006b70:	68f9      	ldr	r1, [r7, #12]
 8006b72:	6938      	ldr	r0, [r7, #16]
 8006b74:	f7fe fb96 	bl	80052a4 <_SendPacket>
  RECORD_END();
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	f383 8811 	msr	BASEPRI, r3
}
 8006b7e:	bf00      	nop
 8006b80:	3728      	adds	r7, #40	; 0x28
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	20018304 	.word	0x20018304

08006b8c <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006b90:	4b13      	ldr	r3, [pc, #76]	; (8006be0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006b92:	7e1b      	ldrb	r3, [r3, #24]
 8006b94:	4619      	mov	r1, r3
 8006b96:	4a13      	ldr	r2, [pc, #76]	; (8006be4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006b98:	460b      	mov	r3, r1
 8006b9a:	005b      	lsls	r3, r3, #1
 8006b9c:	440b      	add	r3, r1
 8006b9e:	00db      	lsls	r3, r3, #3
 8006ba0:	4413      	add	r3, r2
 8006ba2:	336c      	adds	r3, #108	; 0x6c
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	4b0e      	ldr	r3, [pc, #56]	; (8006be0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006ba8:	7e1b      	ldrb	r3, [r3, #24]
 8006baa:	4618      	mov	r0, r3
 8006bac:	490d      	ldr	r1, [pc, #52]	; (8006be4 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006bae:	4603      	mov	r3, r0
 8006bb0:	005b      	lsls	r3, r3, #1
 8006bb2:	4403      	add	r3, r0
 8006bb4:	00db      	lsls	r3, r3, #3
 8006bb6:	440b      	add	r3, r1
 8006bb8:	3370      	adds	r3, #112	; 0x70
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d00b      	beq.n	8006bd8 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006bc0:	4b07      	ldr	r3, [pc, #28]	; (8006be0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006bc2:	789b      	ldrb	r3, [r3, #2]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d107      	bne.n	8006bd8 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006bc8:	4b05      	ldr	r3, [pc, #20]	; (8006be0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006bca:	2201      	movs	r2, #1
 8006bcc:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006bce:	f7fe fa83 	bl	80050d8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006bd2:	4b03      	ldr	r3, [pc, #12]	; (8006be0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006bd8:	4b01      	ldr	r3, [pc, #4]	; (8006be0 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	200182d4 	.word	0x200182d4
 8006be4:	20018480 	.word	0x20018480

08006be8 <__libc_init_array>:
 8006be8:	b570      	push	{r4, r5, r6, lr}
 8006bea:	4d0d      	ldr	r5, [pc, #52]	; (8006c20 <__libc_init_array+0x38>)
 8006bec:	4c0d      	ldr	r4, [pc, #52]	; (8006c24 <__libc_init_array+0x3c>)
 8006bee:	1b64      	subs	r4, r4, r5
 8006bf0:	10a4      	asrs	r4, r4, #2
 8006bf2:	2600      	movs	r6, #0
 8006bf4:	42a6      	cmp	r6, r4
 8006bf6:	d109      	bne.n	8006c0c <__libc_init_array+0x24>
 8006bf8:	4d0b      	ldr	r5, [pc, #44]	; (8006c28 <__libc_init_array+0x40>)
 8006bfa:	4c0c      	ldr	r4, [pc, #48]	; (8006c2c <__libc_init_array+0x44>)
 8006bfc:	f000 fc6a 	bl	80074d4 <_init>
 8006c00:	1b64      	subs	r4, r4, r5
 8006c02:	10a4      	asrs	r4, r4, #2
 8006c04:	2600      	movs	r6, #0
 8006c06:	42a6      	cmp	r6, r4
 8006c08:	d105      	bne.n	8006c16 <__libc_init_array+0x2e>
 8006c0a:	bd70      	pop	{r4, r5, r6, pc}
 8006c0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c10:	4798      	blx	r3
 8006c12:	3601      	adds	r6, #1
 8006c14:	e7ee      	b.n	8006bf4 <__libc_init_array+0xc>
 8006c16:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c1a:	4798      	blx	r3
 8006c1c:	3601      	adds	r6, #1
 8006c1e:	e7f2      	b.n	8006c06 <__libc_init_array+0x1e>
 8006c20:	080076dc 	.word	0x080076dc
 8006c24:	080076dc 	.word	0x080076dc
 8006c28:	080076dc 	.word	0x080076dc
 8006c2c:	080076e0 	.word	0x080076e0

08006c30 <memcmp>:
 8006c30:	b530      	push	{r4, r5, lr}
 8006c32:	3901      	subs	r1, #1
 8006c34:	2400      	movs	r4, #0
 8006c36:	42a2      	cmp	r2, r4
 8006c38:	d101      	bne.n	8006c3e <memcmp+0xe>
 8006c3a:	2000      	movs	r0, #0
 8006c3c:	e005      	b.n	8006c4a <memcmp+0x1a>
 8006c3e:	5d03      	ldrb	r3, [r0, r4]
 8006c40:	3401      	adds	r4, #1
 8006c42:	5d0d      	ldrb	r5, [r1, r4]
 8006c44:	42ab      	cmp	r3, r5
 8006c46:	d0f6      	beq.n	8006c36 <memcmp+0x6>
 8006c48:	1b58      	subs	r0, r3, r5
 8006c4a:	bd30      	pop	{r4, r5, pc}

08006c4c <memcpy>:
 8006c4c:	440a      	add	r2, r1
 8006c4e:	4291      	cmp	r1, r2
 8006c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c54:	d100      	bne.n	8006c58 <memcpy+0xc>
 8006c56:	4770      	bx	lr
 8006c58:	b510      	push	{r4, lr}
 8006c5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c62:	4291      	cmp	r1, r2
 8006c64:	d1f9      	bne.n	8006c5a <memcpy+0xe>
 8006c66:	bd10      	pop	{r4, pc}

08006c68 <memset>:
 8006c68:	4402      	add	r2, r0
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d100      	bne.n	8006c72 <memset+0xa>
 8006c70:	4770      	bx	lr
 8006c72:	f803 1b01 	strb.w	r1, [r3], #1
 8006c76:	e7f9      	b.n	8006c6c <memset+0x4>

08006c78 <siprintf>:
 8006c78:	b40e      	push	{r1, r2, r3}
 8006c7a:	b500      	push	{lr}
 8006c7c:	b09c      	sub	sp, #112	; 0x70
 8006c7e:	ab1d      	add	r3, sp, #116	; 0x74
 8006c80:	9002      	str	r0, [sp, #8]
 8006c82:	9006      	str	r0, [sp, #24]
 8006c84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c88:	4809      	ldr	r0, [pc, #36]	; (8006cb0 <siprintf+0x38>)
 8006c8a:	9107      	str	r1, [sp, #28]
 8006c8c:	9104      	str	r1, [sp, #16]
 8006c8e:	4909      	ldr	r1, [pc, #36]	; (8006cb4 <siprintf+0x3c>)
 8006c90:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c94:	9105      	str	r1, [sp, #20]
 8006c96:	6800      	ldr	r0, [r0, #0]
 8006c98:	9301      	str	r3, [sp, #4]
 8006c9a:	a902      	add	r1, sp, #8
 8006c9c:	f000 f868 	bl	8006d70 <_svfiprintf_r>
 8006ca0:	9b02      	ldr	r3, [sp, #8]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	701a      	strb	r2, [r3, #0]
 8006ca6:	b01c      	add	sp, #112	; 0x70
 8006ca8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cac:	b003      	add	sp, #12
 8006cae:	4770      	bx	lr
 8006cb0:	20000020 	.word	0x20000020
 8006cb4:	ffff0208 	.word	0xffff0208

08006cb8 <__ssputs_r>:
 8006cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cbc:	688e      	ldr	r6, [r1, #8]
 8006cbe:	429e      	cmp	r6, r3
 8006cc0:	4682      	mov	sl, r0
 8006cc2:	460c      	mov	r4, r1
 8006cc4:	4690      	mov	r8, r2
 8006cc6:	461f      	mov	r7, r3
 8006cc8:	d838      	bhi.n	8006d3c <__ssputs_r+0x84>
 8006cca:	898a      	ldrh	r2, [r1, #12]
 8006ccc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006cd0:	d032      	beq.n	8006d38 <__ssputs_r+0x80>
 8006cd2:	6825      	ldr	r5, [r4, #0]
 8006cd4:	6909      	ldr	r1, [r1, #16]
 8006cd6:	eba5 0901 	sub.w	r9, r5, r1
 8006cda:	6965      	ldr	r5, [r4, #20]
 8006cdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ce0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	444b      	add	r3, r9
 8006ce8:	106d      	asrs	r5, r5, #1
 8006cea:	429d      	cmp	r5, r3
 8006cec:	bf38      	it	cc
 8006cee:	461d      	movcc	r5, r3
 8006cf0:	0553      	lsls	r3, r2, #21
 8006cf2:	d531      	bpl.n	8006d58 <__ssputs_r+0xa0>
 8006cf4:	4629      	mov	r1, r5
 8006cf6:	f000 fb39 	bl	800736c <_malloc_r>
 8006cfa:	4606      	mov	r6, r0
 8006cfc:	b950      	cbnz	r0, 8006d14 <__ssputs_r+0x5c>
 8006cfe:	230c      	movs	r3, #12
 8006d00:	f8ca 3000 	str.w	r3, [sl]
 8006d04:	89a3      	ldrh	r3, [r4, #12]
 8006d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d0a:	81a3      	strh	r3, [r4, #12]
 8006d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d14:	6921      	ldr	r1, [r4, #16]
 8006d16:	464a      	mov	r2, r9
 8006d18:	f7ff ff98 	bl	8006c4c <memcpy>
 8006d1c:	89a3      	ldrh	r3, [r4, #12]
 8006d1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d26:	81a3      	strh	r3, [r4, #12]
 8006d28:	6126      	str	r6, [r4, #16]
 8006d2a:	6165      	str	r5, [r4, #20]
 8006d2c:	444e      	add	r6, r9
 8006d2e:	eba5 0509 	sub.w	r5, r5, r9
 8006d32:	6026      	str	r6, [r4, #0]
 8006d34:	60a5      	str	r5, [r4, #8]
 8006d36:	463e      	mov	r6, r7
 8006d38:	42be      	cmp	r6, r7
 8006d3a:	d900      	bls.n	8006d3e <__ssputs_r+0x86>
 8006d3c:	463e      	mov	r6, r7
 8006d3e:	4632      	mov	r2, r6
 8006d40:	6820      	ldr	r0, [r4, #0]
 8006d42:	4641      	mov	r1, r8
 8006d44:	f000 faa8 	bl	8007298 <memmove>
 8006d48:	68a3      	ldr	r3, [r4, #8]
 8006d4a:	6822      	ldr	r2, [r4, #0]
 8006d4c:	1b9b      	subs	r3, r3, r6
 8006d4e:	4432      	add	r2, r6
 8006d50:	60a3      	str	r3, [r4, #8]
 8006d52:	6022      	str	r2, [r4, #0]
 8006d54:	2000      	movs	r0, #0
 8006d56:	e7db      	b.n	8006d10 <__ssputs_r+0x58>
 8006d58:	462a      	mov	r2, r5
 8006d5a:	f000 fb61 	bl	8007420 <_realloc_r>
 8006d5e:	4606      	mov	r6, r0
 8006d60:	2800      	cmp	r0, #0
 8006d62:	d1e1      	bne.n	8006d28 <__ssputs_r+0x70>
 8006d64:	6921      	ldr	r1, [r4, #16]
 8006d66:	4650      	mov	r0, sl
 8006d68:	f000 fab0 	bl	80072cc <_free_r>
 8006d6c:	e7c7      	b.n	8006cfe <__ssputs_r+0x46>
	...

08006d70 <_svfiprintf_r>:
 8006d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d74:	4698      	mov	r8, r3
 8006d76:	898b      	ldrh	r3, [r1, #12]
 8006d78:	061b      	lsls	r3, r3, #24
 8006d7a:	b09d      	sub	sp, #116	; 0x74
 8006d7c:	4607      	mov	r7, r0
 8006d7e:	460d      	mov	r5, r1
 8006d80:	4614      	mov	r4, r2
 8006d82:	d50e      	bpl.n	8006da2 <_svfiprintf_r+0x32>
 8006d84:	690b      	ldr	r3, [r1, #16]
 8006d86:	b963      	cbnz	r3, 8006da2 <_svfiprintf_r+0x32>
 8006d88:	2140      	movs	r1, #64	; 0x40
 8006d8a:	f000 faef 	bl	800736c <_malloc_r>
 8006d8e:	6028      	str	r0, [r5, #0]
 8006d90:	6128      	str	r0, [r5, #16]
 8006d92:	b920      	cbnz	r0, 8006d9e <_svfiprintf_r+0x2e>
 8006d94:	230c      	movs	r3, #12
 8006d96:	603b      	str	r3, [r7, #0]
 8006d98:	f04f 30ff 	mov.w	r0, #4294967295
 8006d9c:	e0d1      	b.n	8006f42 <_svfiprintf_r+0x1d2>
 8006d9e:	2340      	movs	r3, #64	; 0x40
 8006da0:	616b      	str	r3, [r5, #20]
 8006da2:	2300      	movs	r3, #0
 8006da4:	9309      	str	r3, [sp, #36]	; 0x24
 8006da6:	2320      	movs	r3, #32
 8006da8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006dac:	f8cd 800c 	str.w	r8, [sp, #12]
 8006db0:	2330      	movs	r3, #48	; 0x30
 8006db2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006f5c <_svfiprintf_r+0x1ec>
 8006db6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006dba:	f04f 0901 	mov.w	r9, #1
 8006dbe:	4623      	mov	r3, r4
 8006dc0:	469a      	mov	sl, r3
 8006dc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dc6:	b10a      	cbz	r2, 8006dcc <_svfiprintf_r+0x5c>
 8006dc8:	2a25      	cmp	r2, #37	; 0x25
 8006dca:	d1f9      	bne.n	8006dc0 <_svfiprintf_r+0x50>
 8006dcc:	ebba 0b04 	subs.w	fp, sl, r4
 8006dd0:	d00b      	beq.n	8006dea <_svfiprintf_r+0x7a>
 8006dd2:	465b      	mov	r3, fp
 8006dd4:	4622      	mov	r2, r4
 8006dd6:	4629      	mov	r1, r5
 8006dd8:	4638      	mov	r0, r7
 8006dda:	f7ff ff6d 	bl	8006cb8 <__ssputs_r>
 8006dde:	3001      	adds	r0, #1
 8006de0:	f000 80aa 	beq.w	8006f38 <_svfiprintf_r+0x1c8>
 8006de4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006de6:	445a      	add	r2, fp
 8006de8:	9209      	str	r2, [sp, #36]	; 0x24
 8006dea:	f89a 3000 	ldrb.w	r3, [sl]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f000 80a2 	beq.w	8006f38 <_svfiprintf_r+0x1c8>
 8006df4:	2300      	movs	r3, #0
 8006df6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dfe:	f10a 0a01 	add.w	sl, sl, #1
 8006e02:	9304      	str	r3, [sp, #16]
 8006e04:	9307      	str	r3, [sp, #28]
 8006e06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e0a:	931a      	str	r3, [sp, #104]	; 0x68
 8006e0c:	4654      	mov	r4, sl
 8006e0e:	2205      	movs	r2, #5
 8006e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e14:	4851      	ldr	r0, [pc, #324]	; (8006f5c <_svfiprintf_r+0x1ec>)
 8006e16:	f7f9 fa33 	bl	8000280 <memchr>
 8006e1a:	9a04      	ldr	r2, [sp, #16]
 8006e1c:	b9d8      	cbnz	r0, 8006e56 <_svfiprintf_r+0xe6>
 8006e1e:	06d0      	lsls	r0, r2, #27
 8006e20:	bf44      	itt	mi
 8006e22:	2320      	movmi	r3, #32
 8006e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e28:	0711      	lsls	r1, r2, #28
 8006e2a:	bf44      	itt	mi
 8006e2c:	232b      	movmi	r3, #43	; 0x2b
 8006e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e32:	f89a 3000 	ldrb.w	r3, [sl]
 8006e36:	2b2a      	cmp	r3, #42	; 0x2a
 8006e38:	d015      	beq.n	8006e66 <_svfiprintf_r+0xf6>
 8006e3a:	9a07      	ldr	r2, [sp, #28]
 8006e3c:	4654      	mov	r4, sl
 8006e3e:	2000      	movs	r0, #0
 8006e40:	f04f 0c0a 	mov.w	ip, #10
 8006e44:	4621      	mov	r1, r4
 8006e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e4a:	3b30      	subs	r3, #48	; 0x30
 8006e4c:	2b09      	cmp	r3, #9
 8006e4e:	d94e      	bls.n	8006eee <_svfiprintf_r+0x17e>
 8006e50:	b1b0      	cbz	r0, 8006e80 <_svfiprintf_r+0x110>
 8006e52:	9207      	str	r2, [sp, #28]
 8006e54:	e014      	b.n	8006e80 <_svfiprintf_r+0x110>
 8006e56:	eba0 0308 	sub.w	r3, r0, r8
 8006e5a:	fa09 f303 	lsl.w	r3, r9, r3
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	9304      	str	r3, [sp, #16]
 8006e62:	46a2      	mov	sl, r4
 8006e64:	e7d2      	b.n	8006e0c <_svfiprintf_r+0x9c>
 8006e66:	9b03      	ldr	r3, [sp, #12]
 8006e68:	1d19      	adds	r1, r3, #4
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	9103      	str	r1, [sp, #12]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	bfbb      	ittet	lt
 8006e72:	425b      	neglt	r3, r3
 8006e74:	f042 0202 	orrlt.w	r2, r2, #2
 8006e78:	9307      	strge	r3, [sp, #28]
 8006e7a:	9307      	strlt	r3, [sp, #28]
 8006e7c:	bfb8      	it	lt
 8006e7e:	9204      	strlt	r2, [sp, #16]
 8006e80:	7823      	ldrb	r3, [r4, #0]
 8006e82:	2b2e      	cmp	r3, #46	; 0x2e
 8006e84:	d10c      	bne.n	8006ea0 <_svfiprintf_r+0x130>
 8006e86:	7863      	ldrb	r3, [r4, #1]
 8006e88:	2b2a      	cmp	r3, #42	; 0x2a
 8006e8a:	d135      	bne.n	8006ef8 <_svfiprintf_r+0x188>
 8006e8c:	9b03      	ldr	r3, [sp, #12]
 8006e8e:	1d1a      	adds	r2, r3, #4
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	9203      	str	r2, [sp, #12]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	bfb8      	it	lt
 8006e98:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e9c:	3402      	adds	r4, #2
 8006e9e:	9305      	str	r3, [sp, #20]
 8006ea0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f6c <_svfiprintf_r+0x1fc>
 8006ea4:	7821      	ldrb	r1, [r4, #0]
 8006ea6:	2203      	movs	r2, #3
 8006ea8:	4650      	mov	r0, sl
 8006eaa:	f7f9 f9e9 	bl	8000280 <memchr>
 8006eae:	b140      	cbz	r0, 8006ec2 <_svfiprintf_r+0x152>
 8006eb0:	2340      	movs	r3, #64	; 0x40
 8006eb2:	eba0 000a 	sub.w	r0, r0, sl
 8006eb6:	fa03 f000 	lsl.w	r0, r3, r0
 8006eba:	9b04      	ldr	r3, [sp, #16]
 8006ebc:	4303      	orrs	r3, r0
 8006ebe:	3401      	adds	r4, #1
 8006ec0:	9304      	str	r3, [sp, #16]
 8006ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ec6:	4826      	ldr	r0, [pc, #152]	; (8006f60 <_svfiprintf_r+0x1f0>)
 8006ec8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ecc:	2206      	movs	r2, #6
 8006ece:	f7f9 f9d7 	bl	8000280 <memchr>
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	d038      	beq.n	8006f48 <_svfiprintf_r+0x1d8>
 8006ed6:	4b23      	ldr	r3, [pc, #140]	; (8006f64 <_svfiprintf_r+0x1f4>)
 8006ed8:	bb1b      	cbnz	r3, 8006f22 <_svfiprintf_r+0x1b2>
 8006eda:	9b03      	ldr	r3, [sp, #12]
 8006edc:	3307      	adds	r3, #7
 8006ede:	f023 0307 	bic.w	r3, r3, #7
 8006ee2:	3308      	adds	r3, #8
 8006ee4:	9303      	str	r3, [sp, #12]
 8006ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ee8:	4433      	add	r3, r6
 8006eea:	9309      	str	r3, [sp, #36]	; 0x24
 8006eec:	e767      	b.n	8006dbe <_svfiprintf_r+0x4e>
 8006eee:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ef2:	460c      	mov	r4, r1
 8006ef4:	2001      	movs	r0, #1
 8006ef6:	e7a5      	b.n	8006e44 <_svfiprintf_r+0xd4>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	3401      	adds	r4, #1
 8006efc:	9305      	str	r3, [sp, #20]
 8006efe:	4619      	mov	r1, r3
 8006f00:	f04f 0c0a 	mov.w	ip, #10
 8006f04:	4620      	mov	r0, r4
 8006f06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f0a:	3a30      	subs	r2, #48	; 0x30
 8006f0c:	2a09      	cmp	r2, #9
 8006f0e:	d903      	bls.n	8006f18 <_svfiprintf_r+0x1a8>
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d0c5      	beq.n	8006ea0 <_svfiprintf_r+0x130>
 8006f14:	9105      	str	r1, [sp, #20]
 8006f16:	e7c3      	b.n	8006ea0 <_svfiprintf_r+0x130>
 8006f18:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f1c:	4604      	mov	r4, r0
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e7f0      	b.n	8006f04 <_svfiprintf_r+0x194>
 8006f22:	ab03      	add	r3, sp, #12
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	462a      	mov	r2, r5
 8006f28:	4b0f      	ldr	r3, [pc, #60]	; (8006f68 <_svfiprintf_r+0x1f8>)
 8006f2a:	a904      	add	r1, sp, #16
 8006f2c:	4638      	mov	r0, r7
 8006f2e:	f3af 8000 	nop.w
 8006f32:	1c42      	adds	r2, r0, #1
 8006f34:	4606      	mov	r6, r0
 8006f36:	d1d6      	bne.n	8006ee6 <_svfiprintf_r+0x176>
 8006f38:	89ab      	ldrh	r3, [r5, #12]
 8006f3a:	065b      	lsls	r3, r3, #25
 8006f3c:	f53f af2c 	bmi.w	8006d98 <_svfiprintf_r+0x28>
 8006f40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f42:	b01d      	add	sp, #116	; 0x74
 8006f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f48:	ab03      	add	r3, sp, #12
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	462a      	mov	r2, r5
 8006f4e:	4b06      	ldr	r3, [pc, #24]	; (8006f68 <_svfiprintf_r+0x1f8>)
 8006f50:	a904      	add	r1, sp, #16
 8006f52:	4638      	mov	r0, r7
 8006f54:	f000 f87a 	bl	800704c <_printf_i>
 8006f58:	e7eb      	b.n	8006f32 <_svfiprintf_r+0x1c2>
 8006f5a:	bf00      	nop
 8006f5c:	080076a0 	.word	0x080076a0
 8006f60:	080076aa 	.word	0x080076aa
 8006f64:	00000000 	.word	0x00000000
 8006f68:	08006cb9 	.word	0x08006cb9
 8006f6c:	080076a6 	.word	0x080076a6

08006f70 <_printf_common>:
 8006f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f74:	4616      	mov	r6, r2
 8006f76:	4699      	mov	r9, r3
 8006f78:	688a      	ldr	r2, [r1, #8]
 8006f7a:	690b      	ldr	r3, [r1, #16]
 8006f7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f80:	4293      	cmp	r3, r2
 8006f82:	bfb8      	it	lt
 8006f84:	4613      	movlt	r3, r2
 8006f86:	6033      	str	r3, [r6, #0]
 8006f88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f8c:	4607      	mov	r7, r0
 8006f8e:	460c      	mov	r4, r1
 8006f90:	b10a      	cbz	r2, 8006f96 <_printf_common+0x26>
 8006f92:	3301      	adds	r3, #1
 8006f94:	6033      	str	r3, [r6, #0]
 8006f96:	6823      	ldr	r3, [r4, #0]
 8006f98:	0699      	lsls	r1, r3, #26
 8006f9a:	bf42      	ittt	mi
 8006f9c:	6833      	ldrmi	r3, [r6, #0]
 8006f9e:	3302      	addmi	r3, #2
 8006fa0:	6033      	strmi	r3, [r6, #0]
 8006fa2:	6825      	ldr	r5, [r4, #0]
 8006fa4:	f015 0506 	ands.w	r5, r5, #6
 8006fa8:	d106      	bne.n	8006fb8 <_printf_common+0x48>
 8006faa:	f104 0a19 	add.w	sl, r4, #25
 8006fae:	68e3      	ldr	r3, [r4, #12]
 8006fb0:	6832      	ldr	r2, [r6, #0]
 8006fb2:	1a9b      	subs	r3, r3, r2
 8006fb4:	42ab      	cmp	r3, r5
 8006fb6:	dc26      	bgt.n	8007006 <_printf_common+0x96>
 8006fb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fbc:	1e13      	subs	r3, r2, #0
 8006fbe:	6822      	ldr	r2, [r4, #0]
 8006fc0:	bf18      	it	ne
 8006fc2:	2301      	movne	r3, #1
 8006fc4:	0692      	lsls	r2, r2, #26
 8006fc6:	d42b      	bmi.n	8007020 <_printf_common+0xb0>
 8006fc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fcc:	4649      	mov	r1, r9
 8006fce:	4638      	mov	r0, r7
 8006fd0:	47c0      	blx	r8
 8006fd2:	3001      	adds	r0, #1
 8006fd4:	d01e      	beq.n	8007014 <_printf_common+0xa4>
 8006fd6:	6823      	ldr	r3, [r4, #0]
 8006fd8:	68e5      	ldr	r5, [r4, #12]
 8006fda:	6832      	ldr	r2, [r6, #0]
 8006fdc:	f003 0306 	and.w	r3, r3, #6
 8006fe0:	2b04      	cmp	r3, #4
 8006fe2:	bf08      	it	eq
 8006fe4:	1aad      	subeq	r5, r5, r2
 8006fe6:	68a3      	ldr	r3, [r4, #8]
 8006fe8:	6922      	ldr	r2, [r4, #16]
 8006fea:	bf0c      	ite	eq
 8006fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ff0:	2500      	movne	r5, #0
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	bfc4      	itt	gt
 8006ff6:	1a9b      	subgt	r3, r3, r2
 8006ff8:	18ed      	addgt	r5, r5, r3
 8006ffa:	2600      	movs	r6, #0
 8006ffc:	341a      	adds	r4, #26
 8006ffe:	42b5      	cmp	r5, r6
 8007000:	d11a      	bne.n	8007038 <_printf_common+0xc8>
 8007002:	2000      	movs	r0, #0
 8007004:	e008      	b.n	8007018 <_printf_common+0xa8>
 8007006:	2301      	movs	r3, #1
 8007008:	4652      	mov	r2, sl
 800700a:	4649      	mov	r1, r9
 800700c:	4638      	mov	r0, r7
 800700e:	47c0      	blx	r8
 8007010:	3001      	adds	r0, #1
 8007012:	d103      	bne.n	800701c <_printf_common+0xac>
 8007014:	f04f 30ff 	mov.w	r0, #4294967295
 8007018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800701c:	3501      	adds	r5, #1
 800701e:	e7c6      	b.n	8006fae <_printf_common+0x3e>
 8007020:	18e1      	adds	r1, r4, r3
 8007022:	1c5a      	adds	r2, r3, #1
 8007024:	2030      	movs	r0, #48	; 0x30
 8007026:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800702a:	4422      	add	r2, r4
 800702c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007030:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007034:	3302      	adds	r3, #2
 8007036:	e7c7      	b.n	8006fc8 <_printf_common+0x58>
 8007038:	2301      	movs	r3, #1
 800703a:	4622      	mov	r2, r4
 800703c:	4649      	mov	r1, r9
 800703e:	4638      	mov	r0, r7
 8007040:	47c0      	blx	r8
 8007042:	3001      	adds	r0, #1
 8007044:	d0e6      	beq.n	8007014 <_printf_common+0xa4>
 8007046:	3601      	adds	r6, #1
 8007048:	e7d9      	b.n	8006ffe <_printf_common+0x8e>
	...

0800704c <_printf_i>:
 800704c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007050:	460c      	mov	r4, r1
 8007052:	4691      	mov	r9, r2
 8007054:	7e27      	ldrb	r7, [r4, #24]
 8007056:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007058:	2f78      	cmp	r7, #120	; 0x78
 800705a:	4680      	mov	r8, r0
 800705c:	469a      	mov	sl, r3
 800705e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007062:	d807      	bhi.n	8007074 <_printf_i+0x28>
 8007064:	2f62      	cmp	r7, #98	; 0x62
 8007066:	d80a      	bhi.n	800707e <_printf_i+0x32>
 8007068:	2f00      	cmp	r7, #0
 800706a:	f000 80d8 	beq.w	800721e <_printf_i+0x1d2>
 800706e:	2f58      	cmp	r7, #88	; 0x58
 8007070:	f000 80a3 	beq.w	80071ba <_printf_i+0x16e>
 8007074:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007078:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800707c:	e03a      	b.n	80070f4 <_printf_i+0xa8>
 800707e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007082:	2b15      	cmp	r3, #21
 8007084:	d8f6      	bhi.n	8007074 <_printf_i+0x28>
 8007086:	a001      	add	r0, pc, #4	; (adr r0, 800708c <_printf_i+0x40>)
 8007088:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800708c:	080070e5 	.word	0x080070e5
 8007090:	080070f9 	.word	0x080070f9
 8007094:	08007075 	.word	0x08007075
 8007098:	08007075 	.word	0x08007075
 800709c:	08007075 	.word	0x08007075
 80070a0:	08007075 	.word	0x08007075
 80070a4:	080070f9 	.word	0x080070f9
 80070a8:	08007075 	.word	0x08007075
 80070ac:	08007075 	.word	0x08007075
 80070b0:	08007075 	.word	0x08007075
 80070b4:	08007075 	.word	0x08007075
 80070b8:	08007205 	.word	0x08007205
 80070bc:	08007129 	.word	0x08007129
 80070c0:	080071e7 	.word	0x080071e7
 80070c4:	08007075 	.word	0x08007075
 80070c8:	08007075 	.word	0x08007075
 80070cc:	08007227 	.word	0x08007227
 80070d0:	08007075 	.word	0x08007075
 80070d4:	08007129 	.word	0x08007129
 80070d8:	08007075 	.word	0x08007075
 80070dc:	08007075 	.word	0x08007075
 80070e0:	080071ef 	.word	0x080071ef
 80070e4:	680b      	ldr	r3, [r1, #0]
 80070e6:	1d1a      	adds	r2, r3, #4
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	600a      	str	r2, [r1, #0]
 80070ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80070f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070f4:	2301      	movs	r3, #1
 80070f6:	e0a3      	b.n	8007240 <_printf_i+0x1f4>
 80070f8:	6825      	ldr	r5, [r4, #0]
 80070fa:	6808      	ldr	r0, [r1, #0]
 80070fc:	062e      	lsls	r6, r5, #24
 80070fe:	f100 0304 	add.w	r3, r0, #4
 8007102:	d50a      	bpl.n	800711a <_printf_i+0xce>
 8007104:	6805      	ldr	r5, [r0, #0]
 8007106:	600b      	str	r3, [r1, #0]
 8007108:	2d00      	cmp	r5, #0
 800710a:	da03      	bge.n	8007114 <_printf_i+0xc8>
 800710c:	232d      	movs	r3, #45	; 0x2d
 800710e:	426d      	negs	r5, r5
 8007110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007114:	485e      	ldr	r0, [pc, #376]	; (8007290 <_printf_i+0x244>)
 8007116:	230a      	movs	r3, #10
 8007118:	e019      	b.n	800714e <_printf_i+0x102>
 800711a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800711e:	6805      	ldr	r5, [r0, #0]
 8007120:	600b      	str	r3, [r1, #0]
 8007122:	bf18      	it	ne
 8007124:	b22d      	sxthne	r5, r5
 8007126:	e7ef      	b.n	8007108 <_printf_i+0xbc>
 8007128:	680b      	ldr	r3, [r1, #0]
 800712a:	6825      	ldr	r5, [r4, #0]
 800712c:	1d18      	adds	r0, r3, #4
 800712e:	6008      	str	r0, [r1, #0]
 8007130:	0628      	lsls	r0, r5, #24
 8007132:	d501      	bpl.n	8007138 <_printf_i+0xec>
 8007134:	681d      	ldr	r5, [r3, #0]
 8007136:	e002      	b.n	800713e <_printf_i+0xf2>
 8007138:	0669      	lsls	r1, r5, #25
 800713a:	d5fb      	bpl.n	8007134 <_printf_i+0xe8>
 800713c:	881d      	ldrh	r5, [r3, #0]
 800713e:	4854      	ldr	r0, [pc, #336]	; (8007290 <_printf_i+0x244>)
 8007140:	2f6f      	cmp	r7, #111	; 0x6f
 8007142:	bf0c      	ite	eq
 8007144:	2308      	moveq	r3, #8
 8007146:	230a      	movne	r3, #10
 8007148:	2100      	movs	r1, #0
 800714a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800714e:	6866      	ldr	r6, [r4, #4]
 8007150:	60a6      	str	r6, [r4, #8]
 8007152:	2e00      	cmp	r6, #0
 8007154:	bfa2      	ittt	ge
 8007156:	6821      	ldrge	r1, [r4, #0]
 8007158:	f021 0104 	bicge.w	r1, r1, #4
 800715c:	6021      	strge	r1, [r4, #0]
 800715e:	b90d      	cbnz	r5, 8007164 <_printf_i+0x118>
 8007160:	2e00      	cmp	r6, #0
 8007162:	d04d      	beq.n	8007200 <_printf_i+0x1b4>
 8007164:	4616      	mov	r6, r2
 8007166:	fbb5 f1f3 	udiv	r1, r5, r3
 800716a:	fb03 5711 	mls	r7, r3, r1, r5
 800716e:	5dc7      	ldrb	r7, [r0, r7]
 8007170:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007174:	462f      	mov	r7, r5
 8007176:	42bb      	cmp	r3, r7
 8007178:	460d      	mov	r5, r1
 800717a:	d9f4      	bls.n	8007166 <_printf_i+0x11a>
 800717c:	2b08      	cmp	r3, #8
 800717e:	d10b      	bne.n	8007198 <_printf_i+0x14c>
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	07df      	lsls	r7, r3, #31
 8007184:	d508      	bpl.n	8007198 <_printf_i+0x14c>
 8007186:	6923      	ldr	r3, [r4, #16]
 8007188:	6861      	ldr	r1, [r4, #4]
 800718a:	4299      	cmp	r1, r3
 800718c:	bfde      	ittt	le
 800718e:	2330      	movle	r3, #48	; 0x30
 8007190:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007194:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007198:	1b92      	subs	r2, r2, r6
 800719a:	6122      	str	r2, [r4, #16]
 800719c:	f8cd a000 	str.w	sl, [sp]
 80071a0:	464b      	mov	r3, r9
 80071a2:	aa03      	add	r2, sp, #12
 80071a4:	4621      	mov	r1, r4
 80071a6:	4640      	mov	r0, r8
 80071a8:	f7ff fee2 	bl	8006f70 <_printf_common>
 80071ac:	3001      	adds	r0, #1
 80071ae:	d14c      	bne.n	800724a <_printf_i+0x1fe>
 80071b0:	f04f 30ff 	mov.w	r0, #4294967295
 80071b4:	b004      	add	sp, #16
 80071b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071ba:	4835      	ldr	r0, [pc, #212]	; (8007290 <_printf_i+0x244>)
 80071bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80071c0:	6823      	ldr	r3, [r4, #0]
 80071c2:	680e      	ldr	r6, [r1, #0]
 80071c4:	061f      	lsls	r7, r3, #24
 80071c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80071ca:	600e      	str	r6, [r1, #0]
 80071cc:	d514      	bpl.n	80071f8 <_printf_i+0x1ac>
 80071ce:	07d9      	lsls	r1, r3, #31
 80071d0:	bf44      	itt	mi
 80071d2:	f043 0320 	orrmi.w	r3, r3, #32
 80071d6:	6023      	strmi	r3, [r4, #0]
 80071d8:	b91d      	cbnz	r5, 80071e2 <_printf_i+0x196>
 80071da:	6823      	ldr	r3, [r4, #0]
 80071dc:	f023 0320 	bic.w	r3, r3, #32
 80071e0:	6023      	str	r3, [r4, #0]
 80071e2:	2310      	movs	r3, #16
 80071e4:	e7b0      	b.n	8007148 <_printf_i+0xfc>
 80071e6:	6823      	ldr	r3, [r4, #0]
 80071e8:	f043 0320 	orr.w	r3, r3, #32
 80071ec:	6023      	str	r3, [r4, #0]
 80071ee:	2378      	movs	r3, #120	; 0x78
 80071f0:	4828      	ldr	r0, [pc, #160]	; (8007294 <_printf_i+0x248>)
 80071f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071f6:	e7e3      	b.n	80071c0 <_printf_i+0x174>
 80071f8:	065e      	lsls	r6, r3, #25
 80071fa:	bf48      	it	mi
 80071fc:	b2ad      	uxthmi	r5, r5
 80071fe:	e7e6      	b.n	80071ce <_printf_i+0x182>
 8007200:	4616      	mov	r6, r2
 8007202:	e7bb      	b.n	800717c <_printf_i+0x130>
 8007204:	680b      	ldr	r3, [r1, #0]
 8007206:	6826      	ldr	r6, [r4, #0]
 8007208:	6960      	ldr	r0, [r4, #20]
 800720a:	1d1d      	adds	r5, r3, #4
 800720c:	600d      	str	r5, [r1, #0]
 800720e:	0635      	lsls	r5, r6, #24
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	d501      	bpl.n	8007218 <_printf_i+0x1cc>
 8007214:	6018      	str	r0, [r3, #0]
 8007216:	e002      	b.n	800721e <_printf_i+0x1d2>
 8007218:	0671      	lsls	r1, r6, #25
 800721a:	d5fb      	bpl.n	8007214 <_printf_i+0x1c8>
 800721c:	8018      	strh	r0, [r3, #0]
 800721e:	2300      	movs	r3, #0
 8007220:	6123      	str	r3, [r4, #16]
 8007222:	4616      	mov	r6, r2
 8007224:	e7ba      	b.n	800719c <_printf_i+0x150>
 8007226:	680b      	ldr	r3, [r1, #0]
 8007228:	1d1a      	adds	r2, r3, #4
 800722a:	600a      	str	r2, [r1, #0]
 800722c:	681e      	ldr	r6, [r3, #0]
 800722e:	6862      	ldr	r2, [r4, #4]
 8007230:	2100      	movs	r1, #0
 8007232:	4630      	mov	r0, r6
 8007234:	f7f9 f824 	bl	8000280 <memchr>
 8007238:	b108      	cbz	r0, 800723e <_printf_i+0x1f2>
 800723a:	1b80      	subs	r0, r0, r6
 800723c:	6060      	str	r0, [r4, #4]
 800723e:	6863      	ldr	r3, [r4, #4]
 8007240:	6123      	str	r3, [r4, #16]
 8007242:	2300      	movs	r3, #0
 8007244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007248:	e7a8      	b.n	800719c <_printf_i+0x150>
 800724a:	6923      	ldr	r3, [r4, #16]
 800724c:	4632      	mov	r2, r6
 800724e:	4649      	mov	r1, r9
 8007250:	4640      	mov	r0, r8
 8007252:	47d0      	blx	sl
 8007254:	3001      	adds	r0, #1
 8007256:	d0ab      	beq.n	80071b0 <_printf_i+0x164>
 8007258:	6823      	ldr	r3, [r4, #0]
 800725a:	079b      	lsls	r3, r3, #30
 800725c:	d413      	bmi.n	8007286 <_printf_i+0x23a>
 800725e:	68e0      	ldr	r0, [r4, #12]
 8007260:	9b03      	ldr	r3, [sp, #12]
 8007262:	4298      	cmp	r0, r3
 8007264:	bfb8      	it	lt
 8007266:	4618      	movlt	r0, r3
 8007268:	e7a4      	b.n	80071b4 <_printf_i+0x168>
 800726a:	2301      	movs	r3, #1
 800726c:	4632      	mov	r2, r6
 800726e:	4649      	mov	r1, r9
 8007270:	4640      	mov	r0, r8
 8007272:	47d0      	blx	sl
 8007274:	3001      	adds	r0, #1
 8007276:	d09b      	beq.n	80071b0 <_printf_i+0x164>
 8007278:	3501      	adds	r5, #1
 800727a:	68e3      	ldr	r3, [r4, #12]
 800727c:	9903      	ldr	r1, [sp, #12]
 800727e:	1a5b      	subs	r3, r3, r1
 8007280:	42ab      	cmp	r3, r5
 8007282:	dcf2      	bgt.n	800726a <_printf_i+0x21e>
 8007284:	e7eb      	b.n	800725e <_printf_i+0x212>
 8007286:	2500      	movs	r5, #0
 8007288:	f104 0619 	add.w	r6, r4, #25
 800728c:	e7f5      	b.n	800727a <_printf_i+0x22e>
 800728e:	bf00      	nop
 8007290:	080076b1 	.word	0x080076b1
 8007294:	080076c2 	.word	0x080076c2

08007298 <memmove>:
 8007298:	4288      	cmp	r0, r1
 800729a:	b510      	push	{r4, lr}
 800729c:	eb01 0402 	add.w	r4, r1, r2
 80072a0:	d902      	bls.n	80072a8 <memmove+0x10>
 80072a2:	4284      	cmp	r4, r0
 80072a4:	4623      	mov	r3, r4
 80072a6:	d807      	bhi.n	80072b8 <memmove+0x20>
 80072a8:	1e43      	subs	r3, r0, #1
 80072aa:	42a1      	cmp	r1, r4
 80072ac:	d008      	beq.n	80072c0 <memmove+0x28>
 80072ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80072b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80072b6:	e7f8      	b.n	80072aa <memmove+0x12>
 80072b8:	4402      	add	r2, r0
 80072ba:	4601      	mov	r1, r0
 80072bc:	428a      	cmp	r2, r1
 80072be:	d100      	bne.n	80072c2 <memmove+0x2a>
 80072c0:	bd10      	pop	{r4, pc}
 80072c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80072ca:	e7f7      	b.n	80072bc <memmove+0x24>

080072cc <_free_r>:
 80072cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072ce:	2900      	cmp	r1, #0
 80072d0:	d048      	beq.n	8007364 <_free_r+0x98>
 80072d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072d6:	9001      	str	r0, [sp, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f1a1 0404 	sub.w	r4, r1, #4
 80072de:	bfb8      	it	lt
 80072e0:	18e4      	addlt	r4, r4, r3
 80072e2:	f000 f8d3 	bl	800748c <__malloc_lock>
 80072e6:	4a20      	ldr	r2, [pc, #128]	; (8007368 <_free_r+0x9c>)
 80072e8:	9801      	ldr	r0, [sp, #4]
 80072ea:	6813      	ldr	r3, [r2, #0]
 80072ec:	4615      	mov	r5, r2
 80072ee:	b933      	cbnz	r3, 80072fe <_free_r+0x32>
 80072f0:	6063      	str	r3, [r4, #4]
 80072f2:	6014      	str	r4, [r2, #0]
 80072f4:	b003      	add	sp, #12
 80072f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072fa:	f000 b8cd 	b.w	8007498 <__malloc_unlock>
 80072fe:	42a3      	cmp	r3, r4
 8007300:	d90b      	bls.n	800731a <_free_r+0x4e>
 8007302:	6821      	ldr	r1, [r4, #0]
 8007304:	1862      	adds	r2, r4, r1
 8007306:	4293      	cmp	r3, r2
 8007308:	bf04      	itt	eq
 800730a:	681a      	ldreq	r2, [r3, #0]
 800730c:	685b      	ldreq	r3, [r3, #4]
 800730e:	6063      	str	r3, [r4, #4]
 8007310:	bf04      	itt	eq
 8007312:	1852      	addeq	r2, r2, r1
 8007314:	6022      	streq	r2, [r4, #0]
 8007316:	602c      	str	r4, [r5, #0]
 8007318:	e7ec      	b.n	80072f4 <_free_r+0x28>
 800731a:	461a      	mov	r2, r3
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	b10b      	cbz	r3, 8007324 <_free_r+0x58>
 8007320:	42a3      	cmp	r3, r4
 8007322:	d9fa      	bls.n	800731a <_free_r+0x4e>
 8007324:	6811      	ldr	r1, [r2, #0]
 8007326:	1855      	adds	r5, r2, r1
 8007328:	42a5      	cmp	r5, r4
 800732a:	d10b      	bne.n	8007344 <_free_r+0x78>
 800732c:	6824      	ldr	r4, [r4, #0]
 800732e:	4421      	add	r1, r4
 8007330:	1854      	adds	r4, r2, r1
 8007332:	42a3      	cmp	r3, r4
 8007334:	6011      	str	r1, [r2, #0]
 8007336:	d1dd      	bne.n	80072f4 <_free_r+0x28>
 8007338:	681c      	ldr	r4, [r3, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	6053      	str	r3, [r2, #4]
 800733e:	4421      	add	r1, r4
 8007340:	6011      	str	r1, [r2, #0]
 8007342:	e7d7      	b.n	80072f4 <_free_r+0x28>
 8007344:	d902      	bls.n	800734c <_free_r+0x80>
 8007346:	230c      	movs	r3, #12
 8007348:	6003      	str	r3, [r0, #0]
 800734a:	e7d3      	b.n	80072f4 <_free_r+0x28>
 800734c:	6825      	ldr	r5, [r4, #0]
 800734e:	1961      	adds	r1, r4, r5
 8007350:	428b      	cmp	r3, r1
 8007352:	bf04      	itt	eq
 8007354:	6819      	ldreq	r1, [r3, #0]
 8007356:	685b      	ldreq	r3, [r3, #4]
 8007358:	6063      	str	r3, [r4, #4]
 800735a:	bf04      	itt	eq
 800735c:	1949      	addeq	r1, r1, r5
 800735e:	6021      	streq	r1, [r4, #0]
 8007360:	6054      	str	r4, [r2, #4]
 8007362:	e7c7      	b.n	80072f4 <_free_r+0x28>
 8007364:	b003      	add	sp, #12
 8007366:	bd30      	pop	{r4, r5, pc}
 8007368:	200183e8 	.word	0x200183e8

0800736c <_malloc_r>:
 800736c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800736e:	1ccd      	adds	r5, r1, #3
 8007370:	f025 0503 	bic.w	r5, r5, #3
 8007374:	3508      	adds	r5, #8
 8007376:	2d0c      	cmp	r5, #12
 8007378:	bf38      	it	cc
 800737a:	250c      	movcc	r5, #12
 800737c:	2d00      	cmp	r5, #0
 800737e:	4606      	mov	r6, r0
 8007380:	db01      	blt.n	8007386 <_malloc_r+0x1a>
 8007382:	42a9      	cmp	r1, r5
 8007384:	d903      	bls.n	800738e <_malloc_r+0x22>
 8007386:	230c      	movs	r3, #12
 8007388:	6033      	str	r3, [r6, #0]
 800738a:	2000      	movs	r0, #0
 800738c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800738e:	f000 f87d 	bl	800748c <__malloc_lock>
 8007392:	4921      	ldr	r1, [pc, #132]	; (8007418 <_malloc_r+0xac>)
 8007394:	680a      	ldr	r2, [r1, #0]
 8007396:	4614      	mov	r4, r2
 8007398:	b99c      	cbnz	r4, 80073c2 <_malloc_r+0x56>
 800739a:	4f20      	ldr	r7, [pc, #128]	; (800741c <_malloc_r+0xb0>)
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	b923      	cbnz	r3, 80073aa <_malloc_r+0x3e>
 80073a0:	4621      	mov	r1, r4
 80073a2:	4630      	mov	r0, r6
 80073a4:	f000 f862 	bl	800746c <_sbrk_r>
 80073a8:	6038      	str	r0, [r7, #0]
 80073aa:	4629      	mov	r1, r5
 80073ac:	4630      	mov	r0, r6
 80073ae:	f000 f85d 	bl	800746c <_sbrk_r>
 80073b2:	1c43      	adds	r3, r0, #1
 80073b4:	d123      	bne.n	80073fe <_malloc_r+0x92>
 80073b6:	230c      	movs	r3, #12
 80073b8:	6033      	str	r3, [r6, #0]
 80073ba:	4630      	mov	r0, r6
 80073bc:	f000 f86c 	bl	8007498 <__malloc_unlock>
 80073c0:	e7e3      	b.n	800738a <_malloc_r+0x1e>
 80073c2:	6823      	ldr	r3, [r4, #0]
 80073c4:	1b5b      	subs	r3, r3, r5
 80073c6:	d417      	bmi.n	80073f8 <_malloc_r+0x8c>
 80073c8:	2b0b      	cmp	r3, #11
 80073ca:	d903      	bls.n	80073d4 <_malloc_r+0x68>
 80073cc:	6023      	str	r3, [r4, #0]
 80073ce:	441c      	add	r4, r3
 80073d0:	6025      	str	r5, [r4, #0]
 80073d2:	e004      	b.n	80073de <_malloc_r+0x72>
 80073d4:	6863      	ldr	r3, [r4, #4]
 80073d6:	42a2      	cmp	r2, r4
 80073d8:	bf0c      	ite	eq
 80073da:	600b      	streq	r3, [r1, #0]
 80073dc:	6053      	strne	r3, [r2, #4]
 80073de:	4630      	mov	r0, r6
 80073e0:	f000 f85a 	bl	8007498 <__malloc_unlock>
 80073e4:	f104 000b 	add.w	r0, r4, #11
 80073e8:	1d23      	adds	r3, r4, #4
 80073ea:	f020 0007 	bic.w	r0, r0, #7
 80073ee:	1ac2      	subs	r2, r0, r3
 80073f0:	d0cc      	beq.n	800738c <_malloc_r+0x20>
 80073f2:	1a1b      	subs	r3, r3, r0
 80073f4:	50a3      	str	r3, [r4, r2]
 80073f6:	e7c9      	b.n	800738c <_malloc_r+0x20>
 80073f8:	4622      	mov	r2, r4
 80073fa:	6864      	ldr	r4, [r4, #4]
 80073fc:	e7cc      	b.n	8007398 <_malloc_r+0x2c>
 80073fe:	1cc4      	adds	r4, r0, #3
 8007400:	f024 0403 	bic.w	r4, r4, #3
 8007404:	42a0      	cmp	r0, r4
 8007406:	d0e3      	beq.n	80073d0 <_malloc_r+0x64>
 8007408:	1a21      	subs	r1, r4, r0
 800740a:	4630      	mov	r0, r6
 800740c:	f000 f82e 	bl	800746c <_sbrk_r>
 8007410:	3001      	adds	r0, #1
 8007412:	d1dd      	bne.n	80073d0 <_malloc_r+0x64>
 8007414:	e7cf      	b.n	80073b6 <_malloc_r+0x4a>
 8007416:	bf00      	nop
 8007418:	200183e8 	.word	0x200183e8
 800741c:	200183ec 	.word	0x200183ec

08007420 <_realloc_r>:
 8007420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007422:	4607      	mov	r7, r0
 8007424:	4614      	mov	r4, r2
 8007426:	460e      	mov	r6, r1
 8007428:	b921      	cbnz	r1, 8007434 <_realloc_r+0x14>
 800742a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800742e:	4611      	mov	r1, r2
 8007430:	f7ff bf9c 	b.w	800736c <_malloc_r>
 8007434:	b922      	cbnz	r2, 8007440 <_realloc_r+0x20>
 8007436:	f7ff ff49 	bl	80072cc <_free_r>
 800743a:	4625      	mov	r5, r4
 800743c:	4628      	mov	r0, r5
 800743e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007440:	f000 f830 	bl	80074a4 <_malloc_usable_size_r>
 8007444:	42a0      	cmp	r0, r4
 8007446:	d20f      	bcs.n	8007468 <_realloc_r+0x48>
 8007448:	4621      	mov	r1, r4
 800744a:	4638      	mov	r0, r7
 800744c:	f7ff ff8e 	bl	800736c <_malloc_r>
 8007450:	4605      	mov	r5, r0
 8007452:	2800      	cmp	r0, #0
 8007454:	d0f2      	beq.n	800743c <_realloc_r+0x1c>
 8007456:	4631      	mov	r1, r6
 8007458:	4622      	mov	r2, r4
 800745a:	f7ff fbf7 	bl	8006c4c <memcpy>
 800745e:	4631      	mov	r1, r6
 8007460:	4638      	mov	r0, r7
 8007462:	f7ff ff33 	bl	80072cc <_free_r>
 8007466:	e7e9      	b.n	800743c <_realloc_r+0x1c>
 8007468:	4635      	mov	r5, r6
 800746a:	e7e7      	b.n	800743c <_realloc_r+0x1c>

0800746c <_sbrk_r>:
 800746c:	b538      	push	{r3, r4, r5, lr}
 800746e:	4d06      	ldr	r5, [pc, #24]	; (8007488 <_sbrk_r+0x1c>)
 8007470:	2300      	movs	r3, #0
 8007472:	4604      	mov	r4, r0
 8007474:	4608      	mov	r0, r1
 8007476:	602b      	str	r3, [r5, #0]
 8007478:	f000 f81e 	bl	80074b8 <_sbrk>
 800747c:	1c43      	adds	r3, r0, #1
 800747e:	d102      	bne.n	8007486 <_sbrk_r+0x1a>
 8007480:	682b      	ldr	r3, [r5, #0]
 8007482:	b103      	cbz	r3, 8007486 <_sbrk_r+0x1a>
 8007484:	6023      	str	r3, [r4, #0]
 8007486:	bd38      	pop	{r3, r4, r5, pc}
 8007488:	20018528 	.word	0x20018528

0800748c <__malloc_lock>:
 800748c:	4801      	ldr	r0, [pc, #4]	; (8007494 <__malloc_lock+0x8>)
 800748e:	f000 b811 	b.w	80074b4 <__retarget_lock_acquire_recursive>
 8007492:	bf00      	nop
 8007494:	20018530 	.word	0x20018530

08007498 <__malloc_unlock>:
 8007498:	4801      	ldr	r0, [pc, #4]	; (80074a0 <__malloc_unlock+0x8>)
 800749a:	f000 b80c 	b.w	80074b6 <__retarget_lock_release_recursive>
 800749e:	bf00      	nop
 80074a0:	20018530 	.word	0x20018530

080074a4 <_malloc_usable_size_r>:
 80074a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074a8:	1f18      	subs	r0, r3, #4
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	bfbc      	itt	lt
 80074ae:	580b      	ldrlt	r3, [r1, r0]
 80074b0:	18c0      	addlt	r0, r0, r3
 80074b2:	4770      	bx	lr

080074b4 <__retarget_lock_acquire_recursive>:
 80074b4:	4770      	bx	lr

080074b6 <__retarget_lock_release_recursive>:
 80074b6:	4770      	bx	lr

080074b8 <_sbrk>:
 80074b8:	4b04      	ldr	r3, [pc, #16]	; (80074cc <_sbrk+0x14>)
 80074ba:	6819      	ldr	r1, [r3, #0]
 80074bc:	4602      	mov	r2, r0
 80074be:	b909      	cbnz	r1, 80074c4 <_sbrk+0xc>
 80074c0:	4903      	ldr	r1, [pc, #12]	; (80074d0 <_sbrk+0x18>)
 80074c2:	6019      	str	r1, [r3, #0]
 80074c4:	6818      	ldr	r0, [r3, #0]
 80074c6:	4402      	add	r2, r0
 80074c8:	601a      	str	r2, [r3, #0]
 80074ca:	4770      	bx	lr
 80074cc:	200183f0 	.word	0x200183f0
 80074d0:	20018538 	.word	0x20018538

080074d4 <_init>:
 80074d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074d6:	bf00      	nop
 80074d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074da:	bc08      	pop	{r3}
 80074dc:	469e      	mov	lr, r3
 80074de:	4770      	bx	lr

080074e0 <_fini>:
 80074e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e2:	bf00      	nop
 80074e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074e6:	bc08      	pop	{r3}
 80074e8:	469e      	mov	lr, r3
 80074ea:	4770      	bx	lr
