
STM32_FreeRTOS_UART_Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f38  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080060d8  080060d8  000160d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061c4  080061c4  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  080061c4  080061c4  000161c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061cc  080061cc  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061cc  080061cc  000161cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061d0  080061d0  000161d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  080061d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e7c  20000104  080062d8  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012f80  080062d8  00022f80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013752  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002be8  00000000  00000000  00033886  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001130  00000000  00000000  00036470  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fe8  00000000  00000000  000375a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017cea  00000000  00000000  00038588  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d4be  00000000  00000000  00050272  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009461a  00000000  00000000  0005d730  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f1d4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a84  00000000  00000000  000f1dc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000104 	.word	0x20000104
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080060c0 	.word	0x080060c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000108 	.word	0x20000108
 80001dc:	080060c0 	.word	0x080060c0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fc69 	bl	8000e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f86b 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f8fd 	bl	800079c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a2:	f000 f8c5 	bl	8000730 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  command_queue_handler = xQueueCreate(CMD_QUEUE_SIZE, sizeof(APP_CMD_t *));
 80005a6:	2200      	movs	r2, #0
 80005a8:	2104      	movs	r1, #4
 80005aa:	200a      	movs	r0, #10
 80005ac:	f002 fe70 	bl	8003290 <xQueueGenericCreate>
 80005b0:	4602      	mov	r2, r0
 80005b2:	4b22      	ldr	r3, [pc, #136]	; (800063c <main+0xac>)
 80005b4:	601a      	str	r2, [r3, #0]
  uart_write_queue_handler = xQueueCreate(UART_QUEUE_SIZE, sizeof(char *));
 80005b6:	2200      	movs	r2, #0
 80005b8:	2104      	movs	r1, #4
 80005ba:	200a      	movs	r0, #10
 80005bc:	f002 fe68 	bl	8003290 <xQueueGenericCreate>
 80005c0:	4602      	mov	r2, r0
 80005c2:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <main+0xb0>)
 80005c4:	601a      	str	r2, [r3, #0]

  if((command_queue_handler != NULL) && (uart_write_queue_handler != NULL))
 80005c6:	4b1d      	ldr	r3, [pc, #116]	; (800063c <main+0xac>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d032      	beq.n	8000634 <main+0xa4>
 80005ce:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <main+0xb0>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d02e      	beq.n	8000634 <main+0xa4>
  {
	  xTaskCreate((pdTASK_CODE) vTask1_menuDisplay_handler, "Display Menu", 500, NULL, 1,
 80005d6:	4b1b      	ldr	r3, [pc, #108]	; (8000644 <main+0xb4>)
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2301      	movs	r3, #1
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2300      	movs	r3, #0
 80005e0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005e4:	4918      	ldr	r1, [pc, #96]	; (8000648 <main+0xb8>)
 80005e6:	4819      	ldr	r0, [pc, #100]	; (800064c <main+0xbc>)
 80005e8:	f003 fa86 	bl	8003af8 <xTaskCreate>
	    			&xtaskMenuDisplay_Handle);
	  xTaskCreate((pdTASK_CODE) vTask2_cmdHandling_handler, "Handles incoming commnads", 500, NULL, 2,
 80005ec:	4b18      	ldr	r3, [pc, #96]	; (8000650 <main+0xc0>)
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	2302      	movs	r3, #2
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2300      	movs	r3, #0
 80005f6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005fa:	4916      	ldr	r1, [pc, #88]	; (8000654 <main+0xc4>)
 80005fc:	4816      	ldr	r0, [pc, #88]	; (8000658 <main+0xc8>)
 80005fe:	f003 fa7b 	bl	8003af8 <xTaskCreate>
	    			&xtaskCmdHandling_Handle);
	  xTaskCreate((pdTASK_CODE) vTask3_cmdProcessing_handler, "Processes user command", 500, NULL, 2,
 8000602:	4b16      	ldr	r3, [pc, #88]	; (800065c <main+0xcc>)
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	2302      	movs	r3, #2
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2300      	movs	r3, #0
 800060c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000610:	4913      	ldr	r1, [pc, #76]	; (8000660 <main+0xd0>)
 8000612:	4814      	ldr	r0, [pc, #80]	; (8000664 <main+0xd4>)
 8000614:	f003 fa70 	bl	8003af8 <xTaskCreate>
	    			&xtaskCmdProcessing_Handle);
	  xTaskCreate((pdTASK_CODE) vTask4_uartWrite_handler, "Writing data to UART", 500, NULL, 2,
 8000618:	4b13      	ldr	r3, [pc, #76]	; (8000668 <main+0xd8>)
 800061a:	9301      	str	r3, [sp, #4]
 800061c:	2302      	movs	r3, #2
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2300      	movs	r3, #0
 8000622:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000626:	4911      	ldr	r1, [pc, #68]	; (800066c <main+0xdc>)
 8000628:	4811      	ldr	r0, [pc, #68]	; (8000670 <main+0xe0>)
 800062a:	f003 fa65 	bl	8003af8 <xTaskCreate>
	    			&xtaskUARTWrite_Handle);

	  vTaskStartScheduler();
 800062e:	f003 fba5 	bl	8003d7c <vTaskStartScheduler>
 8000632:	e001      	b.n	8000638 <main+0xa8>
  }
  else
  {
	  Error_Handler();
 8000634:	f000 faad 	bl	8000b92 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000638:	e7fe      	b.n	8000638 <main+0xa8>
 800063a:	bf00      	nop
 800063c:	20000130 	.word	0x20000130
 8000640:	20000134 	.word	0x20000134
 8000644:	20000120 	.word	0x20000120
 8000648:	080060d8 	.word	0x080060d8
 800064c:	08000801 	.word	0x08000801
 8000650:	20000124 	.word	0x20000124
 8000654:	080060e8 	.word	0x080060e8
 8000658:	08000839 	.word	0x08000839
 800065c:	20000128 	.word	0x20000128
 8000660:	08006104 	.word	0x08006104
 8000664:	08000895 	.word	0x08000895
 8000668:	2000012c 	.word	0x2000012c
 800066c:	0800611c 	.word	0x0800611c
 8000670:	08000921 	.word	0x08000921

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b094      	sub	sp, #80	; 0x50
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0320 	add.w	r3, r7, #32
 800067e:	2230      	movs	r2, #48	; 0x30
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f005 f917 	bl	80058b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	4b22      	ldr	r3, [pc, #136]	; (8000728 <SystemClock_Config+0xb4>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	4a21      	ldr	r2, [pc, #132]	; (8000728 <SystemClock_Config+0xb4>)
 80006a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a6:	6413      	str	r3, [r2, #64]	; 0x40
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <SystemClock_Config+0xb4>)
 80006aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	4b1c      	ldr	r3, [pc, #112]	; (800072c <SystemClock_Config+0xb8>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a1b      	ldr	r2, [pc, #108]	; (800072c <SystemClock_Config+0xb8>)
 80006be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b19      	ldr	r3, [pc, #100]	; (800072c <SystemClock_Config+0xb8>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d0:	2302      	movs	r3, #2
 80006d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d4:	2301      	movs	r3, #1
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d8:	2310      	movs	r3, #16
 80006da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006dc:	2300      	movs	r3, #0
 80006de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 fed5 	bl	8001494 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006f0:	f000 fa4f 	bl	8000b92 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f001 f930 	bl	8001974 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800071a:	f000 fa3a 	bl	8000b92 <Error_Handler>
  }
}
 800071e:	bf00      	nop
 8000720:	3750      	adds	r7, #80	; 0x50
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40023800 	.word	0x40023800
 800072c:	40007000 	.word	0x40007000

08000730 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000734:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_USART2_UART_Init+0x60>)
 8000736:	4a17      	ldr	r2, [pc, #92]	; (8000794 <MX_USART2_UART_Init+0x64>)
 8000738:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_USART2_UART_Init+0x60>)
 800073c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000740:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_USART2_UART_Init+0x60>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_USART2_UART_Init+0x60>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074e:	4b10      	ldr	r3, [pc, #64]	; (8000790 <MX_USART2_UART_Init+0x60>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_USART2_UART_Init+0x60>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <MX_USART2_UART_Init+0x60>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_USART2_UART_Init+0x60>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000766:	480a      	ldr	r0, [pc, #40]	; (8000790 <MX_USART2_UART_Init+0x60>)
 8000768:	f001 fd20 	bl	80021ac <HAL_UART_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USART2_UART_Init+0x46>
  {
	  Error_Handler();
 8000772:	f000 fa0e 	bl	8000b92 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  if(HAL_UART_Receive_IT(&huart2, &rx_data, 1) != HAL_OK)
 8000776:	2201      	movs	r2, #1
 8000778:	4907      	ldr	r1, [pc, #28]	; (8000798 <MX_USART2_UART_Init+0x68>)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_USART2_UART_Init+0x60>)
 800077c:	f001 fdfc 	bl	8002378 <HAL_UART_Receive_IT>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_USART2_UART_Init+0x5a>
  {
	  Error_Handler();
 8000786:	f000 fa04 	bl	8000b92 <Error_Handler>
  }
  /* USER CODE END USART2_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20012eb8 	.word	0x20012eb8
 8000794:	40004400 	.word	0x40004400
 8000798:	20012eb4 	.word	0x20012eb4

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b0:	2300      	movs	r3, #0
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <MX_GPIO_Init+0x5c>)
 80007b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b8:	4a0f      	ldr	r2, [pc, #60]	; (80007f8 <MX_GPIO_Init+0x5c>)
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	6313      	str	r3, [r2, #48]	; 0x30
 80007c0:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <MX_GPIO_Init+0x5c>)
 80007c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c4:	f003 0301 	and.w	r3, r3, #1
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2120      	movs	r1, #32
 80007d0:	480a      	ldr	r0, [pc, #40]	; (80007fc <MX_GPIO_Init+0x60>)
 80007d2:	f000 fe2b 	bl	800142c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007d6:	2320      	movs	r3, #32
 80007d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	4619      	mov	r1, r3
 80007ea:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_GPIO_Init+0x60>)
 80007ec:	f000 fc84 	bl	80010f8 <HAL_GPIO_Init>

}
 80007f0:	bf00      	nop
 80007f2:	3718      	adds	r7, #24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40023800 	.word	0x40023800
 80007fc:	40020000 	.word	0x40020000

08000800 <vTask1_menuDisplay_handler>:

/* USER CODE BEGIN 4 */
void vTask1_menuDisplay_handler(void *params)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	/*
	 * Address of the char array because the elements of the queue are pointers.
	 * While sending data to the queue, we have to pass the address of the element(item).
	 * Therefore we pass the address of the pointer to the char array.
	 * */
	char *pData = menu;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <vTask1_menuDisplay_handler+0x30>)
 800080a:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		xQueueSend(uart_write_queue_handler, &pData, portMAX_DELAY);
 800080c:	4b09      	ldr	r3, [pc, #36]	; (8000834 <vTask1_menuDisplay_handler+0x34>)
 800080e:	6818      	ldr	r0, [r3, #0]
 8000810:	f107 010c 	add.w	r1, r7, #12
 8000814:	2300      	movs	r3, #0
 8000816:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800081a:	f002 fd97 	bl	800334c <xQueueGenericSend>

		//now wait here until some task notifies, wait == blocked state
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800081e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	2000      	movs	r0, #0
 8000828:	f003 ff48 	bl	80046bc <xTaskNotifyWait>
		xQueueSend(uart_write_queue_handler, &pData, portMAX_DELAY);
 800082c:	e7ee      	b.n	800080c <vTask1_menuDisplay_handler+0xc>
 800082e:	bf00      	nop
 8000830:	20000000 	.word	0x20000000
 8000834:	20000134 	.word	0x20000134

08000838 <vTask2_cmdHandling_handler>:
	}
}

void vTask2_cmdHandling_handler(void *params)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	uint8_t command_code = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	73fb      	strb	r3, [r7, #15]
	APP_CMD_t *new_cmd = NULL;
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]

	while(1)
	{
		//Send the task to wait state until notified by the UART ISR
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000848:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800084c:	2200      	movs	r2, #0
 800084e:	2100      	movs	r1, #0
 8000850:	2000      	movs	r0, #0
 8000852:	f003 ff33 	bl	80046bc <xTaskNotifyWait>
		//When the task is unblocked from a notification, the below statements are executed
		new_cmd = (APP_CMD_t *)pvPortMalloc(sizeof(APP_CMD_t));
 8000856:	200b      	movs	r0, #11
 8000858:	f004 fe22 	bl	80054a0 <pvPortMalloc>
 800085c:	4603      	mov	r3, r0
 800085e:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL(); //disable interrupts
 8000860:	f004 fd04 	bl	800526c <vPortEnterCritical>
		command_code = getCommandCode(command_buffer);
 8000864:	4809      	ldr	r0, [pc, #36]	; (800088c <vTask2_cmdHandling_handler+0x54>)
 8000866:	f000 f8e7 	bl	8000a38 <getCommandCode>
 800086a:	4603      	mov	r3, r0
 800086c:	73fb      	strb	r3, [r7, #15]
		new_cmd->command_num = command_code;
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	7bfa      	ldrb	r2, [r7, #15]
 8000872:	701a      	strb	r2, [r3, #0]
		//getArguments(new_cmd->command_args);
		taskEXIT_CRITICAL(); //re-enable interrupts
 8000874:	f004 fd28 	bl	80052c8 <vPortExitCritical>

		//send command to command queue
		xQueueSend(command_queue_handler, &new_cmd, portMAX_DELAY);
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <vTask2_cmdHandling_handler+0x58>)
 800087a:	6818      	ldr	r0, [r3, #0]
 800087c:	f107 0108 	add.w	r1, r7, #8
 8000880:	2300      	movs	r3, #0
 8000882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000886:	f002 fd61 	bl	800334c <xQueueGenericSend>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800088a:	e7dd      	b.n	8000848 <vTask2_cmdHandling_handler+0x10>
 800088c:	2000013c 	.word	0x2000013c
 8000890:	20000130 	.word	0x20000130

08000894 <vTask3_cmdProcessing_handler>:
	}
}

void vTask3_cmdProcessing_handler(void *params)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b090      	sub	sp, #64	; 0x40
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	APP_CMD_t *new_cmd = NULL;
 800089c:	2300      	movs	r3, #0
 800089e:	63fb      	str	r3, [r7, #60]	; 0x3c
	char task_msg[50];

	while(1)
	{
		xQueueReceive(command_queue_handler, &new_cmd, portMAX_DELAY);
 80008a0:	4b1e      	ldr	r3, [pc, #120]	; (800091c <vTask3_cmdProcessing_handler+0x88>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80008a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008ac:	4618      	mov	r0, r3
 80008ae:	f002 fedb 	bl	8003668 <xQueueReceive>

		if(new_cmd->command_num == LED_ON)
 80008b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d102      	bne.n	80008c0 <vTask3_cmdProcessing_handler+0x2c>
		{
			//turn ON LED
			LED_on();
 80008ba:	f000 f8cb 	bl	8000a54 <LED_on>
 80008be:	e027      	b.n	8000910 <vTask3_cmdProcessing_handler+0x7c>
		}
		else if(new_cmd->command_num == LED_OFF)
 80008c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	d102      	bne.n	80008ce <vTask3_cmdProcessing_handler+0x3a>
		{
			//turn OFF LED
			LED_off();
 80008c8:	f000 f8d0 	bl	8000a6c <LED_off>
 80008cc:	e020      	b.n	8000910 <vTask3_cmdProcessing_handler+0x7c>
		}
		else if(new_cmd->command_num == LED_TOGGLE_START)
 80008ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b03      	cmp	r3, #3
 80008d4:	d102      	bne.n	80008dc <vTask3_cmdProcessing_handler+0x48>
		{
			//start toggling LED
			LED_toggle_start();
 80008d6:	f000 f8e3 	bl	8000aa0 <LED_toggle_start>
 80008da:	e019      	b.n	8000910 <vTask3_cmdProcessing_handler+0x7c>
		}
		else if(new_cmd->command_num == LED_TOGGLE_STOP)
 80008dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b04      	cmp	r3, #4
 80008e2:	d102      	bne.n	80008ea <vTask3_cmdProcessing_handler+0x56>
		{
			//stop toggling LED
			LED_toggle_stop();
 80008e4:	f000 f908 	bl	8000af8 <LED_toggle_stop>
 80008e8:	e012      	b.n	8000910 <vTask3_cmdProcessing_handler+0x7c>
		}
		else if(new_cmd->command_num == LED_STATUS_READ)
 80008ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b05      	cmp	r3, #5
 80008f0:	d105      	bne.n	80008fe <vTask3_cmdProcessing_handler+0x6a>
		{
			//read current status of LED
			LED_status_read(task_msg);
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f910 	bl	8000b1c <LED_status_read>
 80008fc:	e008      	b.n	8000910 <vTask3_cmdProcessing_handler+0x7c>
		}
		else if(new_cmd->command_num == RTC_DATETIME_READ)
 80008fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b06      	cmp	r3, #6
 8000904:	d104      	bne.n	8000910 <vTask3_cmdProcessing_handler+0x7c>
		{
			//print the current date, time
			LED_rtc_read(task_msg);
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	4618      	mov	r0, r3
 800090c:	f000 f928 	bl	8000b60 <LED_rtc_read>
		}

		//free the allocated memory
		vPortFree(new_cmd);
 8000910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000912:	4618      	mov	r0, r3
 8000914:	f004 fe86 	bl	8005624 <vPortFree>
		xQueueReceive(command_queue_handler, &new_cmd, portMAX_DELAY);
 8000918:	e7c2      	b.n	80008a0 <vTask3_cmdProcessing_handler+0xc>
 800091a:	bf00      	nop
 800091c:	20000130 	.word	0x20000130

08000920 <vTask4_uartWrite_handler>:
	}
}

void vTask4_uartWrite_handler(void *params)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	char *pData = NULL;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		xQueueReceive(uart_write_queue_handler, &pData, portMAX_DELAY); //if queue is empty the task will be blocked
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <vTask4_uartWrite_handler+0x28>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f107 010c 	add.w	r1, r7, #12
 8000934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000938:	4618      	mov	r0, r3
 800093a:	f002 fe95 	bl	8003668 <xQueueReceive>
		printmsg(pData);
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	4618      	mov	r0, r3
 8000942:	f000 f85d 	bl	8000a00 <printmsg>
		xQueueReceive(uart_write_queue_handler, &pData, portMAX_DELAY); //if queue is empty the task will be blocked
 8000946:	e7f1      	b.n	800092c <vTask4_uartWrite_handler+0xc>
 8000948:	20000134 	.word	0x20000134

0800094c <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af02      	add	r7, sp, #8
 8000952:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
	if(huart->Instance == USART2)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a20      	ldr	r2, [pc, #128]	; (80009e0 <HAL_UART_RxCpltCallback+0x94>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d13a      	bne.n	80009d8 <HAL_UART_RxCpltCallback+0x8c>
	{
		if(HAL_UART_Receive_IT(&huart2, &rx_data, 1) == HAL_OK)
 8000962:	2201      	movs	r2, #1
 8000964:	491f      	ldr	r1, [pc, #124]	; (80009e4 <HAL_UART_RxCpltCallback+0x98>)
 8000966:	4820      	ldr	r0, [pc, #128]	; (80009e8 <HAL_UART_RxCpltCallback+0x9c>)
 8000968:	f001 fd06 	bl	8002378 <HAL_UART_Receive_IT>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d127      	bne.n	80009c2 <HAL_UART_RxCpltCallback+0x76>
		{
			command_buffer[command_length] = rx_data;
 8000972:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <HAL_UART_RxCpltCallback+0xa0>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	461a      	mov	r2, r3
 8000978:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <HAL_UART_RxCpltCallback+0x98>)
 800097a:	7819      	ldrb	r1, [r3, #0]
 800097c:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <HAL_UART_RxCpltCallback+0xa4>)
 800097e:	5499      	strb	r1, [r3, r2]
			command_length++;
 8000980:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <HAL_UART_RxCpltCallback+0xa0>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	3301      	adds	r3, #1
 8000986:	b2da      	uxtb	r2, r3
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <HAL_UART_RxCpltCallback+0xa0>)
 800098a:	701a      	strb	r2, [r3, #0]

			if(rx_data == '\r')
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <HAL_UART_RxCpltCallback+0x98>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b0d      	cmp	r3, #13
 8000992:	d116      	bne.n	80009c2 <HAL_UART_RxCpltCallback+0x76>
			{
				//reset command length
				command_length = 0;
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <HAL_UART_RxCpltCallback+0xa0>)
 8000996:	2200      	movs	r2, #0
 8000998:	701a      	strb	r2, [r3, #0]
				//user finished entering the data, notify the command handling task
				xTaskNotifyFromISR(xtaskCmdHandling_Handle, 0, eNoAction, &xHigherPriorityTaskWoken);
 800099a:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <HAL_UART_RxCpltCallback+0xa8>)
 800099c:	6818      	ldr	r0, [r3, #0]
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	2300      	movs	r3, #0
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	f003 fee1 	bl	8004770 <xTaskGenericNotifyFromISR>
				//user finished entering the data, notify the print menu task
				xTaskNotifyFromISR(xtaskMenuDisplay_Handle, 0, eNoAction, &xHigherPriorityTaskWoken);
 80009ae:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <HAL_UART_RxCpltCallback+0xac>)
 80009b0:	6818      	ldr	r0, [r3, #0]
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	2300      	movs	r3, #0
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	f003 fed7 	bl	8004770 <xTaskGenericNotifyFromISR>
		 * If the above FreeRTOS APIs wake up any higher priority task,
		 * then yield the processor to the higher priority task that was just woken up.
		 * If xTaskNotifyFromISR() sets this value to pdTRUE then
		 * a context switch should be requested before the interrupt is exited.
		 */
		if(xHigherPriorityTaskWoken == pdTRUE)
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d107      	bne.n	80009d8 <HAL_UART_RxCpltCallback+0x8c>
			taskYIELD(); //after exiting the IRQ handler, the processor should start executing the task
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <HAL_UART_RxCpltCallback+0xb0>)
 80009ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	f3bf 8f4f 	dsb	sy
 80009d4:	f3bf 8f6f 	isb	sy
	}
}
 80009d8:	bf00      	nop
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40004400 	.word	0x40004400
 80009e4:	20012eb4 	.word	0x20012eb4
 80009e8:	20012eb8 	.word	0x20012eb8
 80009ec:	20000146 	.word	0x20000146
 80009f0:	2000013c 	.word	0x2000013c
 80009f4:	20000124 	.word	0x20000124
 80009f8:	20000120 	.word	0x20000120
 80009fc:	e000ed04 	.word	0xe000ed04

08000a00 <printmsg>:

void printmsg(const char *msg) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	while (HAL_UART_GetState(&huart2) == HAL_UART_STATE_BUSY_TX);
 8000a08:	bf00      	nop
 8000a0a:	480a      	ldr	r0, [pc, #40]	; (8000a34 <printmsg+0x34>)
 8000a0c:	f001 fe1e 	bl	800264c <HAL_UART_GetState>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b21      	cmp	r3, #33	; 0x21
 8000a14:	d0f9      	beq.n	8000a0a <printmsg+0xa>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, (uint16_t) strlen(msg),
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f7ff fbe2 	bl	80001e0 <strlen>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a24:	6879      	ldr	r1, [r7, #4]
 8000a26:	4803      	ldr	r0, [pc, #12]	; (8000a34 <printmsg+0x34>)
 8000a28:	f001 fc0d 	bl	8002246 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20012eb8 	.word	0x20012eb8

08000a38 <getCommandCode>:

uint8_t getCommandCode(uint8_t* buffer)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	return (buffer[0] - 48);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	3b30      	subs	r3, #48	; 0x30
 8000a46:	b2db      	uxtb	r3, r3
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <LED_on>:
{

}

void LED_on(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2120      	movs	r1, #32
 8000a5c:	4802      	ldr	r0, [pc, #8]	; (8000a68 <LED_on+0x14>)
 8000a5e:	f000 fce5 	bl	800142c <HAL_GPIO_WritePin>
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40020000 	.word	0x40020000

08000a6c <LED_off>:

void LED_off(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2120      	movs	r1, #32
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <LED_off+0x14>)
 8000a76:	f000 fcd9 	bl	800142c <HAL_GPIO_WritePin>
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40020000 	.word	0x40020000

08000a84 <LED_toggle>:

void LED_toggle(TimerHandle_t xTimer)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000a8c:	2120      	movs	r1, #32
 8000a8e:	4803      	ldr	r0, [pc, #12]	; (8000a9c <LED_toggle+0x18>)
 8000a90:	f000 fce5 	bl	800145e <HAL_GPIO_TogglePin>
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40020000 	.word	0x40020000

08000aa0 <LED_toggle_start>:

void LED_toggle_start(void)
{
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af02      	add	r7, sp, #8
	TickType_t toggle_duration = 500;
 8000aa6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000aaa:	607b      	str	r3, [r7, #4]

	if(LED_timer_handler == NULL)
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <LED_toggle_start+0x4c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d10a      	bne.n	8000aca <LED_toggle_start+0x2a>
	{
		//create software timer
		LED_timer_handler = xTimerCreate("LED Timer", toggle_duration, pdTRUE, NULL, LED_toggle);
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <LED_toggle_start+0x50>)
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	2300      	movs	r3, #0
 8000aba:	2201      	movs	r2, #1
 8000abc:	6879      	ldr	r1, [r7, #4]
 8000abe:	480d      	ldr	r0, [pc, #52]	; (8000af4 <LED_toggle_start+0x54>)
 8000ac0:	f003 ffc6 	bl	8004a50 <xTimerCreate>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <LED_toggle_start+0x4c>)
 8000ac8:	601a      	str	r2, [r3, #0]
	}

	//start the software timer
	xTimerStart(LED_timer_handler, portMAX_DELAY);
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <LED_toggle_start+0x4c>)
 8000acc:	681c      	ldr	r4, [r3, #0]
 8000ace:	f003 fa4b 	bl	8003f68 <xTaskGetTickCount>
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	2300      	movs	r3, #0
 8000adc:	2101      	movs	r1, #1
 8000ade:	4620      	mov	r0, r4
 8000ae0:	f004 f804 	bl	8004aec <xTimerGenericCommand>
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd90      	pop	{r4, r7, pc}
 8000aec:	20000138 	.word	0x20000138
 8000af0:	08000a85 	.word	0x08000a85
 8000af4:	08006134 	.word	0x08006134

08000af8 <LED_toggle_stop>:

void LED_toggle_stop(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af02      	add	r7, sp, #8
	//stop the timer
	xTimerStop(LED_timer_handler, portMAX_DELAY);
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <LED_toggle_stop+0x20>)
 8000b00:	6818      	ldr	r0, [r3, #0]
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b06:	9300      	str	r3, [sp, #0]
 8000b08:	2300      	movs	r3, #0
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2103      	movs	r1, #3
 8000b0e:	f003 ffed 	bl	8004aec <xTimerGenericCommand>
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000138 	.word	0x20000138

08000b1c <LED_status_read>:

void LED_status_read(char* buffer)
{
 8000b1c:	b590      	push	{r4, r7, lr}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	sprintf(buffer, "The current LED status: %d\r\n", HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5));
 8000b24:	687c      	ldr	r4, [r7, #4]
 8000b26:	2120      	movs	r1, #32
 8000b28:	480a      	ldr	r0, [pc, #40]	; (8000b54 <LED_status_read+0x38>)
 8000b2a:	f000 fc67 	bl	80013fc <HAL_GPIO_ReadPin>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	461a      	mov	r2, r3
 8000b32:	4909      	ldr	r1, [pc, #36]	; (8000b58 <LED_status_read+0x3c>)
 8000b34:	4620      	mov	r0, r4
 8000b36:	f004 fec7 	bl	80058c8 <siprintf>
	xQueueSend(uart_write_queue_handler, &buffer, portMAX_DELAY);
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <LED_status_read+0x40>)
 8000b3c:	6818      	ldr	r0, [r3, #0]
 8000b3e:	1d39      	adds	r1, r7, #4
 8000b40:	2300      	movs	r3, #0
 8000b42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b46:	f002 fc01 	bl	800334c <xQueueGenericSend>
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd90      	pop	{r4, r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40020000 	.word	0x40020000
 8000b58:	08006140 	.word	0x08006140
 8000b5c:	20000134 	.word	0x20000134

08000b60 <LED_rtc_read>:

void LED_rtc_read(char* buffer)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b84:	d101      	bne.n	8000b8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b86:	f000 f993 	bl	8000eb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1);
 8000b96:	e7fe      	b.n	8000b96 <Error_Handler+0x4>

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <HAL_MspInit+0x4c>)
 8000ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba6:	4a0f      	ldr	r2, [pc, #60]	; (8000be4 <HAL_MspInit+0x4c>)
 8000ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bac:	6453      	str	r3, [r2, #68]	; 0x44
 8000bae:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc2:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800

08000be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a1d      	ldr	r2, [pc, #116]	; (8000c7c <HAL_UART_MspInit+0x94>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d133      	bne.n	8000c72 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b1c      	ldr	r3, [pc, #112]	; (8000c80 <HAL_UART_MspInit+0x98>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a1b      	ldr	r2, [pc, #108]	; (8000c80 <HAL_UART_MspInit+0x98>)
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1a:	4b19      	ldr	r3, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0x98>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <HAL_UART_MspInit+0x98>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a14      	ldr	r2, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0x98>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b12      	ldr	r3, [pc, #72]	; (8000c80 <HAL_UART_MspInit+0x98>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c42:	230c      	movs	r3, #12
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c52:	2307      	movs	r3, #7
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4809      	ldr	r0, [pc, #36]	; (8000c84 <HAL_UART_MspInit+0x9c>)
 8000c5e:	f000 fa4b 	bl	80010f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2106      	movs	r1, #6
 8000c66:	2026      	movs	r0, #38	; 0x26
 8000c68:	f000 f9fa 	bl	8001060 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c6c:	2026      	movs	r0, #38	; 0x26
 8000c6e:	f000 fa13 	bl	8001098 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c72:	bf00      	nop
 8000c74:	3728      	adds	r7, #40	; 0x28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40004400 	.word	0x40004400
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020000 	.word	0x40020000

08000c88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08c      	sub	sp, #48	; 0x30
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8000c98:	2200      	movs	r2, #0
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	201c      	movs	r0, #28
 8000c9e:	f000 f9df 	bl	8001060 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8000ca2:	201c      	movs	r0, #28
 8000ca4:	f000 f9f8 	bl	8001098 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <HAL_InitTick+0xa4>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb0:	4a1e      	ldr	r2, [pc, #120]	; (8000d2c <HAL_InitTick+0xa4>)
 8000cb2:	f043 0301 	orr.w	r3, r3, #1
 8000cb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <HAL_InitTick+0xa4>)
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cc4:	f107 0210 	add.w	r2, r7, #16
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4611      	mov	r1, r2
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f001 f81c 	bl	8001d0c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cd4:	f000 fff2 	bl	8001cbc <HAL_RCC_GetPCLK1Freq>
 8000cd8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cdc:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <HAL_InitTick+0xa8>)
 8000cde:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce2:	0c9b      	lsrs	r3, r3, #18
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_InitTick+0xac>)
 8000cea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8000cf0:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <HAL_InitTick+0xac>)
 8000cf2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cf6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000cf8:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <HAL_InitTick+0xac>)
 8000cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfc:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <HAL_InitTick+0xac>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_InitTick+0xac>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000d0a:	480a      	ldr	r0, [pc, #40]	; (8000d34 <HAL_InitTick+0xac>)
 8000d0c:	f001 f830 	bl	8001d70 <HAL_TIM_Base_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d104      	bne.n	8000d20 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000d16:	4807      	ldr	r0, [pc, #28]	; (8000d34 <HAL_InitTick+0xac>)
 8000d18:	f001 f85f 	bl	8001dda <HAL_TIM_Base_Start_IT>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	e000      	b.n	8000d22 <HAL_InitTick+0x9a>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3730      	adds	r7, #48	; 0x30
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	431bde83 	.word	0x431bde83
 8000d34:	20012ef8 	.word	0x20012ef8

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <MemManage_Handler+0x4>

08000d52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d70:	4802      	ldr	r0, [pc, #8]	; (8000d7c <TIM2_IRQHandler+0x10>)
 8000d72:	f001 f856 	bl	8001e22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20012ef8 	.word	0x20012ef8

08000d80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d84:	4802      	ldr	r0, [pc, #8]	; (8000d90 <USART2_IRQHandler+0x10>)
 8000d86:	f001 fb4d 	bl	8002424 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20012eb8 	.word	0x20012eb8

08000d94 <_sbrk>:
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <_sbrk+0x50>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <_sbrk+0x16>
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <_sbrk+0x50>)
 8000da6:	4a10      	ldr	r2, [pc, #64]	; (8000de8 <_sbrk+0x54>)
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <_sbrk+0x50>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <_sbrk+0x50>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4413      	add	r3, r2
 8000db8:	466a      	mov	r2, sp
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d907      	bls.n	8000dce <_sbrk+0x3a>
 8000dbe:	f004 fd45 	bl	800584c <__errno>
 8000dc2:	4602      	mov	r2, r0
 8000dc4:	230c      	movs	r3, #12
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dcc:	e006      	b.n	8000ddc <_sbrk+0x48>
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <_sbrk+0x50>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a03      	ldr	r2, [pc, #12]	; (8000de4 <_sbrk+0x50>)
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000148 	.word	0x20000148
 8000de8:	20012f80 	.word	0x20012f80

08000dec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df0:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <SystemInit+0x28>)
 8000df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df6:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <SystemInit+0x28>)
 8000df8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <SystemInit+0x28>)
 8000e02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e06:	609a      	str	r2, [r3, #8]
#endif
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <Reset_Handler>:
 8000e18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e50 <LoopFillZerobss+0x14>
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	e003      	b.n	8000e28 <LoopCopyDataInit>

08000e20 <CopyDataInit>:
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <LoopFillZerobss+0x18>)
 8000e22:	585b      	ldr	r3, [r3, r1]
 8000e24:	5043      	str	r3, [r0, r1]
 8000e26:	3104      	adds	r1, #4

08000e28 <LoopCopyDataInit>:
 8000e28:	480b      	ldr	r0, [pc, #44]	; (8000e58 <LoopFillZerobss+0x1c>)
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <LoopFillZerobss+0x20>)
 8000e2c:	1842      	adds	r2, r0, r1
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d3f6      	bcc.n	8000e20 <CopyDataInit>
 8000e32:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <LoopFillZerobss+0x24>)
 8000e34:	e002      	b.n	8000e3c <LoopFillZerobss>

08000e36 <FillZerobss>:
 8000e36:	2300      	movs	r3, #0
 8000e38:	f842 3b04 	str.w	r3, [r2], #4

08000e3c <LoopFillZerobss>:
 8000e3c:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <LoopFillZerobss+0x28>)
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d3f9      	bcc.n	8000e36 <FillZerobss>
 8000e42:	f7ff ffd3 	bl	8000dec <SystemInit>
 8000e46:	f004 fd07 	bl	8005858 <__libc_init_array>
 8000e4a:	f7ff fba1 	bl	8000590 <main>
 8000e4e:	4770      	bx	lr
 8000e50:	20020000 	.word	0x20020000
 8000e54:	080061d4 	.word	0x080061d4
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	20000104 	.word	0x20000104
 8000e60:	20000104 	.word	0x20000104
 8000e64:	20012f80 	.word	0x20012f80

08000e68 <ADC_IRQHandler>:
 8000e68:	e7fe      	b.n	8000e68 <ADC_IRQHandler>
	...

08000e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e70:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0d      	ldr	r2, [pc, #52]	; (8000eac <HAL_Init+0x40>)
 8000e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <HAL_Init+0x40>)
 8000e82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <HAL_Init+0x40>)
 8000e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e94:	2003      	movs	r0, #3
 8000e96:	f000 f8d8 	bl	800104a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	f7ff fef4 	bl	8000c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea0:	f7ff fe7a 	bl	8000b98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023c00 	.word	0x40023c00

08000eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x20>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000098 	.word	0x20000098
 8000ed4:	20012f38 	.word	0x20012f38

08000ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return uwTick;
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <HAL_GetTick+0x14>)
 8000ede:	681b      	ldr	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20012f38 	.word	0x20012f38

08000ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f22:	4a04      	ldr	r2, [pc, #16]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	60d3      	str	r3, [r2, #12]
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <__NVIC_GetPriorityGrouping+0x18>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	0a1b      	lsrs	r3, r3, #8
 8000f42:	f003 0307 	and.w	r3, r3, #7
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	db0b      	blt.n	8000f7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	f003 021f 	and.w	r2, r3, #31
 8000f6c:	4907      	ldr	r1, [pc, #28]	; (8000f8c <__NVIC_EnableIRQ+0x38>)
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	095b      	lsrs	r3, r3, #5
 8000f74:	2001      	movs	r0, #1
 8000f76:	fa00 f202 	lsl.w	r2, r0, r2
 8000f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000e100 	.word	0xe000e100

08000f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	6039      	str	r1, [r7, #0]
 8000f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	db0a      	blt.n	8000fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	490c      	ldr	r1, [pc, #48]	; (8000fdc <__NVIC_SetPriority+0x4c>)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	0112      	lsls	r2, r2, #4
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb8:	e00a      	b.n	8000fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	4908      	ldr	r1, [pc, #32]	; (8000fe0 <__NVIC_SetPriority+0x50>)
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	f003 030f 	and.w	r3, r3, #15
 8000fc6:	3b04      	subs	r3, #4
 8000fc8:	0112      	lsls	r2, r2, #4
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	440b      	add	r3, r1
 8000fce:	761a      	strb	r2, [r3, #24]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f1c3 0307 	rsb	r3, r3, #7
 8000ffe:	2b04      	cmp	r3, #4
 8001000:	bf28      	it	cs
 8001002:	2304      	movcs	r3, #4
 8001004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3304      	adds	r3, #4
 800100a:	2b06      	cmp	r3, #6
 800100c:	d902      	bls.n	8001014 <NVIC_EncodePriority+0x30>
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3b03      	subs	r3, #3
 8001012:	e000      	b.n	8001016 <NVIC_EncodePriority+0x32>
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43da      	mvns	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	401a      	ands	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800102c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa01 f303 	lsl.w	r3, r1, r3
 8001036:	43d9      	mvns	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	4313      	orrs	r3, r2
         );
}
 800103e:	4618      	mov	r0, r3
 8001040:	3724      	adds	r7, #36	; 0x24
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ff4c 	bl	8000ef0 <__NVIC_SetPriorityGrouping>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001072:	f7ff ff61 	bl	8000f38 <__NVIC_GetPriorityGrouping>
 8001076:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	68b9      	ldr	r1, [r7, #8]
 800107c:	6978      	ldr	r0, [r7, #20]
 800107e:	f7ff ffb1 	bl	8000fe4 <NVIC_EncodePriority>
 8001082:	4602      	mov	r2, r0
 8001084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001088:	4611      	mov	r1, r2
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff ff80 	bl	8000f90 <__NVIC_SetPriority>
}
 8001090:	bf00      	nop
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ff54 	bl	8000f54 <__NVIC_EnableIRQ>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d004      	beq.n	80010d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2280      	movs	r2, #128	; 0x80
 80010cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00c      	b.n	80010ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2205      	movs	r2, #5
 80010d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 0201 	bic.w	r2, r2, #1
 80010e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b089      	sub	sp, #36	; 0x24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
 8001112:	e159      	b.n	80013c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001114:	2201      	movs	r2, #1
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	429a      	cmp	r2, r3
 800112e:	f040 8148 	bne.w	80013c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d00b      	beq.n	8001152 <HAL_GPIO_Init+0x5a>
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b02      	cmp	r3, #2
 8001140:	d007      	beq.n	8001152 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001146:	2b11      	cmp	r3, #17
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b12      	cmp	r3, #18
 8001150:	d130      	bne.n	80011b4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	2203      	movs	r2, #3
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	68da      	ldr	r2, [r3, #12]
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4313      	orrs	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001188:	2201      	movs	r2, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	091b      	lsrs	r3, r3, #4
 800119e:	f003 0201 	and.w	r2, r3, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d003      	beq.n	80011f4 <HAL_GPIO_Init+0xfc>
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2b12      	cmp	r3, #18
 80011f2:	d123      	bne.n	800123c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	08da      	lsrs	r2, r3, #3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3208      	adds	r2, #8
 80011fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	220f      	movs	r2, #15
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	691a      	ldr	r2, [r3, #16]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	08da      	lsrs	r2, r3, #3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	3208      	adds	r2, #8
 8001236:	69b9      	ldr	r1, [r7, #24]
 8001238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	2203      	movs	r2, #3
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 0203 	and.w	r2, r3, #3
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 80a2 	beq.w	80013c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b56      	ldr	r3, [pc, #344]	; (80013dc <HAL_GPIO_Init+0x2e4>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a55      	ldr	r2, [pc, #340]	; (80013dc <HAL_GPIO_Init+0x2e4>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128c:	6453      	str	r3, [r2, #68]	; 0x44
 800128e:	4b53      	ldr	r3, [pc, #332]	; (80013dc <HAL_GPIO_Init+0x2e4>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800129a:	4a51      	ldr	r2, [pc, #324]	; (80013e0 <HAL_GPIO_Init+0x2e8>)
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	3302      	adds	r3, #2
 80012a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	220f      	movs	r2, #15
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a48      	ldr	r2, [pc, #288]	; (80013e4 <HAL_GPIO_Init+0x2ec>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d019      	beq.n	80012fa <HAL_GPIO_Init+0x202>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a47      	ldr	r2, [pc, #284]	; (80013e8 <HAL_GPIO_Init+0x2f0>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d013      	beq.n	80012f6 <HAL_GPIO_Init+0x1fe>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a46      	ldr	r2, [pc, #280]	; (80013ec <HAL_GPIO_Init+0x2f4>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d00d      	beq.n	80012f2 <HAL_GPIO_Init+0x1fa>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a45      	ldr	r2, [pc, #276]	; (80013f0 <HAL_GPIO_Init+0x2f8>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d007      	beq.n	80012ee <HAL_GPIO_Init+0x1f6>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a44      	ldr	r2, [pc, #272]	; (80013f4 <HAL_GPIO_Init+0x2fc>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_GPIO_Init+0x1f2>
 80012e6:	2304      	movs	r3, #4
 80012e8:	e008      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012ea:	2307      	movs	r3, #7
 80012ec:	e006      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012ee:	2303      	movs	r3, #3
 80012f0:	e004      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e002      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <HAL_GPIO_Init+0x204>
 80012fa:	2300      	movs	r3, #0
 80012fc:	69fa      	ldr	r2, [r7, #28]
 80012fe:	f002 0203 	and.w	r2, r2, #3
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	4093      	lsls	r3, r2
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800130c:	4934      	ldr	r1, [pc, #208]	; (80013e0 <HAL_GPIO_Init+0x2e8>)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	3302      	adds	r3, #2
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800131a:	4b37      	ldr	r3, [pc, #220]	; (80013f8 <HAL_GPIO_Init+0x300>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800133e:	4a2e      	ldr	r2, [pc, #184]	; (80013f8 <HAL_GPIO_Init+0x300>)
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001344:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <HAL_GPIO_Init+0x300>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001368:	4a23      	ldr	r2, [pc, #140]	; (80013f8 <HAL_GPIO_Init+0x300>)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136e:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <HAL_GPIO_Init+0x300>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001392:	4a19      	ldr	r2, [pc, #100]	; (80013f8 <HAL_GPIO_Init+0x300>)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <HAL_GPIO_Init+0x300>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013bc:	4a0e      	ldr	r2, [pc, #56]	; (80013f8 <HAL_GPIO_Init+0x300>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3301      	adds	r3, #1
 80013c6:	61fb      	str	r3, [r7, #28]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	2b0f      	cmp	r3, #15
 80013cc:	f67f aea2 	bls.w	8001114 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013d0:	bf00      	nop
 80013d2:	3724      	adds	r7, #36	; 0x24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40013800 	.word	0x40013800
 80013e4:	40020000 	.word	0x40020000
 80013e8:	40020400 	.word	0x40020400
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40020c00 	.word	0x40020c00
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40013c00 	.word	0x40013c00

080013fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	691a      	ldr	r2, [r3, #16]
 800140c:	887b      	ldrh	r3, [r7, #2]
 800140e:	4013      	ands	r3, r2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d002      	beq.n	800141a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001414:	2301      	movs	r3, #1
 8001416:	73fb      	strb	r3, [r7, #15]
 8001418:	e001      	b.n	800141e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800141e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
 8001438:	4613      	mov	r3, r2
 800143a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800143c:	787b      	ldrb	r3, [r7, #1]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001442:	887a      	ldrh	r2, [r7, #2]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001448:	e003      	b.n	8001452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800144a:	887b      	ldrh	r3, [r7, #2]
 800144c:	041a      	lsls	r2, r3, #16
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	619a      	str	r2, [r3, #24]
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	460b      	mov	r3, r1
 8001468:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	695a      	ldr	r2, [r3, #20]
 800146e:	887b      	ldrh	r3, [r7, #2]
 8001470:	401a      	ands	r2, r3
 8001472:	887b      	ldrh	r3, [r7, #2]
 8001474:	429a      	cmp	r2, r3
 8001476:	d104      	bne.n	8001482 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001478:	887b      	ldrh	r3, [r7, #2]
 800147a:	041a      	lsls	r2, r3, #16
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001480:	e002      	b.n	8001488 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001482:	887a      	ldrh	r2, [r7, #2]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	619a      	str	r2, [r3, #24]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e25b      	b.n	800195e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d075      	beq.n	800159e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014b2:	4ba3      	ldr	r3, [pc, #652]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 030c 	and.w	r3, r3, #12
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d00c      	beq.n	80014d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014be:	4ba0      	ldr	r3, [pc, #640]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	d112      	bne.n	80014f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ca:	4b9d      	ldr	r3, [pc, #628]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014d6:	d10b      	bne.n	80014f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d8:	4b99      	ldr	r3, [pc, #612]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d05b      	beq.n	800159c <HAL_RCC_OscConfig+0x108>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d157      	bne.n	800159c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e236      	b.n	800195e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f8:	d106      	bne.n	8001508 <HAL_RCC_OscConfig+0x74>
 80014fa:	4b91      	ldr	r3, [pc, #580]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a90      	ldr	r2, [pc, #576]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e01d      	b.n	8001544 <HAL_RCC_OscConfig+0xb0>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001510:	d10c      	bne.n	800152c <HAL_RCC_OscConfig+0x98>
 8001512:	4b8b      	ldr	r3, [pc, #556]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a8a      	ldr	r2, [pc, #552]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	4b88      	ldr	r3, [pc, #544]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a87      	ldr	r2, [pc, #540]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	e00b      	b.n	8001544 <HAL_RCC_OscConfig+0xb0>
 800152c:	4b84      	ldr	r3, [pc, #528]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a83      	ldr	r2, [pc, #524]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	4b81      	ldr	r3, [pc, #516]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a80      	ldr	r2, [pc, #512]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 800153e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001542:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d013      	beq.n	8001574 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff fcc4 	bl	8000ed8 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001554:	f7ff fcc0 	bl	8000ed8 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b64      	cmp	r3, #100	; 0x64
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e1fb      	b.n	800195e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001566:	4b76      	ldr	r3, [pc, #472]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f0      	beq.n	8001554 <HAL_RCC_OscConfig+0xc0>
 8001572:	e014      	b.n	800159e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff fcb0 	bl	8000ed8 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800157c:	f7ff fcac 	bl	8000ed8 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b64      	cmp	r3, #100	; 0x64
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e1e7      	b.n	800195e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158e:	4b6c      	ldr	r3, [pc, #432]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f0      	bne.n	800157c <HAL_RCC_OscConfig+0xe8>
 800159a:	e000      	b.n	800159e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d063      	beq.n	8001672 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015aa:	4b65      	ldr	r3, [pc, #404]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	f003 030c 	and.w	r3, r3, #12
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00b      	beq.n	80015ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015b6:	4b62      	ldr	r3, [pc, #392]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d11c      	bne.n	80015fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015c2:	4b5f      	ldr	r3, [pc, #380]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d116      	bne.n	80015fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ce:	4b5c      	ldr	r3, [pc, #368]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <HAL_RCC_OscConfig+0x152>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d001      	beq.n	80015e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e1bb      	b.n	800195e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e6:	4b56      	ldr	r3, [pc, #344]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	4952      	ldr	r1, [pc, #328]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fa:	e03a      	b.n	8001672 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d020      	beq.n	8001646 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001604:	4b4f      	ldr	r3, [pc, #316]	; (8001744 <HAL_RCC_OscConfig+0x2b0>)
 8001606:	2201      	movs	r2, #1
 8001608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160a:	f7ff fc65 	bl	8000ed8 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001612:	f7ff fc61 	bl	8000ed8 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e19c      	b.n	800195e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001624:	4b46      	ldr	r3, [pc, #280]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001630:	4b43      	ldr	r3, [pc, #268]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4940      	ldr	r1, [pc, #256]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001640:	4313      	orrs	r3, r2
 8001642:	600b      	str	r3, [r1, #0]
 8001644:	e015      	b.n	8001672 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001646:	4b3f      	ldr	r3, [pc, #252]	; (8001744 <HAL_RCC_OscConfig+0x2b0>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164c:	f7ff fc44 	bl	8000ed8 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001654:	f7ff fc40 	bl	8000ed8 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e17b      	b.n	800195e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001666:	4b36      	ldr	r3, [pc, #216]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	2b00      	cmp	r3, #0
 800167c:	d030      	beq.n	80016e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d016      	beq.n	80016b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001686:	4b30      	ldr	r3, [pc, #192]	; (8001748 <HAL_RCC_OscConfig+0x2b4>)
 8001688:	2201      	movs	r2, #1
 800168a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168c:	f7ff fc24 	bl	8000ed8 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001694:	f7ff fc20 	bl	8000ed8 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e15b      	b.n	800195e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a6:	4b26      	ldr	r3, [pc, #152]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 80016a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0x200>
 80016b2:	e015      	b.n	80016e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b4:	4b24      	ldr	r3, [pc, #144]	; (8001748 <HAL_RCC_OscConfig+0x2b4>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ba:	f7ff fc0d 	bl	8000ed8 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c2:	f7ff fc09 	bl	8000ed8 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e144      	b.n	800195e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d4:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 80016d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1f0      	bne.n	80016c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 80a0 	beq.w	800182e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016f2:	4b13      	ldr	r3, [pc, #76]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d10f      	bne.n	800171e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170c:	6413      	str	r3, [r2, #64]	; 0x40
 800170e:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <HAL_RCC_OscConfig+0x2ac>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800171a:	2301      	movs	r3, #1
 800171c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <HAL_RCC_OscConfig+0x2b8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001726:	2b00      	cmp	r3, #0
 8001728:	d121      	bne.n	800176e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <HAL_RCC_OscConfig+0x2b8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a07      	ldr	r2, [pc, #28]	; (800174c <HAL_RCC_OscConfig+0x2b8>)
 8001730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001734:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001736:	f7ff fbcf 	bl	8000ed8 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173c:	e011      	b.n	8001762 <HAL_RCC_OscConfig+0x2ce>
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800
 8001744:	42470000 	.word	0x42470000
 8001748:	42470e80 	.word	0x42470e80
 800174c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001750:	f7ff fbc2 	bl	8000ed8 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e0fd      	b.n	800195e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001762:	4b81      	ldr	r3, [pc, #516]	; (8001968 <HAL_RCC_OscConfig+0x4d4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0f0      	beq.n	8001750 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d106      	bne.n	8001784 <HAL_RCC_OscConfig+0x2f0>
 8001776:	4b7d      	ldr	r3, [pc, #500]	; (800196c <HAL_RCC_OscConfig+0x4d8>)
 8001778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800177a:	4a7c      	ldr	r2, [pc, #496]	; (800196c <HAL_RCC_OscConfig+0x4d8>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6713      	str	r3, [r2, #112]	; 0x70
 8001782:	e01c      	b.n	80017be <HAL_RCC_OscConfig+0x32a>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2b05      	cmp	r3, #5
 800178a:	d10c      	bne.n	80017a6 <HAL_RCC_OscConfig+0x312>
 800178c:	4b77      	ldr	r3, [pc, #476]	; (800196c <HAL_RCC_OscConfig+0x4d8>)
 800178e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001790:	4a76      	ldr	r2, [pc, #472]	; (800196c <HAL_RCC_OscConfig+0x4d8>)
 8001792:	f043 0304 	orr.w	r3, r3, #4
 8001796:	6713      	str	r3, [r2, #112]	; 0x70
 8001798:	4b74      	ldr	r3, [pc, #464]	; (800196c <HAL_RCC_OscConfig+0x4d8>)
 800179a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179c:	4a73      	ldr	r2, [pc, #460]	; (800196c <HAL_RCC_OscConfig+0x4d8>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6713      	str	r3, [r2, #112]	; 0x70
 80017a4:	e00b      	b.n	80017be <HAL_RCC_OscConfig+0x32a>
 80017a6:	4b71      	ldr	r3, [pc, #452]	; (800196c <HAL_RCC_OscConfig+0x4d8>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017aa:	4a70      	ldr	r2, [pc, #448]	; (800196c <HAL_RCC_OscConfig+0x4d8>)
 80017ac:	f023 0301 	bic.w	r3, r3, #1
 80017b0:	6713      	str	r3, [r2, #112]	; 0x70
 80017b2:	4b6e      	ldr	r3, [pc, #440]	; (800196c <HAL_RCC_OscConfig+0x4d8>)
 80017b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b6:	4a6d      	ldr	r2, [pc, #436]	; (800196c <HAL_RCC_OscConfig+0x4d8>)
 80017b8:	f023 0304 	bic.w	r3, r3, #4
 80017bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d015      	beq.n	80017f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c6:	f7ff fb87 	bl	8000ed8 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017cc:	e00a      	b.n	80017e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ce:	f7ff fb83 	bl	8000ed8 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017dc:	4293      	cmp	r3, r2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e0bc      	b.n	800195e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e4:	4b61      	ldr	r3, [pc, #388]	; (800196c <HAL_RCC_OscConfig+0x4d8>)
 80017e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0ee      	beq.n	80017ce <HAL_RCC_OscConfig+0x33a>
 80017f0:	e014      	b.n	800181c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f2:	f7ff fb71 	bl	8000ed8 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f8:	e00a      	b.n	8001810 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017fa:	f7ff fb6d 	bl	8000ed8 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	f241 3288 	movw	r2, #5000	; 0x1388
 8001808:	4293      	cmp	r3, r2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e0a6      	b.n	800195e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001810:	4b56      	ldr	r3, [pc, #344]	; (800196c <HAL_RCC_OscConfig+0x4d8>)
 8001812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1ee      	bne.n	80017fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800181c:	7dfb      	ldrb	r3, [r7, #23]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d105      	bne.n	800182e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001822:	4b52      	ldr	r3, [pc, #328]	; (800196c <HAL_RCC_OscConfig+0x4d8>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a51      	ldr	r2, [pc, #324]	; (800196c <HAL_RCC_OscConfig+0x4d8>)
 8001828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	2b00      	cmp	r3, #0
 8001834:	f000 8092 	beq.w	800195c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001838:	4b4c      	ldr	r3, [pc, #304]	; (800196c <HAL_RCC_OscConfig+0x4d8>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 030c 	and.w	r3, r3, #12
 8001840:	2b08      	cmp	r3, #8
 8001842:	d05c      	beq.n	80018fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	2b02      	cmp	r3, #2
 800184a:	d141      	bne.n	80018d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184c:	4b48      	ldr	r3, [pc, #288]	; (8001970 <HAL_RCC_OscConfig+0x4dc>)
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001852:	f7ff fb41 	bl	8000ed8 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800185a:	f7ff fb3d 	bl	8000ed8 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e078      	b.n	800195e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186c:	4b3f      	ldr	r3, [pc, #252]	; (800196c <HAL_RCC_OscConfig+0x4d8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1f0      	bne.n	800185a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69da      	ldr	r2, [r3, #28]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001886:	019b      	lsls	r3, r3, #6
 8001888:	431a      	orrs	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188e:	085b      	lsrs	r3, r3, #1
 8001890:	3b01      	subs	r3, #1
 8001892:	041b      	lsls	r3, r3, #16
 8001894:	431a      	orrs	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189a:	061b      	lsls	r3, r3, #24
 800189c:	4933      	ldr	r1, [pc, #204]	; (800196c <HAL_RCC_OscConfig+0x4d8>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a2:	4b33      	ldr	r3, [pc, #204]	; (8001970 <HAL_RCC_OscConfig+0x4dc>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a8:	f7ff fb16 	bl	8000ed8 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b0:	f7ff fb12 	bl	8000ed8 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e04d      	b.n	800195e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018c2:	4b2a      	ldr	r3, [pc, #168]	; (800196c <HAL_RCC_OscConfig+0x4d8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f0      	beq.n	80018b0 <HAL_RCC_OscConfig+0x41c>
 80018ce:	e045      	b.n	800195c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d0:	4b27      	ldr	r3, [pc, #156]	; (8001970 <HAL_RCC_OscConfig+0x4dc>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d6:	f7ff faff 	bl	8000ed8 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018de:	f7ff fafb 	bl	8000ed8 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e036      	b.n	800195e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f0:	4b1e      	ldr	r3, [pc, #120]	; (800196c <HAL_RCC_OscConfig+0x4d8>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1f0      	bne.n	80018de <HAL_RCC_OscConfig+0x44a>
 80018fc:	e02e      	b.n	800195c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d101      	bne.n	800190a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e029      	b.n	800195e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800190a:	4b18      	ldr	r3, [pc, #96]	; (800196c <HAL_RCC_OscConfig+0x4d8>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	429a      	cmp	r2, r3
 800191c:	d11c      	bne.n	8001958 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001928:	429a      	cmp	r2, r3
 800192a:	d115      	bne.n	8001958 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001932:	4013      	ands	r3, r2
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001938:	4293      	cmp	r3, r2
 800193a:	d10d      	bne.n	8001958 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001946:	429a      	cmp	r2, r3
 8001948:	d106      	bne.n	8001958 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001954:	429a      	cmp	r2, r3
 8001956:	d001      	beq.n	800195c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40007000 	.word	0x40007000
 800196c:	40023800 	.word	0x40023800
 8001970:	42470060 	.word	0x42470060

08001974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0cc      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001988:	4b68      	ldr	r3, [pc, #416]	; (8001b2c <HAL_RCC_ClockConfig+0x1b8>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 030f 	and.w	r3, r3, #15
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d90c      	bls.n	80019b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	4b65      	ldr	r3, [pc, #404]	; (8001b2c <HAL_RCC_ClockConfig+0x1b8>)
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	b2d2      	uxtb	r2, r2
 800199c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800199e:	4b63      	ldr	r3, [pc, #396]	; (8001b2c <HAL_RCC_ClockConfig+0x1b8>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e0b8      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d020      	beq.n	80019fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019c8:	4b59      	ldr	r3, [pc, #356]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	4a58      	ldr	r2, [pc, #352]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d005      	beq.n	80019ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019e0:	4b53      	ldr	r3, [pc, #332]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	4a52      	ldr	r2, [pc, #328]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ec:	4b50      	ldr	r3, [pc, #320]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	494d      	ldr	r1, [pc, #308]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d044      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d107      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a12:	4b47      	ldr	r3, [pc, #284]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d119      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e07f      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d003      	beq.n	8001a32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d107      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a32:	4b3f      	ldr	r3, [pc, #252]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d109      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e06f      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a42:	4b3b      	ldr	r3, [pc, #236]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e067      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a52:	4b37      	ldr	r3, [pc, #220]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f023 0203 	bic.w	r2, r3, #3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	4934      	ldr	r1, [pc, #208]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a64:	f7ff fa38 	bl	8000ed8 <HAL_GetTick>
 8001a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a6c:	f7ff fa34 	bl	8000ed8 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e04f      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a82:	4b2b      	ldr	r3, [pc, #172]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 020c 	and.w	r2, r3, #12
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d1eb      	bne.n	8001a6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a94:	4b25      	ldr	r3, [pc, #148]	; (8001b2c <HAL_RCC_ClockConfig+0x1b8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 030f 	and.w	r3, r3, #15
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d20c      	bcs.n	8001abc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa2:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <HAL_RCC_ClockConfig+0x1b8>)
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aaa:	4b20      	ldr	r3, [pc, #128]	; (8001b2c <HAL_RCC_ClockConfig+0x1b8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e032      	b.n	8001b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d008      	beq.n	8001ada <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac8:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	4916      	ldr	r1, [pc, #88]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d009      	beq.n	8001afa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ae6:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	00db      	lsls	r3, r3, #3
 8001af4:	490e      	ldr	r1, [pc, #56]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	4313      	orrs	r3, r2
 8001af8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001afa:	f000 f821 	bl	8001b40 <HAL_RCC_GetSysClockFreq>
 8001afe:	4601      	mov	r1, r0
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	091b      	lsrs	r3, r3, #4
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	4a0a      	ldr	r2, [pc, #40]	; (8001b34 <HAL_RCC_ClockConfig+0x1c0>)
 8001b0c:	5cd3      	ldrb	r3, [r2, r3]
 8001b0e:	fa21 f303 	lsr.w	r3, r1, r3
 8001b12:	4a09      	ldr	r2, [pc, #36]	; (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_RCC_ClockConfig+0x1c8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff f8b4 	bl	8000c88 <HAL_InitTick>

  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023c00 	.word	0x40023c00
 8001b30:	40023800 	.word	0x40023800
 8001b34:	08006178 	.word	0x08006178
 8001b38:	20000090 	.word	0x20000090
 8001b3c:	20000094 	.word	0x20000094

08001b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b56:	4b50      	ldr	r3, [pc, #320]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d007      	beq.n	8001b72 <HAL_RCC_GetSysClockFreq+0x32>
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d008      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0x38>
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f040 808d 	bne.w	8001c86 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b6c:	4b4b      	ldr	r3, [pc, #300]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x15c>)
 8001b6e:	60bb      	str	r3, [r7, #8]
       break;
 8001b70:	e08c      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b72:	4b4b      	ldr	r3, [pc, #300]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b74:	60bb      	str	r3, [r7, #8]
      break;
 8001b76:	e089      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b78:	4b47      	ldr	r3, [pc, #284]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b80:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b82:	4b45      	ldr	r3, [pc, #276]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d023      	beq.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b8e:	4b42      	ldr	r3, [pc, #264]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x158>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	099b      	lsrs	r3, r3, #6
 8001b94:	f04f 0400 	mov.w	r4, #0
 8001b98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	ea03 0501 	and.w	r5, r3, r1
 8001ba4:	ea04 0602 	and.w	r6, r4, r2
 8001ba8:	4a3d      	ldr	r2, [pc, #244]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001baa:	fb02 f106 	mul.w	r1, r2, r6
 8001bae:	2200      	movs	r2, #0
 8001bb0:	fb02 f205 	mul.w	r2, r2, r5
 8001bb4:	440a      	add	r2, r1
 8001bb6:	493a      	ldr	r1, [pc, #232]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x160>)
 8001bb8:	fba5 0101 	umull	r0, r1, r5, r1
 8001bbc:	1853      	adds	r3, r2, r1
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f04f 0400 	mov.w	r4, #0
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4623      	mov	r3, r4
 8001bca:	f7fe fb61 	bl	8000290 <__aeabi_uldivmod>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	460c      	mov	r4, r1
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	e049      	b.n	8001c6a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd6:	4b30      	ldr	r3, [pc, #192]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x158>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	099b      	lsrs	r3, r3, #6
 8001bdc:	f04f 0400 	mov.w	r4, #0
 8001be0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	ea03 0501 	and.w	r5, r3, r1
 8001bec:	ea04 0602 	and.w	r6, r4, r2
 8001bf0:	4629      	mov	r1, r5
 8001bf2:	4632      	mov	r2, r6
 8001bf4:	f04f 0300 	mov.w	r3, #0
 8001bf8:	f04f 0400 	mov.w	r4, #0
 8001bfc:	0154      	lsls	r4, r2, #5
 8001bfe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c02:	014b      	lsls	r3, r1, #5
 8001c04:	4619      	mov	r1, r3
 8001c06:	4622      	mov	r2, r4
 8001c08:	1b49      	subs	r1, r1, r5
 8001c0a:	eb62 0206 	sbc.w	r2, r2, r6
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	f04f 0400 	mov.w	r4, #0
 8001c16:	0194      	lsls	r4, r2, #6
 8001c18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c1c:	018b      	lsls	r3, r1, #6
 8001c1e:	1a5b      	subs	r3, r3, r1
 8001c20:	eb64 0402 	sbc.w	r4, r4, r2
 8001c24:	f04f 0100 	mov.w	r1, #0
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	00e2      	lsls	r2, r4, #3
 8001c2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c32:	00d9      	lsls	r1, r3, #3
 8001c34:	460b      	mov	r3, r1
 8001c36:	4614      	mov	r4, r2
 8001c38:	195b      	adds	r3, r3, r5
 8001c3a:	eb44 0406 	adc.w	r4, r4, r6
 8001c3e:	f04f 0100 	mov.w	r1, #0
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	02a2      	lsls	r2, r4, #10
 8001c48:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001c4c:	0299      	lsls	r1, r3, #10
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4614      	mov	r4, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	4621      	mov	r1, r4
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f04f 0400 	mov.w	r4, #0
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4623      	mov	r3, r4
 8001c60:	f7fe fb16 	bl	8000290 <__aeabi_uldivmod>
 8001c64:	4603      	mov	r3, r0
 8001c66:	460c      	mov	r4, r1
 8001c68:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x158>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	0c1b      	lsrs	r3, r3, #16
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	3301      	adds	r3, #1
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c82:	60bb      	str	r3, [r7, #8]
      break;
 8001c84:	e002      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_RCC_GetSysClockFreq+0x15c>)
 8001c88:	60bb      	str	r3, [r7, #8]
      break;
 8001c8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c8c:	68bb      	ldr	r3, [r7, #8]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	00f42400 	.word	0x00f42400
 8001ca0:	017d7840 	.word	0x017d7840

08001ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	20000090 	.word	0x20000090

08001cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cc0:	f7ff fff0 	bl	8001ca4 <HAL_RCC_GetHCLKFreq>
 8001cc4:	4601      	mov	r1, r0
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	0a9b      	lsrs	r3, r3, #10
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	4a03      	ldr	r2, [pc, #12]	; (8001ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cd2:	5cd3      	ldrb	r3, [r2, r3]
 8001cd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	08006188 	.word	0x08006188

08001ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ce8:	f7ff ffdc 	bl	8001ca4 <HAL_RCC_GetHCLKFreq>
 8001cec:	4601      	mov	r1, r0
 8001cee:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	0b5b      	lsrs	r3, r3, #13
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	4a03      	ldr	r2, [pc, #12]	; (8001d08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cfa:	5cd3      	ldrb	r3, [r2, r3]
 8001cfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40023800 	.word	0x40023800
 8001d08:	08006188 	.word	0x08006188

08001d0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	220f      	movs	r2, #15
 8001d1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d1c:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <HAL_RCC_GetClockConfig+0x5c>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 0203 	and.w	r2, r3, #3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d28:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <HAL_RCC_GetClockConfig+0x5c>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <HAL_RCC_GetClockConfig+0x5c>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_RCC_GetClockConfig+0x5c>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	08db      	lsrs	r3, r3, #3
 8001d46:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d4e:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <HAL_RCC_GetClockConfig+0x60>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 020f 	and.w	r2, r3, #15
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	601a      	str	r2, [r3, #0]
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40023c00 	.word	0x40023c00

08001d70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e01d      	b.n	8001dbe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d106      	bne.n	8001d9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f815 	bl	8001dc6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3304      	adds	r3, #4
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f000 f968 	bl	8002084 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b085      	sub	sp, #20
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0201 	orr.w	r2, r2, #1
 8001df0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2b06      	cmp	r3, #6
 8001e02:	d007      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0201 	orr.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d122      	bne.n	8001e7e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d11b      	bne.n	8001e7e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f06f 0202 	mvn.w	r2, #2
 8001e4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f8ee 	bl	8002046 <HAL_TIM_IC_CaptureCallback>
 8001e6a:	e005      	b.n	8001e78 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f8e0 	bl	8002032 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f8f1 	bl	800205a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d122      	bne.n	8001ed2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	f003 0304 	and.w	r3, r3, #4
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d11b      	bne.n	8001ed2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f06f 0204 	mvn.w	r2, #4
 8001ea2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f8c4 	bl	8002046 <HAL_TIM_IC_CaptureCallback>
 8001ebe:	e005      	b.n	8001ecc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f8b6 	bl	8002032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f8c7 	bl	800205a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	f003 0308 	and.w	r3, r3, #8
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d122      	bne.n	8001f26 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d11b      	bne.n	8001f26 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f06f 0208 	mvn.w	r2, #8
 8001ef6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2204      	movs	r2, #4
 8001efc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	69db      	ldr	r3, [r3, #28]
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f89a 	bl	8002046 <HAL_TIM_IC_CaptureCallback>
 8001f12:	e005      	b.n	8001f20 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f88c 	bl	8002032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f89d 	bl	800205a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	f003 0310 	and.w	r3, r3, #16
 8001f30:	2b10      	cmp	r3, #16
 8001f32:	d122      	bne.n	8001f7a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f003 0310 	and.w	r3, r3, #16
 8001f3e:	2b10      	cmp	r3, #16
 8001f40:	d11b      	bne.n	8001f7a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f06f 0210 	mvn.w	r2, #16
 8001f4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2208      	movs	r2, #8
 8001f50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f870 	bl	8002046 <HAL_TIM_IC_CaptureCallback>
 8001f66:	e005      	b.n	8001f74 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f862 	bl	8002032 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f873 	bl	800205a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d10e      	bne.n	8001fa6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d107      	bne.n	8001fa6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f06f 0201 	mvn.w	r2, #1
 8001f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7fe fde7 	bl	8000b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb0:	2b80      	cmp	r3, #128	; 0x80
 8001fb2:	d10e      	bne.n	8001fd2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fbe:	2b80      	cmp	r3, #128	; 0x80
 8001fc0:	d107      	bne.n	8001fd2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f8e3 	bl	8002198 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fdc:	2b40      	cmp	r3, #64	; 0x40
 8001fde:	d10e      	bne.n	8001ffe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fea:	2b40      	cmp	r3, #64	; 0x40
 8001fec:	d107      	bne.n	8001ffe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f838 	bl	800206e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	f003 0320 	and.w	r3, r3, #32
 8002008:	2b20      	cmp	r3, #32
 800200a:	d10e      	bne.n	800202a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f003 0320 	and.w	r3, r3, #32
 8002016:	2b20      	cmp	r3, #32
 8002018:	d107      	bne.n	800202a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f06f 0220 	mvn.w	r2, #32
 8002022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f8ad 	bl	8002184 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a34      	ldr	r2, [pc, #208]	; (8002168 <TIM_Base_SetConfig+0xe4>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d00f      	beq.n	80020bc <TIM_Base_SetConfig+0x38>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a2:	d00b      	beq.n	80020bc <TIM_Base_SetConfig+0x38>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a31      	ldr	r2, [pc, #196]	; (800216c <TIM_Base_SetConfig+0xe8>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d007      	beq.n	80020bc <TIM_Base_SetConfig+0x38>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a30      	ldr	r2, [pc, #192]	; (8002170 <TIM_Base_SetConfig+0xec>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d003      	beq.n	80020bc <TIM_Base_SetConfig+0x38>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a2f      	ldr	r2, [pc, #188]	; (8002174 <TIM_Base_SetConfig+0xf0>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d108      	bne.n	80020ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a25      	ldr	r2, [pc, #148]	; (8002168 <TIM_Base_SetConfig+0xe4>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d01b      	beq.n	800210e <TIM_Base_SetConfig+0x8a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020dc:	d017      	beq.n	800210e <TIM_Base_SetConfig+0x8a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a22      	ldr	r2, [pc, #136]	; (800216c <TIM_Base_SetConfig+0xe8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d013      	beq.n	800210e <TIM_Base_SetConfig+0x8a>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a21      	ldr	r2, [pc, #132]	; (8002170 <TIM_Base_SetConfig+0xec>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d00f      	beq.n	800210e <TIM_Base_SetConfig+0x8a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a20      	ldr	r2, [pc, #128]	; (8002174 <TIM_Base_SetConfig+0xf0>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00b      	beq.n	800210e <TIM_Base_SetConfig+0x8a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a1f      	ldr	r2, [pc, #124]	; (8002178 <TIM_Base_SetConfig+0xf4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d007      	beq.n	800210e <TIM_Base_SetConfig+0x8a>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a1e      	ldr	r2, [pc, #120]	; (800217c <TIM_Base_SetConfig+0xf8>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d003      	beq.n	800210e <TIM_Base_SetConfig+0x8a>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a1d      	ldr	r2, [pc, #116]	; (8002180 <TIM_Base_SetConfig+0xfc>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d108      	bne.n	8002120 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	4313      	orrs	r3, r2
 800211e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	4313      	orrs	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a08      	ldr	r2, [pc, #32]	; (8002168 <TIM_Base_SetConfig+0xe4>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d103      	bne.n	8002154 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	615a      	str	r2, [r3, #20]
}
 800215a:	bf00      	nop
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40010000 	.word	0x40010000
 800216c:	40000400 	.word	0x40000400
 8002170:	40000800 	.word	0x40000800
 8002174:	40000c00 	.word	0x40000c00
 8002178:	40014000 	.word	0x40014000
 800217c:	40014400 	.word	0x40014400
 8002180:	40014800 	.word	0x40014800

08002184 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e03f      	b.n	800223e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d106      	bne.n	80021d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7fe fd08 	bl	8000be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2224      	movs	r2, #36	; 0x24
 80021dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 fbb5 	bl	8002960 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002204:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695a      	ldr	r2, [r3, #20]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002214:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002224:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2220      	movs	r2, #32
 8002230:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2220      	movs	r2, #32
 8002238:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b088      	sub	sp, #32
 800224a:	af02      	add	r7, sp, #8
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	603b      	str	r3, [r7, #0]
 8002252:	4613      	mov	r3, r2
 8002254:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b20      	cmp	r3, #32
 8002264:	f040 8083 	bne.w	800236e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d002      	beq.n	8002274 <HAL_UART_Transmit+0x2e>
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e07b      	b.n	8002370 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800227e:	2b01      	cmp	r3, #1
 8002280:	d101      	bne.n	8002286 <HAL_UART_Transmit+0x40>
 8002282:	2302      	movs	r3, #2
 8002284:	e074      	b.n	8002370 <HAL_UART_Transmit+0x12a>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2221      	movs	r2, #33	; 0x21
 8002298:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800229c:	f7fe fe1c 	bl	8000ed8 <HAL_GetTick>
 80022a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	88fa      	ldrh	r2, [r7, #6]
 80022a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	88fa      	ldrh	r2, [r7, #6]
 80022ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80022b6:	e042      	b.n	800233e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80022bc:	b29b      	uxth	r3, r3
 80022be:	3b01      	subs	r3, #1
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ce:	d122      	bne.n	8002316 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2200      	movs	r2, #0
 80022d8:	2180      	movs	r1, #128	; 0x80
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f9d4 	bl	8002688 <UART_WaitOnFlagUntilTimeout>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e042      	b.n	8002370 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	461a      	mov	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022fc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d103      	bne.n	800230e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	3302      	adds	r3, #2
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	e017      	b.n	800233e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	3301      	adds	r3, #1
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	e013      	b.n	800233e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	2200      	movs	r2, #0
 800231e:	2180      	movs	r1, #128	; 0x80
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 f9b1 	bl	8002688 <UART_WaitOnFlagUntilTimeout>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e01f      	b.n	8002370 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	60ba      	str	r2, [r7, #8]
 8002336:	781a      	ldrb	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002342:	b29b      	uxth	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1b7      	bne.n	80022b8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	2200      	movs	r2, #0
 8002350:	2140      	movs	r1, #64	; 0x40
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 f998 	bl	8002688 <UART_WaitOnFlagUntilTimeout>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e006      	b.n	8002370 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2220      	movs	r2, #32
 8002366:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	e000      	b.n	8002370 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800236e:	2302      	movs	r3, #2
  }
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	4613      	mov	r3, r2
 8002384:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b20      	cmp	r3, #32
 8002390:	d140      	bne.n	8002414 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <HAL_UART_Receive_IT+0x26>
 8002398:	88fb      	ldrh	r3, [r7, #6]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e039      	b.n	8002416 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <HAL_UART_Receive_IT+0x38>
 80023ac:	2302      	movs	r3, #2
 80023ae:	e032      	b.n	8002416 <HAL_UART_Receive_IT+0x9e>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	88fa      	ldrh	r2, [r7, #6]
 80023c2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	88fa      	ldrh	r2, [r7, #6]
 80023c8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2222      	movs	r2, #34	; 0x22
 80023d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023ee:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	695a      	ldr	r2, [r3, #20]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0201 	orr.w	r2, r2, #1
 80023fe:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0220 	orr.w	r2, r2, #32
 800240e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	e000      	b.n	8002416 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002414:	2302      	movs	r3, #2
  }
}
 8002416:	4618      	mov	r0, r3
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
	...

08002424 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002444:	2300      	movs	r3, #0
 8002446:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002448:	2300      	movs	r3, #0
 800244a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10d      	bne.n	8002476 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	f003 0320 	and.w	r3, r3, #32
 8002460:	2b00      	cmp	r3, #0
 8002462:	d008      	beq.n	8002476 <HAL_UART_IRQHandler+0x52>
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	f003 0320 	and.w	r3, r3, #32
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f9f4 	bl	800285c <UART_Receive_IT>
      return;
 8002474:	e0d1      	b.n	800261a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80b0 	beq.w	80025de <HAL_UART_IRQHandler+0x1ba>
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d105      	bne.n	8002494 <HAL_UART_IRQHandler+0x70>
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800248e:	2b00      	cmp	r3, #0
 8002490:	f000 80a5 	beq.w	80025de <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <HAL_UART_IRQHandler+0x90>
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ac:	f043 0201 	orr.w	r2, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00a      	beq.n	80024d4 <HAL_UART_IRQHandler+0xb0>
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024cc:	f043 0202 	orr.w	r2, r3, #2
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00a      	beq.n	80024f4 <HAL_UART_IRQHandler+0xd0>
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ec:	f043 0204 	orr.w	r2, r3, #4
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00f      	beq.n	800251e <HAL_UART_IRQHandler+0xfa>
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	f003 0320 	and.w	r3, r3, #32
 8002504:	2b00      	cmp	r3, #0
 8002506:	d104      	bne.n	8002512 <HAL_UART_IRQHandler+0xee>
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d005      	beq.n	800251e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002516:	f043 0208 	orr.w	r2, r3, #8
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002522:	2b00      	cmp	r3, #0
 8002524:	d078      	beq.n	8002618 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f003 0320 	and.w	r3, r3, #32
 800252c:	2b00      	cmp	r3, #0
 800252e:	d007      	beq.n	8002540 <HAL_UART_IRQHandler+0x11c>
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	f003 0320 	and.w	r3, r3, #32
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f98e 	bl	800285c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254a:	2b40      	cmp	r3, #64	; 0x40
 800254c:	bf0c      	ite	eq
 800254e:	2301      	moveq	r3, #1
 8002550:	2300      	movne	r3, #0
 8002552:	b2db      	uxtb	r3, r3
 8002554:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b00      	cmp	r3, #0
 8002560:	d102      	bne.n	8002568 <HAL_UART_IRQHandler+0x144>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d031      	beq.n	80025cc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f8d7 	bl	800271c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	695b      	ldr	r3, [r3, #20]
 8002574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002578:	2b40      	cmp	r3, #64	; 0x40
 800257a:	d123      	bne.n	80025c4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800258a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002590:	2b00      	cmp	r3, #0
 8002592:	d013      	beq.n	80025bc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002598:	4a21      	ldr	r2, [pc, #132]	; (8002620 <HAL_UART_IRQHandler+0x1fc>)
 800259a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fe fd87 	bl	80010b4 <HAL_DMA_Abort_IT>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d016      	beq.n	80025da <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025b6:	4610      	mov	r0, r2
 80025b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025ba:	e00e      	b.n	80025da <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f83b 	bl	8002638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c2:	e00a      	b.n	80025da <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f837 	bl	8002638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025ca:	e006      	b.n	80025da <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f833 	bl	8002638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80025d8:	e01e      	b.n	8002618 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025da:	bf00      	nop
    return;
 80025dc:	e01c      	b.n	8002618 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d008      	beq.n	80025fa <HAL_UART_IRQHandler+0x1d6>
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f8c4 	bl	8002780 <UART_Transmit_IT>
    return;
 80025f8:	e00f      	b.n	800261a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00a      	beq.n	800261a <HAL_UART_IRQHandler+0x1f6>
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260a:	2b00      	cmp	r3, #0
 800260c:	d005      	beq.n	800261a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f90c 	bl	800282c <UART_EndTransmit_IT>
    return;
 8002614:	bf00      	nop
 8002616:	e000      	b.n	800261a <HAL_UART_IRQHandler+0x1f6>
    return;
 8002618:	bf00      	nop
  }
}
 800261a:	3720      	adds	r7, #32
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	08002759 	.word	0x08002759

08002624 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8002654:	2300      	movs	r3, #0
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	2300      	movs	r3, #0
 800265a:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002662:	b2db      	uxtb	r3, r3
 8002664:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800266c:	b2db      	uxtb	r3, r3
 800266e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	b2da      	uxtb	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	4313      	orrs	r3, r2
 800267a:	b2db      	uxtb	r3, r3
}
 800267c:	4618      	mov	r0, r3
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	4613      	mov	r3, r2
 8002696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002698:	e02c      	b.n	80026f4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026a0:	d028      	beq.n	80026f4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d007      	beq.n	80026b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80026a8:	f7fe fc16 	bl	8000ed8 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d21d      	bcs.n	80026f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80026c6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0201 	bic.w	r2, r2, #1
 80026d6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e00f      	b.n	8002714 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	4013      	ands	r3, r2
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	429a      	cmp	r2, r3
 8002702:	bf0c      	ite	eq
 8002704:	2301      	moveq	r3, #1
 8002706:	2300      	movne	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	461a      	mov	r2, r3
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	429a      	cmp	r2, r3
 8002710:	d0c3      	beq.n	800269a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002732:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0201 	bic.w	r2, r2, #1
 8002742:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2220      	movs	r2, #32
 8002748:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002764:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f7ff ff60 	bl	8002638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002778:	bf00      	nop
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b21      	cmp	r3, #33	; 0x21
 8002792:	d144      	bne.n	800281e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800279c:	d11a      	bne.n	80027d4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027b2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d105      	bne.n	80027c8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	1c9a      	adds	r2, r3, #2
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	621a      	str	r2, [r3, #32]
 80027c6:	e00e      	b.n	80027e6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	621a      	str	r2, [r3, #32]
 80027d2:	e008      	b.n	80027e6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	1c59      	adds	r1, r3, #1
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6211      	str	r1, [r2, #32]
 80027de:	781a      	ldrb	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	4619      	mov	r1, r3
 80027f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10f      	bne.n	800281a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002808:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002818:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	e000      	b.n	8002820 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800281e:	2302      	movs	r3, #2
  }
}
 8002820:	4618      	mov	r0, r3
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68da      	ldr	r2, [r3, #12]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002842:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff fee9 	bl	8002624 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b22      	cmp	r3, #34	; 0x22
 800286e:	d171      	bne.n	8002954 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002878:	d123      	bne.n	80028c2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10e      	bne.n	80028a6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	b29b      	uxth	r3, r3
 8002890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289e:	1c9a      	adds	r2, r3, #2
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	629a      	str	r2, [r3, #40]	; 0x28
 80028a4:	e029      	b.n	80028fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	629a      	str	r2, [r3, #40]	; 0x28
 80028c0:	e01b      	b.n	80028fa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10a      	bne.n	80028e0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6858      	ldr	r0, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d4:	1c59      	adds	r1, r3, #1
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6291      	str	r1, [r2, #40]	; 0x28
 80028da:	b2c2      	uxtb	r2, r0
 80028dc:	701a      	strb	r2, [r3, #0]
 80028de:	e00c      	b.n	80028fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ec:	1c58      	adds	r0, r3, #1
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	6288      	str	r0, [r1, #40]	; 0x28
 80028f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	b29b      	uxth	r3, r3
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	4619      	mov	r1, r3
 8002908:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800290a:	2b00      	cmp	r3, #0
 800290c:	d120      	bne.n	8002950 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68da      	ldr	r2, [r3, #12]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0220 	bic.w	r2, r2, #32
 800291c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800292c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695a      	ldr	r2, [r3, #20]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0201 	bic.w	r2, r2, #1
 800293c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fe f800 	bl	800094c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800294c:	2300      	movs	r3, #0
 800294e:	e002      	b.n	8002956 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002950:	2300      	movs	r3, #0
 8002952:	e000      	b.n	8002956 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002954:	2302      	movs	r3, #2
  }
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002964:	b085      	sub	sp, #20
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	431a      	orrs	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	4313      	orrs	r3, r2
 8002996:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80029a2:	f023 030c 	bic.w	r3, r3, #12
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6812      	ldr	r2, [r2, #0]
 80029aa:	68f9      	ldr	r1, [r7, #12]
 80029ac:	430b      	orrs	r3, r1
 80029ae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699a      	ldr	r2, [r3, #24]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ce:	f040 818b 	bne.w	8002ce8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4ac1      	ldr	r2, [pc, #772]	; (8002cdc <UART_SetConfig+0x37c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d005      	beq.n	80029e8 <UART_SetConfig+0x88>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4abf      	ldr	r2, [pc, #764]	; (8002ce0 <UART_SetConfig+0x380>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	f040 80bd 	bne.w	8002b62 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029e8:	f7ff f97c 	bl	8001ce4 <HAL_RCC_GetPCLK2Freq>
 80029ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	461d      	mov	r5, r3
 80029f2:	f04f 0600 	mov.w	r6, #0
 80029f6:	46a8      	mov	r8, r5
 80029f8:	46b1      	mov	r9, r6
 80029fa:	eb18 0308 	adds.w	r3, r8, r8
 80029fe:	eb49 0409 	adc.w	r4, r9, r9
 8002a02:	4698      	mov	r8, r3
 8002a04:	46a1      	mov	r9, r4
 8002a06:	eb18 0805 	adds.w	r8, r8, r5
 8002a0a:	eb49 0906 	adc.w	r9, r9, r6
 8002a0e:	f04f 0100 	mov.w	r1, #0
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a1a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a1e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a22:	4688      	mov	r8, r1
 8002a24:	4691      	mov	r9, r2
 8002a26:	eb18 0005 	adds.w	r0, r8, r5
 8002a2a:	eb49 0106 	adc.w	r1, r9, r6
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	461d      	mov	r5, r3
 8002a34:	f04f 0600 	mov.w	r6, #0
 8002a38:	196b      	adds	r3, r5, r5
 8002a3a:	eb46 0406 	adc.w	r4, r6, r6
 8002a3e:	461a      	mov	r2, r3
 8002a40:	4623      	mov	r3, r4
 8002a42:	f7fd fc25 	bl	8000290 <__aeabi_uldivmod>
 8002a46:	4603      	mov	r3, r0
 8002a48:	460c      	mov	r4, r1
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4ba5      	ldr	r3, [pc, #660]	; (8002ce4 <UART_SetConfig+0x384>)
 8002a4e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	461d      	mov	r5, r3
 8002a5c:	f04f 0600 	mov.w	r6, #0
 8002a60:	46a9      	mov	r9, r5
 8002a62:	46b2      	mov	sl, r6
 8002a64:	eb19 0309 	adds.w	r3, r9, r9
 8002a68:	eb4a 040a 	adc.w	r4, sl, sl
 8002a6c:	4699      	mov	r9, r3
 8002a6e:	46a2      	mov	sl, r4
 8002a70:	eb19 0905 	adds.w	r9, r9, r5
 8002a74:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a78:	f04f 0100 	mov.w	r1, #0
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a84:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a88:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a8c:	4689      	mov	r9, r1
 8002a8e:	4692      	mov	sl, r2
 8002a90:	eb19 0005 	adds.w	r0, r9, r5
 8002a94:	eb4a 0106 	adc.w	r1, sl, r6
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	461d      	mov	r5, r3
 8002a9e:	f04f 0600 	mov.w	r6, #0
 8002aa2:	196b      	adds	r3, r5, r5
 8002aa4:	eb46 0406 	adc.w	r4, r6, r6
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4623      	mov	r3, r4
 8002aac:	f7fd fbf0 	bl	8000290 <__aeabi_uldivmod>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	460c      	mov	r4, r1
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4b8b      	ldr	r3, [pc, #556]	; (8002ce4 <UART_SetConfig+0x384>)
 8002ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8002abc:	095b      	lsrs	r3, r3, #5
 8002abe:	2164      	movs	r1, #100	; 0x64
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	3332      	adds	r3, #50	; 0x32
 8002aca:	4a86      	ldr	r2, [pc, #536]	; (8002ce4 <UART_SetConfig+0x384>)
 8002acc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad0:	095b      	lsrs	r3, r3, #5
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ad8:	4498      	add	r8, r3
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	461d      	mov	r5, r3
 8002ade:	f04f 0600 	mov.w	r6, #0
 8002ae2:	46a9      	mov	r9, r5
 8002ae4:	46b2      	mov	sl, r6
 8002ae6:	eb19 0309 	adds.w	r3, r9, r9
 8002aea:	eb4a 040a 	adc.w	r4, sl, sl
 8002aee:	4699      	mov	r9, r3
 8002af0:	46a2      	mov	sl, r4
 8002af2:	eb19 0905 	adds.w	r9, r9, r5
 8002af6:	eb4a 0a06 	adc.w	sl, sl, r6
 8002afa:	f04f 0100 	mov.w	r1, #0
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b06:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b0a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b0e:	4689      	mov	r9, r1
 8002b10:	4692      	mov	sl, r2
 8002b12:	eb19 0005 	adds.w	r0, r9, r5
 8002b16:	eb4a 0106 	adc.w	r1, sl, r6
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	461d      	mov	r5, r3
 8002b20:	f04f 0600 	mov.w	r6, #0
 8002b24:	196b      	adds	r3, r5, r5
 8002b26:	eb46 0406 	adc.w	r4, r6, r6
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	4623      	mov	r3, r4
 8002b2e:	f7fd fbaf 	bl	8000290 <__aeabi_uldivmod>
 8002b32:	4603      	mov	r3, r0
 8002b34:	460c      	mov	r4, r1
 8002b36:	461a      	mov	r2, r3
 8002b38:	4b6a      	ldr	r3, [pc, #424]	; (8002ce4 <UART_SetConfig+0x384>)
 8002b3a:	fba3 1302 	umull	r1, r3, r3, r2
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	2164      	movs	r1, #100	; 0x64
 8002b42:	fb01 f303 	mul.w	r3, r1, r3
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	3332      	adds	r3, #50	; 0x32
 8002b4c:	4a65      	ldr	r2, [pc, #404]	; (8002ce4 <UART_SetConfig+0x384>)
 8002b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	f003 0207 	and.w	r2, r3, #7
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4442      	add	r2, r8
 8002b5e:	609a      	str	r2, [r3, #8]
 8002b60:	e26f      	b.n	8003042 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b62:	f7ff f8ab 	bl	8001cbc <HAL_RCC_GetPCLK1Freq>
 8002b66:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	461d      	mov	r5, r3
 8002b6c:	f04f 0600 	mov.w	r6, #0
 8002b70:	46a8      	mov	r8, r5
 8002b72:	46b1      	mov	r9, r6
 8002b74:	eb18 0308 	adds.w	r3, r8, r8
 8002b78:	eb49 0409 	adc.w	r4, r9, r9
 8002b7c:	4698      	mov	r8, r3
 8002b7e:	46a1      	mov	r9, r4
 8002b80:	eb18 0805 	adds.w	r8, r8, r5
 8002b84:	eb49 0906 	adc.w	r9, r9, r6
 8002b88:	f04f 0100 	mov.w	r1, #0
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b94:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b98:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b9c:	4688      	mov	r8, r1
 8002b9e:	4691      	mov	r9, r2
 8002ba0:	eb18 0005 	adds.w	r0, r8, r5
 8002ba4:	eb49 0106 	adc.w	r1, r9, r6
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	461d      	mov	r5, r3
 8002bae:	f04f 0600 	mov.w	r6, #0
 8002bb2:	196b      	adds	r3, r5, r5
 8002bb4:	eb46 0406 	adc.w	r4, r6, r6
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4623      	mov	r3, r4
 8002bbc:	f7fd fb68 	bl	8000290 <__aeabi_uldivmod>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	460c      	mov	r4, r1
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b47      	ldr	r3, [pc, #284]	; (8002ce4 <UART_SetConfig+0x384>)
 8002bc8:	fba3 2302 	umull	r2, r3, r3, r2
 8002bcc:	095b      	lsrs	r3, r3, #5
 8002bce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	461d      	mov	r5, r3
 8002bd6:	f04f 0600 	mov.w	r6, #0
 8002bda:	46a9      	mov	r9, r5
 8002bdc:	46b2      	mov	sl, r6
 8002bde:	eb19 0309 	adds.w	r3, r9, r9
 8002be2:	eb4a 040a 	adc.w	r4, sl, sl
 8002be6:	4699      	mov	r9, r3
 8002be8:	46a2      	mov	sl, r4
 8002bea:	eb19 0905 	adds.w	r9, r9, r5
 8002bee:	eb4a 0a06 	adc.w	sl, sl, r6
 8002bf2:	f04f 0100 	mov.w	r1, #0
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bfe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c06:	4689      	mov	r9, r1
 8002c08:	4692      	mov	sl, r2
 8002c0a:	eb19 0005 	adds.w	r0, r9, r5
 8002c0e:	eb4a 0106 	adc.w	r1, sl, r6
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	461d      	mov	r5, r3
 8002c18:	f04f 0600 	mov.w	r6, #0
 8002c1c:	196b      	adds	r3, r5, r5
 8002c1e:	eb46 0406 	adc.w	r4, r6, r6
 8002c22:	461a      	mov	r2, r3
 8002c24:	4623      	mov	r3, r4
 8002c26:	f7fd fb33 	bl	8000290 <__aeabi_uldivmod>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	460c      	mov	r4, r1
 8002c2e:	461a      	mov	r2, r3
 8002c30:	4b2c      	ldr	r3, [pc, #176]	; (8002ce4 <UART_SetConfig+0x384>)
 8002c32:	fba3 1302 	umull	r1, r3, r3, r2
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	2164      	movs	r1, #100	; 0x64
 8002c3a:	fb01 f303 	mul.w	r3, r1, r3
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	3332      	adds	r3, #50	; 0x32
 8002c44:	4a27      	ldr	r2, [pc, #156]	; (8002ce4 <UART_SetConfig+0x384>)
 8002c46:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c52:	4498      	add	r8, r3
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	461d      	mov	r5, r3
 8002c58:	f04f 0600 	mov.w	r6, #0
 8002c5c:	46a9      	mov	r9, r5
 8002c5e:	46b2      	mov	sl, r6
 8002c60:	eb19 0309 	adds.w	r3, r9, r9
 8002c64:	eb4a 040a 	adc.w	r4, sl, sl
 8002c68:	4699      	mov	r9, r3
 8002c6a:	46a2      	mov	sl, r4
 8002c6c:	eb19 0905 	adds.w	r9, r9, r5
 8002c70:	eb4a 0a06 	adc.w	sl, sl, r6
 8002c74:	f04f 0100 	mov.w	r1, #0
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c88:	4689      	mov	r9, r1
 8002c8a:	4692      	mov	sl, r2
 8002c8c:	eb19 0005 	adds.w	r0, r9, r5
 8002c90:	eb4a 0106 	adc.w	r1, sl, r6
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	461d      	mov	r5, r3
 8002c9a:	f04f 0600 	mov.w	r6, #0
 8002c9e:	196b      	adds	r3, r5, r5
 8002ca0:	eb46 0406 	adc.w	r4, r6, r6
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4623      	mov	r3, r4
 8002ca8:	f7fd faf2 	bl	8000290 <__aeabi_uldivmod>
 8002cac:	4603      	mov	r3, r0
 8002cae:	460c      	mov	r4, r1
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <UART_SetConfig+0x384>)
 8002cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8002cb8:	095b      	lsrs	r3, r3, #5
 8002cba:	2164      	movs	r1, #100	; 0x64
 8002cbc:	fb01 f303 	mul.w	r3, r1, r3
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	3332      	adds	r3, #50	; 0x32
 8002cc6:	4a07      	ldr	r2, [pc, #28]	; (8002ce4 <UART_SetConfig+0x384>)
 8002cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ccc:	095b      	lsrs	r3, r3, #5
 8002cce:	f003 0207 	and.w	r2, r3, #7
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4442      	add	r2, r8
 8002cd8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002cda:	e1b2      	b.n	8003042 <UART_SetConfig+0x6e2>
 8002cdc:	40011000 	.word	0x40011000
 8002ce0:	40011400 	.word	0x40011400
 8002ce4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4ad7      	ldr	r2, [pc, #860]	; (800304c <UART_SetConfig+0x6ec>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d005      	beq.n	8002cfe <UART_SetConfig+0x39e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4ad6      	ldr	r2, [pc, #856]	; (8003050 <UART_SetConfig+0x6f0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	f040 80d1 	bne.w	8002ea0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cfe:	f7fe fff1 	bl	8001ce4 <HAL_RCC_GetPCLK2Freq>
 8002d02:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	469a      	mov	sl, r3
 8002d08:	f04f 0b00 	mov.w	fp, #0
 8002d0c:	46d0      	mov	r8, sl
 8002d0e:	46d9      	mov	r9, fp
 8002d10:	eb18 0308 	adds.w	r3, r8, r8
 8002d14:	eb49 0409 	adc.w	r4, r9, r9
 8002d18:	4698      	mov	r8, r3
 8002d1a:	46a1      	mov	r9, r4
 8002d1c:	eb18 080a 	adds.w	r8, r8, sl
 8002d20:	eb49 090b 	adc.w	r9, r9, fp
 8002d24:	f04f 0100 	mov.w	r1, #0
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d30:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d34:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d38:	4688      	mov	r8, r1
 8002d3a:	4691      	mov	r9, r2
 8002d3c:	eb1a 0508 	adds.w	r5, sl, r8
 8002d40:	eb4b 0609 	adc.w	r6, fp, r9
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	4619      	mov	r1, r3
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	f04f 0300 	mov.w	r3, #0
 8002d52:	f04f 0400 	mov.w	r4, #0
 8002d56:	0094      	lsls	r4, r2, #2
 8002d58:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d5c:	008b      	lsls	r3, r1, #2
 8002d5e:	461a      	mov	r2, r3
 8002d60:	4623      	mov	r3, r4
 8002d62:	4628      	mov	r0, r5
 8002d64:	4631      	mov	r1, r6
 8002d66:	f7fd fa93 	bl	8000290 <__aeabi_uldivmod>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	460c      	mov	r4, r1
 8002d6e:	461a      	mov	r2, r3
 8002d70:	4bb8      	ldr	r3, [pc, #736]	; (8003054 <UART_SetConfig+0x6f4>)
 8002d72:	fba3 2302 	umull	r2, r3, r3, r2
 8002d76:	095b      	lsrs	r3, r3, #5
 8002d78:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	469b      	mov	fp, r3
 8002d80:	f04f 0c00 	mov.w	ip, #0
 8002d84:	46d9      	mov	r9, fp
 8002d86:	46e2      	mov	sl, ip
 8002d88:	eb19 0309 	adds.w	r3, r9, r9
 8002d8c:	eb4a 040a 	adc.w	r4, sl, sl
 8002d90:	4699      	mov	r9, r3
 8002d92:	46a2      	mov	sl, r4
 8002d94:	eb19 090b 	adds.w	r9, r9, fp
 8002d98:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d9c:	f04f 0100 	mov.w	r1, #0
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002da8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002db0:	4689      	mov	r9, r1
 8002db2:	4692      	mov	sl, r2
 8002db4:	eb1b 0509 	adds.w	r5, fp, r9
 8002db8:	eb4c 060a 	adc.w	r6, ip, sl
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	f04f 0400 	mov.w	r4, #0
 8002dce:	0094      	lsls	r4, r2, #2
 8002dd0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002dd4:	008b      	lsls	r3, r1, #2
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	4623      	mov	r3, r4
 8002dda:	4628      	mov	r0, r5
 8002ddc:	4631      	mov	r1, r6
 8002dde:	f7fd fa57 	bl	8000290 <__aeabi_uldivmod>
 8002de2:	4603      	mov	r3, r0
 8002de4:	460c      	mov	r4, r1
 8002de6:	461a      	mov	r2, r3
 8002de8:	4b9a      	ldr	r3, [pc, #616]	; (8003054 <UART_SetConfig+0x6f4>)
 8002dea:	fba3 1302 	umull	r1, r3, r3, r2
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	2164      	movs	r1, #100	; 0x64
 8002df2:	fb01 f303 	mul.w	r3, r1, r3
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	3332      	adds	r3, #50	; 0x32
 8002dfc:	4a95      	ldr	r2, [pc, #596]	; (8003054 <UART_SetConfig+0x6f4>)
 8002dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002e02:	095b      	lsrs	r3, r3, #5
 8002e04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e08:	4498      	add	r8, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	469b      	mov	fp, r3
 8002e0e:	f04f 0c00 	mov.w	ip, #0
 8002e12:	46d9      	mov	r9, fp
 8002e14:	46e2      	mov	sl, ip
 8002e16:	eb19 0309 	adds.w	r3, r9, r9
 8002e1a:	eb4a 040a 	adc.w	r4, sl, sl
 8002e1e:	4699      	mov	r9, r3
 8002e20:	46a2      	mov	sl, r4
 8002e22:	eb19 090b 	adds.w	r9, r9, fp
 8002e26:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e2a:	f04f 0100 	mov.w	r1, #0
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e3e:	4689      	mov	r9, r1
 8002e40:	4692      	mov	sl, r2
 8002e42:	eb1b 0509 	adds.w	r5, fp, r9
 8002e46:	eb4c 060a 	adc.w	r6, ip, sl
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	f04f 0400 	mov.w	r4, #0
 8002e5c:	0094      	lsls	r4, r2, #2
 8002e5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e62:	008b      	lsls	r3, r1, #2
 8002e64:	461a      	mov	r2, r3
 8002e66:	4623      	mov	r3, r4
 8002e68:	4628      	mov	r0, r5
 8002e6a:	4631      	mov	r1, r6
 8002e6c:	f7fd fa10 	bl	8000290 <__aeabi_uldivmod>
 8002e70:	4603      	mov	r3, r0
 8002e72:	460c      	mov	r4, r1
 8002e74:	461a      	mov	r2, r3
 8002e76:	4b77      	ldr	r3, [pc, #476]	; (8003054 <UART_SetConfig+0x6f4>)
 8002e78:	fba3 1302 	umull	r1, r3, r3, r2
 8002e7c:	095b      	lsrs	r3, r3, #5
 8002e7e:	2164      	movs	r1, #100	; 0x64
 8002e80:	fb01 f303 	mul.w	r3, r1, r3
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	3332      	adds	r3, #50	; 0x32
 8002e8a:	4a72      	ldr	r2, [pc, #456]	; (8003054 <UART_SetConfig+0x6f4>)
 8002e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e90:	095b      	lsrs	r3, r3, #5
 8002e92:	f003 020f 	and.w	r2, r3, #15
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4442      	add	r2, r8
 8002e9c:	609a      	str	r2, [r3, #8]
 8002e9e:	e0d0      	b.n	8003042 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ea0:	f7fe ff0c 	bl	8001cbc <HAL_RCC_GetPCLK1Freq>
 8002ea4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	469a      	mov	sl, r3
 8002eaa:	f04f 0b00 	mov.w	fp, #0
 8002eae:	46d0      	mov	r8, sl
 8002eb0:	46d9      	mov	r9, fp
 8002eb2:	eb18 0308 	adds.w	r3, r8, r8
 8002eb6:	eb49 0409 	adc.w	r4, r9, r9
 8002eba:	4698      	mov	r8, r3
 8002ebc:	46a1      	mov	r9, r4
 8002ebe:	eb18 080a 	adds.w	r8, r8, sl
 8002ec2:	eb49 090b 	adc.w	r9, r9, fp
 8002ec6:	f04f 0100 	mov.w	r1, #0
 8002eca:	f04f 0200 	mov.w	r2, #0
 8002ece:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002ed2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002ed6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002eda:	4688      	mov	r8, r1
 8002edc:	4691      	mov	r9, r2
 8002ede:	eb1a 0508 	adds.w	r5, sl, r8
 8002ee2:	eb4b 0609 	adc.w	r6, fp, r9
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	4619      	mov	r1, r3
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	f04f 0400 	mov.w	r4, #0
 8002ef8:	0094      	lsls	r4, r2, #2
 8002efa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002efe:	008b      	lsls	r3, r1, #2
 8002f00:	461a      	mov	r2, r3
 8002f02:	4623      	mov	r3, r4
 8002f04:	4628      	mov	r0, r5
 8002f06:	4631      	mov	r1, r6
 8002f08:	f7fd f9c2 	bl	8000290 <__aeabi_uldivmod>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	460c      	mov	r4, r1
 8002f10:	461a      	mov	r2, r3
 8002f12:	4b50      	ldr	r3, [pc, #320]	; (8003054 <UART_SetConfig+0x6f4>)
 8002f14:	fba3 2302 	umull	r2, r3, r3, r2
 8002f18:	095b      	lsrs	r3, r3, #5
 8002f1a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	469b      	mov	fp, r3
 8002f22:	f04f 0c00 	mov.w	ip, #0
 8002f26:	46d9      	mov	r9, fp
 8002f28:	46e2      	mov	sl, ip
 8002f2a:	eb19 0309 	adds.w	r3, r9, r9
 8002f2e:	eb4a 040a 	adc.w	r4, sl, sl
 8002f32:	4699      	mov	r9, r3
 8002f34:	46a2      	mov	sl, r4
 8002f36:	eb19 090b 	adds.w	r9, r9, fp
 8002f3a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f3e:	f04f 0100 	mov.w	r1, #0
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f52:	4689      	mov	r9, r1
 8002f54:	4692      	mov	sl, r2
 8002f56:	eb1b 0509 	adds.w	r5, fp, r9
 8002f5a:	eb4c 060a 	adc.w	r6, ip, sl
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	4619      	mov	r1, r3
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	f04f 0400 	mov.w	r4, #0
 8002f70:	0094      	lsls	r4, r2, #2
 8002f72:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f76:	008b      	lsls	r3, r1, #2
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4623      	mov	r3, r4
 8002f7c:	4628      	mov	r0, r5
 8002f7e:	4631      	mov	r1, r6
 8002f80:	f7fd f986 	bl	8000290 <__aeabi_uldivmod>
 8002f84:	4603      	mov	r3, r0
 8002f86:	460c      	mov	r4, r1
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4b32      	ldr	r3, [pc, #200]	; (8003054 <UART_SetConfig+0x6f4>)
 8002f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f90:	095b      	lsrs	r3, r3, #5
 8002f92:	2164      	movs	r1, #100	; 0x64
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	3332      	adds	r3, #50	; 0x32
 8002f9e:	4a2d      	ldr	r2, [pc, #180]	; (8003054 <UART_SetConfig+0x6f4>)
 8002fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa4:	095b      	lsrs	r3, r3, #5
 8002fa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002faa:	4498      	add	r8, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	469b      	mov	fp, r3
 8002fb0:	f04f 0c00 	mov.w	ip, #0
 8002fb4:	46d9      	mov	r9, fp
 8002fb6:	46e2      	mov	sl, ip
 8002fb8:	eb19 0309 	adds.w	r3, r9, r9
 8002fbc:	eb4a 040a 	adc.w	r4, sl, sl
 8002fc0:	4699      	mov	r9, r3
 8002fc2:	46a2      	mov	sl, r4
 8002fc4:	eb19 090b 	adds.w	r9, r9, fp
 8002fc8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002fcc:	f04f 0100 	mov.w	r1, #0
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fd8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002fdc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002fe0:	4689      	mov	r9, r1
 8002fe2:	4692      	mov	sl, r2
 8002fe4:	eb1b 0509 	adds.w	r5, fp, r9
 8002fe8:	eb4c 060a 	adc.w	r6, ip, sl
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	f04f 0400 	mov.w	r4, #0
 8002ffe:	0094      	lsls	r4, r2, #2
 8003000:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003004:	008b      	lsls	r3, r1, #2
 8003006:	461a      	mov	r2, r3
 8003008:	4623      	mov	r3, r4
 800300a:	4628      	mov	r0, r5
 800300c:	4631      	mov	r1, r6
 800300e:	f7fd f93f 	bl	8000290 <__aeabi_uldivmod>
 8003012:	4603      	mov	r3, r0
 8003014:	460c      	mov	r4, r1
 8003016:	461a      	mov	r2, r3
 8003018:	4b0e      	ldr	r3, [pc, #56]	; (8003054 <UART_SetConfig+0x6f4>)
 800301a:	fba3 1302 	umull	r1, r3, r3, r2
 800301e:	095b      	lsrs	r3, r3, #5
 8003020:	2164      	movs	r1, #100	; 0x64
 8003022:	fb01 f303 	mul.w	r3, r1, r3
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	3332      	adds	r3, #50	; 0x32
 800302c:	4a09      	ldr	r2, [pc, #36]	; (8003054 <UART_SetConfig+0x6f4>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	f003 020f 	and.w	r2, r3, #15
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4442      	add	r2, r8
 800303e:	609a      	str	r2, [r3, #8]
}
 8003040:	e7ff      	b.n	8003042 <UART_SetConfig+0x6e2>
 8003042:	bf00      	nop
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800304c:	40011000 	.word	0x40011000
 8003050:	40011400 	.word	0x40011400
 8003054:	51eb851f 	.word	0x51eb851f

08003058 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f103 0208 	add.w	r2, r3, #8
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003070:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f103 0208 	add.w	r2, r3, #8
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f103 0208 	add.w	r2, r3, #8
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030b2:	b480      	push	{r7}
 80030b4:	b085      	sub	sp, #20
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	601a      	str	r2, [r3, #0]
}
 80030ee:	bf00      	nop
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030fa:	b480      	push	{r7}
 80030fc:	b085      	sub	sp, #20
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
 8003102:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003110:	d103      	bne.n	800311a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	e00c      	b.n	8003134 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3308      	adds	r3, #8
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	e002      	b.n	8003128 <vListInsert+0x2e>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	429a      	cmp	r2, r3
 8003132:	d2f6      	bcs.n	8003122 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	601a      	str	r2, [r3, #0]
}
 8003160:	bf00      	nop
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6892      	ldr	r2, [r2, #8]
 8003182:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6852      	ldr	r2, [r2, #4]
 800318c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	429a      	cmp	r2, r3
 8003196:	d103      	bne.n	80031a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	1e5a      	subs	r2, r3, #1
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d109      	bne.n	80031e8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	e7fe      	b.n	80031e6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80031e8:	f002 f840 	bl	800526c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f4:	68f9      	ldr	r1, [r7, #12]
 80031f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	441a      	add	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003218:	3b01      	subs	r3, #1
 800321a:	68f9      	ldr	r1, [r7, #12]
 800321c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800321e:	fb01 f303 	mul.w	r3, r1, r3
 8003222:	441a      	add	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	22ff      	movs	r2, #255	; 0xff
 800322c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	22ff      	movs	r2, #255	; 0xff
 8003234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d114      	bne.n	8003268 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d01a      	beq.n	800327c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	3310      	adds	r3, #16
 800324a:	4618      	mov	r0, r3
 800324c:	f000 fffc 	bl	8004248 <xTaskRemoveFromEventList>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d012      	beq.n	800327c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003256:	4b0d      	ldr	r3, [pc, #52]	; (800328c <xQueueGenericReset+0xcc>)
 8003258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	f3bf 8f4f 	dsb	sy
 8003262:	f3bf 8f6f 	isb	sy
 8003266:	e009      	b.n	800327c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	3310      	adds	r3, #16
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff fef3 	bl	8003058 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	3324      	adds	r3, #36	; 0x24
 8003276:	4618      	mov	r0, r3
 8003278:	f7ff feee 	bl	8003058 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800327c:	f002 f824 	bl	80052c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003280:	2301      	movs	r3, #1
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	e000ed04 	.word	0xe000ed04

08003290 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003290:	b580      	push	{r7, lr}
 8003292:	b08a      	sub	sp, #40	; 0x28
 8003294:	af02      	add	r7, sp, #8
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	4613      	mov	r3, r2
 800329c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d109      	bne.n	80032b8 <xQueueGenericCreate+0x28>
 80032a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a8:	f383 8811 	msr	BASEPRI, r3
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	e7fe      	b.n	80032b6 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d102      	bne.n	80032c4 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
 80032c2:	e004      	b.n	80032ce <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	fb02 f303 	mul.w	r3, r2, r3
 80032cc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3350      	adds	r3, #80	; 0x50
 80032d2:	4618      	mov	r0, r3
 80032d4:	f002 f8e4 	bl	80054a0 <pvPortMalloc>
 80032d8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00d      	beq.n	80032fc <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	3350      	adds	r3, #80	; 0x50
 80032e8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80032ea:	79fa      	ldrb	r2, [r7, #7]
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	4613      	mov	r3, r2
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f805 	bl	8003306 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80032fc:	69bb      	ldr	r3, [r7, #24]
	}
 80032fe:	4618      	mov	r0, r3
 8003300:	3720      	adds	r7, #32
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b084      	sub	sp, #16
 800330a:	af00      	add	r7, sp, #0
 800330c:	60f8      	str	r0, [r7, #12]
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	607a      	str	r2, [r7, #4]
 8003312:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d103      	bne.n	8003322 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	e002      	b.n	8003328 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003334:	2101      	movs	r1, #1
 8003336:	69b8      	ldr	r0, [r7, #24]
 8003338:	f7ff ff42 	bl	80031c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	78fa      	ldrb	r2, [r7, #3]
 8003340:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003344:	bf00      	nop
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08e      	sub	sp, #56	; 0x38
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
 8003358:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800335a:	2300      	movs	r3, #0
 800335c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003364:	2b00      	cmp	r3, #0
 8003366:	d109      	bne.n	800337c <xQueueGenericSend+0x30>
 8003368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336c:	f383 8811 	msr	BASEPRI, r3
 8003370:	f3bf 8f6f 	isb	sy
 8003374:	f3bf 8f4f 	dsb	sy
 8003378:	62bb      	str	r3, [r7, #40]	; 0x28
 800337a:	e7fe      	b.n	800337a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d103      	bne.n	800338a <xQueueGenericSend+0x3e>
 8003382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <xQueueGenericSend+0x42>
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <xQueueGenericSend+0x44>
 800338e:	2300      	movs	r3, #0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d109      	bne.n	80033a8 <xQueueGenericSend+0x5c>
 8003394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003398:	f383 8811 	msr	BASEPRI, r3
 800339c:	f3bf 8f6f 	isb	sy
 80033a0:	f3bf 8f4f 	dsb	sy
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
 80033a6:	e7fe      	b.n	80033a6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d103      	bne.n	80033b6 <xQueueGenericSend+0x6a>
 80033ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d101      	bne.n	80033ba <xQueueGenericSend+0x6e>
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <xQueueGenericSend+0x70>
 80033ba:	2300      	movs	r3, #0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d109      	bne.n	80033d4 <xQueueGenericSend+0x88>
 80033c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c4:	f383 8811 	msr	BASEPRI, r3
 80033c8:	f3bf 8f6f 	isb	sy
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	623b      	str	r3, [r7, #32]
 80033d2:	e7fe      	b.n	80033d2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033d4:	f001 f8d0 	bl	8004578 <xTaskGetSchedulerState>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d102      	bne.n	80033e4 <xQueueGenericSend+0x98>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <xQueueGenericSend+0x9c>
 80033e4:	2301      	movs	r3, #1
 80033e6:	e000      	b.n	80033ea <xQueueGenericSend+0x9e>
 80033e8:	2300      	movs	r3, #0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d109      	bne.n	8003402 <xQueueGenericSend+0xb6>
 80033ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f2:	f383 8811 	msr	BASEPRI, r3
 80033f6:	f3bf 8f6f 	isb	sy
 80033fa:	f3bf 8f4f 	dsb	sy
 80033fe:	61fb      	str	r3, [r7, #28]
 8003400:	e7fe      	b.n	8003400 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003402:	f001 ff33 	bl	800526c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800340a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340e:	429a      	cmp	r2, r3
 8003410:	d302      	bcc.n	8003418 <xQueueGenericSend+0xcc>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b02      	cmp	r3, #2
 8003416:	d129      	bne.n	800346c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	68b9      	ldr	r1, [r7, #8]
 800341c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800341e:	f000 f9ff 	bl	8003820 <prvCopyDataToQueue>
 8003422:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	2b00      	cmp	r3, #0
 800342a:	d010      	beq.n	800344e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800342c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342e:	3324      	adds	r3, #36	; 0x24
 8003430:	4618      	mov	r0, r3
 8003432:	f000 ff09 	bl	8004248 <xTaskRemoveFromEventList>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d013      	beq.n	8003464 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800343c:	4b3f      	ldr	r3, [pc, #252]	; (800353c <xQueueGenericSend+0x1f0>)
 800343e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	f3bf 8f4f 	dsb	sy
 8003448:	f3bf 8f6f 	isb	sy
 800344c:	e00a      	b.n	8003464 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800344e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003450:	2b00      	cmp	r3, #0
 8003452:	d007      	beq.n	8003464 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003454:	4b39      	ldr	r3, [pc, #228]	; (800353c <xQueueGenericSend+0x1f0>)
 8003456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003464:	f001 ff30 	bl	80052c8 <vPortExitCritical>
				return pdPASS;
 8003468:	2301      	movs	r3, #1
 800346a:	e063      	b.n	8003534 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d103      	bne.n	800347a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003472:	f001 ff29 	bl	80052c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003476:	2300      	movs	r3, #0
 8003478:	e05c      	b.n	8003534 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800347a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347c:	2b00      	cmp	r3, #0
 800347e:	d106      	bne.n	800348e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003480:	f107 0314 	add.w	r3, r7, #20
 8003484:	4618      	mov	r0, r3
 8003486:	f000 ff41 	bl	800430c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800348a:	2301      	movs	r3, #1
 800348c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800348e:	f001 ff1b 	bl	80052c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003492:	f000 fcbf 	bl	8003e14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003496:	f001 fee9 	bl	800526c <vPortEnterCritical>
 800349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034a0:	b25b      	sxtb	r3, r3
 80034a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034a6:	d103      	bne.n	80034b0 <xQueueGenericSend+0x164>
 80034a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034b6:	b25b      	sxtb	r3, r3
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034bc:	d103      	bne.n	80034c6 <xQueueGenericSend+0x17a>
 80034be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034c6:	f001 feff 	bl	80052c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034ca:	1d3a      	adds	r2, r7, #4
 80034cc:	f107 0314 	add.w	r3, r7, #20
 80034d0:	4611      	mov	r1, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 ff30 	bl	8004338 <xTaskCheckForTimeOut>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d124      	bne.n	8003528 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034e0:	f000 fa96 	bl	8003a10 <prvIsQueueFull>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d018      	beq.n	800351c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80034ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ec:	3310      	adds	r3, #16
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	4611      	mov	r1, r2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fe5a 	bl	80041ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80034f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034fa:	f000 fa21 	bl	8003940 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80034fe:	f000 fc97 	bl	8003e30 <xTaskResumeAll>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	f47f af7c 	bne.w	8003402 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800350a:	4b0c      	ldr	r3, [pc, #48]	; (800353c <xQueueGenericSend+0x1f0>)
 800350c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	f3bf 8f4f 	dsb	sy
 8003516:	f3bf 8f6f 	isb	sy
 800351a:	e772      	b.n	8003402 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800351c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800351e:	f000 fa0f 	bl	8003940 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003522:	f000 fc85 	bl	8003e30 <xTaskResumeAll>
 8003526:	e76c      	b.n	8003402 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003528:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800352a:	f000 fa09 	bl	8003940 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800352e:	f000 fc7f 	bl	8003e30 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003532:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003534:	4618      	mov	r0, r3
 8003536:	3738      	adds	r7, #56	; 0x38
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	e000ed04 	.word	0xe000ed04

08003540 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08e      	sub	sp, #56	; 0x38
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003554:	2b00      	cmp	r3, #0
 8003556:	d109      	bne.n	800356c <xQueueGenericSendFromISR+0x2c>
 8003558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355c:	f383 8811 	msr	BASEPRI, r3
 8003560:	f3bf 8f6f 	isb	sy
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
 800356a:	e7fe      	b.n	800356a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d103      	bne.n	800357a <xQueueGenericSendFromISR+0x3a>
 8003572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <xQueueGenericSendFromISR+0x3e>
 800357a:	2301      	movs	r3, #1
 800357c:	e000      	b.n	8003580 <xQueueGenericSendFromISR+0x40>
 800357e:	2300      	movs	r3, #0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d109      	bne.n	8003598 <xQueueGenericSendFromISR+0x58>
 8003584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	623b      	str	r3, [r7, #32]
 8003596:	e7fe      	b.n	8003596 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	2b02      	cmp	r3, #2
 800359c:	d103      	bne.n	80035a6 <xQueueGenericSendFromISR+0x66>
 800359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <xQueueGenericSendFromISR+0x6a>
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <xQueueGenericSendFromISR+0x6c>
 80035aa:	2300      	movs	r3, #0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d109      	bne.n	80035c4 <xQueueGenericSendFromISR+0x84>
 80035b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	61fb      	str	r3, [r7, #28]
 80035c2:	e7fe      	b.n	80035c2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035c4:	f001 ff2e 	bl	8005424 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80035c8:	f3ef 8211 	mrs	r2, BASEPRI
 80035cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d0:	f383 8811 	msr	BASEPRI, r3
 80035d4:	f3bf 8f6f 	isb	sy
 80035d8:	f3bf 8f4f 	dsb	sy
 80035dc:	61ba      	str	r2, [r7, #24]
 80035de:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80035e0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80035e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d302      	bcc.n	80035f6 <xQueueGenericSendFromISR+0xb6>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d12c      	bne.n	8003650 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80035f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	68b9      	ldr	r1, [r7, #8]
 8003604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003606:	f000 f90b 	bl	8003820 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800360a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800360e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003612:	d112      	bne.n	800363a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	2b00      	cmp	r3, #0
 800361a:	d016      	beq.n	800364a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800361c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361e:	3324      	adds	r3, #36	; 0x24
 8003620:	4618      	mov	r0, r3
 8003622:	f000 fe11 	bl	8004248 <xTaskRemoveFromEventList>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00e      	beq.n	800364a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00b      	beq.n	800364a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	e007      	b.n	800364a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800363a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800363e:	3301      	adds	r3, #1
 8003640:	b2db      	uxtb	r3, r3
 8003642:	b25a      	sxtb	r2, r3
 8003644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800364a:	2301      	movs	r3, #1
 800364c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800364e:	e001      	b.n	8003654 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003650:	2300      	movs	r3, #0
 8003652:	637b      	str	r3, [r7, #52]	; 0x34
 8003654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003656:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800365e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003660:	4618      	mov	r0, r3
 8003662:	3738      	adds	r7, #56	; 0x38
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b08c      	sub	sp, #48	; 0x30
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003674:	2300      	movs	r3, #0
 8003676:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367e:	2b00      	cmp	r3, #0
 8003680:	d109      	bne.n	8003696 <xQueueReceive+0x2e>
	__asm volatile
 8003682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003686:	f383 8811 	msr	BASEPRI, r3
 800368a:	f3bf 8f6f 	isb	sy
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	623b      	str	r3, [r7, #32]
 8003694:	e7fe      	b.n	8003694 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d103      	bne.n	80036a4 <xQueueReceive+0x3c>
 800369c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <xQueueReceive+0x40>
 80036a4:	2301      	movs	r3, #1
 80036a6:	e000      	b.n	80036aa <xQueueReceive+0x42>
 80036a8:	2300      	movs	r3, #0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d109      	bne.n	80036c2 <xQueueReceive+0x5a>
 80036ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	61fb      	str	r3, [r7, #28]
 80036c0:	e7fe      	b.n	80036c0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036c2:	f000 ff59 	bl	8004578 <xTaskGetSchedulerState>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d102      	bne.n	80036d2 <xQueueReceive+0x6a>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <xQueueReceive+0x6e>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <xQueueReceive+0x70>
 80036d6:	2300      	movs	r3, #0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d109      	bne.n	80036f0 <xQueueReceive+0x88>
 80036dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e0:	f383 8811 	msr	BASEPRI, r3
 80036e4:	f3bf 8f6f 	isb	sy
 80036e8:	f3bf 8f4f 	dsb	sy
 80036ec:	61bb      	str	r3, [r7, #24]
 80036ee:	e7fe      	b.n	80036ee <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80036f0:	f001 fdbc 	bl	800526c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d01f      	beq.n	8003740 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003700:	68b9      	ldr	r1, [r7, #8]
 8003702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003704:	f000 f8f6 	bl	80038f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	1e5a      	subs	r2, r3, #1
 800370c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00f      	beq.n	8003738 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371a:	3310      	adds	r3, #16
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fd93 	bl	8004248 <xTaskRemoveFromEventList>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d007      	beq.n	8003738 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003728:	4b3c      	ldr	r3, [pc, #240]	; (800381c <xQueueReceive+0x1b4>)
 800372a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003738:	f001 fdc6 	bl	80052c8 <vPortExitCritical>
				return pdPASS;
 800373c:	2301      	movs	r3, #1
 800373e:	e069      	b.n	8003814 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d103      	bne.n	800374e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003746:	f001 fdbf 	bl	80052c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800374a:	2300      	movs	r3, #0
 800374c:	e062      	b.n	8003814 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800374e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003750:	2b00      	cmp	r3, #0
 8003752:	d106      	bne.n	8003762 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003754:	f107 0310 	add.w	r3, r7, #16
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fdd7 	bl	800430c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800375e:	2301      	movs	r3, #1
 8003760:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003762:	f001 fdb1 	bl	80052c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003766:	f000 fb55 	bl	8003e14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800376a:	f001 fd7f 	bl	800526c <vPortEnterCritical>
 800376e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003770:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003774:	b25b      	sxtb	r3, r3
 8003776:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800377a:	d103      	bne.n	8003784 <xQueueReceive+0x11c>
 800377c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003786:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800378a:	b25b      	sxtb	r3, r3
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003790:	d103      	bne.n	800379a <xQueueReceive+0x132>
 8003792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800379a:	f001 fd95 	bl	80052c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800379e:	1d3a      	adds	r2, r7, #4
 80037a0:	f107 0310 	add.w	r3, r7, #16
 80037a4:	4611      	mov	r1, r2
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fdc6 	bl	8004338 <xTaskCheckForTimeOut>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d123      	bne.n	80037fa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037b4:	f000 f916 	bl	80039e4 <prvIsQueueEmpty>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d017      	beq.n	80037ee <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80037be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c0:	3324      	adds	r3, #36	; 0x24
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	4611      	mov	r1, r2
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fcf0 	bl	80041ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80037cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037ce:	f000 f8b7 	bl	8003940 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80037d2:	f000 fb2d 	bl	8003e30 <xTaskResumeAll>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d189      	bne.n	80036f0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80037dc:	4b0f      	ldr	r3, [pc, #60]	; (800381c <xQueueReceive+0x1b4>)
 80037de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	e780      	b.n	80036f0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80037ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037f0:	f000 f8a6 	bl	8003940 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037f4:	f000 fb1c 	bl	8003e30 <xTaskResumeAll>
 80037f8:	e77a      	b.n	80036f0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80037fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037fc:	f000 f8a0 	bl	8003940 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003800:	f000 fb16 	bl	8003e30 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003806:	f000 f8ed 	bl	80039e4 <prvIsQueueEmpty>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	f43f af6f 	beq.w	80036f0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003812:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003814:	4618      	mov	r0, r3
 8003816:	3730      	adds	r7, #48	; 0x30
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	e000ed04 	.word	0xe000ed04

08003820 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003834:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10d      	bne.n	800385a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d14d      	bne.n	80038e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	4618      	mov	r0, r3
 800384c:	f000 feb2 	bl	80045b4 <xTaskPriorityDisinherit>
 8003850:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	609a      	str	r2, [r3, #8]
 8003858:	e043      	b.n	80038e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d119      	bne.n	8003894 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6858      	ldr	r0, [r3, #4]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	461a      	mov	r2, r3
 800386a:	68b9      	ldr	r1, [r7, #8]
 800386c:	f002 f818 	bl	80058a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	441a      	add	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	429a      	cmp	r2, r3
 8003888:	d32b      	bcc.n	80038e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	605a      	str	r2, [r3, #4]
 8003892:	e026      	b.n	80038e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	68d8      	ldr	r0, [r3, #12]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	461a      	mov	r2, r3
 800389e:	68b9      	ldr	r1, [r7, #8]
 80038a0:	f001 fffe 	bl	80058a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	68da      	ldr	r2, [r3, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	425b      	negs	r3, r3
 80038ae:	441a      	add	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d207      	bcs.n	80038d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c8:	425b      	negs	r3, r3
 80038ca:	441a      	add	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d105      	bne.n	80038e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	3b01      	subs	r3, #1
 80038e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1c5a      	adds	r2, r3, #1
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80038ea:	697b      	ldr	r3, [r7, #20]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	2b00      	cmp	r3, #0
 8003904:	d018      	beq.n	8003938 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	441a      	add	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	429a      	cmp	r2, r3
 800391e:	d303      	bcc.n	8003928 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68d9      	ldr	r1, [r3, #12]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003930:	461a      	mov	r2, r3
 8003932:	6838      	ldr	r0, [r7, #0]
 8003934:	f001 ffb4 	bl	80058a0 <memcpy>
	}
}
 8003938:	bf00      	nop
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003948:	f001 fc90 	bl	800526c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003952:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003954:	e011      	b.n	800397a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	2b00      	cmp	r3, #0
 800395c:	d012      	beq.n	8003984 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	3324      	adds	r3, #36	; 0x24
 8003962:	4618      	mov	r0, r3
 8003964:	f000 fc70 	bl	8004248 <xTaskRemoveFromEventList>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800396e:	f000 fd43 	bl	80043f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003972:	7bfb      	ldrb	r3, [r7, #15]
 8003974:	3b01      	subs	r3, #1
 8003976:	b2db      	uxtb	r3, r3
 8003978:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800397a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800397e:	2b00      	cmp	r3, #0
 8003980:	dce9      	bgt.n	8003956 <prvUnlockQueue+0x16>
 8003982:	e000      	b.n	8003986 <prvUnlockQueue+0x46>
					break;
 8003984:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	22ff      	movs	r2, #255	; 0xff
 800398a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800398e:	f001 fc9b 	bl	80052c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003992:	f001 fc6b 	bl	800526c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800399c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800399e:	e011      	b.n	80039c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d012      	beq.n	80039ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3310      	adds	r3, #16
 80039ac:	4618      	mov	r0, r3
 80039ae:	f000 fc4b 	bl	8004248 <xTaskRemoveFromEventList>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80039b8:	f000 fd1e 	bl	80043f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80039bc:	7bbb      	ldrb	r3, [r7, #14]
 80039be:	3b01      	subs	r3, #1
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	dce9      	bgt.n	80039a0 <prvUnlockQueue+0x60>
 80039cc:	e000      	b.n	80039d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80039ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	22ff      	movs	r2, #255	; 0xff
 80039d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80039d8:	f001 fc76 	bl	80052c8 <vPortExitCritical>
}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80039ec:	f001 fc3e 	bl	800526c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d102      	bne.n	80039fe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80039f8:	2301      	movs	r3, #1
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	e001      	b.n	8003a02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a02:	f001 fc61 	bl	80052c8 <vPortExitCritical>

	return xReturn;
 8003a06:	68fb      	ldr	r3, [r7, #12]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a18:	f001 fc28 	bl	800526c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d102      	bne.n	8003a2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	e001      	b.n	8003a32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a32:	f001 fc49 	bl	80052c8 <vPortExitCritical>

	return xReturn;
 8003a36:	68fb      	ldr	r3, [r7, #12]
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	e014      	b.n	8003a7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a50:	4a0e      	ldr	r2, [pc, #56]	; (8003a8c <vQueueAddToRegistry+0x4c>)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10b      	bne.n	8003a74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a5c:	490b      	ldr	r1, [pc, #44]	; (8003a8c <vQueueAddToRegistry+0x4c>)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003a66:	4a09      	ldr	r2, [pc, #36]	; (8003a8c <vQueueAddToRegistry+0x4c>)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	4413      	add	r3, r2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003a72:	e005      	b.n	8003a80 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	3301      	adds	r3, #1
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2b07      	cmp	r3, #7
 8003a7e:	d9e7      	bls.n	8003a50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003a80:	bf00      	nop
 8003a82:	3714      	adds	r7, #20
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr
 8003a8c:	20012f3c 	.word	0x20012f3c

08003a90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003aa0:	f001 fbe4 	bl	800526c <vPortEnterCritical>
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003aaa:	b25b      	sxtb	r3, r3
 8003aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ab0:	d103      	bne.n	8003aba <vQueueWaitForMessageRestricted+0x2a>
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ac0:	b25b      	sxtb	r3, r3
 8003ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ac6:	d103      	bne.n	8003ad0 <vQueueWaitForMessageRestricted+0x40>
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ad0:	f001 fbfa 	bl	80052c8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d106      	bne.n	8003aea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	3324      	adds	r3, #36	; 0x24
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	68b9      	ldr	r1, [r7, #8]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 fb85 	bl	80041f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003aea:	6978      	ldr	r0, [r7, #20]
 8003aec:	f7ff ff28 	bl	8003940 <prvUnlockQueue>
	}
 8003af0:	bf00      	nop
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08c      	sub	sp, #48	; 0x30
 8003afc:	af04      	add	r7, sp, #16
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	603b      	str	r3, [r7, #0]
 8003b04:	4613      	mov	r3, r2
 8003b06:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b08:	88fb      	ldrh	r3, [r7, #6]
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f001 fcc7 	bl	80054a0 <pvPortMalloc>
 8003b12:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00e      	beq.n	8003b38 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b1a:	2058      	movs	r0, #88	; 0x58
 8003b1c:	f001 fcc0 	bl	80054a0 <pvPortMalloc>
 8003b20:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	631a      	str	r2, [r3, #48]	; 0x30
 8003b2e:	e005      	b.n	8003b3c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b30:	6978      	ldr	r0, [r7, #20]
 8003b32:	f001 fd77 	bl	8005624 <vPortFree>
 8003b36:	e001      	b.n	8003b3c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d013      	beq.n	8003b6a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b42:	88fa      	ldrh	r2, [r7, #6]
 8003b44:	2300      	movs	r3, #0
 8003b46:	9303      	str	r3, [sp, #12]
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	9302      	str	r3, [sp, #8]
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	9301      	str	r3, [sp, #4]
 8003b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f80e 	bl	8003b7a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b5e:	69f8      	ldr	r0, [r7, #28]
 8003b60:	f000 f89e 	bl	8003ca0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b64:	2301      	movs	r3, #1
 8003b66:	61bb      	str	r3, [r7, #24]
 8003b68:	e002      	b.n	8003b70 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b70:	69bb      	ldr	r3, [r7, #24]
	}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3720      	adds	r7, #32
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b088      	sub	sp, #32
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <prvInitialiseNewTask+0x28>
 8003b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b92:	f383 8811 	msr	BASEPRI, r3
 8003b96:	f3bf 8f6f 	isb	sy
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	617b      	str	r3, [r7, #20]
 8003ba0:	e7fe      	b.n	8003ba0 <prvInitialiseNewTask+0x26>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	461a      	mov	r2, r3
 8003bac:	21a5      	movs	r1, #165	; 0xa5
 8003bae:	f001 fe82 	bl	80058b6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	f023 0307 	bic.w	r3, r3, #7
 8003bca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <prvInitialiseNewTask+0x70>
 8003bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	613b      	str	r3, [r7, #16]
 8003be8:	e7fe      	b.n	8003be8 <prvInitialiseNewTask+0x6e>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
 8003bee:	e012      	b.n	8003c16 <prvInitialiseNewTask+0x9c>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	7819      	ldrb	r1, [r3, #0]
 8003bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3334      	adds	r3, #52	; 0x34
 8003c00:	460a      	mov	r2, r1
 8003c02:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	4413      	add	r3, r2
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d006      	beq.n	8003c1e <prvInitialiseNewTask+0xa4>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	3301      	adds	r3, #1
 8003c14:	61fb      	str	r3, [r7, #28]
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	2b09      	cmp	r3, #9
 8003c1a:	d9e9      	bls.n	8003bf0 <prvInitialiseNewTask+0x76>
 8003c1c:	e000      	b.n	8003c20 <prvInitialiseNewTask+0xa6>
		{
			break;
 8003c1e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d901      	bls.n	8003c32 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c2e:	2304      	movs	r3, #4
 8003c30:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c36:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c3c:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c40:	2200      	movs	r2, #0
 8003c42:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c46:	3304      	adds	r3, #4
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff fa25 	bl	8003098 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c50:	3318      	adds	r3, #24
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff fa20 	bl	8003098 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c5c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c60:	f1c3 0205 	rsb	r2, r3, #5
 8003c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c66:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c6c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c70:	2200      	movs	r2, #0
 8003c72:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	68f9      	ldr	r1, [r7, #12]
 8003c80:	69b8      	ldr	r0, [r7, #24]
 8003c82:	f001 f9cd 	bl	8005020 <pxPortInitialiseStack>
 8003c86:	4602      	mov	r2, r0
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c98:	bf00      	nop
 8003c9a:	3720      	adds	r7, #32
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ca8:	f001 fae0 	bl	800526c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003cac:	4b2c      	ldr	r3, [pc, #176]	; (8003d60 <prvAddNewTaskToReadyList+0xc0>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	4a2b      	ldr	r2, [pc, #172]	; (8003d60 <prvAddNewTaskToReadyList+0xc0>)
 8003cb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003cb6:	4b2b      	ldr	r3, [pc, #172]	; (8003d64 <prvAddNewTaskToReadyList+0xc4>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d109      	bne.n	8003cd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003cbe:	4a29      	ldr	r2, [pc, #164]	; (8003d64 <prvAddNewTaskToReadyList+0xc4>)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cc4:	4b26      	ldr	r3, [pc, #152]	; (8003d60 <prvAddNewTaskToReadyList+0xc0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d110      	bne.n	8003cee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ccc:	f000 fbb8 	bl	8004440 <prvInitialiseTaskLists>
 8003cd0:	e00d      	b.n	8003cee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cd2:	4b25      	ldr	r3, [pc, #148]	; (8003d68 <prvAddNewTaskToReadyList+0xc8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cda:	4b22      	ldr	r3, [pc, #136]	; (8003d64 <prvAddNewTaskToReadyList+0xc4>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d802      	bhi.n	8003cee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ce8:	4a1e      	ldr	r2, [pc, #120]	; (8003d64 <prvAddNewTaskToReadyList+0xc4>)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003cee:	4b1f      	ldr	r3, [pc, #124]	; (8003d6c <prvAddNewTaskToReadyList+0xcc>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	4a1d      	ldr	r2, [pc, #116]	; (8003d6c <prvAddNewTaskToReadyList+0xcc>)
 8003cf6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003cf8:	4b1c      	ldr	r3, [pc, #112]	; (8003d6c <prvAddNewTaskToReadyList+0xcc>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d04:	2201      	movs	r2, #1
 8003d06:	409a      	lsls	r2, r3
 8003d08:	4b19      	ldr	r3, [pc, #100]	; (8003d70 <prvAddNewTaskToReadyList+0xd0>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	4a18      	ldr	r2, [pc, #96]	; (8003d70 <prvAddNewTaskToReadyList+0xd0>)
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d16:	4613      	mov	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4a15      	ldr	r2, [pc, #84]	; (8003d74 <prvAddNewTaskToReadyList+0xd4>)
 8003d20:	441a      	add	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3304      	adds	r3, #4
 8003d26:	4619      	mov	r1, r3
 8003d28:	4610      	mov	r0, r2
 8003d2a:	f7ff f9c2 	bl	80030b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d2e:	f001 facb 	bl	80052c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d32:	4b0d      	ldr	r3, [pc, #52]	; (8003d68 <prvAddNewTaskToReadyList+0xc8>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00e      	beq.n	8003d58 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d3a:	4b0a      	ldr	r3, [pc, #40]	; (8003d64 <prvAddNewTaskToReadyList+0xc4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d207      	bcs.n	8003d58 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <prvAddNewTaskToReadyList+0xd8>)
 8003d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d58:	bf00      	nop
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	20000224 	.word	0x20000224
 8003d64:	2000014c 	.word	0x2000014c
 8003d68:	20000230 	.word	0x20000230
 8003d6c:	20000240 	.word	0x20000240
 8003d70:	2000022c 	.word	0x2000022c
 8003d74:	20000150 	.word	0x20000150
 8003d78:	e000ed04 	.word	0xe000ed04

08003d7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003d82:	4b1e      	ldr	r3, [pc, #120]	; (8003dfc <vTaskStartScheduler+0x80>)
 8003d84:	9301      	str	r3, [sp, #4]
 8003d86:	2300      	movs	r3, #0
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	2282      	movs	r2, #130	; 0x82
 8003d8e:	491c      	ldr	r1, [pc, #112]	; (8003e00 <vTaskStartScheduler+0x84>)
 8003d90:	481c      	ldr	r0, [pc, #112]	; (8003e04 <vTaskStartScheduler+0x88>)
 8003d92:	f7ff feb1 	bl	8003af8 <xTaskCreate>
 8003d96:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d102      	bne.n	8003da4 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8003d9e:	f000 fe25 	bl	80049ec <xTimerCreateTimerTask>
 8003da2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d115      	bne.n	8003dd6 <vTaskStartScheduler+0x5a>
 8003daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003dbc:	4b12      	ldr	r3, [pc, #72]	; (8003e08 <vTaskStartScheduler+0x8c>)
 8003dbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003dc2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003dc4:	4b11      	ldr	r3, [pc, #68]	; (8003e0c <vTaskStartScheduler+0x90>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003dca:	4b11      	ldr	r3, [pc, #68]	; (8003e10 <vTaskStartScheduler+0x94>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003dd0:	f001 f9ae 	bl	8005130 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003dd4:	e00d      	b.n	8003df2 <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ddc:	d109      	bne.n	8003df2 <vTaskStartScheduler+0x76>
 8003dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de2:	f383 8811 	msr	BASEPRI, r3
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	f3bf 8f4f 	dsb	sy
 8003dee:	607b      	str	r3, [r7, #4]
 8003df0:	e7fe      	b.n	8003df0 <vTaskStartScheduler+0x74>
}
 8003df2:	bf00      	nop
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20000248 	.word	0x20000248
 8003e00:	08006160 	.word	0x08006160
 8003e04:	08004411 	.word	0x08004411
 8003e08:	20000244 	.word	0x20000244
 8003e0c:	20000230 	.word	0x20000230
 8003e10:	20000228 	.word	0x20000228

08003e14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003e18:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <vTaskSuspendAll+0x18>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	4a03      	ldr	r2, [pc, #12]	; (8003e2c <vTaskSuspendAll+0x18>)
 8003e20:	6013      	str	r3, [r2, #0]
}
 8003e22:	bf00      	nop
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	2000024c 	.word	0x2000024c

08003e30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e3e:	4b41      	ldr	r3, [pc, #260]	; (8003f44 <xTaskResumeAll+0x114>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d109      	bne.n	8003e5a <xTaskResumeAll+0x2a>
 8003e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4a:	f383 8811 	msr	BASEPRI, r3
 8003e4e:	f3bf 8f6f 	isb	sy
 8003e52:	f3bf 8f4f 	dsb	sy
 8003e56:	603b      	str	r3, [r7, #0]
 8003e58:	e7fe      	b.n	8003e58 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e5a:	f001 fa07 	bl	800526c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e5e:	4b39      	ldr	r3, [pc, #228]	; (8003f44 <xTaskResumeAll+0x114>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	4a37      	ldr	r2, [pc, #220]	; (8003f44 <xTaskResumeAll+0x114>)
 8003e66:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e68:	4b36      	ldr	r3, [pc, #216]	; (8003f44 <xTaskResumeAll+0x114>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d161      	bne.n	8003f34 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e70:	4b35      	ldr	r3, [pc, #212]	; (8003f48 <xTaskResumeAll+0x118>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d05d      	beq.n	8003f34 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e78:	e02e      	b.n	8003ed8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e7a:	4b34      	ldr	r3, [pc, #208]	; (8003f4c <xTaskResumeAll+0x11c>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	3318      	adds	r3, #24
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7ff f970 	bl	800316c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	3304      	adds	r3, #4
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff f96b 	bl	800316c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	409a      	lsls	r2, r3
 8003e9e:	4b2c      	ldr	r3, [pc, #176]	; (8003f50 <xTaskResumeAll+0x120>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	4a2a      	ldr	r2, [pc, #168]	; (8003f50 <xTaskResumeAll+0x120>)
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4a27      	ldr	r2, [pc, #156]	; (8003f54 <xTaskResumeAll+0x124>)
 8003eb6:	441a      	add	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	f7ff f8f7 	bl	80030b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec8:	4b23      	ldr	r3, [pc, #140]	; (8003f58 <xTaskResumeAll+0x128>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d302      	bcc.n	8003ed8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003ed2:	4b22      	ldr	r3, [pc, #136]	; (8003f5c <xTaskResumeAll+0x12c>)
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ed8:	4b1c      	ldr	r3, [pc, #112]	; (8003f4c <xTaskResumeAll+0x11c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1cc      	bne.n	8003e7a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ee6:	f000 fb27 	bl	8004538 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003eea:	4b1d      	ldr	r3, [pc, #116]	; (8003f60 <xTaskResumeAll+0x130>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d010      	beq.n	8003f18 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ef6:	f000 f847 	bl	8003f88 <xTaskIncrementTick>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003f00:	4b16      	ldr	r3, [pc, #88]	; (8003f5c <xTaskResumeAll+0x12c>)
 8003f02:	2201      	movs	r2, #1
 8003f04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1f1      	bne.n	8003ef6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003f12:	4b13      	ldr	r3, [pc, #76]	; (8003f60 <xTaskResumeAll+0x130>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f18:	4b10      	ldr	r3, [pc, #64]	; (8003f5c <xTaskResumeAll+0x12c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d009      	beq.n	8003f34 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f20:	2301      	movs	r3, #1
 8003f22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f24:	4b0f      	ldr	r3, [pc, #60]	; (8003f64 <xTaskResumeAll+0x134>)
 8003f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f34:	f001 f9c8 	bl	80052c8 <vPortExitCritical>

	return xAlreadyYielded;
 8003f38:	68bb      	ldr	r3, [r7, #8]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	2000024c 	.word	0x2000024c
 8003f48:	20000224 	.word	0x20000224
 8003f4c:	200001e4 	.word	0x200001e4
 8003f50:	2000022c 	.word	0x2000022c
 8003f54:	20000150 	.word	0x20000150
 8003f58:	2000014c 	.word	0x2000014c
 8003f5c:	20000238 	.word	0x20000238
 8003f60:	20000234 	.word	0x20000234
 8003f64:	e000ed04 	.word	0xe000ed04

08003f68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f6e:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <xTaskGetTickCount+0x1c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f74:	687b      	ldr	r3, [r7, #4]
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	20000228 	.word	0x20000228

08003f88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f92:	4b4e      	ldr	r3, [pc, #312]	; (80040cc <xTaskIncrementTick+0x144>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f040 8087 	bne.w	80040aa <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f9c:	4b4c      	ldr	r3, [pc, #304]	; (80040d0 <xTaskIncrementTick+0x148>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fa4:	4a4a      	ldr	r2, [pc, #296]	; (80040d0 <xTaskIncrementTick+0x148>)
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d11f      	bne.n	8003ff0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003fb0:	4b48      	ldr	r3, [pc, #288]	; (80040d4 <xTaskIncrementTick+0x14c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d009      	beq.n	8003fce <xTaskIncrementTick+0x46>
 8003fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	e7fe      	b.n	8003fcc <xTaskIncrementTick+0x44>
 8003fce:	4b41      	ldr	r3, [pc, #260]	; (80040d4 <xTaskIncrementTick+0x14c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	4b40      	ldr	r3, [pc, #256]	; (80040d8 <xTaskIncrementTick+0x150>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a3e      	ldr	r2, [pc, #248]	; (80040d4 <xTaskIncrementTick+0x14c>)
 8003fda:	6013      	str	r3, [r2, #0]
 8003fdc:	4a3e      	ldr	r2, [pc, #248]	; (80040d8 <xTaskIncrementTick+0x150>)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	4b3e      	ldr	r3, [pc, #248]	; (80040dc <xTaskIncrementTick+0x154>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	4a3c      	ldr	r2, [pc, #240]	; (80040dc <xTaskIncrementTick+0x154>)
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	f000 faa4 	bl	8004538 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ff0:	4b3b      	ldr	r3, [pc, #236]	; (80040e0 <xTaskIncrementTick+0x158>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d348      	bcc.n	800408c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ffa:	4b36      	ldr	r3, [pc, #216]	; (80040d4 <xTaskIncrementTick+0x14c>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d104      	bne.n	800400e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004004:	4b36      	ldr	r3, [pc, #216]	; (80040e0 <xTaskIncrementTick+0x158>)
 8004006:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800400a:	601a      	str	r2, [r3, #0]
					break;
 800400c:	e03e      	b.n	800408c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800400e:	4b31      	ldr	r3, [pc, #196]	; (80040d4 <xTaskIncrementTick+0x14c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	429a      	cmp	r2, r3
 8004024:	d203      	bcs.n	800402e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004026:	4a2e      	ldr	r2, [pc, #184]	; (80040e0 <xTaskIncrementTick+0x158>)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800402c:	e02e      	b.n	800408c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	3304      	adds	r3, #4
 8004032:	4618      	mov	r0, r3
 8004034:	f7ff f89a 	bl	800316c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403c:	2b00      	cmp	r3, #0
 800403e:	d004      	beq.n	800404a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	3318      	adds	r3, #24
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff f891 	bl	800316c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404e:	2201      	movs	r2, #1
 8004050:	409a      	lsls	r2, r3
 8004052:	4b24      	ldr	r3, [pc, #144]	; (80040e4 <xTaskIncrementTick+0x15c>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4313      	orrs	r3, r2
 8004058:	4a22      	ldr	r2, [pc, #136]	; (80040e4 <xTaskIncrementTick+0x15c>)
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4a1f      	ldr	r2, [pc, #124]	; (80040e8 <xTaskIncrementTick+0x160>)
 800406a:	441a      	add	r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	3304      	adds	r3, #4
 8004070:	4619      	mov	r1, r3
 8004072:	4610      	mov	r0, r2
 8004074:	f7ff f81d 	bl	80030b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407c:	4b1b      	ldr	r3, [pc, #108]	; (80040ec <xTaskIncrementTick+0x164>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004082:	429a      	cmp	r2, r3
 8004084:	d3b9      	bcc.n	8003ffa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004086:	2301      	movs	r3, #1
 8004088:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800408a:	e7b6      	b.n	8003ffa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800408c:	4b17      	ldr	r3, [pc, #92]	; (80040ec <xTaskIncrementTick+0x164>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004092:	4915      	ldr	r1, [pc, #84]	; (80040e8 <xTaskIncrementTick+0x160>)
 8004094:	4613      	mov	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	4413      	add	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	440b      	add	r3, r1
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d907      	bls.n	80040b4 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80040a4:	2301      	movs	r3, #1
 80040a6:	617b      	str	r3, [r7, #20]
 80040a8:	e004      	b.n	80040b4 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80040aa:	4b11      	ldr	r3, [pc, #68]	; (80040f0 <xTaskIncrementTick+0x168>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	3301      	adds	r3, #1
 80040b0:	4a0f      	ldr	r2, [pc, #60]	; (80040f0 <xTaskIncrementTick+0x168>)
 80040b2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80040b4:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <xTaskIncrementTick+0x16c>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80040bc:	2301      	movs	r3, #1
 80040be:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80040c0:	697b      	ldr	r3, [r7, #20]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3718      	adds	r7, #24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	2000024c 	.word	0x2000024c
 80040d0:	20000228 	.word	0x20000228
 80040d4:	200001dc 	.word	0x200001dc
 80040d8:	200001e0 	.word	0x200001e0
 80040dc:	2000023c 	.word	0x2000023c
 80040e0:	20000244 	.word	0x20000244
 80040e4:	2000022c 	.word	0x2000022c
 80040e8:	20000150 	.word	0x20000150
 80040ec:	2000014c 	.word	0x2000014c
 80040f0:	20000234 	.word	0x20000234
 80040f4:	20000238 	.word	0x20000238

080040f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040f8:	b480      	push	{r7}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040fe:	4b26      	ldr	r3, [pc, #152]	; (8004198 <vTaskSwitchContext+0xa0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004106:	4b25      	ldr	r3, [pc, #148]	; (800419c <vTaskSwitchContext+0xa4>)
 8004108:	2201      	movs	r2, #1
 800410a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800410c:	e03e      	b.n	800418c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800410e:	4b23      	ldr	r3, [pc, #140]	; (800419c <vTaskSwitchContext+0xa4>)
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004114:	4b22      	ldr	r3, [pc, #136]	; (80041a0 <vTaskSwitchContext+0xa8>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	fab3 f383 	clz	r3, r3
 8004120:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004122:	7afb      	ldrb	r3, [r7, #11]
 8004124:	f1c3 031f 	rsb	r3, r3, #31
 8004128:	617b      	str	r3, [r7, #20]
 800412a:	491e      	ldr	r1, [pc, #120]	; (80041a4 <vTaskSwitchContext+0xac>)
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	440b      	add	r3, r1
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d109      	bne.n	8004152 <vTaskSwitchContext+0x5a>
	__asm volatile
 800413e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004142:	f383 8811 	msr	BASEPRI, r3
 8004146:	f3bf 8f6f 	isb	sy
 800414a:	f3bf 8f4f 	dsb	sy
 800414e:	607b      	str	r3, [r7, #4]
 8004150:	e7fe      	b.n	8004150 <vTaskSwitchContext+0x58>
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4a11      	ldr	r2, [pc, #68]	; (80041a4 <vTaskSwitchContext+0xac>)
 800415e:	4413      	add	r3, r2
 8004160:	613b      	str	r3, [r7, #16]
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	605a      	str	r2, [r3, #4]
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	3308      	adds	r3, #8
 8004174:	429a      	cmp	r2, r3
 8004176:	d104      	bne.n	8004182 <vTaskSwitchContext+0x8a>
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	685a      	ldr	r2, [r3, #4]
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	605a      	str	r2, [r3, #4]
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	4a07      	ldr	r2, [pc, #28]	; (80041a8 <vTaskSwitchContext+0xb0>)
 800418a:	6013      	str	r3, [r2, #0]
}
 800418c:	bf00      	nop
 800418e:	371c      	adds	r7, #28
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	2000024c 	.word	0x2000024c
 800419c:	20000238 	.word	0x20000238
 80041a0:	2000022c 	.word	0x2000022c
 80041a4:	20000150 	.word	0x20000150
 80041a8:	2000014c 	.word	0x2000014c

080041ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d109      	bne.n	80041d0 <vTaskPlaceOnEventList+0x24>
 80041bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	e7fe      	b.n	80041ce <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041d0:	4b07      	ldr	r3, [pc, #28]	; (80041f0 <vTaskPlaceOnEventList+0x44>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3318      	adds	r3, #24
 80041d6:	4619      	mov	r1, r3
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f7fe ff8e 	bl	80030fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041de:	2101      	movs	r1, #1
 80041e0:	6838      	ldr	r0, [r7, #0]
 80041e2:	f000 fb9d 	bl	8004920 <prvAddCurrentTaskToDelayedList>
}
 80041e6:	bf00      	nop
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	2000014c 	.word	0x2000014c

080041f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d109      	bne.n	800421a <vTaskPlaceOnEventListRestricted+0x26>
 8004206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	e7fe      	b.n	8004218 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800421a:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <vTaskPlaceOnEventListRestricted+0x50>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3318      	adds	r3, #24
 8004220:	4619      	mov	r1, r3
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f7fe ff45 	bl	80030b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800422e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004232:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	68b8      	ldr	r0, [r7, #8]
 8004238:	f000 fb72 	bl	8004920 <prvAddCurrentTaskToDelayedList>
	}
 800423c:	bf00      	nop
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	2000014c 	.word	0x2000014c

08004248 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d109      	bne.n	8004272 <xTaskRemoveFromEventList+0x2a>
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	e7fe      	b.n	8004270 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	3318      	adds	r3, #24
 8004276:	4618      	mov	r0, r3
 8004278:	f7fe ff78 	bl	800316c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800427c:	4b1d      	ldr	r3, [pc, #116]	; (80042f4 <xTaskRemoveFromEventList+0xac>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d11c      	bne.n	80042be <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	3304      	adds	r3, #4
 8004288:	4618      	mov	r0, r3
 800428a:	f7fe ff6f 	bl	800316c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004292:	2201      	movs	r2, #1
 8004294:	409a      	lsls	r2, r3
 8004296:	4b18      	ldr	r3, [pc, #96]	; (80042f8 <xTaskRemoveFromEventList+0xb0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4313      	orrs	r3, r2
 800429c:	4a16      	ldr	r2, [pc, #88]	; (80042f8 <xTaskRemoveFromEventList+0xb0>)
 800429e:	6013      	str	r3, [r2, #0]
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a4:	4613      	mov	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4a13      	ldr	r2, [pc, #76]	; (80042fc <xTaskRemoveFromEventList+0xb4>)
 80042ae:	441a      	add	r2, r3
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	3304      	adds	r3, #4
 80042b4:	4619      	mov	r1, r3
 80042b6:	4610      	mov	r0, r2
 80042b8:	f7fe fefb 	bl	80030b2 <vListInsertEnd>
 80042bc:	e005      	b.n	80042ca <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	3318      	adds	r3, #24
 80042c2:	4619      	mov	r1, r3
 80042c4:	480e      	ldr	r0, [pc, #56]	; (8004300 <xTaskRemoveFromEventList+0xb8>)
 80042c6:	f7fe fef4 	bl	80030b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ce:	4b0d      	ldr	r3, [pc, #52]	; (8004304 <xTaskRemoveFromEventList+0xbc>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d905      	bls.n	80042e4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80042d8:	2301      	movs	r3, #1
 80042da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80042dc:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <xTaskRemoveFromEventList+0xc0>)
 80042de:	2201      	movs	r2, #1
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	e001      	b.n	80042e8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80042e8:	697b      	ldr	r3, [r7, #20]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	2000024c 	.word	0x2000024c
 80042f8:	2000022c 	.word	0x2000022c
 80042fc:	20000150 	.word	0x20000150
 8004300:	200001e4 	.word	0x200001e4
 8004304:	2000014c 	.word	0x2000014c
 8004308:	20000238 	.word	0x20000238

0800430c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004314:	4b06      	ldr	r3, [pc, #24]	; (8004330 <vTaskInternalSetTimeOutState+0x24>)
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800431c:	4b05      	ldr	r3, [pc, #20]	; (8004334 <vTaskInternalSetTimeOutState+0x28>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	605a      	str	r2, [r3, #4]
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	2000023c 	.word	0x2000023c
 8004334:	20000228 	.word	0x20000228

08004338 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d109      	bne.n	800435c <xTaskCheckForTimeOut+0x24>
 8004348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434c:	f383 8811 	msr	BASEPRI, r3
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	613b      	str	r3, [r7, #16]
 800435a:	e7fe      	b.n	800435a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d109      	bne.n	8004376 <xTaskCheckForTimeOut+0x3e>
 8004362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004366:	f383 8811 	msr	BASEPRI, r3
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	e7fe      	b.n	8004374 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004376:	f000 ff79 	bl	800526c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800437a:	4b1d      	ldr	r3, [pc, #116]	; (80043f0 <xTaskCheckForTimeOut+0xb8>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004392:	d102      	bne.n	800439a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004394:	2300      	movs	r3, #0
 8004396:	61fb      	str	r3, [r7, #28]
 8004398:	e023      	b.n	80043e2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	4b15      	ldr	r3, [pc, #84]	; (80043f4 <xTaskCheckForTimeOut+0xbc>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d007      	beq.n	80043b6 <xTaskCheckForTimeOut+0x7e>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d302      	bcc.n	80043b6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80043b0:	2301      	movs	r3, #1
 80043b2:	61fb      	str	r3, [r7, #28]
 80043b4:	e015      	b.n	80043e2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d20b      	bcs.n	80043d8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	1ad2      	subs	r2, r2, r3
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7ff ff9d 	bl	800430c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80043d2:	2300      	movs	r3, #0
 80043d4:	61fb      	str	r3, [r7, #28]
 80043d6:	e004      	b.n	80043e2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80043de:	2301      	movs	r3, #1
 80043e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80043e2:	f000 ff71 	bl	80052c8 <vPortExitCritical>

	return xReturn;
 80043e6:	69fb      	ldr	r3, [r7, #28]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3720      	adds	r7, #32
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	20000228 	.word	0x20000228
 80043f4:	2000023c 	.word	0x2000023c

080043f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043fc:	4b03      	ldr	r3, [pc, #12]	; (800440c <vTaskMissedYield+0x14>)
 80043fe:	2201      	movs	r2, #1
 8004400:	601a      	str	r2, [r3, #0]
}
 8004402:	bf00      	nop
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	20000238 	.word	0x20000238

08004410 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004418:	f000 f852 	bl	80044c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800441c:	4b06      	ldr	r3, [pc, #24]	; (8004438 <prvIdleTask+0x28>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d9f9      	bls.n	8004418 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004424:	4b05      	ldr	r3, [pc, #20]	; (800443c <prvIdleTask+0x2c>)
 8004426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004434:	e7f0      	b.n	8004418 <prvIdleTask+0x8>
 8004436:	bf00      	nop
 8004438:	20000150 	.word	0x20000150
 800443c:	e000ed04 	.word	0xe000ed04

08004440 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004446:	2300      	movs	r3, #0
 8004448:	607b      	str	r3, [r7, #4]
 800444a:	e00c      	b.n	8004466 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	4613      	mov	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4a12      	ldr	r2, [pc, #72]	; (80044a0 <prvInitialiseTaskLists+0x60>)
 8004458:	4413      	add	r3, r2
 800445a:	4618      	mov	r0, r3
 800445c:	f7fe fdfc 	bl	8003058 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3301      	adds	r3, #1
 8004464:	607b      	str	r3, [r7, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b04      	cmp	r3, #4
 800446a:	d9ef      	bls.n	800444c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800446c:	480d      	ldr	r0, [pc, #52]	; (80044a4 <prvInitialiseTaskLists+0x64>)
 800446e:	f7fe fdf3 	bl	8003058 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004472:	480d      	ldr	r0, [pc, #52]	; (80044a8 <prvInitialiseTaskLists+0x68>)
 8004474:	f7fe fdf0 	bl	8003058 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004478:	480c      	ldr	r0, [pc, #48]	; (80044ac <prvInitialiseTaskLists+0x6c>)
 800447a:	f7fe fded 	bl	8003058 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800447e:	480c      	ldr	r0, [pc, #48]	; (80044b0 <prvInitialiseTaskLists+0x70>)
 8004480:	f7fe fdea 	bl	8003058 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004484:	480b      	ldr	r0, [pc, #44]	; (80044b4 <prvInitialiseTaskLists+0x74>)
 8004486:	f7fe fde7 	bl	8003058 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800448a:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <prvInitialiseTaskLists+0x78>)
 800448c:	4a05      	ldr	r2, [pc, #20]	; (80044a4 <prvInitialiseTaskLists+0x64>)
 800448e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004490:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <prvInitialiseTaskLists+0x7c>)
 8004492:	4a05      	ldr	r2, [pc, #20]	; (80044a8 <prvInitialiseTaskLists+0x68>)
 8004494:	601a      	str	r2, [r3, #0]
}
 8004496:	bf00      	nop
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	20000150 	.word	0x20000150
 80044a4:	200001b4 	.word	0x200001b4
 80044a8:	200001c8 	.word	0x200001c8
 80044ac:	200001e4 	.word	0x200001e4
 80044b0:	200001f8 	.word	0x200001f8
 80044b4:	20000210 	.word	0x20000210
 80044b8:	200001dc 	.word	0x200001dc
 80044bc:	200001e0 	.word	0x200001e0

080044c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044c6:	e019      	b.n	80044fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80044c8:	f000 fed0 	bl	800526c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044cc:	4b0f      	ldr	r3, [pc, #60]	; (800450c <prvCheckTasksWaitingTermination+0x4c>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3304      	adds	r3, #4
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fe fe47 	bl	800316c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044de:	4b0c      	ldr	r3, [pc, #48]	; (8004510 <prvCheckTasksWaitingTermination+0x50>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	4a0a      	ldr	r2, [pc, #40]	; (8004510 <prvCheckTasksWaitingTermination+0x50>)
 80044e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044e8:	4b0a      	ldr	r3, [pc, #40]	; (8004514 <prvCheckTasksWaitingTermination+0x54>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3b01      	subs	r3, #1
 80044ee:	4a09      	ldr	r2, [pc, #36]	; (8004514 <prvCheckTasksWaitingTermination+0x54>)
 80044f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044f2:	f000 fee9 	bl	80052c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f80e 	bl	8004518 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044fc:	4b05      	ldr	r3, [pc, #20]	; (8004514 <prvCheckTasksWaitingTermination+0x54>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1e1      	bne.n	80044c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004504:	bf00      	nop
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	200001f8 	.word	0x200001f8
 8004510:	20000224 	.word	0x20000224
 8004514:	2000020c 	.word	0x2000020c

08004518 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004524:	4618      	mov	r0, r3
 8004526:	f001 f87d 	bl	8005624 <vPortFree>
			vPortFree( pxTCB );
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f001 f87a 	bl	8005624 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004530:	bf00      	nop
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800453e:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <prvResetNextTaskUnblockTime+0x38>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d104      	bne.n	8004552 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004548:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <prvResetNextTaskUnblockTime+0x3c>)
 800454a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800454e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004550:	e008      	b.n	8004564 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004552:	4b07      	ldr	r3, [pc, #28]	; (8004570 <prvResetNextTaskUnblockTime+0x38>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	4a04      	ldr	r2, [pc, #16]	; (8004574 <prvResetNextTaskUnblockTime+0x3c>)
 8004562:	6013      	str	r3, [r2, #0]
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	200001dc 	.word	0x200001dc
 8004574:	20000244 	.word	0x20000244

08004578 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800457e:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <xTaskGetSchedulerState+0x34>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d102      	bne.n	800458c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004586:	2301      	movs	r3, #1
 8004588:	607b      	str	r3, [r7, #4]
 800458a:	e008      	b.n	800459e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800458c:	4b08      	ldr	r3, [pc, #32]	; (80045b0 <xTaskGetSchedulerState+0x38>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d102      	bne.n	800459a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004594:	2302      	movs	r3, #2
 8004596:	607b      	str	r3, [r7, #4]
 8004598:	e001      	b.n	800459e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800459a:	2300      	movs	r3, #0
 800459c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800459e:	687b      	ldr	r3, [r7, #4]
	}
 80045a0:	4618      	mov	r0, r3
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	20000230 	.word	0x20000230
 80045b0:	2000024c 	.word	0x2000024c

080045b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d06c      	beq.n	80046a4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045ca:	4b39      	ldr	r3, [pc, #228]	; (80046b0 <xTaskPriorityDisinherit+0xfc>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d009      	beq.n	80045e8 <xTaskPriorityDisinherit+0x34>
 80045d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	e7fe      	b.n	80045e6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d109      	bne.n	8004604 <xTaskPriorityDisinherit+0x50>
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	60bb      	str	r3, [r7, #8]
 8004602:	e7fe      	b.n	8004602 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004608:	1e5a      	subs	r2, r3, #1
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004616:	429a      	cmp	r2, r3
 8004618:	d044      	beq.n	80046a4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800461e:	2b00      	cmp	r3, #0
 8004620:	d140      	bne.n	80046a4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	3304      	adds	r3, #4
 8004626:	4618      	mov	r0, r3
 8004628:	f7fe fda0 	bl	800316c <uxListRemove>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d115      	bne.n	800465e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004636:	491f      	ldr	r1, [pc, #124]	; (80046b4 <xTaskPriorityDisinherit+0x100>)
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10a      	bne.n	800465e <xTaskPriorityDisinherit+0xaa>
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	2201      	movs	r2, #1
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	43da      	mvns	r2, r3
 8004654:	4b18      	ldr	r3, [pc, #96]	; (80046b8 <xTaskPriorityDisinherit+0x104>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4013      	ands	r3, r2
 800465a:	4a17      	ldr	r2, [pc, #92]	; (80046b8 <xTaskPriorityDisinherit+0x104>)
 800465c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466a:	f1c3 0205 	rsb	r2, r3, #5
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	2201      	movs	r2, #1
 8004678:	409a      	lsls	r2, r3
 800467a:	4b0f      	ldr	r3, [pc, #60]	; (80046b8 <xTaskPriorityDisinherit+0x104>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4313      	orrs	r3, r2
 8004680:	4a0d      	ldr	r2, [pc, #52]	; (80046b8 <xTaskPriorityDisinherit+0x104>)
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004688:	4613      	mov	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4a08      	ldr	r2, [pc, #32]	; (80046b4 <xTaskPriorityDisinherit+0x100>)
 8004692:	441a      	add	r2, r3
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	3304      	adds	r3, #4
 8004698:	4619      	mov	r1, r3
 800469a:	4610      	mov	r0, r2
 800469c:	f7fe fd09 	bl	80030b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80046a0:	2301      	movs	r3, #1
 80046a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046a4:	697b      	ldr	r3, [r7, #20]
	}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	2000014c 	.word	0x2000014c
 80046b4:	20000150 	.word	0x20000150
 80046b8:	2000022c 	.word	0x2000022c

080046bc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
 80046c8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80046ca:	f000 fdcf 	bl	800526c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80046ce:	4b26      	ldr	r3, [pc, #152]	; (8004768 <xTaskNotifyWait+0xac>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d01a      	beq.n	8004712 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80046dc:	4b22      	ldr	r3, [pc, #136]	; (8004768 <xTaskNotifyWait+0xac>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	43d2      	mvns	r2, r2
 80046e6:	400a      	ands	r2, r1
 80046e8:	651a      	str	r2, [r3, #80]	; 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80046ea:	4b1f      	ldr	r3, [pc, #124]	; (8004768 <xTaskNotifyWait+0xac>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00b      	beq.n	8004712 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046fa:	2101      	movs	r1, #1
 80046fc:	6838      	ldr	r0, [r7, #0]
 80046fe:	f000 f90f 	bl	8004920 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004702:	4b1a      	ldr	r3, [pc, #104]	; (800476c <xTaskNotifyWait+0xb0>)
 8004704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004712:	f000 fdd9 	bl	80052c8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8004716:	f000 fda9 	bl	800526c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d004      	beq.n	800472a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004720:	4b11      	ldr	r3, [pc, #68]	; (8004768 <xTaskNotifyWait+0xac>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800472a:	4b0f      	ldr	r3, [pc, #60]	; (8004768 <xTaskNotifyWait+0xac>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d002      	beq.n	800473e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	e008      	b.n	8004750 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800473e:	4b0a      	ldr	r3, [pc, #40]	; (8004768 <xTaskNotifyWait+0xac>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	43d2      	mvns	r2, r2
 8004748:	400a      	ands	r2, r1
 800474a:	651a      	str	r2, [r3, #80]	; 0x50
				xReturn = pdTRUE;
 800474c:	2301      	movs	r3, #1
 800474e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004750:	4b05      	ldr	r3, [pc, #20]	; (8004768 <xTaskNotifyWait+0xac>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 800475a:	f000 fdb5 	bl	80052c8 <vPortExitCritical>

		return xReturn;
 800475e:	697b      	ldr	r3, [r7, #20]
	}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	2000014c 	.word	0x2000014c
 800476c:	e000ed04 	.word	0xe000ed04

08004770 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004770:	b580      	push	{r7, lr}
 8004772:	b08e      	sub	sp, #56	; 0x38
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	4613      	mov	r3, r2
 800477e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004780:	2301      	movs	r3, #1
 8004782:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d109      	bne.n	800479e <xTaskGenericNotifyFromISR+0x2e>
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
 800479c:	e7fe      	b.n	800479c <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800479e:	f000 fe41 	bl	8005424 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80047a6:	f3ef 8211 	mrs	r2, BASEPRI
 80047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	623a      	str	r2, [r7, #32]
 80047bc:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80047be:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047c0:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80047c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80047d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80047d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80047da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047dc:	2202      	movs	r2, #2
 80047de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	d829      	bhi.n	800483c <xTaskGenericNotifyFromISR+0xcc>
 80047e8:	a201      	add	r2, pc, #4	; (adr r2, 80047f0 <xTaskGenericNotifyFromISR+0x80>)
 80047ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ee:	bf00      	nop
 80047f0:	0800485b 	.word	0x0800485b
 80047f4:	08004805 	.word	0x08004805
 80047f8:	08004813 	.word	0x08004813
 80047fc:	0800481f 	.word	0x0800481f
 8004800:	08004827 	.word	0x08004827
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004806:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	431a      	orrs	r2, r3
 800480c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480e:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8004810:	e026      	b.n	8004860 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481a:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800481c:	e020      	b.n	8004860 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8004824:	e01c      	b.n	8004860 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004826:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800482a:	2b02      	cmp	r3, #2
 800482c:	d003      	beq.n	8004836 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004834:	e014      	b.n	8004860 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8004836:	2300      	movs	r3, #0
 8004838:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800483a:	e011      	b.n	8004860 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800483c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004844:	d00b      	beq.n	800485e <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8004846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484a:	f383 8811 	msr	BASEPRI, r3
 800484e:	f3bf 8f6f 	isb	sy
 8004852:	f3bf 8f4f 	dsb	sy
 8004856:	61bb      	str	r3, [r7, #24]
 8004858:	e7fe      	b.n	8004858 <xTaskGenericNotifyFromISR+0xe8>
					break;
 800485a:	bf00      	nop
 800485c:	e000      	b.n	8004860 <xTaskGenericNotifyFromISR+0xf0>
					break;
 800485e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004860:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004864:	2b01      	cmp	r3, #1
 8004866:	d144      	bne.n	80048f2 <xTaskGenericNotifyFromISR+0x182>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486c:	2b00      	cmp	r3, #0
 800486e:	d009      	beq.n	8004884 <xTaskGenericNotifyFromISR+0x114>
 8004870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	617b      	str	r3, [r7, #20]
 8004882:	e7fe      	b.n	8004882 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004884:	4b20      	ldr	r3, [pc, #128]	; (8004908 <xTaskGenericNotifyFromISR+0x198>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d11c      	bne.n	80048c6 <xTaskGenericNotifyFromISR+0x156>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800488c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488e:	3304      	adds	r3, #4
 8004890:	4618      	mov	r0, r3
 8004892:	f7fe fc6b 	bl	800316c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489a:	2201      	movs	r2, #1
 800489c:	409a      	lsls	r2, r3
 800489e:	4b1b      	ldr	r3, [pc, #108]	; (800490c <xTaskGenericNotifyFromISR+0x19c>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	4a19      	ldr	r2, [pc, #100]	; (800490c <xTaskGenericNotifyFromISR+0x19c>)
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4a16      	ldr	r2, [pc, #88]	; (8004910 <xTaskGenericNotifyFromISR+0x1a0>)
 80048b6:	441a      	add	r2, r3
 80048b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ba:	3304      	adds	r3, #4
 80048bc:	4619      	mov	r1, r3
 80048be:	4610      	mov	r0, r2
 80048c0:	f7fe fbf7 	bl	80030b2 <vListInsertEnd>
 80048c4:	e005      	b.n	80048d2 <xTaskGenericNotifyFromISR+0x162>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80048c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c8:	3318      	adds	r3, #24
 80048ca:	4619      	mov	r1, r3
 80048cc:	4811      	ldr	r0, [pc, #68]	; (8004914 <xTaskGenericNotifyFromISR+0x1a4>)
 80048ce:	f7fe fbf0 	bl	80030b2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d6:	4b10      	ldr	r3, [pc, #64]	; (8004918 <xTaskGenericNotifyFromISR+0x1a8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	429a      	cmp	r2, r3
 80048de:	d908      	bls.n	80048f2 <xTaskGenericNotifyFromISR+0x182>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80048e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <xTaskGenericNotifyFromISR+0x17c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80048e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048e8:	2201      	movs	r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80048ec:	4b0b      	ldr	r3, [pc, #44]	; (800491c <xTaskGenericNotifyFromISR+0x1ac>)
 80048ee:	2201      	movs	r2, #1
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80048fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80048fe:	4618      	mov	r0, r3
 8004900:	3738      	adds	r7, #56	; 0x38
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	2000024c 	.word	0x2000024c
 800490c:	2000022c 	.word	0x2000022c
 8004910:	20000150 	.word	0x20000150
 8004914:	200001e4 	.word	0x200001e4
 8004918:	2000014c 	.word	0x2000014c
 800491c:	20000238 	.word	0x20000238

08004920 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800492a:	4b29      	ldr	r3, [pc, #164]	; (80049d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004930:	4b28      	ldr	r3, [pc, #160]	; (80049d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3304      	adds	r3, #4
 8004936:	4618      	mov	r0, r3
 8004938:	f7fe fc18 	bl	800316c <uxListRemove>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10b      	bne.n	800495a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004942:	4b24      	ldr	r3, [pc, #144]	; (80049d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004948:	2201      	movs	r2, #1
 800494a:	fa02 f303 	lsl.w	r3, r2, r3
 800494e:	43da      	mvns	r2, r3
 8004950:	4b21      	ldr	r3, [pc, #132]	; (80049d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4013      	ands	r3, r2
 8004956:	4a20      	ldr	r2, [pc, #128]	; (80049d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004958:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004960:	d10a      	bne.n	8004978 <prvAddCurrentTaskToDelayedList+0x58>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d007      	beq.n	8004978 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004968:	4b1a      	ldr	r3, [pc, #104]	; (80049d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3304      	adds	r3, #4
 800496e:	4619      	mov	r1, r3
 8004970:	481a      	ldr	r0, [pc, #104]	; (80049dc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004972:	f7fe fb9e 	bl	80030b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004976:	e026      	b.n	80049c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4413      	add	r3, r2
 800497e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004980:	4b14      	ldr	r3, [pc, #80]	; (80049d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	429a      	cmp	r2, r3
 800498e:	d209      	bcs.n	80049a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004990:	4b13      	ldr	r3, [pc, #76]	; (80049e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	4b0f      	ldr	r3, [pc, #60]	; (80049d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3304      	adds	r3, #4
 800499a:	4619      	mov	r1, r3
 800499c:	4610      	mov	r0, r2
 800499e:	f7fe fbac 	bl	80030fa <vListInsert>
}
 80049a2:	e010      	b.n	80049c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049a4:	4b0f      	ldr	r3, [pc, #60]	; (80049e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	4b0a      	ldr	r3, [pc, #40]	; (80049d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3304      	adds	r3, #4
 80049ae:	4619      	mov	r1, r3
 80049b0:	4610      	mov	r0, r2
 80049b2:	f7fe fba2 	bl	80030fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049b6:	4b0c      	ldr	r3, [pc, #48]	; (80049e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d202      	bcs.n	80049c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80049c0:	4a09      	ldr	r2, [pc, #36]	; (80049e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	6013      	str	r3, [r2, #0]
}
 80049c6:	bf00      	nop
 80049c8:	3710      	adds	r7, #16
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	20000228 	.word	0x20000228
 80049d4:	2000014c 	.word	0x2000014c
 80049d8:	2000022c 	.word	0x2000022c
 80049dc:	20000210 	.word	0x20000210
 80049e0:	200001e0 	.word	0x200001e0
 80049e4:	200001dc 	.word	0x200001dc
 80049e8:	20000244 	.word	0x20000244

080049ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80049f2:	2300      	movs	r3, #0
 80049f4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80049f6:	f000 fadd 	bl	8004fb4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80049fa:	4b11      	ldr	r3, [pc, #68]	; (8004a40 <xTimerCreateTimerTask+0x54>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00b      	beq.n	8004a1a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8004a02:	4b10      	ldr	r3, [pc, #64]	; (8004a44 <xTimerCreateTimerTask+0x58>)
 8004a04:	9301      	str	r3, [sp, #4]
 8004a06:	2302      	movs	r3, #2
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004a10:	490d      	ldr	r1, [pc, #52]	; (8004a48 <xTimerCreateTimerTask+0x5c>)
 8004a12:	480e      	ldr	r0, [pc, #56]	; (8004a4c <xTimerCreateTimerTask+0x60>)
 8004a14:	f7ff f870 	bl	8003af8 <xTaskCreate>
 8004a18:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d109      	bne.n	8004a34 <xTimerCreateTimerTask+0x48>
	__asm volatile
 8004a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	603b      	str	r3, [r7, #0]
 8004a32:	e7fe      	b.n	8004a32 <xTimerCreateTimerTask+0x46>
	return xReturn;
 8004a34:	687b      	ldr	r3, [r7, #4]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20000280 	.word	0x20000280
 8004a44:	20000284 	.word	0x20000284
 8004a48:	08006168 	.word	0x08006168
 8004a4c:	08004c05 	.word	0x08004c05

08004a50 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b088      	sub	sp, #32
 8004a54:	af02      	add	r7, sp, #8
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
 8004a5c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8004a5e:	202c      	movs	r0, #44	; 0x2c
 8004a60:	f000 fd1e 	bl	80054a0 <pvPortMalloc>
 8004a64:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d009      	beq.n	8004a80 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	9301      	str	r3, [sp, #4]
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	9300      	str	r3, [sp, #0]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	68b9      	ldr	r1, [r7, #8]
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 f805 	bl	8004a8a <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8004a80:	697b      	ldr	r3, [r7, #20]
	}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3718      	adds	r7, #24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b086      	sub	sp, #24
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	607a      	str	r2, [r7, #4]
 8004a96:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d109      	bne.n	8004ab2 <prvInitialiseNewTimer+0x28>
 8004a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	e7fe      	b.n	8004ab0 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d015      	beq.n	8004ae4 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004ab8:	f000 fa7c 	bl	8004fb4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	6a3a      	ldr	r2, [r7, #32]
 8004ad8:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	3304      	adds	r3, #4
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fe fada 	bl	8003098 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004ae4:	bf00      	nop
 8004ae6:	3718      	adds	r7, #24
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08a      	sub	sp, #40	; 0x28
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	60f8      	str	r0, [r7, #12]
 8004af4:	60b9      	str	r1, [r7, #8]
 8004af6:	607a      	str	r2, [r7, #4]
 8004af8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d109      	bne.n	8004b18 <xTimerGenericCommand+0x2c>
 8004b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b08:	f383 8811 	msr	BASEPRI, r3
 8004b0c:	f3bf 8f6f 	isb	sy
 8004b10:	f3bf 8f4f 	dsb	sy
 8004b14:	623b      	str	r3, [r7, #32]
 8004b16:	e7fe      	b.n	8004b16 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004b18:	4b19      	ldr	r3, [pc, #100]	; (8004b80 <xTimerGenericCommand+0x94>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d02a      	beq.n	8004b76 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2b05      	cmp	r3, #5
 8004b30:	dc18      	bgt.n	8004b64 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004b32:	f7ff fd21 	bl	8004578 <xTaskGetSchedulerState>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d109      	bne.n	8004b50 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004b3c:	4b10      	ldr	r3, [pc, #64]	; (8004b80 <xTimerGenericCommand+0x94>)
 8004b3e:	6818      	ldr	r0, [r3, #0]
 8004b40:	f107 0114 	add.w	r1, r7, #20
 8004b44:	2300      	movs	r3, #0
 8004b46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b48:	f7fe fc00 	bl	800334c <xQueueGenericSend>
 8004b4c:	6278      	str	r0, [r7, #36]	; 0x24
 8004b4e:	e012      	b.n	8004b76 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004b50:	4b0b      	ldr	r3, [pc, #44]	; (8004b80 <xTimerGenericCommand+0x94>)
 8004b52:	6818      	ldr	r0, [r3, #0]
 8004b54:	f107 0114 	add.w	r1, r7, #20
 8004b58:	2300      	movs	r3, #0
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f7fe fbf6 	bl	800334c <xQueueGenericSend>
 8004b60:	6278      	str	r0, [r7, #36]	; 0x24
 8004b62:	e008      	b.n	8004b76 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004b64:	4b06      	ldr	r3, [pc, #24]	; (8004b80 <xTimerGenericCommand+0x94>)
 8004b66:	6818      	ldr	r0, [r3, #0]
 8004b68:	f107 0114 	add.w	r1, r7, #20
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	f7fe fce6 	bl	8003540 <xQueueGenericSendFromISR>
 8004b74:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3728      	adds	r7, #40	; 0x28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20000280 	.word	0x20000280

08004b84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b088      	sub	sp, #32
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b8e:	4b1c      	ldr	r3, [pc, #112]	; (8004c00 <prvProcessExpiredTimer+0x7c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fe fae5 	bl	800316c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d121      	bne.n	8004bee <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	699a      	ldr	r2, [r3, #24]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	18d1      	adds	r1, r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	6978      	ldr	r0, [r7, #20]
 8004bb8:	f000 f8c8 	bl	8004d4c <prvInsertTimerInActiveList>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d015      	beq.n	8004bee <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	2100      	movs	r1, #0
 8004bcc:	6978      	ldr	r0, [r7, #20]
 8004bce:	f7ff ff8d 	bl	8004aec <xTimerGenericCommand>
 8004bd2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d109      	bne.n	8004bee <prvProcessExpiredTimer+0x6a>
 8004bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	e7fe      	b.n	8004bec <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	6978      	ldr	r0, [r7, #20]
 8004bf4:	4798      	blx	r3
}
 8004bf6:	bf00      	nop
 8004bf8:	3718      	adds	r7, #24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20000278 	.word	0x20000278

08004c04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c0c:	f107 0308 	add.w	r3, r7, #8
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 f857 	bl	8004cc4 <prvGetNextExpireTime>
 8004c16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	68f8      	ldr	r0, [r7, #12]
 8004c1e:	f000 f803 	bl	8004c28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004c22:	f000 f8d5 	bl	8004dd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c26:	e7f1      	b.n	8004c0c <prvTimerTask+0x8>

08004c28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004c32:	f7ff f8ef 	bl	8003e14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c36:	f107 0308 	add.w	r3, r7, #8
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 f866 	bl	8004d0c <prvSampleTimeNow>
 8004c40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d130      	bne.n	8004caa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10a      	bne.n	8004c64 <prvProcessTimerOrBlockTask+0x3c>
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d806      	bhi.n	8004c64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004c56:	f7ff f8eb 	bl	8003e30 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c5a:	68f9      	ldr	r1, [r7, #12]
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7ff ff91 	bl	8004b84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004c62:	e024      	b.n	8004cae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d008      	beq.n	8004c7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c6a:	4b13      	ldr	r3, [pc, #76]	; (8004cb8 <prvProcessTimerOrBlockTask+0x90>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <prvProcessTimerOrBlockTask+0x50>
 8004c74:	2301      	movs	r3, #1
 8004c76:	e000      	b.n	8004c7a <prvProcessTimerOrBlockTask+0x52>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c7c:	4b0f      	ldr	r3, [pc, #60]	; (8004cbc <prvProcessTimerOrBlockTask+0x94>)
 8004c7e:	6818      	ldr	r0, [r3, #0]
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	4619      	mov	r1, r3
 8004c8a:	f7fe ff01 	bl	8003a90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c8e:	f7ff f8cf 	bl	8003e30 <xTaskResumeAll>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10a      	bne.n	8004cae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004c98:	4b09      	ldr	r3, [pc, #36]	; (8004cc0 <prvProcessTimerOrBlockTask+0x98>)
 8004c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	f3bf 8f6f 	isb	sy
}
 8004ca8:	e001      	b.n	8004cae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004caa:	f7ff f8c1 	bl	8003e30 <xTaskResumeAll>
}
 8004cae:	bf00      	nop
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	2000027c 	.word	0x2000027c
 8004cbc:	20000280 	.word	0x20000280
 8004cc0:	e000ed04 	.word	0xe000ed04

08004cc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ccc:	4b0e      	ldr	r3, [pc, #56]	; (8004d08 <prvGetNextExpireTime+0x44>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <prvGetNextExpireTime+0x16>
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	e000      	b.n	8004cdc <prvGetNextExpireTime+0x18>
 8004cda:	2200      	movs	r2, #0
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d105      	bne.n	8004cf4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ce8:	4b07      	ldr	r3, [pc, #28]	; (8004d08 <prvGetNextExpireTime+0x44>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	e001      	b.n	8004cf8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	20000278 	.word	0x20000278

08004d0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004d14:	f7ff f928 	bl	8003f68 <xTaskGetTickCount>
 8004d18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004d1a:	4b0b      	ldr	r3, [pc, #44]	; (8004d48 <prvSampleTimeNow+0x3c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d205      	bcs.n	8004d30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004d24:	f000 f8e6 	bl	8004ef4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	e002      	b.n	8004d36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004d36:	4a04      	ldr	r2, [pc, #16]	; (8004d48 <prvSampleTimeNow+0x3c>)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	20000288 	.word	0x20000288

08004d4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d812      	bhi.n	8004d98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	1ad2      	subs	r2, r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d302      	bcc.n	8004d86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d80:	2301      	movs	r3, #1
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	e01b      	b.n	8004dbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d86:	4b10      	ldr	r3, [pc, #64]	; (8004dc8 <prvInsertTimerInActiveList+0x7c>)
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4610      	mov	r0, r2
 8004d92:	f7fe f9b2 	bl	80030fa <vListInsert>
 8004d96:	e012      	b.n	8004dbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d206      	bcs.n	8004dae <prvInsertTimerInActiveList+0x62>
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d302      	bcc.n	8004dae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004da8:	2301      	movs	r3, #1
 8004daa:	617b      	str	r3, [r7, #20]
 8004dac:	e007      	b.n	8004dbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004dae:	4b07      	ldr	r3, [pc, #28]	; (8004dcc <prvInsertTimerInActiveList+0x80>)
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	3304      	adds	r3, #4
 8004db6:	4619      	mov	r1, r3
 8004db8:	4610      	mov	r0, r2
 8004dba:	f7fe f99e 	bl	80030fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004dbe:	697b      	ldr	r3, [r7, #20]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3718      	adds	r7, #24
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	2000027c 	.word	0x2000027c
 8004dcc:	20000278 	.word	0x20000278

08004dd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08c      	sub	sp, #48	; 0x30
 8004dd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004dd6:	e07a      	b.n	8004ece <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	db76      	blt.n	8004ecc <prvProcessReceivedCommands+0xfc>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d004      	beq.n	8004df4 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	3304      	adds	r3, #4
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7fe f9bc 	bl	800316c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004df4:	1d3b      	adds	r3, r7, #4
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7ff ff88 	bl	8004d0c <prvSampleTimeNow>
 8004dfc:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2b09      	cmp	r3, #9
 8004e02:	d864      	bhi.n	8004ece <prvProcessReceivedCommands+0xfe>
 8004e04:	a201      	add	r2, pc, #4	; (adr r2, 8004e0c <prvProcessReceivedCommands+0x3c>)
 8004e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0a:	bf00      	nop
 8004e0c:	08004e35 	.word	0x08004e35
 8004e10:	08004e35 	.word	0x08004e35
 8004e14:	08004e35 	.word	0x08004e35
 8004e18:	08004ecf 	.word	0x08004ecf
 8004e1c:	08004e8f 	.word	0x08004e8f
 8004e20:	08004ec5 	.word	0x08004ec5
 8004e24:	08004e35 	.word	0x08004e35
 8004e28:	08004e35 	.word	0x08004e35
 8004e2c:	08004ecf 	.word	0x08004ecf
 8004e30:	08004e8f 	.word	0x08004e8f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	699b      	ldr	r3, [r3, #24]
 8004e3a:	18d1      	adds	r1, r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a3a      	ldr	r2, [r7, #32]
 8004e40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e42:	f7ff ff83 	bl	8004d4c <prvInsertTimerInActiveList>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d040      	beq.n	8004ece <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e52:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d138      	bne.n	8004ece <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	441a      	add	r2, r3
 8004e64:	2300      	movs	r3, #0
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	2300      	movs	r3, #0
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e6e:	f7ff fe3d 	bl	8004aec <xTimerGenericCommand>
 8004e72:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d129      	bne.n	8004ece <prvProcessReceivedCommands+0xfe>
 8004e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	61bb      	str	r3, [r7, #24]
 8004e8c:	e7fe      	b.n	8004e8c <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d109      	bne.n	8004eb0 <prvProcessReceivedCommands+0xe0>
 8004e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea0:	f383 8811 	msr	BASEPRI, r3
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	617b      	str	r3, [r7, #20]
 8004eae:	e7fe      	b.n	8004eae <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	699a      	ldr	r2, [r3, #24]
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	18d1      	adds	r1, r2, r3
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	6a3a      	ldr	r2, [r7, #32]
 8004ebc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ebe:	f7ff ff45 	bl	8004d4c <prvInsertTimerInActiveList>
					break;
 8004ec2:	e004      	b.n	8004ece <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8004ec4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ec6:	f000 fbad 	bl	8005624 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004eca:	e000      	b.n	8004ece <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004ecc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ece:	4b08      	ldr	r3, [pc, #32]	; (8004ef0 <prvProcessReceivedCommands+0x120>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f107 0108 	add.w	r1, r7, #8
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7fe fbc5 	bl	8003668 <xQueueReceive>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f47f af79 	bne.w	8004dd8 <prvProcessReceivedCommands+0x8>
	}
}
 8004ee6:	bf00      	nop
 8004ee8:	3728      	adds	r7, #40	; 0x28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000280 	.word	0x20000280

08004ef4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004efa:	e044      	b.n	8004f86 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004efc:	4b2b      	ldr	r3, [pc, #172]	; (8004fac <prvSwitchTimerLists+0xb8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f06:	4b29      	ldr	r3, [pc, #164]	; (8004fac <prvSwitchTimerLists+0xb8>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3304      	adds	r3, #4
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7fe f929 	bl	800316c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d12d      	bne.n	8004f86 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	4413      	add	r3, r2
 8004f32:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d90e      	bls.n	8004f5a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f48:	4b18      	ldr	r3, [pc, #96]	; (8004fac <prvSwitchTimerLists+0xb8>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	3304      	adds	r3, #4
 8004f50:	4619      	mov	r1, r3
 8004f52:	4610      	mov	r0, r2
 8004f54:	f7fe f8d1 	bl	80030fa <vListInsert>
 8004f58:	e015      	b.n	8004f86 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	2100      	movs	r1, #0
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f7ff fdc1 	bl	8004aec <xTimerGenericCommand>
 8004f6a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d109      	bne.n	8004f86 <prvSwitchTimerLists+0x92>
 8004f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	603b      	str	r3, [r7, #0]
 8004f84:	e7fe      	b.n	8004f84 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f86:	4b09      	ldr	r3, [pc, #36]	; (8004fac <prvSwitchTimerLists+0xb8>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1b5      	bne.n	8004efc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004f90:	4b06      	ldr	r3, [pc, #24]	; (8004fac <prvSwitchTimerLists+0xb8>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004f96:	4b06      	ldr	r3, [pc, #24]	; (8004fb0 <prvSwitchTimerLists+0xbc>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a04      	ldr	r2, [pc, #16]	; (8004fac <prvSwitchTimerLists+0xb8>)
 8004f9c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004f9e:	4a04      	ldr	r2, [pc, #16]	; (8004fb0 <prvSwitchTimerLists+0xbc>)
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	6013      	str	r3, [r2, #0]
}
 8004fa4:	bf00      	nop
 8004fa6:	3718      	adds	r7, #24
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	20000278 	.word	0x20000278
 8004fb0:	2000027c 	.word	0x2000027c

08004fb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004fb8:	f000 f958 	bl	800526c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004fbc:	4b12      	ldr	r3, [pc, #72]	; (8005008 <prvCheckForValidListAndQueue+0x54>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d11d      	bne.n	8005000 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8004fc4:	4811      	ldr	r0, [pc, #68]	; (800500c <prvCheckForValidListAndQueue+0x58>)
 8004fc6:	f7fe f847 	bl	8003058 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004fca:	4811      	ldr	r0, [pc, #68]	; (8005010 <prvCheckForValidListAndQueue+0x5c>)
 8004fcc:	f7fe f844 	bl	8003058 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004fd0:	4b10      	ldr	r3, [pc, #64]	; (8005014 <prvCheckForValidListAndQueue+0x60>)
 8004fd2:	4a0e      	ldr	r2, [pc, #56]	; (800500c <prvCheckForValidListAndQueue+0x58>)
 8004fd4:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004fd6:	4b10      	ldr	r3, [pc, #64]	; (8005018 <prvCheckForValidListAndQueue+0x64>)
 8004fd8:	4a0d      	ldr	r2, [pc, #52]	; (8005010 <prvCheckForValidListAndQueue+0x5c>)
 8004fda:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004fdc:	2200      	movs	r2, #0
 8004fde:	210c      	movs	r1, #12
 8004fe0:	200a      	movs	r0, #10
 8004fe2:	f7fe f955 	bl	8003290 <xQueueGenericCreate>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	4b07      	ldr	r3, [pc, #28]	; (8005008 <prvCheckForValidListAndQueue+0x54>)
 8004fea:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004fec:	4b06      	ldr	r3, [pc, #24]	; (8005008 <prvCheckForValidListAndQueue+0x54>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d005      	beq.n	8005000 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ff4:	4b04      	ldr	r3, [pc, #16]	; (8005008 <prvCheckForValidListAndQueue+0x54>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4908      	ldr	r1, [pc, #32]	; (800501c <prvCheckForValidListAndQueue+0x68>)
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fe fd20 	bl	8003a40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005000:	f000 f962 	bl	80052c8 <vPortExitCritical>
}
 8005004:	bf00      	nop
 8005006:	bd80      	pop	{r7, pc}
 8005008:	20000280 	.word	0x20000280
 800500c:	20000250 	.word	0x20000250
 8005010:	20000264 	.word	0x20000264
 8005014:	20000278 	.word	0x20000278
 8005018:	2000027c 	.word	0x2000027c
 800501c:	08006170 	.word	0x08006170

08005020 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t* pxPortInitialiseStack(StackType_t *pxTopOfStack,
		TaskFunction_t pxCode, void *pvParameters) {
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	 interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	 of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	3b04      	subs	r3, #4
 8005030:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005038:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3b04      	subs	r3, #4
 800503e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ((StackType_t) pxCode) & portSTART_ADDRESS_MASK; /* PC */
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	f023 0201 	bic.w	r2, r3, #1
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	3b04      	subs	r3, #4
 800504e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (StackType_t) portTASK_RETURN_ADDRESS; /* LR */
 8005050:	4a0c      	ldr	r2, [pc, #48]	; (8005084 <pxPortInitialiseStack+0x64>)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5; /* R12, R3, R2 and R1. */
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	3b14      	subs	r3, #20
 800505a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (StackType_t) pvParameters; /* R0 */
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	 own exec return value. */
	pxTopOfStack--;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3b04      	subs	r3, #4
 8005066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f06f 0202 	mvn.w	r2, #2
 800506e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	3b20      	subs	r3, #32
 8005074:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005076:	68fb      	ldr	r3, [r7, #12]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	08005089 	.word	0x08005089

08005088 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError(void) {
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
	volatile uint32_t ulDummy = 0;
 800508e:	2300      	movs	r3, #0
 8005090:	607b      	str	r3, [r7, #4]
	 its caller as there is nothing to return to.  If a task wants to exit it
	 should instead call vTaskDelete( NULL ).

	 Artificially force an assert() to be triggered if configASSERT() is
	 defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
 8005092:	4b11      	ldr	r3, [pc, #68]	; (80050d8 <prvTaskExitError+0x50>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800509a:	d009      	beq.n	80050b0 <prvTaskExitError+0x28>
 800509c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	60fb      	str	r3, [r7, #12]
 80050ae:	e7fe      	b.n	80050ae <prvTaskExitError+0x26>
 80050b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while (ulDummy == 0) {
 80050c2:	bf00      	nop
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0fc      	beq.n	80050c4 <prvTaskExitError+0x3c>
		 about code appearing after this function is called - making ulDummy
		 volatile makes the compiler think the function could return and
		 therefore not output an 'unreachable code' warning for code that appears
		 after it. */
	}
}
 80050ca:	bf00      	nop
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	2000009c 	.word	0x2000009c
 80050dc:	00000000 	.word	0x00000000

080050e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler(void) {
	__asm volatile (
 80050e0:	4b07      	ldr	r3, [pc, #28]	; (8005100 <pxCurrentTCBConst2>)
 80050e2:	6819      	ldr	r1, [r3, #0]
 80050e4:	6808      	ldr	r0, [r1, #0]
 80050e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ea:	f380 8809 	msr	PSP, r0
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f04f 0000 	mov.w	r0, #0
 80050f6:	f380 8811 	msr	BASEPRI, r0
 80050fa:	4770      	bx	lr
 80050fc:	f3af 8000 	nop.w

08005100 <pxCurrentTCBConst2>:
 8005100:	2000014c 	.word	0x2000014c
			"	bx r14							\n"
			"									\n"
			"	.align 4						\n"
			"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
	);
}
 8005104:	bf00      	nop
 8005106:	bf00      	nop

08005108 <prvPortStartFirstTask>:
static void prvPortStartFirstTask(void) {
	/* Start the first task.  This also clears the bit that indicates the FPU is
	 in use in case the FPU was used before the scheduler was started - which
	 would otherwise result in the unnecessary leaving of space in the SVC stack
	 for lazy saving of FPU registers. */
	__asm volatile(
 8005108:	4808      	ldr	r0, [pc, #32]	; (800512c <prvPortStartFirstTask+0x24>)
 800510a:	6800      	ldr	r0, [r0, #0]
 800510c:	6800      	ldr	r0, [r0, #0]
 800510e:	f380 8808 	msr	MSP, r0
 8005112:	f04f 0000 	mov.w	r0, #0
 8005116:	f380 8814 	msr	CONTROL, r0
 800511a:	b662      	cpsie	i
 800511c:	b661      	cpsie	f
 800511e:	f3bf 8f4f 	dsb	sy
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	df00      	svc	0
 8005128:	bf00      	nop
			" dsb					\n"
			" isb					\n"
			" svc 0					\n" /* System call to start first task. */
			" nop					\n"
	);
}
 800512a:	bf00      	nop
 800512c:	e000ed08 	.word	0xe000ed08

08005130 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler(void) {
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
	configASSERT(configMAX_SYSCALL_INTERRUPT_PRIORITY);

	/* This port can be used on all revisions of the Cortex-M7 core other than
	 the r0p1 parts.  r0p1 parts should use the port from the
	 /source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
 8005136:	4b44      	ldr	r3, [pc, #272]	; (8005248 <xPortStartScheduler+0x118>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a44      	ldr	r2, [pc, #272]	; (800524c <xPortStartScheduler+0x11c>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d109      	bne.n	8005154 <xPortStartScheduler+0x24>
 8005140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	613b      	str	r3, [r7, #16]
 8005152:	e7fe      	b.n	8005152 <xPortStartScheduler+0x22>
	configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
 8005154:	4b3c      	ldr	r3, [pc, #240]	; (8005248 <xPortStartScheduler+0x118>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a3d      	ldr	r2, [pc, #244]	; (8005250 <xPortStartScheduler+0x120>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d109      	bne.n	8005172 <xPortStartScheduler+0x42>
 800515e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	e7fe      	b.n	8005170 <xPortStartScheduler+0x40>

#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t *const pucFirstUserPriorityRegister =
 8005172:	4b38      	ldr	r3, [pc, #224]	; (8005254 <xPortStartScheduler+0x124>)
 8005174:	617b      	str	r3, [r7, #20]
		 functions can be called.  ISR safe functions are those that end in
		 "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		 ensure interrupt entry is as fast and simple as possible.

		 Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	b2db      	uxtb	r3, r3
 800517c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		 possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	22ff      	movs	r2, #255	; 0xff
 8005182:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	b2db      	uxtb	r3, r3
 800518a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY
				& ucMaxPriorityValue;
 800518c:	78fb      	ldrb	r3, [r7, #3]
 800518e:	b2db      	uxtb	r3, r3
 8005190:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005194:	b2da      	uxtb	r2, r3
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY
 8005196:	4b30      	ldr	r3, [pc, #192]	; (8005258 <xPortStartScheduler+0x128>)
 8005198:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		 of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800519a:	4b30      	ldr	r3, [pc, #192]	; (800525c <xPortStartScheduler+0x12c>)
 800519c:	2207      	movs	r2, #7
 800519e:	601a      	str	r2, [r3, #0]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 80051a0:	e009      	b.n	80051b6 <xPortStartScheduler+0x86>
			ulMaxPRIGROUPValue--;
 80051a2:	4b2e      	ldr	r3, [pc, #184]	; (800525c <xPortStartScheduler+0x12c>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	4a2c      	ldr	r2, [pc, #176]	; (800525c <xPortStartScheduler+0x12c>)
 80051aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= (uint8_t) 0x01;
 80051ac:	78fb      	ldrb	r3, [r7, #3]
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	70fb      	strb	r3, [r7, #3]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 80051b6:	78fb      	ldrb	r3, [r7, #3]
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051be:	2b80      	cmp	r3, #128	; 0x80
 80051c0:	d0ef      	beq.n	80051a2 <xPortStartScheduler+0x72>
#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			 priority bits matches the number of priority bits actually queried
			 from the hardware. */
			configASSERT(
 80051c2:	4b26      	ldr	r3, [pc, #152]	; (800525c <xPortStartScheduler+0x12c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f1c3 0307 	rsb	r3, r3, #7
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d009      	beq.n	80051e2 <xPortStartScheduler+0xb2>
 80051ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	60bb      	str	r3, [r7, #8]
 80051e0:	e7fe      	b.n	80051e0 <xPortStartScheduler+0xb0>
		}
#endif

		/* Shift the priority group value back to its position within the AIRCR
		 register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051e2:	4b1e      	ldr	r3, [pc, #120]	; (800525c <xPortStartScheduler+0x12c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	021b      	lsls	r3, r3, #8
 80051e8:	4a1c      	ldr	r2, [pc, #112]	; (800525c <xPortStartScheduler+0x12c>)
 80051ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051ec:	4b1b      	ldr	r3, [pc, #108]	; (800525c <xPortStartScheduler+0x12c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80051f4:	4a19      	ldr	r2, [pc, #100]	; (800525c <xPortStartScheduler+0x12c>)
 80051f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		 value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	701a      	strb	r2, [r3, #0]
	}
#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005200:	4b17      	ldr	r3, [pc, #92]	; (8005260 <xPortStartScheduler+0x130>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a16      	ldr	r2, [pc, #88]	; (8005260 <xPortStartScheduler+0x130>)
 8005206:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800520a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800520c:	4b14      	ldr	r3, [pc, #80]	; (8005260 <xPortStartScheduler+0x130>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a13      	ldr	r2, [pc, #76]	; (8005260 <xPortStartScheduler+0x130>)
 8005212:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005216:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	 here already. */
	vPortSetupTimerInterrupt();
 8005218:	f000 f8d6 	bl	80053c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800521c:	4b11      	ldr	r3, [pc, #68]	; (8005264 <xPortStartScheduler+0x134>)
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005222:	f000 f8f5 	bl	8005410 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR) |= portASPEN_AND_LSPEN_BITS;
 8005226:	4b10      	ldr	r3, [pc, #64]	; (8005268 <xPortStartScheduler+0x138>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a0f      	ldr	r2, [pc, #60]	; (8005268 <xPortStartScheduler+0x138>)
 800522c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005230:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005232:	f7ff ff69 	bl	8005108 <prvPortStartFirstTask>
	 exit error function to prevent compiler warnings about a static function
	 not being called in the case that the application writer overrides this
	 functionality by defining configTASK_RETURN_ADDRESS.  Call
	 vTaskSwitchContext() so link time optimisation does not remove the
	 symbol. */
	vTaskSwitchContext();
 8005236:	f7fe ff5f 	bl	80040f8 <vTaskSwitchContext>
	prvTaskExitError();
 800523a:	f7ff ff25 	bl	8005088 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3718      	adds	r7, #24
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	e000ed00 	.word	0xe000ed00
 800524c:	410fc271 	.word	0x410fc271
 8005250:	410fc270 	.word	0x410fc270
 8005254:	e000e400 	.word	0xe000e400
 8005258:	2000028c 	.word	0x2000028c
 800525c:	20000290 	.word	0x20000290
 8005260:	e000ed20 	.word	0xe000ed20
 8005264:	2000009c 	.word	0x2000009c
 8005268:	e000ef34 	.word	0xe000ef34

0800526c <vPortEnterCritical>:
	 Artificially force an assert. */
	configASSERT(uxCriticalNesting == 1000UL);
}
/*-----------------------------------------------------------*/

void vPortEnterCritical(void) {
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005276:	f383 8811 	msr	BASEPRI, r3
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005284:	4b0e      	ldr	r3, [pc, #56]	; (80052c0 <vPortEnterCritical+0x54>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3301      	adds	r3, #1
 800528a:	4a0d      	ldr	r2, [pc, #52]	; (80052c0 <vPortEnterCritical+0x54>)
 800528c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	 assert() if it is being called from an interrupt context.  Only API
	 functions that end in "FromISR" can be used in an interrupt.  Only assert if
	 the critical nesting count is 1 to protect against recursive calls if the
	 assert function also uses a critical section. */
	if (uxCriticalNesting == 1) {
 800528e:	4b0c      	ldr	r3, [pc, #48]	; (80052c0 <vPortEnterCritical+0x54>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b01      	cmp	r3, #1
 8005294:	d10e      	bne.n	80052b4 <vPortEnterCritical+0x48>
		configASSERT(( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0);
 8005296:	4b0b      	ldr	r3, [pc, #44]	; (80052c4 <vPortEnterCritical+0x58>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d009      	beq.n	80052b4 <vPortEnterCritical+0x48>
 80052a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	603b      	str	r3, [r7, #0]
 80052b2:	e7fe      	b.n	80052b2 <vPortEnterCritical+0x46>
	}
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	2000009c 	.word	0x2000009c
 80052c4:	e000ed04 	.word	0xe000ed04

080052c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical(void) {
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
	configASSERT(uxCriticalNesting);
 80052ce:	4b11      	ldr	r3, [pc, #68]	; (8005314 <vPortExitCritical+0x4c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d109      	bne.n	80052ea <vPortExitCritical+0x22>
 80052d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	607b      	str	r3, [r7, #4]
 80052e8:	e7fe      	b.n	80052e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80052ea:	4b0a      	ldr	r3, [pc, #40]	; (8005314 <vPortExitCritical+0x4c>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	4a08      	ldr	r2, [pc, #32]	; (8005314 <vPortExitCritical+0x4c>)
 80052f2:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
 80052f4:	4b07      	ldr	r3, [pc, #28]	; (8005314 <vPortExitCritical+0x4c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d104      	bne.n	8005306 <vPortExitCritical+0x3e>
 80052fc:	2300      	movs	r3, #0
 80052fe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	f383 8811 	msr	BASEPRI, r3
		portENABLE_INTERRUPTS();
	}
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	2000009c 	.word	0x2000009c
	...

08005320 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void xPortPendSVHandler(void) {
	/* This is a naked function. */

	__asm volatile
 8005320:	f3ef 8009 	mrs	r0, PSP
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	4b15      	ldr	r3, [pc, #84]	; (8005380 <pxCurrentTCBConst>)
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	f01e 0f10 	tst.w	lr, #16
 8005330:	bf08      	it	eq
 8005332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800533a:	6010      	str	r0, [r2, #0]
 800533c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005340:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005344:	f380 8811 	msr	BASEPRI, r0
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f7fe fed2 	bl	80040f8 <vTaskSwitchContext>
 8005354:	f04f 0000 	mov.w	r0, #0
 8005358:	f380 8811 	msr	BASEPRI, r0
 800535c:	bc09      	pop	{r0, r3}
 800535e:	6819      	ldr	r1, [r3, #0]
 8005360:	6808      	ldr	r0, [r1, #0]
 8005362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005366:	f01e 0f10 	tst.w	lr, #16
 800536a:	bf08      	it	eq
 800536c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005370:	f380 8809 	msr	PSP, r0
 8005374:	f3bf 8f6f 	isb	sy
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	f3af 8000 	nop.w

08005380 <pxCurrentTCBConst>:
 8005380:	2000014c 	.word	0x2000014c
			"										\n"
			"	.align 4							\n"
			"pxCurrentTCBConst: .word pxCurrentTCB	\n"
			::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005384:	bf00      	nop
 8005386:	bf00      	nop

08005388 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler(void) {
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	607b      	str	r3, [r7, #4]
	 known. */
	portDISABLE_INTERRUPTS();
	traceISR_ENTER();
	{
		/* Increment the RTOS tick. */
		if (xTaskIncrementTick() != pdFALSE) {
 80053a0:	f7fe fdf2 	bl	8003f88 <xTaskIncrementTick>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <SysTick_Handler+0x2a>
			traceISR_EXIT_TO_SCHEDULER();
			/* A context switch is required.  Context switching is performed in
			 the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053aa:	4b06      	ldr	r3, [pc, #24]	; (80053c4 <SysTick_Handler+0x3c>)
 80053ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	2300      	movs	r3, #0
 80053b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	f383 8811 	msr	BASEPRI, r3
		} else {
			traceISR_EXIT();
		}
	}
	portENABLE_INTERRUPTS();
}
 80053bc:	bf00      	nop
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	e000ed04 	.word	0xe000ed04

080053c8 <vPortSetupTimerInterrupt>:

/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt(void) {
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80053cc:	4b0b      	ldr	r3, [pc, #44]	; (80053fc <vPortSetupTimerInterrupt+0x34>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80053d2:	4b0b      	ldr	r3, [pc, #44]	; (8005400 <vPortSetupTimerInterrupt+0x38>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ)
 80053d8:	4b0a      	ldr	r3, [pc, #40]	; (8005404 <vPortSetupTimerInterrupt+0x3c>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a0a      	ldr	r2, [pc, #40]	; (8005408 <vPortSetupTimerInterrupt+0x40>)
 80053de:	fba2 2303 	umull	r2, r3, r2, r3
 80053e2:	099b      	lsrs	r3, r3, #6
 80053e4:	4a09      	ldr	r2, [pc, #36]	; (800540c <vPortSetupTimerInterrupt+0x44>)
			- 1UL;
 80053e6:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ)
 80053e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT
 80053ea:	4b04      	ldr	r3, [pc, #16]	; (80053fc <vPortSetupTimerInterrupt+0x34>)
 80053ec:	2207      	movs	r2, #7
 80053ee:	601a      	str	r2, [r3, #0]
			| portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
}
 80053f0:	bf00      	nop
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	e000e010 	.word	0xe000e010
 8005400:	e000e018 	.word	0xe000e018
 8005404:	20000090 	.word	0x20000090
 8005408:	10624dd3 	.word	0x10624dd3
 800540c:	e000e014 	.word	0xe000e014

08005410 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void) {
	__asm volatile
 8005410:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005420 <vPortEnableVFP+0x10>
 8005414:	6801      	ldr	r1, [r0, #0]
 8005416:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800541a:	6001      	str	r1, [r0, #0]
 800541c:	4770      	bx	lr
			"								\n"
			"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
			"	str r1, [r0]				\n"
			"	bx r14						"
	);
}
 800541e:	bf00      	nop
 8005420:	e000ed88 	.word	0xe000ed88

08005424 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

void vPortValidateInterruptPriority(void) {
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800542a:	f3ef 8305 	mrs	r3, IPSR
 800542e:	60fb      	str	r3, [r7, #12]

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2b0f      	cmp	r3, #15
 8005434:	d913      	bls.n	800545e <vPortValidateInterruptPriority+0x3a>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
 8005436:	4a16      	ldr	r2, [pc, #88]	; (8005490 <vPortValidateInterruptPriority+0x6c>)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4413      	add	r3, r2
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	72fb      	strb	r3, [r7, #11]
		 interrupt entry is as fast and simple as possible.

		 The following links provide detailed information:
		 http://www.freertos.org/RTOS-Cortex-M3-M4.html
		 http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
 8005440:	4b14      	ldr	r3, [pc, #80]	; (8005494 <vPortValidateInterruptPriority+0x70>)
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	7afa      	ldrb	r2, [r7, #11]
 8005446:	429a      	cmp	r2, r3
 8005448:	d209      	bcs.n	800545e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800544a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544e:	f383 8811 	msr	BASEPRI, r3
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	607b      	str	r3, [r7, #4]
 800545c:	e7fe      	b.n	800545c <vPortValidateInterruptPriority+0x38>
	 configuration then the correct setting can be achieved on all Cortex-M
	 devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	 scheduler.  Note however that some vendor specific peripheral libraries
	 assume a non-zero priority group setting, in which cases using a value
	 of zero will result in unpredictable behaviour. */
	configASSERT(
 800545e:	4b0e      	ldr	r3, [pc, #56]	; (8005498 <vPortValidateInterruptPriority+0x74>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005466:	4b0d      	ldr	r3, [pc, #52]	; (800549c <vPortValidateInterruptPriority+0x78>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	429a      	cmp	r2, r3
 800546c:	d909      	bls.n	8005482 <vPortValidateInterruptPriority+0x5e>
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	603b      	str	r3, [r7, #0]
 8005480:	e7fe      	b.n	8005480 <vPortValidateInterruptPriority+0x5c>
			( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue);
}
 8005482:	bf00      	nop
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	e000e3f0 	.word	0xe000e3f0
 8005494:	2000028c 	.word	0x2000028c
 8005498:	e000ed0c 	.word	0xe000ed0c
 800549c:	20000290 	.word	0x20000290

080054a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08a      	sub	sp, #40	; 0x28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80054a8:	2300      	movs	r3, #0
 80054aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80054ac:	f7fe fcb2 	bl	8003e14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80054b0:	4b57      	ldr	r3, [pc, #348]	; (8005610 <pvPortMalloc+0x170>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80054b8:	f000 f90c 	bl	80056d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80054bc:	4b55      	ldr	r3, [pc, #340]	; (8005614 <pvPortMalloc+0x174>)
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4013      	ands	r3, r2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f040 808c 	bne.w	80055e2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01c      	beq.n	800550a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80054d0:	2208      	movs	r2, #8
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4413      	add	r3, r2
 80054d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f003 0307 	and.w	r3, r3, #7
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d013      	beq.n	800550a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f023 0307 	bic.w	r3, r3, #7
 80054e8:	3308      	adds	r3, #8
 80054ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f003 0307 	and.w	r3, r3, #7
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d009      	beq.n	800550a <pvPortMalloc+0x6a>
 80054f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	e7fe      	b.n	8005508 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d068      	beq.n	80055e2 <pvPortMalloc+0x142>
 8005510:	4b41      	ldr	r3, [pc, #260]	; (8005618 <pvPortMalloc+0x178>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	429a      	cmp	r2, r3
 8005518:	d863      	bhi.n	80055e2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800551a:	4b40      	ldr	r3, [pc, #256]	; (800561c <pvPortMalloc+0x17c>)
 800551c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800551e:	4b3f      	ldr	r3, [pc, #252]	; (800561c <pvPortMalloc+0x17c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005524:	e004      	b.n	8005530 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	429a      	cmp	r2, r3
 8005538:	d903      	bls.n	8005542 <pvPortMalloc+0xa2>
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1f1      	bne.n	8005526 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005542:	4b33      	ldr	r3, [pc, #204]	; (8005610 <pvPortMalloc+0x170>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005548:	429a      	cmp	r2, r3
 800554a:	d04a      	beq.n	80055e2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2208      	movs	r2, #8
 8005552:	4413      	add	r3, r2
 8005554:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	1ad2      	subs	r2, r2, r3
 8005566:	2308      	movs	r3, #8
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	429a      	cmp	r2, r3
 800556c:	d91e      	bls.n	80055ac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800556e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4413      	add	r3, r2
 8005574:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	2b00      	cmp	r3, #0
 800557e:	d009      	beq.n	8005594 <pvPortMalloc+0xf4>
 8005580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005584:	f383 8811 	msr	BASEPRI, r3
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	613b      	str	r3, [r7, #16]
 8005592:	e7fe      	b.n	8005592 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	1ad2      	subs	r2, r2, r3
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055a6:	69b8      	ldr	r0, [r7, #24]
 80055a8:	f000 f8f6 	bl	8005798 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80055ac:	4b1a      	ldr	r3, [pc, #104]	; (8005618 <pvPortMalloc+0x178>)
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	4a18      	ldr	r2, [pc, #96]	; (8005618 <pvPortMalloc+0x178>)
 80055b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055ba:	4b17      	ldr	r3, [pc, #92]	; (8005618 <pvPortMalloc+0x178>)
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	4b18      	ldr	r3, [pc, #96]	; (8005620 <pvPortMalloc+0x180>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d203      	bcs.n	80055ce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80055c6:	4b14      	ldr	r3, [pc, #80]	; (8005618 <pvPortMalloc+0x178>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a15      	ldr	r2, [pc, #84]	; (8005620 <pvPortMalloc+0x180>)
 80055cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	4b10      	ldr	r3, [pc, #64]	; (8005614 <pvPortMalloc+0x174>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	431a      	orrs	r2, r3
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	2200      	movs	r2, #0
 80055e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80055e2:	f7fe fc25 	bl	8003e30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d009      	beq.n	8005604 <pvPortMalloc+0x164>
 80055f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	60fb      	str	r3, [r7, #12]
 8005602:	e7fe      	b.n	8005602 <pvPortMalloc+0x162>
	return pvReturn;
 8005604:	69fb      	ldr	r3, [r7, #28]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3728      	adds	r7, #40	; 0x28
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	20012e9c 	.word	0x20012e9c
 8005614:	20012ea8 	.word	0x20012ea8
 8005618:	20012ea0 	.word	0x20012ea0
 800561c:	20012e94 	.word	0x20012e94
 8005620:	20012ea4 	.word	0x20012ea4

08005624 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d046      	beq.n	80056c4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005636:	2308      	movs	r3, #8
 8005638:	425b      	negs	r3, r3
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	4413      	add	r3, r2
 800563e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	4b20      	ldr	r3, [pc, #128]	; (80056cc <vPortFree+0xa8>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4013      	ands	r3, r2
 800564e:	2b00      	cmp	r3, #0
 8005650:	d109      	bne.n	8005666 <vPortFree+0x42>
 8005652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	e7fe      	b.n	8005664 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d009      	beq.n	8005682 <vPortFree+0x5e>
 800566e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	60bb      	str	r3, [r7, #8]
 8005680:	e7fe      	b.n	8005680 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	4b11      	ldr	r3, [pc, #68]	; (80056cc <vPortFree+0xa8>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4013      	ands	r3, r2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d019      	beq.n	80056c4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d115      	bne.n	80056c4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	4b0b      	ldr	r3, [pc, #44]	; (80056cc <vPortFree+0xa8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	43db      	mvns	r3, r3
 80056a2:	401a      	ands	r2, r3
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80056a8:	f7fe fbb4 	bl	8003e14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	4b07      	ldr	r3, [pc, #28]	; (80056d0 <vPortFree+0xac>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4413      	add	r3, r2
 80056b6:	4a06      	ldr	r2, [pc, #24]	; (80056d0 <vPortFree+0xac>)
 80056b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80056ba:	6938      	ldr	r0, [r7, #16]
 80056bc:	f000 f86c 	bl	8005798 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80056c0:	f7fe fbb6 	bl	8003e30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80056c4:	bf00      	nop
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	20012ea8 	.word	0x20012ea8
 80056d0:	20012ea0 	.word	0x20012ea0

080056d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056da:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80056de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80056e0:	4b27      	ldr	r3, [pc, #156]	; (8005780 <prvHeapInit+0xac>)
 80056e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f003 0307 	and.w	r3, r3, #7
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00c      	beq.n	8005708 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	3307      	adds	r3, #7
 80056f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f023 0307 	bic.w	r3, r3, #7
 80056fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	4a1f      	ldr	r2, [pc, #124]	; (8005780 <prvHeapInit+0xac>)
 8005704:	4413      	add	r3, r2
 8005706:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800570c:	4a1d      	ldr	r2, [pc, #116]	; (8005784 <prvHeapInit+0xb0>)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005712:	4b1c      	ldr	r3, [pc, #112]	; (8005784 <prvHeapInit+0xb0>)
 8005714:	2200      	movs	r2, #0
 8005716:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	4413      	add	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005720:	2208      	movs	r2, #8
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	1a9b      	subs	r3, r3, r2
 8005726:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f023 0307 	bic.w	r3, r3, #7
 800572e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4a15      	ldr	r2, [pc, #84]	; (8005788 <prvHeapInit+0xb4>)
 8005734:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005736:	4b14      	ldr	r3, [pc, #80]	; (8005788 <prvHeapInit+0xb4>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2200      	movs	r2, #0
 800573c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800573e:	4b12      	ldr	r3, [pc, #72]	; (8005788 <prvHeapInit+0xb4>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2200      	movs	r2, #0
 8005744:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	1ad2      	subs	r2, r2, r3
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005754:	4b0c      	ldr	r3, [pc, #48]	; (8005788 <prvHeapInit+0xb4>)
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	4a0a      	ldr	r2, [pc, #40]	; (800578c <prvHeapInit+0xb8>)
 8005762:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	4a09      	ldr	r2, [pc, #36]	; (8005790 <prvHeapInit+0xbc>)
 800576a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800576c:	4b09      	ldr	r3, [pc, #36]	; (8005794 <prvHeapInit+0xc0>)
 800576e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005772:	601a      	str	r2, [r3, #0]
}
 8005774:	bf00      	nop
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	20000294 	.word	0x20000294
 8005784:	20012e94 	.word	0x20012e94
 8005788:	20012e9c 	.word	0x20012e9c
 800578c:	20012ea4 	.word	0x20012ea4
 8005790:	20012ea0 	.word	0x20012ea0
 8005794:	20012ea8 	.word	0x20012ea8

08005798 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80057a0:	4b28      	ldr	r3, [pc, #160]	; (8005844 <prvInsertBlockIntoFreeList+0xac>)
 80057a2:	60fb      	str	r3, [r7, #12]
 80057a4:	e002      	b.n	80057ac <prvInsertBlockIntoFreeList+0x14>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	60fb      	str	r3, [r7, #12]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d8f7      	bhi.n	80057a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	4413      	add	r3, r2
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d108      	bne.n	80057da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	441a      	add	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	441a      	add	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d118      	bne.n	8005820 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	4b15      	ldr	r3, [pc, #84]	; (8005848 <prvInsertBlockIntoFreeList+0xb0>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d00d      	beq.n	8005816 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	441a      	add	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	601a      	str	r2, [r3, #0]
 8005814:	e008      	b.n	8005828 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005816:	4b0c      	ldr	r3, [pc, #48]	; (8005848 <prvInsertBlockIntoFreeList+0xb0>)
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	e003      	b.n	8005828 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	429a      	cmp	r2, r3
 800582e:	d002      	beq.n	8005836 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005836:	bf00      	nop
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	20012e94 	.word	0x20012e94
 8005848:	20012e9c 	.word	0x20012e9c

0800584c <__errno>:
 800584c:	4b01      	ldr	r3, [pc, #4]	; (8005854 <__errno+0x8>)
 800584e:	6818      	ldr	r0, [r3, #0]
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	200000a0 	.word	0x200000a0

08005858 <__libc_init_array>:
 8005858:	b570      	push	{r4, r5, r6, lr}
 800585a:	4e0d      	ldr	r6, [pc, #52]	; (8005890 <__libc_init_array+0x38>)
 800585c:	4c0d      	ldr	r4, [pc, #52]	; (8005894 <__libc_init_array+0x3c>)
 800585e:	1ba4      	subs	r4, r4, r6
 8005860:	10a4      	asrs	r4, r4, #2
 8005862:	2500      	movs	r5, #0
 8005864:	42a5      	cmp	r5, r4
 8005866:	d109      	bne.n	800587c <__libc_init_array+0x24>
 8005868:	4e0b      	ldr	r6, [pc, #44]	; (8005898 <__libc_init_array+0x40>)
 800586a:	4c0c      	ldr	r4, [pc, #48]	; (800589c <__libc_init_array+0x44>)
 800586c:	f000 fc28 	bl	80060c0 <_init>
 8005870:	1ba4      	subs	r4, r4, r6
 8005872:	10a4      	asrs	r4, r4, #2
 8005874:	2500      	movs	r5, #0
 8005876:	42a5      	cmp	r5, r4
 8005878:	d105      	bne.n	8005886 <__libc_init_array+0x2e>
 800587a:	bd70      	pop	{r4, r5, r6, pc}
 800587c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005880:	4798      	blx	r3
 8005882:	3501      	adds	r5, #1
 8005884:	e7ee      	b.n	8005864 <__libc_init_array+0xc>
 8005886:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800588a:	4798      	blx	r3
 800588c:	3501      	adds	r5, #1
 800588e:	e7f2      	b.n	8005876 <__libc_init_array+0x1e>
 8005890:	080061cc 	.word	0x080061cc
 8005894:	080061cc 	.word	0x080061cc
 8005898:	080061cc 	.word	0x080061cc
 800589c:	080061d0 	.word	0x080061d0

080058a0 <memcpy>:
 80058a0:	b510      	push	{r4, lr}
 80058a2:	1e43      	subs	r3, r0, #1
 80058a4:	440a      	add	r2, r1
 80058a6:	4291      	cmp	r1, r2
 80058a8:	d100      	bne.n	80058ac <memcpy+0xc>
 80058aa:	bd10      	pop	{r4, pc}
 80058ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058b4:	e7f7      	b.n	80058a6 <memcpy+0x6>

080058b6 <memset>:
 80058b6:	4402      	add	r2, r0
 80058b8:	4603      	mov	r3, r0
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d100      	bne.n	80058c0 <memset+0xa>
 80058be:	4770      	bx	lr
 80058c0:	f803 1b01 	strb.w	r1, [r3], #1
 80058c4:	e7f9      	b.n	80058ba <memset+0x4>
	...

080058c8 <siprintf>:
 80058c8:	b40e      	push	{r1, r2, r3}
 80058ca:	b500      	push	{lr}
 80058cc:	b09c      	sub	sp, #112	; 0x70
 80058ce:	ab1d      	add	r3, sp, #116	; 0x74
 80058d0:	9002      	str	r0, [sp, #8]
 80058d2:	9006      	str	r0, [sp, #24]
 80058d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058d8:	4809      	ldr	r0, [pc, #36]	; (8005900 <siprintf+0x38>)
 80058da:	9107      	str	r1, [sp, #28]
 80058dc:	9104      	str	r1, [sp, #16]
 80058de:	4909      	ldr	r1, [pc, #36]	; (8005904 <siprintf+0x3c>)
 80058e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80058e4:	9105      	str	r1, [sp, #20]
 80058e6:	6800      	ldr	r0, [r0, #0]
 80058e8:	9301      	str	r3, [sp, #4]
 80058ea:	a902      	add	r1, sp, #8
 80058ec:	f000 f866 	bl	80059bc <_svfiprintf_r>
 80058f0:	9b02      	ldr	r3, [sp, #8]
 80058f2:	2200      	movs	r2, #0
 80058f4:	701a      	strb	r2, [r3, #0]
 80058f6:	b01c      	add	sp, #112	; 0x70
 80058f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80058fc:	b003      	add	sp, #12
 80058fe:	4770      	bx	lr
 8005900:	200000a0 	.word	0x200000a0
 8005904:	ffff0208 	.word	0xffff0208

08005908 <__ssputs_r>:
 8005908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800590c:	688e      	ldr	r6, [r1, #8]
 800590e:	429e      	cmp	r6, r3
 8005910:	4682      	mov	sl, r0
 8005912:	460c      	mov	r4, r1
 8005914:	4690      	mov	r8, r2
 8005916:	4699      	mov	r9, r3
 8005918:	d837      	bhi.n	800598a <__ssputs_r+0x82>
 800591a:	898a      	ldrh	r2, [r1, #12]
 800591c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005920:	d031      	beq.n	8005986 <__ssputs_r+0x7e>
 8005922:	6825      	ldr	r5, [r4, #0]
 8005924:	6909      	ldr	r1, [r1, #16]
 8005926:	1a6f      	subs	r7, r5, r1
 8005928:	6965      	ldr	r5, [r4, #20]
 800592a:	2302      	movs	r3, #2
 800592c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005930:	fb95 f5f3 	sdiv	r5, r5, r3
 8005934:	f109 0301 	add.w	r3, r9, #1
 8005938:	443b      	add	r3, r7
 800593a:	429d      	cmp	r5, r3
 800593c:	bf38      	it	cc
 800593e:	461d      	movcc	r5, r3
 8005940:	0553      	lsls	r3, r2, #21
 8005942:	d530      	bpl.n	80059a6 <__ssputs_r+0x9e>
 8005944:	4629      	mov	r1, r5
 8005946:	f000 fb21 	bl	8005f8c <_malloc_r>
 800594a:	4606      	mov	r6, r0
 800594c:	b950      	cbnz	r0, 8005964 <__ssputs_r+0x5c>
 800594e:	230c      	movs	r3, #12
 8005950:	f8ca 3000 	str.w	r3, [sl]
 8005954:	89a3      	ldrh	r3, [r4, #12]
 8005956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800595a:	81a3      	strh	r3, [r4, #12]
 800595c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005964:	463a      	mov	r2, r7
 8005966:	6921      	ldr	r1, [r4, #16]
 8005968:	f7ff ff9a 	bl	80058a0 <memcpy>
 800596c:	89a3      	ldrh	r3, [r4, #12]
 800596e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005976:	81a3      	strh	r3, [r4, #12]
 8005978:	6126      	str	r6, [r4, #16]
 800597a:	6165      	str	r5, [r4, #20]
 800597c:	443e      	add	r6, r7
 800597e:	1bed      	subs	r5, r5, r7
 8005980:	6026      	str	r6, [r4, #0]
 8005982:	60a5      	str	r5, [r4, #8]
 8005984:	464e      	mov	r6, r9
 8005986:	454e      	cmp	r6, r9
 8005988:	d900      	bls.n	800598c <__ssputs_r+0x84>
 800598a:	464e      	mov	r6, r9
 800598c:	4632      	mov	r2, r6
 800598e:	4641      	mov	r1, r8
 8005990:	6820      	ldr	r0, [r4, #0]
 8005992:	f000 fa93 	bl	8005ebc <memmove>
 8005996:	68a3      	ldr	r3, [r4, #8]
 8005998:	1b9b      	subs	r3, r3, r6
 800599a:	60a3      	str	r3, [r4, #8]
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	441e      	add	r6, r3
 80059a0:	6026      	str	r6, [r4, #0]
 80059a2:	2000      	movs	r0, #0
 80059a4:	e7dc      	b.n	8005960 <__ssputs_r+0x58>
 80059a6:	462a      	mov	r2, r5
 80059a8:	f000 fb4a 	bl	8006040 <_realloc_r>
 80059ac:	4606      	mov	r6, r0
 80059ae:	2800      	cmp	r0, #0
 80059b0:	d1e2      	bne.n	8005978 <__ssputs_r+0x70>
 80059b2:	6921      	ldr	r1, [r4, #16]
 80059b4:	4650      	mov	r0, sl
 80059b6:	f000 fa9b 	bl	8005ef0 <_free_r>
 80059ba:	e7c8      	b.n	800594e <__ssputs_r+0x46>

080059bc <_svfiprintf_r>:
 80059bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c0:	461d      	mov	r5, r3
 80059c2:	898b      	ldrh	r3, [r1, #12]
 80059c4:	061f      	lsls	r7, r3, #24
 80059c6:	b09d      	sub	sp, #116	; 0x74
 80059c8:	4680      	mov	r8, r0
 80059ca:	460c      	mov	r4, r1
 80059cc:	4616      	mov	r6, r2
 80059ce:	d50f      	bpl.n	80059f0 <_svfiprintf_r+0x34>
 80059d0:	690b      	ldr	r3, [r1, #16]
 80059d2:	b96b      	cbnz	r3, 80059f0 <_svfiprintf_r+0x34>
 80059d4:	2140      	movs	r1, #64	; 0x40
 80059d6:	f000 fad9 	bl	8005f8c <_malloc_r>
 80059da:	6020      	str	r0, [r4, #0]
 80059dc:	6120      	str	r0, [r4, #16]
 80059de:	b928      	cbnz	r0, 80059ec <_svfiprintf_r+0x30>
 80059e0:	230c      	movs	r3, #12
 80059e2:	f8c8 3000 	str.w	r3, [r8]
 80059e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059ea:	e0c8      	b.n	8005b7e <_svfiprintf_r+0x1c2>
 80059ec:	2340      	movs	r3, #64	; 0x40
 80059ee:	6163      	str	r3, [r4, #20]
 80059f0:	2300      	movs	r3, #0
 80059f2:	9309      	str	r3, [sp, #36]	; 0x24
 80059f4:	2320      	movs	r3, #32
 80059f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059fa:	2330      	movs	r3, #48	; 0x30
 80059fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a00:	9503      	str	r5, [sp, #12]
 8005a02:	f04f 0b01 	mov.w	fp, #1
 8005a06:	4637      	mov	r7, r6
 8005a08:	463d      	mov	r5, r7
 8005a0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005a0e:	b10b      	cbz	r3, 8005a14 <_svfiprintf_r+0x58>
 8005a10:	2b25      	cmp	r3, #37	; 0x25
 8005a12:	d13e      	bne.n	8005a92 <_svfiprintf_r+0xd6>
 8005a14:	ebb7 0a06 	subs.w	sl, r7, r6
 8005a18:	d00b      	beq.n	8005a32 <_svfiprintf_r+0x76>
 8005a1a:	4653      	mov	r3, sl
 8005a1c:	4632      	mov	r2, r6
 8005a1e:	4621      	mov	r1, r4
 8005a20:	4640      	mov	r0, r8
 8005a22:	f7ff ff71 	bl	8005908 <__ssputs_r>
 8005a26:	3001      	adds	r0, #1
 8005a28:	f000 80a4 	beq.w	8005b74 <_svfiprintf_r+0x1b8>
 8005a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a2e:	4453      	add	r3, sl
 8005a30:	9309      	str	r3, [sp, #36]	; 0x24
 8005a32:	783b      	ldrb	r3, [r7, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 809d 	beq.w	8005b74 <_svfiprintf_r+0x1b8>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a44:	9304      	str	r3, [sp, #16]
 8005a46:	9307      	str	r3, [sp, #28]
 8005a48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a4c:	931a      	str	r3, [sp, #104]	; 0x68
 8005a4e:	462f      	mov	r7, r5
 8005a50:	2205      	movs	r2, #5
 8005a52:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005a56:	4850      	ldr	r0, [pc, #320]	; (8005b98 <_svfiprintf_r+0x1dc>)
 8005a58:	f7fa fbca 	bl	80001f0 <memchr>
 8005a5c:	9b04      	ldr	r3, [sp, #16]
 8005a5e:	b9d0      	cbnz	r0, 8005a96 <_svfiprintf_r+0xda>
 8005a60:	06d9      	lsls	r1, r3, #27
 8005a62:	bf44      	itt	mi
 8005a64:	2220      	movmi	r2, #32
 8005a66:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a6a:	071a      	lsls	r2, r3, #28
 8005a6c:	bf44      	itt	mi
 8005a6e:	222b      	movmi	r2, #43	; 0x2b
 8005a70:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a74:	782a      	ldrb	r2, [r5, #0]
 8005a76:	2a2a      	cmp	r2, #42	; 0x2a
 8005a78:	d015      	beq.n	8005aa6 <_svfiprintf_r+0xea>
 8005a7a:	9a07      	ldr	r2, [sp, #28]
 8005a7c:	462f      	mov	r7, r5
 8005a7e:	2000      	movs	r0, #0
 8005a80:	250a      	movs	r5, #10
 8005a82:	4639      	mov	r1, r7
 8005a84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a88:	3b30      	subs	r3, #48	; 0x30
 8005a8a:	2b09      	cmp	r3, #9
 8005a8c:	d94d      	bls.n	8005b2a <_svfiprintf_r+0x16e>
 8005a8e:	b1b8      	cbz	r0, 8005ac0 <_svfiprintf_r+0x104>
 8005a90:	e00f      	b.n	8005ab2 <_svfiprintf_r+0xf6>
 8005a92:	462f      	mov	r7, r5
 8005a94:	e7b8      	b.n	8005a08 <_svfiprintf_r+0x4c>
 8005a96:	4a40      	ldr	r2, [pc, #256]	; (8005b98 <_svfiprintf_r+0x1dc>)
 8005a98:	1a80      	subs	r0, r0, r2
 8005a9a:	fa0b f000 	lsl.w	r0, fp, r0
 8005a9e:	4318      	orrs	r0, r3
 8005aa0:	9004      	str	r0, [sp, #16]
 8005aa2:	463d      	mov	r5, r7
 8005aa4:	e7d3      	b.n	8005a4e <_svfiprintf_r+0x92>
 8005aa6:	9a03      	ldr	r2, [sp, #12]
 8005aa8:	1d11      	adds	r1, r2, #4
 8005aaa:	6812      	ldr	r2, [r2, #0]
 8005aac:	9103      	str	r1, [sp, #12]
 8005aae:	2a00      	cmp	r2, #0
 8005ab0:	db01      	blt.n	8005ab6 <_svfiprintf_r+0xfa>
 8005ab2:	9207      	str	r2, [sp, #28]
 8005ab4:	e004      	b.n	8005ac0 <_svfiprintf_r+0x104>
 8005ab6:	4252      	negs	r2, r2
 8005ab8:	f043 0302 	orr.w	r3, r3, #2
 8005abc:	9207      	str	r2, [sp, #28]
 8005abe:	9304      	str	r3, [sp, #16]
 8005ac0:	783b      	ldrb	r3, [r7, #0]
 8005ac2:	2b2e      	cmp	r3, #46	; 0x2e
 8005ac4:	d10c      	bne.n	8005ae0 <_svfiprintf_r+0x124>
 8005ac6:	787b      	ldrb	r3, [r7, #1]
 8005ac8:	2b2a      	cmp	r3, #42	; 0x2a
 8005aca:	d133      	bne.n	8005b34 <_svfiprintf_r+0x178>
 8005acc:	9b03      	ldr	r3, [sp, #12]
 8005ace:	1d1a      	adds	r2, r3, #4
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	9203      	str	r2, [sp, #12]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	bfb8      	it	lt
 8005ad8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005adc:	3702      	adds	r7, #2
 8005ade:	9305      	str	r3, [sp, #20]
 8005ae0:	4d2e      	ldr	r5, [pc, #184]	; (8005b9c <_svfiprintf_r+0x1e0>)
 8005ae2:	7839      	ldrb	r1, [r7, #0]
 8005ae4:	2203      	movs	r2, #3
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	f7fa fb82 	bl	80001f0 <memchr>
 8005aec:	b138      	cbz	r0, 8005afe <_svfiprintf_r+0x142>
 8005aee:	2340      	movs	r3, #64	; 0x40
 8005af0:	1b40      	subs	r0, r0, r5
 8005af2:	fa03 f000 	lsl.w	r0, r3, r0
 8005af6:	9b04      	ldr	r3, [sp, #16]
 8005af8:	4303      	orrs	r3, r0
 8005afa:	3701      	adds	r7, #1
 8005afc:	9304      	str	r3, [sp, #16]
 8005afe:	7839      	ldrb	r1, [r7, #0]
 8005b00:	4827      	ldr	r0, [pc, #156]	; (8005ba0 <_svfiprintf_r+0x1e4>)
 8005b02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b06:	2206      	movs	r2, #6
 8005b08:	1c7e      	adds	r6, r7, #1
 8005b0a:	f7fa fb71 	bl	80001f0 <memchr>
 8005b0e:	2800      	cmp	r0, #0
 8005b10:	d038      	beq.n	8005b84 <_svfiprintf_r+0x1c8>
 8005b12:	4b24      	ldr	r3, [pc, #144]	; (8005ba4 <_svfiprintf_r+0x1e8>)
 8005b14:	bb13      	cbnz	r3, 8005b5c <_svfiprintf_r+0x1a0>
 8005b16:	9b03      	ldr	r3, [sp, #12]
 8005b18:	3307      	adds	r3, #7
 8005b1a:	f023 0307 	bic.w	r3, r3, #7
 8005b1e:	3308      	adds	r3, #8
 8005b20:	9303      	str	r3, [sp, #12]
 8005b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b24:	444b      	add	r3, r9
 8005b26:	9309      	str	r3, [sp, #36]	; 0x24
 8005b28:	e76d      	b.n	8005a06 <_svfiprintf_r+0x4a>
 8005b2a:	fb05 3202 	mla	r2, r5, r2, r3
 8005b2e:	2001      	movs	r0, #1
 8005b30:	460f      	mov	r7, r1
 8005b32:	e7a6      	b.n	8005a82 <_svfiprintf_r+0xc6>
 8005b34:	2300      	movs	r3, #0
 8005b36:	3701      	adds	r7, #1
 8005b38:	9305      	str	r3, [sp, #20]
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	250a      	movs	r5, #10
 8005b3e:	4638      	mov	r0, r7
 8005b40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b44:	3a30      	subs	r2, #48	; 0x30
 8005b46:	2a09      	cmp	r2, #9
 8005b48:	d903      	bls.n	8005b52 <_svfiprintf_r+0x196>
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0c8      	beq.n	8005ae0 <_svfiprintf_r+0x124>
 8005b4e:	9105      	str	r1, [sp, #20]
 8005b50:	e7c6      	b.n	8005ae0 <_svfiprintf_r+0x124>
 8005b52:	fb05 2101 	mla	r1, r5, r1, r2
 8005b56:	2301      	movs	r3, #1
 8005b58:	4607      	mov	r7, r0
 8005b5a:	e7f0      	b.n	8005b3e <_svfiprintf_r+0x182>
 8005b5c:	ab03      	add	r3, sp, #12
 8005b5e:	9300      	str	r3, [sp, #0]
 8005b60:	4622      	mov	r2, r4
 8005b62:	4b11      	ldr	r3, [pc, #68]	; (8005ba8 <_svfiprintf_r+0x1ec>)
 8005b64:	a904      	add	r1, sp, #16
 8005b66:	4640      	mov	r0, r8
 8005b68:	f3af 8000 	nop.w
 8005b6c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005b70:	4681      	mov	r9, r0
 8005b72:	d1d6      	bne.n	8005b22 <_svfiprintf_r+0x166>
 8005b74:	89a3      	ldrh	r3, [r4, #12]
 8005b76:	065b      	lsls	r3, r3, #25
 8005b78:	f53f af35 	bmi.w	80059e6 <_svfiprintf_r+0x2a>
 8005b7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b7e:	b01d      	add	sp, #116	; 0x74
 8005b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b84:	ab03      	add	r3, sp, #12
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	4622      	mov	r2, r4
 8005b8a:	4b07      	ldr	r3, [pc, #28]	; (8005ba8 <_svfiprintf_r+0x1ec>)
 8005b8c:	a904      	add	r1, sp, #16
 8005b8e:	4640      	mov	r0, r8
 8005b90:	f000 f882 	bl	8005c98 <_printf_i>
 8005b94:	e7ea      	b.n	8005b6c <_svfiprintf_r+0x1b0>
 8005b96:	bf00      	nop
 8005b98:	08006190 	.word	0x08006190
 8005b9c:	08006196 	.word	0x08006196
 8005ba0:	0800619a 	.word	0x0800619a
 8005ba4:	00000000 	.word	0x00000000
 8005ba8:	08005909 	.word	0x08005909

08005bac <_printf_common>:
 8005bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bb0:	4691      	mov	r9, r2
 8005bb2:	461f      	mov	r7, r3
 8005bb4:	688a      	ldr	r2, [r1, #8]
 8005bb6:	690b      	ldr	r3, [r1, #16]
 8005bb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	bfb8      	it	lt
 8005bc0:	4613      	movlt	r3, r2
 8005bc2:	f8c9 3000 	str.w	r3, [r9]
 8005bc6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bca:	4606      	mov	r6, r0
 8005bcc:	460c      	mov	r4, r1
 8005bce:	b112      	cbz	r2, 8005bd6 <_printf_common+0x2a>
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	f8c9 3000 	str.w	r3, [r9]
 8005bd6:	6823      	ldr	r3, [r4, #0]
 8005bd8:	0699      	lsls	r1, r3, #26
 8005bda:	bf42      	ittt	mi
 8005bdc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005be0:	3302      	addmi	r3, #2
 8005be2:	f8c9 3000 	strmi.w	r3, [r9]
 8005be6:	6825      	ldr	r5, [r4, #0]
 8005be8:	f015 0506 	ands.w	r5, r5, #6
 8005bec:	d107      	bne.n	8005bfe <_printf_common+0x52>
 8005bee:	f104 0a19 	add.w	sl, r4, #25
 8005bf2:	68e3      	ldr	r3, [r4, #12]
 8005bf4:	f8d9 2000 	ldr.w	r2, [r9]
 8005bf8:	1a9b      	subs	r3, r3, r2
 8005bfa:	42ab      	cmp	r3, r5
 8005bfc:	dc28      	bgt.n	8005c50 <_printf_common+0xa4>
 8005bfe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005c02:	6822      	ldr	r2, [r4, #0]
 8005c04:	3300      	adds	r3, #0
 8005c06:	bf18      	it	ne
 8005c08:	2301      	movne	r3, #1
 8005c0a:	0692      	lsls	r2, r2, #26
 8005c0c:	d42d      	bmi.n	8005c6a <_printf_common+0xbe>
 8005c0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c12:	4639      	mov	r1, r7
 8005c14:	4630      	mov	r0, r6
 8005c16:	47c0      	blx	r8
 8005c18:	3001      	adds	r0, #1
 8005c1a:	d020      	beq.n	8005c5e <_printf_common+0xb2>
 8005c1c:	6823      	ldr	r3, [r4, #0]
 8005c1e:	68e5      	ldr	r5, [r4, #12]
 8005c20:	f8d9 2000 	ldr.w	r2, [r9]
 8005c24:	f003 0306 	and.w	r3, r3, #6
 8005c28:	2b04      	cmp	r3, #4
 8005c2a:	bf08      	it	eq
 8005c2c:	1aad      	subeq	r5, r5, r2
 8005c2e:	68a3      	ldr	r3, [r4, #8]
 8005c30:	6922      	ldr	r2, [r4, #16]
 8005c32:	bf0c      	ite	eq
 8005c34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c38:	2500      	movne	r5, #0
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	bfc4      	itt	gt
 8005c3e:	1a9b      	subgt	r3, r3, r2
 8005c40:	18ed      	addgt	r5, r5, r3
 8005c42:	f04f 0900 	mov.w	r9, #0
 8005c46:	341a      	adds	r4, #26
 8005c48:	454d      	cmp	r5, r9
 8005c4a:	d11a      	bne.n	8005c82 <_printf_common+0xd6>
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	e008      	b.n	8005c62 <_printf_common+0xb6>
 8005c50:	2301      	movs	r3, #1
 8005c52:	4652      	mov	r2, sl
 8005c54:	4639      	mov	r1, r7
 8005c56:	4630      	mov	r0, r6
 8005c58:	47c0      	blx	r8
 8005c5a:	3001      	adds	r0, #1
 8005c5c:	d103      	bne.n	8005c66 <_printf_common+0xba>
 8005c5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c66:	3501      	adds	r5, #1
 8005c68:	e7c3      	b.n	8005bf2 <_printf_common+0x46>
 8005c6a:	18e1      	adds	r1, r4, r3
 8005c6c:	1c5a      	adds	r2, r3, #1
 8005c6e:	2030      	movs	r0, #48	; 0x30
 8005c70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c74:	4422      	add	r2, r4
 8005c76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c7e:	3302      	adds	r3, #2
 8005c80:	e7c5      	b.n	8005c0e <_printf_common+0x62>
 8005c82:	2301      	movs	r3, #1
 8005c84:	4622      	mov	r2, r4
 8005c86:	4639      	mov	r1, r7
 8005c88:	4630      	mov	r0, r6
 8005c8a:	47c0      	blx	r8
 8005c8c:	3001      	adds	r0, #1
 8005c8e:	d0e6      	beq.n	8005c5e <_printf_common+0xb2>
 8005c90:	f109 0901 	add.w	r9, r9, #1
 8005c94:	e7d8      	b.n	8005c48 <_printf_common+0x9c>
	...

08005c98 <_printf_i>:
 8005c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c9c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005ca0:	460c      	mov	r4, r1
 8005ca2:	7e09      	ldrb	r1, [r1, #24]
 8005ca4:	b085      	sub	sp, #20
 8005ca6:	296e      	cmp	r1, #110	; 0x6e
 8005ca8:	4617      	mov	r7, r2
 8005caa:	4606      	mov	r6, r0
 8005cac:	4698      	mov	r8, r3
 8005cae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005cb0:	f000 80b3 	beq.w	8005e1a <_printf_i+0x182>
 8005cb4:	d822      	bhi.n	8005cfc <_printf_i+0x64>
 8005cb6:	2963      	cmp	r1, #99	; 0x63
 8005cb8:	d036      	beq.n	8005d28 <_printf_i+0x90>
 8005cba:	d80a      	bhi.n	8005cd2 <_printf_i+0x3a>
 8005cbc:	2900      	cmp	r1, #0
 8005cbe:	f000 80b9 	beq.w	8005e34 <_printf_i+0x19c>
 8005cc2:	2958      	cmp	r1, #88	; 0x58
 8005cc4:	f000 8083 	beq.w	8005dce <_printf_i+0x136>
 8005cc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ccc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005cd0:	e032      	b.n	8005d38 <_printf_i+0xa0>
 8005cd2:	2964      	cmp	r1, #100	; 0x64
 8005cd4:	d001      	beq.n	8005cda <_printf_i+0x42>
 8005cd6:	2969      	cmp	r1, #105	; 0x69
 8005cd8:	d1f6      	bne.n	8005cc8 <_printf_i+0x30>
 8005cda:	6820      	ldr	r0, [r4, #0]
 8005cdc:	6813      	ldr	r3, [r2, #0]
 8005cde:	0605      	lsls	r5, r0, #24
 8005ce0:	f103 0104 	add.w	r1, r3, #4
 8005ce4:	d52a      	bpl.n	8005d3c <_printf_i+0xa4>
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6011      	str	r1, [r2, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	da03      	bge.n	8005cf6 <_printf_i+0x5e>
 8005cee:	222d      	movs	r2, #45	; 0x2d
 8005cf0:	425b      	negs	r3, r3
 8005cf2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005cf6:	486f      	ldr	r0, [pc, #444]	; (8005eb4 <_printf_i+0x21c>)
 8005cf8:	220a      	movs	r2, #10
 8005cfa:	e039      	b.n	8005d70 <_printf_i+0xd8>
 8005cfc:	2973      	cmp	r1, #115	; 0x73
 8005cfe:	f000 809d 	beq.w	8005e3c <_printf_i+0x1a4>
 8005d02:	d808      	bhi.n	8005d16 <_printf_i+0x7e>
 8005d04:	296f      	cmp	r1, #111	; 0x6f
 8005d06:	d020      	beq.n	8005d4a <_printf_i+0xb2>
 8005d08:	2970      	cmp	r1, #112	; 0x70
 8005d0a:	d1dd      	bne.n	8005cc8 <_printf_i+0x30>
 8005d0c:	6823      	ldr	r3, [r4, #0]
 8005d0e:	f043 0320 	orr.w	r3, r3, #32
 8005d12:	6023      	str	r3, [r4, #0]
 8005d14:	e003      	b.n	8005d1e <_printf_i+0x86>
 8005d16:	2975      	cmp	r1, #117	; 0x75
 8005d18:	d017      	beq.n	8005d4a <_printf_i+0xb2>
 8005d1a:	2978      	cmp	r1, #120	; 0x78
 8005d1c:	d1d4      	bne.n	8005cc8 <_printf_i+0x30>
 8005d1e:	2378      	movs	r3, #120	; 0x78
 8005d20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d24:	4864      	ldr	r0, [pc, #400]	; (8005eb8 <_printf_i+0x220>)
 8005d26:	e055      	b.n	8005dd4 <_printf_i+0x13c>
 8005d28:	6813      	ldr	r3, [r2, #0]
 8005d2a:	1d19      	adds	r1, r3, #4
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	6011      	str	r1, [r2, #0]
 8005d30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e08c      	b.n	8005e56 <_printf_i+0x1be>
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6011      	str	r1, [r2, #0]
 8005d40:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d44:	bf18      	it	ne
 8005d46:	b21b      	sxthne	r3, r3
 8005d48:	e7cf      	b.n	8005cea <_printf_i+0x52>
 8005d4a:	6813      	ldr	r3, [r2, #0]
 8005d4c:	6825      	ldr	r5, [r4, #0]
 8005d4e:	1d18      	adds	r0, r3, #4
 8005d50:	6010      	str	r0, [r2, #0]
 8005d52:	0628      	lsls	r0, r5, #24
 8005d54:	d501      	bpl.n	8005d5a <_printf_i+0xc2>
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	e002      	b.n	8005d60 <_printf_i+0xc8>
 8005d5a:	0668      	lsls	r0, r5, #25
 8005d5c:	d5fb      	bpl.n	8005d56 <_printf_i+0xbe>
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	4854      	ldr	r0, [pc, #336]	; (8005eb4 <_printf_i+0x21c>)
 8005d62:	296f      	cmp	r1, #111	; 0x6f
 8005d64:	bf14      	ite	ne
 8005d66:	220a      	movne	r2, #10
 8005d68:	2208      	moveq	r2, #8
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d70:	6865      	ldr	r5, [r4, #4]
 8005d72:	60a5      	str	r5, [r4, #8]
 8005d74:	2d00      	cmp	r5, #0
 8005d76:	f2c0 8095 	blt.w	8005ea4 <_printf_i+0x20c>
 8005d7a:	6821      	ldr	r1, [r4, #0]
 8005d7c:	f021 0104 	bic.w	r1, r1, #4
 8005d80:	6021      	str	r1, [r4, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d13d      	bne.n	8005e02 <_printf_i+0x16a>
 8005d86:	2d00      	cmp	r5, #0
 8005d88:	f040 808e 	bne.w	8005ea8 <_printf_i+0x210>
 8005d8c:	4665      	mov	r5, ip
 8005d8e:	2a08      	cmp	r2, #8
 8005d90:	d10b      	bne.n	8005daa <_printf_i+0x112>
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	07db      	lsls	r3, r3, #31
 8005d96:	d508      	bpl.n	8005daa <_printf_i+0x112>
 8005d98:	6923      	ldr	r3, [r4, #16]
 8005d9a:	6862      	ldr	r2, [r4, #4]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	bfde      	ittt	le
 8005da0:	2330      	movle	r3, #48	; 0x30
 8005da2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005da6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005daa:	ebac 0305 	sub.w	r3, ip, r5
 8005dae:	6123      	str	r3, [r4, #16]
 8005db0:	f8cd 8000 	str.w	r8, [sp]
 8005db4:	463b      	mov	r3, r7
 8005db6:	aa03      	add	r2, sp, #12
 8005db8:	4621      	mov	r1, r4
 8005dba:	4630      	mov	r0, r6
 8005dbc:	f7ff fef6 	bl	8005bac <_printf_common>
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	d14d      	bne.n	8005e60 <_printf_i+0x1c8>
 8005dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dc8:	b005      	add	sp, #20
 8005dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005dce:	4839      	ldr	r0, [pc, #228]	; (8005eb4 <_printf_i+0x21c>)
 8005dd0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005dd4:	6813      	ldr	r3, [r2, #0]
 8005dd6:	6821      	ldr	r1, [r4, #0]
 8005dd8:	1d1d      	adds	r5, r3, #4
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6015      	str	r5, [r2, #0]
 8005dde:	060a      	lsls	r2, r1, #24
 8005de0:	d50b      	bpl.n	8005dfa <_printf_i+0x162>
 8005de2:	07ca      	lsls	r2, r1, #31
 8005de4:	bf44      	itt	mi
 8005de6:	f041 0120 	orrmi.w	r1, r1, #32
 8005dea:	6021      	strmi	r1, [r4, #0]
 8005dec:	b91b      	cbnz	r3, 8005df6 <_printf_i+0x15e>
 8005dee:	6822      	ldr	r2, [r4, #0]
 8005df0:	f022 0220 	bic.w	r2, r2, #32
 8005df4:	6022      	str	r2, [r4, #0]
 8005df6:	2210      	movs	r2, #16
 8005df8:	e7b7      	b.n	8005d6a <_printf_i+0xd2>
 8005dfa:	064d      	lsls	r5, r1, #25
 8005dfc:	bf48      	it	mi
 8005dfe:	b29b      	uxthmi	r3, r3
 8005e00:	e7ef      	b.n	8005de2 <_printf_i+0x14a>
 8005e02:	4665      	mov	r5, ip
 8005e04:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e08:	fb02 3311 	mls	r3, r2, r1, r3
 8005e0c:	5cc3      	ldrb	r3, [r0, r3]
 8005e0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005e12:	460b      	mov	r3, r1
 8005e14:	2900      	cmp	r1, #0
 8005e16:	d1f5      	bne.n	8005e04 <_printf_i+0x16c>
 8005e18:	e7b9      	b.n	8005d8e <_printf_i+0xf6>
 8005e1a:	6813      	ldr	r3, [r2, #0]
 8005e1c:	6825      	ldr	r5, [r4, #0]
 8005e1e:	6961      	ldr	r1, [r4, #20]
 8005e20:	1d18      	adds	r0, r3, #4
 8005e22:	6010      	str	r0, [r2, #0]
 8005e24:	0628      	lsls	r0, r5, #24
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	d501      	bpl.n	8005e2e <_printf_i+0x196>
 8005e2a:	6019      	str	r1, [r3, #0]
 8005e2c:	e002      	b.n	8005e34 <_printf_i+0x19c>
 8005e2e:	066a      	lsls	r2, r5, #25
 8005e30:	d5fb      	bpl.n	8005e2a <_printf_i+0x192>
 8005e32:	8019      	strh	r1, [r3, #0]
 8005e34:	2300      	movs	r3, #0
 8005e36:	6123      	str	r3, [r4, #16]
 8005e38:	4665      	mov	r5, ip
 8005e3a:	e7b9      	b.n	8005db0 <_printf_i+0x118>
 8005e3c:	6813      	ldr	r3, [r2, #0]
 8005e3e:	1d19      	adds	r1, r3, #4
 8005e40:	6011      	str	r1, [r2, #0]
 8005e42:	681d      	ldr	r5, [r3, #0]
 8005e44:	6862      	ldr	r2, [r4, #4]
 8005e46:	2100      	movs	r1, #0
 8005e48:	4628      	mov	r0, r5
 8005e4a:	f7fa f9d1 	bl	80001f0 <memchr>
 8005e4e:	b108      	cbz	r0, 8005e54 <_printf_i+0x1bc>
 8005e50:	1b40      	subs	r0, r0, r5
 8005e52:	6060      	str	r0, [r4, #4]
 8005e54:	6863      	ldr	r3, [r4, #4]
 8005e56:	6123      	str	r3, [r4, #16]
 8005e58:	2300      	movs	r3, #0
 8005e5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e5e:	e7a7      	b.n	8005db0 <_printf_i+0x118>
 8005e60:	6923      	ldr	r3, [r4, #16]
 8005e62:	462a      	mov	r2, r5
 8005e64:	4639      	mov	r1, r7
 8005e66:	4630      	mov	r0, r6
 8005e68:	47c0      	blx	r8
 8005e6a:	3001      	adds	r0, #1
 8005e6c:	d0aa      	beq.n	8005dc4 <_printf_i+0x12c>
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	079b      	lsls	r3, r3, #30
 8005e72:	d413      	bmi.n	8005e9c <_printf_i+0x204>
 8005e74:	68e0      	ldr	r0, [r4, #12]
 8005e76:	9b03      	ldr	r3, [sp, #12]
 8005e78:	4298      	cmp	r0, r3
 8005e7a:	bfb8      	it	lt
 8005e7c:	4618      	movlt	r0, r3
 8005e7e:	e7a3      	b.n	8005dc8 <_printf_i+0x130>
 8005e80:	2301      	movs	r3, #1
 8005e82:	464a      	mov	r2, r9
 8005e84:	4639      	mov	r1, r7
 8005e86:	4630      	mov	r0, r6
 8005e88:	47c0      	blx	r8
 8005e8a:	3001      	adds	r0, #1
 8005e8c:	d09a      	beq.n	8005dc4 <_printf_i+0x12c>
 8005e8e:	3501      	adds	r5, #1
 8005e90:	68e3      	ldr	r3, [r4, #12]
 8005e92:	9a03      	ldr	r2, [sp, #12]
 8005e94:	1a9b      	subs	r3, r3, r2
 8005e96:	42ab      	cmp	r3, r5
 8005e98:	dcf2      	bgt.n	8005e80 <_printf_i+0x1e8>
 8005e9a:	e7eb      	b.n	8005e74 <_printf_i+0x1dc>
 8005e9c:	2500      	movs	r5, #0
 8005e9e:	f104 0919 	add.w	r9, r4, #25
 8005ea2:	e7f5      	b.n	8005e90 <_printf_i+0x1f8>
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1ac      	bne.n	8005e02 <_printf_i+0x16a>
 8005ea8:	7803      	ldrb	r3, [r0, #0]
 8005eaa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005eae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005eb2:	e76c      	b.n	8005d8e <_printf_i+0xf6>
 8005eb4:	080061a1 	.word	0x080061a1
 8005eb8:	080061b2 	.word	0x080061b2

08005ebc <memmove>:
 8005ebc:	4288      	cmp	r0, r1
 8005ebe:	b510      	push	{r4, lr}
 8005ec0:	eb01 0302 	add.w	r3, r1, r2
 8005ec4:	d807      	bhi.n	8005ed6 <memmove+0x1a>
 8005ec6:	1e42      	subs	r2, r0, #1
 8005ec8:	4299      	cmp	r1, r3
 8005eca:	d00a      	beq.n	8005ee2 <memmove+0x26>
 8005ecc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ed0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005ed4:	e7f8      	b.n	8005ec8 <memmove+0xc>
 8005ed6:	4283      	cmp	r3, r0
 8005ed8:	d9f5      	bls.n	8005ec6 <memmove+0xa>
 8005eda:	1881      	adds	r1, r0, r2
 8005edc:	1ad2      	subs	r2, r2, r3
 8005ede:	42d3      	cmn	r3, r2
 8005ee0:	d100      	bne.n	8005ee4 <memmove+0x28>
 8005ee2:	bd10      	pop	{r4, pc}
 8005ee4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ee8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005eec:	e7f7      	b.n	8005ede <memmove+0x22>
	...

08005ef0 <_free_r>:
 8005ef0:	b538      	push	{r3, r4, r5, lr}
 8005ef2:	4605      	mov	r5, r0
 8005ef4:	2900      	cmp	r1, #0
 8005ef6:	d045      	beq.n	8005f84 <_free_r+0x94>
 8005ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005efc:	1f0c      	subs	r4, r1, #4
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	bfb8      	it	lt
 8005f02:	18e4      	addlt	r4, r4, r3
 8005f04:	f000 f8d2 	bl	80060ac <__malloc_lock>
 8005f08:	4a1f      	ldr	r2, [pc, #124]	; (8005f88 <_free_r+0x98>)
 8005f0a:	6813      	ldr	r3, [r2, #0]
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	b933      	cbnz	r3, 8005f1e <_free_r+0x2e>
 8005f10:	6063      	str	r3, [r4, #4]
 8005f12:	6014      	str	r4, [r2, #0]
 8005f14:	4628      	mov	r0, r5
 8005f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f1a:	f000 b8c8 	b.w	80060ae <__malloc_unlock>
 8005f1e:	42a3      	cmp	r3, r4
 8005f20:	d90c      	bls.n	8005f3c <_free_r+0x4c>
 8005f22:	6821      	ldr	r1, [r4, #0]
 8005f24:	1862      	adds	r2, r4, r1
 8005f26:	4293      	cmp	r3, r2
 8005f28:	bf04      	itt	eq
 8005f2a:	681a      	ldreq	r2, [r3, #0]
 8005f2c:	685b      	ldreq	r3, [r3, #4]
 8005f2e:	6063      	str	r3, [r4, #4]
 8005f30:	bf04      	itt	eq
 8005f32:	1852      	addeq	r2, r2, r1
 8005f34:	6022      	streq	r2, [r4, #0]
 8005f36:	6004      	str	r4, [r0, #0]
 8005f38:	e7ec      	b.n	8005f14 <_free_r+0x24>
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	b10a      	cbz	r2, 8005f44 <_free_r+0x54>
 8005f40:	42a2      	cmp	r2, r4
 8005f42:	d9fa      	bls.n	8005f3a <_free_r+0x4a>
 8005f44:	6819      	ldr	r1, [r3, #0]
 8005f46:	1858      	adds	r0, r3, r1
 8005f48:	42a0      	cmp	r0, r4
 8005f4a:	d10b      	bne.n	8005f64 <_free_r+0x74>
 8005f4c:	6820      	ldr	r0, [r4, #0]
 8005f4e:	4401      	add	r1, r0
 8005f50:	1858      	adds	r0, r3, r1
 8005f52:	4282      	cmp	r2, r0
 8005f54:	6019      	str	r1, [r3, #0]
 8005f56:	d1dd      	bne.n	8005f14 <_free_r+0x24>
 8005f58:	6810      	ldr	r0, [r2, #0]
 8005f5a:	6852      	ldr	r2, [r2, #4]
 8005f5c:	605a      	str	r2, [r3, #4]
 8005f5e:	4401      	add	r1, r0
 8005f60:	6019      	str	r1, [r3, #0]
 8005f62:	e7d7      	b.n	8005f14 <_free_r+0x24>
 8005f64:	d902      	bls.n	8005f6c <_free_r+0x7c>
 8005f66:	230c      	movs	r3, #12
 8005f68:	602b      	str	r3, [r5, #0]
 8005f6a:	e7d3      	b.n	8005f14 <_free_r+0x24>
 8005f6c:	6820      	ldr	r0, [r4, #0]
 8005f6e:	1821      	adds	r1, r4, r0
 8005f70:	428a      	cmp	r2, r1
 8005f72:	bf04      	itt	eq
 8005f74:	6811      	ldreq	r1, [r2, #0]
 8005f76:	6852      	ldreq	r2, [r2, #4]
 8005f78:	6062      	str	r2, [r4, #4]
 8005f7a:	bf04      	itt	eq
 8005f7c:	1809      	addeq	r1, r1, r0
 8005f7e:	6021      	streq	r1, [r4, #0]
 8005f80:	605c      	str	r4, [r3, #4]
 8005f82:	e7c7      	b.n	8005f14 <_free_r+0x24>
 8005f84:	bd38      	pop	{r3, r4, r5, pc}
 8005f86:	bf00      	nop
 8005f88:	20012eac 	.word	0x20012eac

08005f8c <_malloc_r>:
 8005f8c:	b570      	push	{r4, r5, r6, lr}
 8005f8e:	1ccd      	adds	r5, r1, #3
 8005f90:	f025 0503 	bic.w	r5, r5, #3
 8005f94:	3508      	adds	r5, #8
 8005f96:	2d0c      	cmp	r5, #12
 8005f98:	bf38      	it	cc
 8005f9a:	250c      	movcc	r5, #12
 8005f9c:	2d00      	cmp	r5, #0
 8005f9e:	4606      	mov	r6, r0
 8005fa0:	db01      	blt.n	8005fa6 <_malloc_r+0x1a>
 8005fa2:	42a9      	cmp	r1, r5
 8005fa4:	d903      	bls.n	8005fae <_malloc_r+0x22>
 8005fa6:	230c      	movs	r3, #12
 8005fa8:	6033      	str	r3, [r6, #0]
 8005faa:	2000      	movs	r0, #0
 8005fac:	bd70      	pop	{r4, r5, r6, pc}
 8005fae:	f000 f87d 	bl	80060ac <__malloc_lock>
 8005fb2:	4a21      	ldr	r2, [pc, #132]	; (8006038 <_malloc_r+0xac>)
 8005fb4:	6814      	ldr	r4, [r2, #0]
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	b991      	cbnz	r1, 8005fe0 <_malloc_r+0x54>
 8005fba:	4c20      	ldr	r4, [pc, #128]	; (800603c <_malloc_r+0xb0>)
 8005fbc:	6823      	ldr	r3, [r4, #0]
 8005fbe:	b91b      	cbnz	r3, 8005fc8 <_malloc_r+0x3c>
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	f000 f863 	bl	800608c <_sbrk_r>
 8005fc6:	6020      	str	r0, [r4, #0]
 8005fc8:	4629      	mov	r1, r5
 8005fca:	4630      	mov	r0, r6
 8005fcc:	f000 f85e 	bl	800608c <_sbrk_r>
 8005fd0:	1c43      	adds	r3, r0, #1
 8005fd2:	d124      	bne.n	800601e <_malloc_r+0x92>
 8005fd4:	230c      	movs	r3, #12
 8005fd6:	6033      	str	r3, [r6, #0]
 8005fd8:	4630      	mov	r0, r6
 8005fda:	f000 f868 	bl	80060ae <__malloc_unlock>
 8005fde:	e7e4      	b.n	8005faa <_malloc_r+0x1e>
 8005fe0:	680b      	ldr	r3, [r1, #0]
 8005fe2:	1b5b      	subs	r3, r3, r5
 8005fe4:	d418      	bmi.n	8006018 <_malloc_r+0x8c>
 8005fe6:	2b0b      	cmp	r3, #11
 8005fe8:	d90f      	bls.n	800600a <_malloc_r+0x7e>
 8005fea:	600b      	str	r3, [r1, #0]
 8005fec:	50cd      	str	r5, [r1, r3]
 8005fee:	18cc      	adds	r4, r1, r3
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	f000 f85c 	bl	80060ae <__malloc_unlock>
 8005ff6:	f104 000b 	add.w	r0, r4, #11
 8005ffa:	1d23      	adds	r3, r4, #4
 8005ffc:	f020 0007 	bic.w	r0, r0, #7
 8006000:	1ac3      	subs	r3, r0, r3
 8006002:	d0d3      	beq.n	8005fac <_malloc_r+0x20>
 8006004:	425a      	negs	r2, r3
 8006006:	50e2      	str	r2, [r4, r3]
 8006008:	e7d0      	b.n	8005fac <_malloc_r+0x20>
 800600a:	428c      	cmp	r4, r1
 800600c:	684b      	ldr	r3, [r1, #4]
 800600e:	bf16      	itet	ne
 8006010:	6063      	strne	r3, [r4, #4]
 8006012:	6013      	streq	r3, [r2, #0]
 8006014:	460c      	movne	r4, r1
 8006016:	e7eb      	b.n	8005ff0 <_malloc_r+0x64>
 8006018:	460c      	mov	r4, r1
 800601a:	6849      	ldr	r1, [r1, #4]
 800601c:	e7cc      	b.n	8005fb8 <_malloc_r+0x2c>
 800601e:	1cc4      	adds	r4, r0, #3
 8006020:	f024 0403 	bic.w	r4, r4, #3
 8006024:	42a0      	cmp	r0, r4
 8006026:	d005      	beq.n	8006034 <_malloc_r+0xa8>
 8006028:	1a21      	subs	r1, r4, r0
 800602a:	4630      	mov	r0, r6
 800602c:	f000 f82e 	bl	800608c <_sbrk_r>
 8006030:	3001      	adds	r0, #1
 8006032:	d0cf      	beq.n	8005fd4 <_malloc_r+0x48>
 8006034:	6025      	str	r5, [r4, #0]
 8006036:	e7db      	b.n	8005ff0 <_malloc_r+0x64>
 8006038:	20012eac 	.word	0x20012eac
 800603c:	20012eb0 	.word	0x20012eb0

08006040 <_realloc_r>:
 8006040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006042:	4607      	mov	r7, r0
 8006044:	4614      	mov	r4, r2
 8006046:	460e      	mov	r6, r1
 8006048:	b921      	cbnz	r1, 8006054 <_realloc_r+0x14>
 800604a:	4611      	mov	r1, r2
 800604c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006050:	f7ff bf9c 	b.w	8005f8c <_malloc_r>
 8006054:	b922      	cbnz	r2, 8006060 <_realloc_r+0x20>
 8006056:	f7ff ff4b 	bl	8005ef0 <_free_r>
 800605a:	4625      	mov	r5, r4
 800605c:	4628      	mov	r0, r5
 800605e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006060:	f000 f826 	bl	80060b0 <_malloc_usable_size_r>
 8006064:	42a0      	cmp	r0, r4
 8006066:	d20f      	bcs.n	8006088 <_realloc_r+0x48>
 8006068:	4621      	mov	r1, r4
 800606a:	4638      	mov	r0, r7
 800606c:	f7ff ff8e 	bl	8005f8c <_malloc_r>
 8006070:	4605      	mov	r5, r0
 8006072:	2800      	cmp	r0, #0
 8006074:	d0f2      	beq.n	800605c <_realloc_r+0x1c>
 8006076:	4631      	mov	r1, r6
 8006078:	4622      	mov	r2, r4
 800607a:	f7ff fc11 	bl	80058a0 <memcpy>
 800607e:	4631      	mov	r1, r6
 8006080:	4638      	mov	r0, r7
 8006082:	f7ff ff35 	bl	8005ef0 <_free_r>
 8006086:	e7e9      	b.n	800605c <_realloc_r+0x1c>
 8006088:	4635      	mov	r5, r6
 800608a:	e7e7      	b.n	800605c <_realloc_r+0x1c>

0800608c <_sbrk_r>:
 800608c:	b538      	push	{r3, r4, r5, lr}
 800608e:	4c06      	ldr	r4, [pc, #24]	; (80060a8 <_sbrk_r+0x1c>)
 8006090:	2300      	movs	r3, #0
 8006092:	4605      	mov	r5, r0
 8006094:	4608      	mov	r0, r1
 8006096:	6023      	str	r3, [r4, #0]
 8006098:	f7fa fe7c 	bl	8000d94 <_sbrk>
 800609c:	1c43      	adds	r3, r0, #1
 800609e:	d102      	bne.n	80060a6 <_sbrk_r+0x1a>
 80060a0:	6823      	ldr	r3, [r4, #0]
 80060a2:	b103      	cbz	r3, 80060a6 <_sbrk_r+0x1a>
 80060a4:	602b      	str	r3, [r5, #0]
 80060a6:	bd38      	pop	{r3, r4, r5, pc}
 80060a8:	20012f7c 	.word	0x20012f7c

080060ac <__malloc_lock>:
 80060ac:	4770      	bx	lr

080060ae <__malloc_unlock>:
 80060ae:	4770      	bx	lr

080060b0 <_malloc_usable_size_r>:
 80060b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060b4:	1f18      	subs	r0, r3, #4
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	bfbc      	itt	lt
 80060ba:	580b      	ldrlt	r3, [r1, r0]
 80060bc:	18c0      	addlt	r0, r0, r3
 80060be:	4770      	bx	lr

080060c0 <_init>:
 80060c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c2:	bf00      	nop
 80060c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060c6:	bc08      	pop	{r3}
 80060c8:	469e      	mov	lr, r3
 80060ca:	4770      	bx	lr

080060cc <_fini>:
 80060cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ce:	bf00      	nop
 80060d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060d2:	bc08      	pop	{r3}
 80060d4:	469e      	mov	lr, r3
 80060d6:	4770      	bx	lr
