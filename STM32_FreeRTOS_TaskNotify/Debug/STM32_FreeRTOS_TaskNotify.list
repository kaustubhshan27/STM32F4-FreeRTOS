
STM32_FreeRTOS_TaskNotify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005688  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08005828  08005828  00015828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058d8  080058d8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080058d8  080058d8  000158d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058e0  080058e0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058e0  080058e0  000158e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058e4  080058e4  000158e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080058e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e90  20000074  0800595c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012f04  0800595c  00022f04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001296b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029c1  00000000  00000000  00032a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001058  00000000  00000000  000353d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f20  00000000  00000000  00036428  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017ac4  00000000  00000000  00037348  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c9b8  00000000  00000000  0004ee0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000940cc  00000000  00000000  0005b7c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ef890  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046ec  00000000  00000000  000ef90c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005810 	.word	0x08005810

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005810 	.word	0x08005810

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f000 fb25 	bl	8000be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f829 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 f8af 	bl	8000700 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a2:	f000 f883 	bl	80006ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  xTaskCreate((pdTASK_CODE) vButtonTask_handler, "Button Task", 1000, NULL, 1,
 80005a6:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <main+0x48>)
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2300      	movs	r3, #0
 80005b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005b4:	4909      	ldr	r1, [pc, #36]	; (80005dc <main+0x4c>)
 80005b6:	480a      	ldr	r0, [pc, #40]	; (80005e0 <main+0x50>)
 80005b8:	f002 feaa 	bl	8003310 <xTaskCreate>
			&xTaskHandle_button);
  xTaskCreate((pdTASK_CODE) vLEDTask_handler, "LED Task", 1000, NULL, 1,
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <main+0x54>)
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	2301      	movs	r3, #1
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	2300      	movs	r3, #0
 80005c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005ca:	4907      	ldr	r1, [pc, #28]	; (80005e8 <main+0x58>)
 80005cc:	4807      	ldr	r0, [pc, #28]	; (80005ec <main+0x5c>)
 80005ce:	f002 fe9f 	bl	8003310 <xTaskCreate>
			&xTaskHandle_led);

  vTaskStartScheduler();
 80005d2:	f002 ffdf 	bl	8003594 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80005d6:	e7fe      	b.n	80005d6 <main+0x46>
 80005d8:	20000090 	.word	0x20000090
 80005dc:	08005828 	.word	0x08005828
 80005e0:	080007f9 	.word	0x080007f9
 80005e4:	20000094 	.word	0x20000094
 80005e8:	08005834 	.word	0x08005834
 80005ec:	080007b9 	.word	0x080007b9

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f004 fd01 	bl	8005006 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <SystemClock_Config+0xb4>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <SystemClock_Config+0xb4>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <SystemClock_Config+0xb4>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b1c      	ldr	r3, [pc, #112]	; (80006a8 <SystemClock_Config+0xb8>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a1b      	ldr	r2, [pc, #108]	; (80006a8 <SystemClock_Config+0xb8>)
 800063a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b19      	ldr	r3, [pc, #100]	; (80006a8 <SystemClock_Config+0xb8>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000654:	2310      	movs	r3, #16
 8000656:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000658:	2300      	movs	r3, #0
 800065a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 0320 	add.w	r3, r7, #32
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fdaf 	bl	80011c4 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800066c:	f000 f953 	bl	8000916 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f001 f80a 	bl	80016a4 <HAL_RCC_ClockConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000696:	f000 f93e 	bl	8000916 <Error_Handler>
  }
}
 800069a:	bf00      	nop
 800069c:	3750      	adds	r7, #80	; 0x50
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <MX_USART2_UART_Init+0x50>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_USART2_UART_Init+0x4c>)
 80006e4:	f001 fbfa 	bl	8001edc <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ee:	f000 f912 	bl	8000916 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20012e3c 	.word	0x20012e3c
 80006fc:	40004400 	.word	0x40004400

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	4b23      	ldr	r3, [pc, #140]	; (80007a8 <MX_GPIO_Init+0xa8>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a22      	ldr	r2, [pc, #136]	; (80007a8 <MX_GPIO_Init+0xa8>)
 8000720:	f043 0304 	orr.w	r3, r3, #4
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <MX_GPIO_Init+0xa8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0304 	and.w	r3, r3, #4
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <MX_GPIO_Init+0xa8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a1b      	ldr	r2, [pc, #108]	; (80007a8 <MX_GPIO_Init+0xa8>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <MX_GPIO_Init+0xa8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2120      	movs	r1, #32
 8000752:	4816      	ldr	r0, [pc, #88]	; (80007ac <MX_GPIO_Init+0xac>)
 8000754:	f000 fd04 	bl	8001160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_GPIO_Init+0xb0>)
 8000760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	4619      	mov	r1, r3
 800076c:	4811      	ldr	r0, [pc, #68]	; (80007b4 <MX_GPIO_Init+0xb4>)
 800076e:	f000 fb5d 	bl	8000e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000772:	2320      	movs	r3, #32
 8000774:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	2301      	movs	r3, #1
 8000778:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	4619      	mov	r1, r3
 8000788:	4808      	ldr	r0, [pc, #32]	; (80007ac <MX_GPIO_Init+0xac>)
 800078a:	f000 fb4f 	bl	8000e2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 10, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	210a      	movs	r1, #10
 8000792:	2028      	movs	r0, #40	; 0x28
 8000794:	f000 fb20 	bl	8000dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000798:	2028      	movs	r0, #40	; 0x28
 800079a:	f000 fb39 	bl	8000e10 <HAL_NVIC_EnableIRQ>

}
 800079e:	bf00      	nop
 80007a0:	3720      	adds	r7, #32
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40020000 	.word	0x40020000
 80007b0:	10110000 	.word	0x10110000
 80007b4:	40020800 	.word	0x40020800

080007b8 <vLEDTask_handler>:

/* USER CODE BEGIN 4 */
void vLEDTask_handler(void) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
	uint32_t current_notification_value = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
	while (1) {
		//wait until we receive any notification event from button task
		if (xTaskNotifyWait((uint32_t) 0, (uint32_t) 0, &current_notification_value,
 80007c2:	1d3a      	adds	r2, r7, #4
 80007c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007c8:	2100      	movs	r1, #0
 80007ca:	2000      	movs	r0, #0
 80007cc:	f003 fb94 	bl	8003ef8 <xTaskNotifyWait>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d1f5      	bne.n	80007c2 <vLEDTask_handler+0xa>
				portMAX_DELAY) == pdTRUE) {
			toggle_LED();
 80007d6:	f000 f825 	bl	8000824 <toggle_LED>
			sprintf(usr_msg, "Notification received - Button Press Count = %lu\r\n", current_notification_value);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	461a      	mov	r2, r3
 80007de:	4904      	ldr	r1, [pc, #16]	; (80007f0 <vLEDTask_handler+0x38>)
 80007e0:	4804      	ldr	r0, [pc, #16]	; (80007f4 <vLEDTask_handler+0x3c>)
 80007e2:	f004 fc19 	bl	8005018 <siprintf>
			printmsg(usr_msg);
 80007e6:	4803      	ldr	r0, [pc, #12]	; (80007f4 <vLEDTask_handler+0x3c>)
 80007e8:	f000 f86a 	bl	80008c0 <printmsg>
		if (xTaskNotifyWait((uint32_t) 0, (uint32_t) 0, &current_notification_value,
 80007ec:	e7e9      	b.n	80007c2 <vLEDTask_handler+0xa>
 80007ee:	bf00      	nop
 80007f0:	08005840 	.word	0x08005840
 80007f4:	20012e08 	.word	0x20012e08

080007f8 <vButtonTask_handler>:
		}
	}
}

void vButtonTask_handler(void) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	while (1) {
		if(button_status == PRESSED)
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <vButtonTask_handler+0x24>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d0fb      	beq.n	80007fc <vButtonTask_handler+0x4>
		{
			xTaskNotify(xTaskHandle_led, (uint32_t) 0, eIncrement);
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <vButtonTask_handler+0x28>)
 8000806:	6818      	ldr	r0, [r3, #0]
 8000808:	2300      	movs	r3, #0
 800080a:	2202      	movs	r2, #2
 800080c:	2100      	movs	r1, #0
 800080e:	f003 fbcd 	bl	8003fac <xTaskGenericNotify>
			button_status = NOT_PRESSED;
 8000812:	4b02      	ldr	r3, [pc, #8]	; (800081c <vButtonTask_handler+0x24>)
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
		if(button_status == PRESSED)
 8000818:	e7f0      	b.n	80007fc <vButtonTask_handler+0x4>
 800081a:	bf00      	nop
 800081c:	20000098 	.word	0x20000098
 8000820:	20000094 	.word	0x20000094

08000824 <toggle_LED>:
		}
	}
}

void toggle_LED(void) {
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5))
 8000828:	2120      	movs	r1, #32
 800082a:	4809      	ldr	r0, [pc, #36]	; (8000850 <toggle_LED+0x2c>)
 800082c:	f000 fc80 	bl	8001130 <HAL_GPIO_ReadPin>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d105      	bne.n	8000842 <toggle_LED+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000836:	2201      	movs	r2, #1
 8000838:	2120      	movs	r1, #32
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <toggle_LED+0x2c>)
 800083c:	f000 fc90 	bl	8001160 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
}
 8000840:	e004      	b.n	800084c <toggle_LED+0x28>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2120      	movs	r1, #32
 8000846:	4802      	ldr	r0, [pc, #8]	; (8000850 <toggle_LED+0x2c>)
 8000848:	f000 fc8a 	bl	8001160 <HAL_GPIO_WritePin>
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40020000 	.word	0x40020000

08000854 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 800085e:	88fb      	ldrh	r3, [r7, #6]
 8000860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000864:	d105      	bne.n	8000872 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		button_status = PRESSED;
 8000866:	4b05      	ldr	r3, [pc, #20]	; (800087c <HAL_GPIO_EXTI_Callback+0x28>)
 8000868:	2201      	movs	r2, #1
 800086a:	701a      	strb	r2, [r3, #0]
		rtos_delay(100); //100ms delay - for button debounce
 800086c:	2064      	movs	r0, #100	; 0x64
 800086e:	f000 f807 	bl	8000880 <rtos_delay>
	}
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000098 	.word	0x20000098

08000880 <rtos_delay>:

void rtos_delay(uint32_t delay_in_ms)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	uint32_t current_ticks = xTaskGetTickCountFromISR();
 8000888:	f002 ff8a 	bl	80037a0 <xTaskGetTickCountFromISR>
 800088c:	60f8      	str	r0, [r7, #12]
	uint32_t delay_in_ticks = pdMS_TO_TICKS(delay_in_ms);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000894:	fb02 f303 	mul.w	r3, r2, r3
 8000898:	4a08      	ldr	r2, [pc, #32]	; (80008bc <rtos_delay+0x3c>)
 800089a:	fba2 2303 	umull	r2, r3, r2, r3
 800089e:	099b      	lsrs	r3, r3, #6
 80008a0:	60bb      	str	r3, [r7, #8]
	while(xTaskGetTickCountFromISR() < (current_ticks + delay_in_ticks));
 80008a2:	bf00      	nop
 80008a4:	f002 ff7c 	bl	80037a0 <xTaskGetTickCountFromISR>
 80008a8:	4601      	mov	r1, r0
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	4413      	add	r3, r2
 80008b0:	4299      	cmp	r1, r3
 80008b2:	d3f7      	bcc.n	80008a4 <rtos_delay+0x24>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	10624dd3 	.word	0x10624dd3

080008c0 <printmsg>:

void printmsg(const char *msg) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	while (HAL_UART_GetState(&huart2) == HAL_UART_STATE_BUSY_TX);
 80008c8:	bf00      	nop
 80008ca:	480a      	ldr	r0, [pc, #40]	; (80008f4 <printmsg+0x34>)
 80008cc:	f001 fbec 	bl	80020a8 <HAL_UART_GetState>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b21      	cmp	r3, #33	; 0x21
 80008d4:	d0f9      	beq.n	80008ca <printmsg+0xa>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, (uint16_t) strlen(msg),
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff fc82 	bl	80001e0 <strlen>
 80008dc:	4603      	mov	r3, r0
 80008de:	b29a      	uxth	r2, r3
 80008e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008e4:	6879      	ldr	r1, [r7, #4]
 80008e6:	4803      	ldr	r0, [pc, #12]	; (80008f4 <printmsg+0x34>)
 80008e8:	f001 fb45 	bl	8001f76 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20012e3c 	.word	0x20012e3c

080008f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000908:	d101      	bne.n	800090e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800090a:	f000 f98d 	bl	8000c28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <HAL_MspInit+0x4c>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	4a0f      	ldr	r2, [pc, #60]	; (8000970 <HAL_MspInit+0x4c>)
 8000934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000938:	6453      	str	r3, [r2, #68]	; 0x44
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <HAL_MspInit+0x4c>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	4a08      	ldr	r2, [pc, #32]	; (8000970 <HAL_MspInit+0x4c>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000954:	6413      	str	r3, [r2, #64]	; 0x40
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800

08000974 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a19      	ldr	r2, [pc, #100]	; (80009f8 <HAL_UART_MspInit+0x84>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d12b      	bne.n	80009ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <HAL_UART_MspInit+0x88>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	4a17      	ldr	r2, [pc, #92]	; (80009fc <HAL_UART_MspInit+0x88>)
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a4:	6413      	str	r3, [r2, #64]	; 0x40
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <HAL_UART_MspInit+0x88>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <HAL_UART_MspInit+0x88>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a10      	ldr	r2, [pc, #64]	; (80009fc <HAL_UART_MspInit+0x88>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <HAL_UART_MspInit+0x88>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009ce:	230c      	movs	r3, #12
 80009d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009da:	2303      	movs	r3, #3
 80009dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009de:	2307      	movs	r3, #7
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	; (8000a00 <HAL_UART_MspInit+0x8c>)
 80009ea:	f000 fa1f 	bl	8000e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ee:	bf00      	nop
 80009f0:	3728      	adds	r7, #40	; 0x28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40004400 	.word	0x40004400
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40020000 	.word	0x40020000

08000a04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08c      	sub	sp, #48	; 0x30
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8000a14:	2200      	movs	r2, #0
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	201c      	movs	r0, #28
 8000a1a:	f000 f9dd 	bl	8000dd8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8000a1e:	201c      	movs	r0, #28
 8000a20:	f000 f9f6 	bl	8000e10 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <HAL_InitTick+0xa4>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	4a1e      	ldr	r2, [pc, #120]	; (8000aa8 <HAL_InitTick+0xa4>)
 8000a2e:	f043 0301 	orr.w	r3, r3, #1
 8000a32:	6413      	str	r3, [r2, #64]	; 0x40
 8000a34:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <HAL_InitTick+0xa4>)
 8000a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a40:	f107 0210 	add.w	r2, r7, #16
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4611      	mov	r1, r2
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 fff6 	bl	8001a3c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a50:	f000 ffcc 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 8000a54:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a58:	4a14      	ldr	r2, [pc, #80]	; (8000aac <HAL_InitTick+0xa8>)
 8000a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a5e:	0c9b      	lsrs	r3, r3, #18
 8000a60:	3b01      	subs	r3, #1
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <HAL_InitTick+0xac>)
 8000a66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a6a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8000a6c:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <HAL_InitTick+0xac>)
 8000a6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a72:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000a74:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <HAL_InitTick+0xac>)
 8000a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a78:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <HAL_InitTick+0xac>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <HAL_InitTick+0xac>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000a86:	480a      	ldr	r0, [pc, #40]	; (8000ab0 <HAL_InitTick+0xac>)
 8000a88:	f001 f80a 	bl	8001aa0 <HAL_TIM_Base_Init>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d104      	bne.n	8000a9c <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000a92:	4807      	ldr	r0, [pc, #28]	; (8000ab0 <HAL_InitTick+0xac>)
 8000a94:	f001 f839 	bl	8001b0a <HAL_TIM_Base_Start_IT>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	e000      	b.n	8000a9e <HAL_InitTick+0x9a>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000a9c:	2301      	movs	r3, #1
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3730      	adds	r7, #48	; 0x30
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	431bde83 	.word	0x431bde83
 8000ab0:	20012e7c 	.word	0x20012e7c

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <HardFault_Handler+0x4>

08000ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000acc:	e7fe      	b.n	8000acc <MemManage_Handler+0x4>

08000ace <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad2:	e7fe      	b.n	8000ad2 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000ada <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000aec:	4802      	ldr	r0, [pc, #8]	; (8000af8 <TIM2_IRQHandler+0x10>)
 8000aee:	f001 f830 	bl	8001b52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20012e7c 	.word	0x20012e7c

08000afc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b04:	f000 fb46 	bl	8001194 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <_sbrk+0x50>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d102      	bne.n	8000b22 <_sbrk+0x16>
		heap_end = &end;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <_sbrk+0x50>)
 8000b1e:	4a10      	ldr	r2, [pc, #64]	; (8000b60 <_sbrk+0x54>)
 8000b20:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <_sbrk+0x50>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <_sbrk+0x50>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4413      	add	r3, r2
 8000b30:	466a      	mov	r2, sp
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d907      	bls.n	8000b46 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b36:	f004 fa31 	bl	8004f9c <__errno>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b44:	e006      	b.n	8000b54 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b46:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <_sbrk+0x50>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4a03      	ldr	r2, [pc, #12]	; (8000b5c <_sbrk+0x50>)
 8000b50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000b52:	68fb      	ldr	r3, [r7, #12]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	2000009c 	.word	0x2000009c
 8000b60:	20012f08 	.word	0x20012f08

08000b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <SystemInit+0x28>)
 8000b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b6e:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <SystemInit+0x28>)
 8000b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <SystemInit+0x28>)
 8000b7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b7e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b96:	e003      	b.n	8000ba0 <LoopCopyDataInit>

08000b98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b9e:	3104      	adds	r1, #4

08000ba0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ba0:	480b      	ldr	r0, [pc, #44]	; (8000bd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ba4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ba6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ba8:	d3f6      	bcc.n	8000b98 <CopyDataInit>
  ldr  r2, =_sbss
 8000baa:	4a0b      	ldr	r2, [pc, #44]	; (8000bd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bac:	e002      	b.n	8000bb4 <LoopFillZerobss>

08000bae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bb0:	f842 3b04 	str.w	r3, [r2], #4

08000bb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bb8:	d3f9      	bcc.n	8000bae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bba:	f7ff ffd3 	bl	8000b64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bbe:	f004 f9f3 	bl	8004fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bc2:	f7ff fce5 	bl	8000590 <main>
  bx  lr    
 8000bc6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bc8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000bcc:	080058e8 	.word	0x080058e8
  ldr  r0, =_sdata
 8000bd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000bd4:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000bd8:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000bdc:	20012f04 	.word	0x20012f04

08000be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000be0:	e7fe      	b.n	8000be0 <ADC_IRQHandler>
	...

08000be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <HAL_Init+0x40>)
 8000bee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bf4:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <HAL_Init+0x40>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <HAL_Init+0x40>)
 8000bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <HAL_Init+0x40>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <HAL_Init+0x40>)
 8000c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f000 f8d8 	bl	8000dc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff fef6 	bl	8000a04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c18:	f7ff fe84 	bl	8000924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023c00 	.word	0x40023c00

08000c28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_IncTick+0x20>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	461a      	mov	r2, r3
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_IncTick+0x24>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4413      	add	r3, r2
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <HAL_IncTick+0x24>)
 8000c3a:	6013      	str	r3, [r2, #0]
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	20012ebc 	.word	0x20012ebc

08000c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return uwTick;
 8000c54:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <HAL_GetTick+0x14>)
 8000c56:	681b      	ldr	r3, [r3, #0]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	20012ebc 	.word	0x20012ebc

08000c68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7e:	68ba      	ldr	r2, [r7, #8]
 8000c80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c84:	4013      	ands	r3, r2
 8000c86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9a:	4a04      	ldr	r2, [pc, #16]	; (8000cac <__NVIC_SetPriorityGrouping+0x44>)
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	60d3      	str	r3, [r2, #12]
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	0a1b      	lsrs	r3, r3, #8
 8000cba:	f003 0307 	and.w	r3, r3, #7
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	db0b      	blt.n	8000cf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 021f 	and.w	r2, r3, #31
 8000ce4:	4907      	ldr	r1, [pc, #28]	; (8000d04 <__NVIC_EnableIRQ+0x38>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	095b      	lsrs	r3, r3, #5
 8000cec:	2001      	movs	r0, #1
 8000cee:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000e100 	.word	0xe000e100

08000d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db0a      	blt.n	8000d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	490c      	ldr	r1, [pc, #48]	; (8000d54 <__NVIC_SetPriority+0x4c>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	0112      	lsls	r2, r2, #4
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d30:	e00a      	b.n	8000d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4908      	ldr	r1, [pc, #32]	; (8000d58 <__NVIC_SetPriority+0x50>)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	3b04      	subs	r3, #4
 8000d40:	0112      	lsls	r2, r2, #4
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	440b      	add	r3, r1
 8000d46:	761a      	strb	r2, [r3, #24]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000e100 	.word	0xe000e100
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	; 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f1c3 0307 	rsb	r3, r3, #7
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	bf28      	it	cs
 8000d7a:	2304      	movcs	r3, #4
 8000d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3304      	adds	r3, #4
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	d902      	bls.n	8000d8c <NVIC_EncodePriority+0x30>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3b03      	subs	r3, #3
 8000d8a:	e000      	b.n	8000d8e <NVIC_EncodePriority+0x32>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	401a      	ands	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43d9      	mvns	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	4313      	orrs	r3, r2
         );
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3724      	adds	r7, #36	; 0x24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ff4c 	bl	8000c68 <__NVIC_SetPriorityGrouping>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dea:	f7ff ff61 	bl	8000cb0 <__NVIC_GetPriorityGrouping>
 8000dee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df0:	687a      	ldr	r2, [r7, #4]
 8000df2:	68b9      	ldr	r1, [r7, #8]
 8000df4:	6978      	ldr	r0, [r7, #20]
 8000df6:	f7ff ffb1 	bl	8000d5c <NVIC_EncodePriority>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e00:	4611      	mov	r1, r2
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff80 	bl	8000d08 <__NVIC_SetPriority>
}
 8000e08:	bf00      	nop
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff54 	bl	8000ccc <__NVIC_EnableIRQ>
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	; 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
 8000e46:	e159      	b.n	80010fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e48:	2201      	movs	r2, #1
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	f040 8148 	bne.w	80010f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d00b      	beq.n	8000e86 <HAL_GPIO_Init+0x5a>
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d007      	beq.n	8000e86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e7a:	2b11      	cmp	r3, #17
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b12      	cmp	r3, #18
 8000e84:	d130      	bne.n	8000ee8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	2203      	movs	r2, #3
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	68da      	ldr	r2, [r3, #12]
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	091b      	lsrs	r3, r3, #4
 8000ed2:	f003 0201 	and.w	r2, r3, #1
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	689a      	ldr	r2, [r3, #8]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d003      	beq.n	8000f28 <HAL_GPIO_Init+0xfc>
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2b12      	cmp	r3, #18
 8000f26:	d123      	bne.n	8000f70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	08da      	lsrs	r2, r3, #3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3208      	adds	r2, #8
 8000f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	f003 0307 	and.w	r3, r3, #7
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	220f      	movs	r2, #15
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	691a      	ldr	r2, [r3, #16]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	08da      	lsrs	r2, r3, #3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3208      	adds	r2, #8
 8000f6a:	69b9      	ldr	r1, [r7, #24]
 8000f6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4013      	ands	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0203 	and.w	r2, r3, #3
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 80a2 	beq.w	80010f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	4b56      	ldr	r3, [pc, #344]	; (8001110 <HAL_GPIO_Init+0x2e4>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	4a55      	ldr	r2, [pc, #340]	; (8001110 <HAL_GPIO_Init+0x2e4>)
 8000fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fc2:	4b53      	ldr	r3, [pc, #332]	; (8001110 <HAL_GPIO_Init+0x2e4>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fce:	4a51      	ldr	r2, [pc, #324]	; (8001114 <HAL_GPIO_Init+0x2e8>)
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	089b      	lsrs	r3, r3, #2
 8000fd4:	3302      	adds	r3, #2
 8000fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a48      	ldr	r2, [pc, #288]	; (8001118 <HAL_GPIO_Init+0x2ec>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d019      	beq.n	800102e <HAL_GPIO_Init+0x202>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a47      	ldr	r2, [pc, #284]	; (800111c <HAL_GPIO_Init+0x2f0>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d013      	beq.n	800102a <HAL_GPIO_Init+0x1fe>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a46      	ldr	r2, [pc, #280]	; (8001120 <HAL_GPIO_Init+0x2f4>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d00d      	beq.n	8001026 <HAL_GPIO_Init+0x1fa>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a45      	ldr	r2, [pc, #276]	; (8001124 <HAL_GPIO_Init+0x2f8>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d007      	beq.n	8001022 <HAL_GPIO_Init+0x1f6>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a44      	ldr	r2, [pc, #272]	; (8001128 <HAL_GPIO_Init+0x2fc>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d101      	bne.n	800101e <HAL_GPIO_Init+0x1f2>
 800101a:	2304      	movs	r3, #4
 800101c:	e008      	b.n	8001030 <HAL_GPIO_Init+0x204>
 800101e:	2307      	movs	r3, #7
 8001020:	e006      	b.n	8001030 <HAL_GPIO_Init+0x204>
 8001022:	2303      	movs	r3, #3
 8001024:	e004      	b.n	8001030 <HAL_GPIO_Init+0x204>
 8001026:	2302      	movs	r3, #2
 8001028:	e002      	b.n	8001030 <HAL_GPIO_Init+0x204>
 800102a:	2301      	movs	r3, #1
 800102c:	e000      	b.n	8001030 <HAL_GPIO_Init+0x204>
 800102e:	2300      	movs	r3, #0
 8001030:	69fa      	ldr	r2, [r7, #28]
 8001032:	f002 0203 	and.w	r2, r2, #3
 8001036:	0092      	lsls	r2, r2, #2
 8001038:	4093      	lsls	r3, r2
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001040:	4934      	ldr	r1, [pc, #208]	; (8001114 <HAL_GPIO_Init+0x2e8>)
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	089b      	lsrs	r3, r3, #2
 8001046:	3302      	adds	r3, #2
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800104e:	4b37      	ldr	r3, [pc, #220]	; (800112c <HAL_GPIO_Init+0x300>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001072:	4a2e      	ldr	r2, [pc, #184]	; (800112c <HAL_GPIO_Init+0x300>)
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001078:	4b2c      	ldr	r3, [pc, #176]	; (800112c <HAL_GPIO_Init+0x300>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800109c:	4a23      	ldr	r2, [pc, #140]	; (800112c <HAL_GPIO_Init+0x300>)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010a2:	4b22      	ldr	r3, [pc, #136]	; (800112c <HAL_GPIO_Init+0x300>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010c6:	4a19      	ldr	r2, [pc, #100]	; (800112c <HAL_GPIO_Init+0x300>)
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010cc:	4b17      	ldr	r3, [pc, #92]	; (800112c <HAL_GPIO_Init+0x300>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010f0:	4a0e      	ldr	r2, [pc, #56]	; (800112c <HAL_GPIO_Init+0x300>)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3301      	adds	r3, #1
 80010fa:	61fb      	str	r3, [r7, #28]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	2b0f      	cmp	r3, #15
 8001100:	f67f aea2 	bls.w	8000e48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001104:	bf00      	nop
 8001106:	3724      	adds	r7, #36	; 0x24
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	40023800 	.word	0x40023800
 8001114:	40013800 	.word	0x40013800
 8001118:	40020000 	.word	0x40020000
 800111c:	40020400 	.word	0x40020400
 8001120:	40020800 	.word	0x40020800
 8001124:	40020c00 	.word	0x40020c00
 8001128:	40021000 	.word	0x40021000
 800112c:	40013c00 	.word	0x40013c00

08001130 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	691a      	ldr	r2, [r3, #16]
 8001140:	887b      	ldrh	r3, [r7, #2]
 8001142:	4013      	ands	r3, r2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d002      	beq.n	800114e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	e001      	b.n	8001152 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001152:	7bfb      	ldrb	r3, [r7, #15]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]
 800116c:	4613      	mov	r3, r2
 800116e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001170:	787b      	ldrb	r3, [r7, #1]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001176:	887a      	ldrh	r2, [r7, #2]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800117c:	e003      	b.n	8001186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800117e:	887b      	ldrh	r3, [r7, #2]
 8001180:	041a      	lsls	r2, r3, #16
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	619a      	str	r2, [r3, #24]
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011a0:	695a      	ldr	r2, [r3, #20]
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	4013      	ands	r3, r2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d006      	beq.n	80011b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011aa:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011ac:	88fb      	ldrh	r3, [r7, #6]
 80011ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fb4e 	bl	8000854 <HAL_GPIO_EXTI_Callback>
  }
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40013c00 	.word	0x40013c00

080011c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e25b      	b.n	800168e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d075      	beq.n	80012ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011e2:	4ba3      	ldr	r3, [pc, #652]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	f003 030c 	and.w	r3, r3, #12
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	d00c      	beq.n	8001208 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ee:	4ba0      	ldr	r3, [pc, #640]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011f6:	2b08      	cmp	r3, #8
 80011f8:	d112      	bne.n	8001220 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011fa:	4b9d      	ldr	r3, [pc, #628]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001206:	d10b      	bne.n	8001220 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001208:	4b99      	ldr	r3, [pc, #612]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d05b      	beq.n	80012cc <HAL_RCC_OscConfig+0x108>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d157      	bne.n	80012cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e236      	b.n	800168e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001228:	d106      	bne.n	8001238 <HAL_RCC_OscConfig+0x74>
 800122a:	4b91      	ldr	r3, [pc, #580]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a90      	ldr	r2, [pc, #576]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	e01d      	b.n	8001274 <HAL_RCC_OscConfig+0xb0>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001240:	d10c      	bne.n	800125c <HAL_RCC_OscConfig+0x98>
 8001242:	4b8b      	ldr	r3, [pc, #556]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a8a      	ldr	r2, [pc, #552]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	4b88      	ldr	r3, [pc, #544]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a87      	ldr	r2, [pc, #540]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	e00b      	b.n	8001274 <HAL_RCC_OscConfig+0xb0>
 800125c:	4b84      	ldr	r3, [pc, #528]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a83      	ldr	r2, [pc, #524]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b81      	ldr	r3, [pc, #516]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a80      	ldr	r2, [pc, #512]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 800126e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d013      	beq.n	80012a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127c:	f7ff fce8 	bl	8000c50 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001284:	f7ff fce4 	bl	8000c50 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b64      	cmp	r3, #100	; 0x64
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e1fb      	b.n	800168e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001296:	4b76      	ldr	r3, [pc, #472]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0f0      	beq.n	8001284 <HAL_RCC_OscConfig+0xc0>
 80012a2:	e014      	b.n	80012ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a4:	f7ff fcd4 	bl	8000c50 <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ac:	f7ff fcd0 	bl	8000c50 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b64      	cmp	r3, #100	; 0x64
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e1e7      	b.n	800168e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012be:	4b6c      	ldr	r3, [pc, #432]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f0      	bne.n	80012ac <HAL_RCC_OscConfig+0xe8>
 80012ca:	e000      	b.n	80012ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d063      	beq.n	80013a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012da:	4b65      	ldr	r3, [pc, #404]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 030c 	and.w	r3, r3, #12
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00b      	beq.n	80012fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012e6:	4b62      	ldr	r3, [pc, #392]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012ee:	2b08      	cmp	r3, #8
 80012f0:	d11c      	bne.n	800132c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012f2:	4b5f      	ldr	r3, [pc, #380]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d116      	bne.n	800132c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fe:	4b5c      	ldr	r3, [pc, #368]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d005      	beq.n	8001316 <HAL_RCC_OscConfig+0x152>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d001      	beq.n	8001316 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e1bb      	b.n	800168e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001316:	4b56      	ldr	r3, [pc, #344]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	00db      	lsls	r3, r3, #3
 8001324:	4952      	ldr	r1, [pc, #328]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001326:	4313      	orrs	r3, r2
 8001328:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132a:	e03a      	b.n	80013a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d020      	beq.n	8001376 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001334:	4b4f      	ldr	r3, [pc, #316]	; (8001474 <HAL_RCC_OscConfig+0x2b0>)
 8001336:	2201      	movs	r2, #1
 8001338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133a:	f7ff fc89 	bl	8000c50 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001342:	f7ff fc85 	bl	8000c50 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e19c      	b.n	800168e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001354:	4b46      	ldr	r3, [pc, #280]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0f0      	beq.n	8001342 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001360:	4b43      	ldr	r3, [pc, #268]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	4940      	ldr	r1, [pc, #256]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001370:	4313      	orrs	r3, r2
 8001372:	600b      	str	r3, [r1, #0]
 8001374:	e015      	b.n	80013a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001376:	4b3f      	ldr	r3, [pc, #252]	; (8001474 <HAL_RCC_OscConfig+0x2b0>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137c:	f7ff fc68 	bl	8000c50 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001384:	f7ff fc64 	bl	8000c50 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e17b      	b.n	800168e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001396:	4b36      	ldr	r3, [pc, #216]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1f0      	bne.n	8001384 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d030      	beq.n	8001410 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d016      	beq.n	80013e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013b6:	4b30      	ldr	r3, [pc, #192]	; (8001478 <HAL_RCC_OscConfig+0x2b4>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013bc:	f7ff fc48 	bl	8000c50 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013c4:	f7ff fc44 	bl	8000c50 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e15b      	b.n	800168e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d6:	4b26      	ldr	r3, [pc, #152]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 80013d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f0      	beq.n	80013c4 <HAL_RCC_OscConfig+0x200>
 80013e2:	e015      	b.n	8001410 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013e4:	4b24      	ldr	r3, [pc, #144]	; (8001478 <HAL_RCC_OscConfig+0x2b4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ea:	f7ff fc31 	bl	8000c50 <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013f2:	f7ff fc2d 	bl	8000c50 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e144      	b.n	800168e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001404:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1f0      	bne.n	80013f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 80a0 	beq.w	800155e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001422:	4b13      	ldr	r3, [pc, #76]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10f      	bne.n	800144e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	4a0e      	ldr	r2, [pc, #56]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800143c:	6413      	str	r3, [r2, #64]	; 0x40
 800143e:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <HAL_RCC_OscConfig+0x2ac>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800144a:	2301      	movs	r3, #1
 800144c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <HAL_RCC_OscConfig+0x2b8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001456:	2b00      	cmp	r3, #0
 8001458:	d121      	bne.n	800149e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <HAL_RCC_OscConfig+0x2b8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a07      	ldr	r2, [pc, #28]	; (800147c <HAL_RCC_OscConfig+0x2b8>)
 8001460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001466:	f7ff fbf3 	bl	8000c50 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146c:	e011      	b.n	8001492 <HAL_RCC_OscConfig+0x2ce>
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800
 8001474:	42470000 	.word	0x42470000
 8001478:	42470e80 	.word	0x42470e80
 800147c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001480:	f7ff fbe6 	bl	8000c50 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e0fd      	b.n	800168e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001492:	4b81      	ldr	r3, [pc, #516]	; (8001698 <HAL_RCC_OscConfig+0x4d4>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f0      	beq.n	8001480 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d106      	bne.n	80014b4 <HAL_RCC_OscConfig+0x2f0>
 80014a6:	4b7d      	ldr	r3, [pc, #500]	; (800169c <HAL_RCC_OscConfig+0x4d8>)
 80014a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014aa:	4a7c      	ldr	r2, [pc, #496]	; (800169c <HAL_RCC_OscConfig+0x4d8>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6713      	str	r3, [r2, #112]	; 0x70
 80014b2:	e01c      	b.n	80014ee <HAL_RCC_OscConfig+0x32a>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b05      	cmp	r3, #5
 80014ba:	d10c      	bne.n	80014d6 <HAL_RCC_OscConfig+0x312>
 80014bc:	4b77      	ldr	r3, [pc, #476]	; (800169c <HAL_RCC_OscConfig+0x4d8>)
 80014be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c0:	4a76      	ldr	r2, [pc, #472]	; (800169c <HAL_RCC_OscConfig+0x4d8>)
 80014c2:	f043 0304 	orr.w	r3, r3, #4
 80014c6:	6713      	str	r3, [r2, #112]	; 0x70
 80014c8:	4b74      	ldr	r3, [pc, #464]	; (800169c <HAL_RCC_OscConfig+0x4d8>)
 80014ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014cc:	4a73      	ldr	r2, [pc, #460]	; (800169c <HAL_RCC_OscConfig+0x4d8>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6713      	str	r3, [r2, #112]	; 0x70
 80014d4:	e00b      	b.n	80014ee <HAL_RCC_OscConfig+0x32a>
 80014d6:	4b71      	ldr	r3, [pc, #452]	; (800169c <HAL_RCC_OscConfig+0x4d8>)
 80014d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014da:	4a70      	ldr	r2, [pc, #448]	; (800169c <HAL_RCC_OscConfig+0x4d8>)
 80014dc:	f023 0301 	bic.w	r3, r3, #1
 80014e0:	6713      	str	r3, [r2, #112]	; 0x70
 80014e2:	4b6e      	ldr	r3, [pc, #440]	; (800169c <HAL_RCC_OscConfig+0x4d8>)
 80014e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e6:	4a6d      	ldr	r2, [pc, #436]	; (800169c <HAL_RCC_OscConfig+0x4d8>)
 80014e8:	f023 0304 	bic.w	r3, r3, #4
 80014ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d015      	beq.n	8001522 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f6:	f7ff fbab 	bl	8000c50 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014fc:	e00a      	b.n	8001514 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014fe:	f7ff fba7 	bl	8000c50 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	f241 3288 	movw	r2, #5000	; 0x1388
 800150c:	4293      	cmp	r3, r2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e0bc      	b.n	800168e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001514:	4b61      	ldr	r3, [pc, #388]	; (800169c <HAL_RCC_OscConfig+0x4d8>)
 8001516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0ee      	beq.n	80014fe <HAL_RCC_OscConfig+0x33a>
 8001520:	e014      	b.n	800154c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001522:	f7ff fb95 	bl	8000c50 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001528:	e00a      	b.n	8001540 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800152a:	f7ff fb91 	bl	8000c50 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	f241 3288 	movw	r2, #5000	; 0x1388
 8001538:	4293      	cmp	r3, r2
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e0a6      	b.n	800168e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001540:	4b56      	ldr	r3, [pc, #344]	; (800169c <HAL_RCC_OscConfig+0x4d8>)
 8001542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1ee      	bne.n	800152a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800154c:	7dfb      	ldrb	r3, [r7, #23]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d105      	bne.n	800155e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001552:	4b52      	ldr	r3, [pc, #328]	; (800169c <HAL_RCC_OscConfig+0x4d8>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	4a51      	ldr	r2, [pc, #324]	; (800169c <HAL_RCC_OscConfig+0x4d8>)
 8001558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800155c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 8092 	beq.w	800168c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001568:	4b4c      	ldr	r3, [pc, #304]	; (800169c <HAL_RCC_OscConfig+0x4d8>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 030c 	and.w	r3, r3, #12
 8001570:	2b08      	cmp	r3, #8
 8001572:	d05c      	beq.n	800162e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	2b02      	cmp	r3, #2
 800157a:	d141      	bne.n	8001600 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800157c:	4b48      	ldr	r3, [pc, #288]	; (80016a0 <HAL_RCC_OscConfig+0x4dc>)
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001582:	f7ff fb65 	bl	8000c50 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001588:	e008      	b.n	800159c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800158a:	f7ff fb61 	bl	8000c50 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e078      	b.n	800168e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159c:	4b3f      	ldr	r3, [pc, #252]	; (800169c <HAL_RCC_OscConfig+0x4d8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1f0      	bne.n	800158a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69da      	ldr	r2, [r3, #28]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	431a      	orrs	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b6:	019b      	lsls	r3, r3, #6
 80015b8:	431a      	orrs	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015be:	085b      	lsrs	r3, r3, #1
 80015c0:	3b01      	subs	r3, #1
 80015c2:	041b      	lsls	r3, r3, #16
 80015c4:	431a      	orrs	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ca:	061b      	lsls	r3, r3, #24
 80015cc:	4933      	ldr	r1, [pc, #204]	; (800169c <HAL_RCC_OscConfig+0x4d8>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d2:	4b33      	ldr	r3, [pc, #204]	; (80016a0 <HAL_RCC_OscConfig+0x4dc>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fb3a 	bl	8000c50 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e0:	f7ff fb36 	bl	8000c50 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e04d      	b.n	800168e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f2:	4b2a      	ldr	r3, [pc, #168]	; (800169c <HAL_RCC_OscConfig+0x4d8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f0      	beq.n	80015e0 <HAL_RCC_OscConfig+0x41c>
 80015fe:	e045      	b.n	800168c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001600:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <HAL_RCC_OscConfig+0x4dc>)
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001606:	f7ff fb23 	bl	8000c50 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800160e:	f7ff fb1f 	bl	8000c50 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e036      	b.n	800168e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001620:	4b1e      	ldr	r3, [pc, #120]	; (800169c <HAL_RCC_OscConfig+0x4d8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f0      	bne.n	800160e <HAL_RCC_OscConfig+0x44a>
 800162c:	e02e      	b.n	800168c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d101      	bne.n	800163a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e029      	b.n	800168e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <HAL_RCC_OscConfig+0x4d8>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	429a      	cmp	r2, r3
 800164c:	d11c      	bne.n	8001688 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001658:	429a      	cmp	r2, r3
 800165a:	d115      	bne.n	8001688 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001662:	4013      	ands	r3, r2
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001668:	4293      	cmp	r3, r2
 800166a:	d10d      	bne.n	8001688 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001676:	429a      	cmp	r2, r3
 8001678:	d106      	bne.n	8001688 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001684:	429a      	cmp	r2, r3
 8001686:	d001      	beq.n	800168c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e000      	b.n	800168e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40007000 	.word	0x40007000
 800169c:	40023800 	.word	0x40023800
 80016a0:	42470060 	.word	0x42470060

080016a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0cc      	b.n	8001852 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016b8:	4b68      	ldr	r3, [pc, #416]	; (800185c <HAL_RCC_ClockConfig+0x1b8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 030f 	and.w	r3, r3, #15
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d90c      	bls.n	80016e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c6:	4b65      	ldr	r3, [pc, #404]	; (800185c <HAL_RCC_ClockConfig+0x1b8>)
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ce:	4b63      	ldr	r3, [pc, #396]	; (800185c <HAL_RCC_ClockConfig+0x1b8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e0b8      	b.n	8001852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d020      	beq.n	800172e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d005      	beq.n	8001704 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016f8:	4b59      	ldr	r3, [pc, #356]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	4a58      	ldr	r2, [pc, #352]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001702:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	2b00      	cmp	r3, #0
 800170e:	d005      	beq.n	800171c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001710:	4b53      	ldr	r3, [pc, #332]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	4a52      	ldr	r2, [pc, #328]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800171a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800171c:	4b50      	ldr	r3, [pc, #320]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	494d      	ldr	r1, [pc, #308]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 800172a:	4313      	orrs	r3, r2
 800172c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	d044      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d107      	bne.n	8001752 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001742:	4b47      	ldr	r3, [pc, #284]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d119      	bne.n	8001782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e07f      	b.n	8001852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d003      	beq.n	8001762 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800175e:	2b03      	cmp	r3, #3
 8001760:	d107      	bne.n	8001772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001762:	4b3f      	ldr	r3, [pc, #252]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d109      	bne.n	8001782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e06f      	b.n	8001852 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001772:	4b3b      	ldr	r3, [pc, #236]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e067      	b.n	8001852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001782:	4b37      	ldr	r3, [pc, #220]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f023 0203 	bic.w	r2, r3, #3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	4934      	ldr	r1, [pc, #208]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	4313      	orrs	r3, r2
 8001792:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001794:	f7ff fa5c 	bl	8000c50 <HAL_GetTick>
 8001798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179a:	e00a      	b.n	80017b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800179c:	f7ff fa58 	bl	8000c50 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e04f      	b.n	8001852 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b2:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 020c 	and.w	r2, r3, #12
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d1eb      	bne.n	800179c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017c4:	4b25      	ldr	r3, [pc, #148]	; (800185c <HAL_RCC_ClockConfig+0x1b8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 030f 	and.w	r3, r3, #15
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d20c      	bcs.n	80017ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d2:	4b22      	ldr	r3, [pc, #136]	; (800185c <HAL_RCC_ClockConfig+0x1b8>)
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	b2d2      	uxtb	r2, r2
 80017d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017da:	4b20      	ldr	r3, [pc, #128]	; (800185c <HAL_RCC_ClockConfig+0x1b8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d001      	beq.n	80017ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e032      	b.n	8001852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d008      	beq.n	800180a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017f8:	4b19      	ldr	r3, [pc, #100]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	4916      	ldr	r1, [pc, #88]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	4313      	orrs	r3, r2
 8001808:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	2b00      	cmp	r3, #0
 8001814:	d009      	beq.n	800182a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	00db      	lsls	r3, r3, #3
 8001824:	490e      	ldr	r1, [pc, #56]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	4313      	orrs	r3, r2
 8001828:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800182a:	f000 f821 	bl	8001870 <HAL_RCC_GetSysClockFreq>
 800182e:	4601      	mov	r1, r0
 8001830:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	091b      	lsrs	r3, r3, #4
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <HAL_RCC_ClockConfig+0x1c0>)
 800183c:	5cd3      	ldrb	r3, [r2, r3]
 800183e:	fa21 f303 	lsr.w	r3, r1, r3
 8001842:	4a09      	ldr	r2, [pc, #36]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 8001844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001846:	4b09      	ldr	r3, [pc, #36]	; (800186c <HAL_RCC_ClockConfig+0x1c8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff f8da 	bl	8000a04 <HAL_InitTick>

  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023c00 	.word	0x40023c00
 8001860:	40023800 	.word	0x40023800
 8001864:	0800588c 	.word	0x0800588c
 8001868:	20000000 	.word	0x20000000
 800186c:	20000004 	.word	0x20000004

08001870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001876:	2300      	movs	r3, #0
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	2300      	movs	r3, #0
 8001880:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001886:	4b50      	ldr	r3, [pc, #320]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	2b04      	cmp	r3, #4
 8001890:	d007      	beq.n	80018a2 <HAL_RCC_GetSysClockFreq+0x32>
 8001892:	2b08      	cmp	r3, #8
 8001894:	d008      	beq.n	80018a8 <HAL_RCC_GetSysClockFreq+0x38>
 8001896:	2b00      	cmp	r3, #0
 8001898:	f040 808d 	bne.w	80019b6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800189c:	4b4b      	ldr	r3, [pc, #300]	; (80019cc <HAL_RCC_GetSysClockFreq+0x15c>)
 800189e:	60bb      	str	r3, [r7, #8]
       break;
 80018a0:	e08c      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018a2:	4b4b      	ldr	r3, [pc, #300]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80018a4:	60bb      	str	r3, [r7, #8]
      break;
 80018a6:	e089      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018a8:	4b47      	ldr	r3, [pc, #284]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018b2:	4b45      	ldr	r3, [pc, #276]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d023      	beq.n	8001906 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018be:	4b42      	ldr	r3, [pc, #264]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	099b      	lsrs	r3, r3, #6
 80018c4:	f04f 0400 	mov.w	r4, #0
 80018c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	ea03 0501 	and.w	r5, r3, r1
 80018d4:	ea04 0602 	and.w	r6, r4, r2
 80018d8:	4a3d      	ldr	r2, [pc, #244]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80018da:	fb02 f106 	mul.w	r1, r2, r6
 80018de:	2200      	movs	r2, #0
 80018e0:	fb02 f205 	mul.w	r2, r2, r5
 80018e4:	440a      	add	r2, r1
 80018e6:	493a      	ldr	r1, [pc, #232]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80018e8:	fba5 0101 	umull	r0, r1, r5, r1
 80018ec:	1853      	adds	r3, r2, r1
 80018ee:	4619      	mov	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f04f 0400 	mov.w	r4, #0
 80018f6:	461a      	mov	r2, r3
 80018f8:	4623      	mov	r3, r4
 80018fa:	f7fe fcc9 	bl	8000290 <__aeabi_uldivmod>
 80018fe:	4603      	mov	r3, r0
 8001900:	460c      	mov	r4, r1
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	e049      	b.n	800199a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001906:	4b30      	ldr	r3, [pc, #192]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x158>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	099b      	lsrs	r3, r3, #6
 800190c:	f04f 0400 	mov.w	r4, #0
 8001910:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	ea03 0501 	and.w	r5, r3, r1
 800191c:	ea04 0602 	and.w	r6, r4, r2
 8001920:	4629      	mov	r1, r5
 8001922:	4632      	mov	r2, r6
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	f04f 0400 	mov.w	r4, #0
 800192c:	0154      	lsls	r4, r2, #5
 800192e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001932:	014b      	lsls	r3, r1, #5
 8001934:	4619      	mov	r1, r3
 8001936:	4622      	mov	r2, r4
 8001938:	1b49      	subs	r1, r1, r5
 800193a:	eb62 0206 	sbc.w	r2, r2, r6
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	f04f 0400 	mov.w	r4, #0
 8001946:	0194      	lsls	r4, r2, #6
 8001948:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800194c:	018b      	lsls	r3, r1, #6
 800194e:	1a5b      	subs	r3, r3, r1
 8001950:	eb64 0402 	sbc.w	r4, r4, r2
 8001954:	f04f 0100 	mov.w	r1, #0
 8001958:	f04f 0200 	mov.w	r2, #0
 800195c:	00e2      	lsls	r2, r4, #3
 800195e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001962:	00d9      	lsls	r1, r3, #3
 8001964:	460b      	mov	r3, r1
 8001966:	4614      	mov	r4, r2
 8001968:	195b      	adds	r3, r3, r5
 800196a:	eb44 0406 	adc.w	r4, r4, r6
 800196e:	f04f 0100 	mov.w	r1, #0
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	02a2      	lsls	r2, r4, #10
 8001978:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800197c:	0299      	lsls	r1, r3, #10
 800197e:	460b      	mov	r3, r1
 8001980:	4614      	mov	r4, r2
 8001982:	4618      	mov	r0, r3
 8001984:	4621      	mov	r1, r4
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f04f 0400 	mov.w	r4, #0
 800198c:	461a      	mov	r2, r3
 800198e:	4623      	mov	r3, r4
 8001990:	f7fe fc7e 	bl	8000290 <__aeabi_uldivmod>
 8001994:	4603      	mov	r3, r0
 8001996:	460c      	mov	r4, r1
 8001998:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_RCC_GetSysClockFreq+0x158>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	0c1b      	lsrs	r3, r3, #16
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	3301      	adds	r3, #1
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b2:	60bb      	str	r3, [r7, #8]
      break;
 80019b4:	e002      	b.n	80019bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019b6:	4b05      	ldr	r3, [pc, #20]	; (80019cc <HAL_RCC_GetSysClockFreq+0x15c>)
 80019b8:	60bb      	str	r3, [r7, #8]
      break;
 80019ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019bc:	68bb      	ldr	r3, [r7, #8]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	00f42400 	.word	0x00f42400
 80019d0:	017d7840 	.word	0x017d7840

080019d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80019da:	681b      	ldr	r3, [r3, #0]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20000000 	.word	0x20000000

080019ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019f0:	f7ff fff0 	bl	80019d4 <HAL_RCC_GetHCLKFreq>
 80019f4:	4601      	mov	r1, r0
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_RCC_GetPCLK1Freq+0x20>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	0a9b      	lsrs	r3, r3, #10
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	4a03      	ldr	r2, [pc, #12]	; (8001a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a02:	5cd3      	ldrb	r3, [r2, r3]
 8001a04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	0800589c 	.word	0x0800589c

08001a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a18:	f7ff ffdc 	bl	80019d4 <HAL_RCC_GetHCLKFreq>
 8001a1c:	4601      	mov	r1, r0
 8001a1e:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	0b5b      	lsrs	r3, r3, #13
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	4a03      	ldr	r2, [pc, #12]	; (8001a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a2a:	5cd3      	ldrb	r3, [r2, r3]
 8001a2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40023800 	.word	0x40023800
 8001a38:	0800589c 	.word	0x0800589c

08001a3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	220f      	movs	r2, #15
 8001a4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_RCC_GetClockConfig+0x5c>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 0203 	and.w	r2, r3, #3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <HAL_RCC_GetClockConfig+0x5c>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <HAL_RCC_GetClockConfig+0x5c>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a70:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <HAL_RCC_GetClockConfig+0x5c>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	08db      	lsrs	r3, r3, #3
 8001a76:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a7e:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <HAL_RCC_GetClockConfig+0x60>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 020f 	and.w	r2, r3, #15
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	601a      	str	r2, [r3, #0]
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40023c00 	.word	0x40023c00

08001aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e01d      	b.n	8001aee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d106      	bne.n	8001acc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f815 	bl	8001af6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3304      	adds	r3, #4
 8001adc:	4619      	mov	r1, r3
 8001ade:	4610      	mov	r0, r2
 8001ae0:	f000 f968 	bl	8001db4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b085      	sub	sp, #20
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 0201 	orr.w	r2, r2, #1
 8001b20:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b06      	cmp	r3, #6
 8001b32:	d007      	beq.n	8001b44 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0201 	orr.w	r2, r2, #1
 8001b42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d122      	bne.n	8001bae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d11b      	bne.n	8001bae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f06f 0202 	mvn.w	r2, #2
 8001b7e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f8ee 	bl	8001d76 <HAL_TIM_IC_CaptureCallback>
 8001b9a:	e005      	b.n	8001ba8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f8e0 	bl	8001d62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f8f1 	bl	8001d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d122      	bne.n	8001c02 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d11b      	bne.n	8001c02 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f06f 0204 	mvn.w	r2, #4
 8001bd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f8c4 	bl	8001d76 <HAL_TIM_IC_CaptureCallback>
 8001bee:	e005      	b.n	8001bfc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 f8b6 	bl	8001d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f8c7 	bl	8001d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d122      	bne.n	8001c56 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d11b      	bne.n	8001c56 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f06f 0208 	mvn.w	r2, #8
 8001c26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2204      	movs	r2, #4
 8001c2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f89a 	bl	8001d76 <HAL_TIM_IC_CaptureCallback>
 8001c42:	e005      	b.n	8001c50 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f88c 	bl	8001d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f89d 	bl	8001d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	f003 0310 	and.w	r3, r3, #16
 8001c60:	2b10      	cmp	r3, #16
 8001c62:	d122      	bne.n	8001caa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	f003 0310 	and.w	r3, r3, #16
 8001c6e:	2b10      	cmp	r3, #16
 8001c70:	d11b      	bne.n	8001caa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f06f 0210 	mvn.w	r2, #16
 8001c7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2208      	movs	r2, #8
 8001c80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f870 	bl	8001d76 <HAL_TIM_IC_CaptureCallback>
 8001c96:	e005      	b.n	8001ca4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f862 	bl	8001d62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f873 	bl	8001d8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d10e      	bne.n	8001cd6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d107      	bne.n	8001cd6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f06f 0201 	mvn.w	r2, #1
 8001cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7fe fe11 	bl	80008f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce0:	2b80      	cmp	r3, #128	; 0x80
 8001ce2:	d10e      	bne.n	8001d02 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cee:	2b80      	cmp	r3, #128	; 0x80
 8001cf0:	d107      	bne.n	8001d02 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f8e3 	bl	8001ec8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0c:	2b40      	cmp	r3, #64	; 0x40
 8001d0e:	d10e      	bne.n	8001d2e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1a:	2b40      	cmp	r3, #64	; 0x40
 8001d1c:	d107      	bne.n	8001d2e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f838 	bl	8001d9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	f003 0320 	and.w	r3, r3, #32
 8001d38:	2b20      	cmp	r3, #32
 8001d3a:	d10e      	bne.n	8001d5a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	f003 0320 	and.w	r3, r3, #32
 8001d46:	2b20      	cmp	r3, #32
 8001d48:	d107      	bne.n	8001d5a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f06f 0220 	mvn.w	r2, #32
 8001d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f8ad 	bl	8001eb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a34      	ldr	r2, [pc, #208]	; (8001e98 <TIM_Base_SetConfig+0xe4>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d00f      	beq.n	8001dec <TIM_Base_SetConfig+0x38>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dd2:	d00b      	beq.n	8001dec <TIM_Base_SetConfig+0x38>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a31      	ldr	r2, [pc, #196]	; (8001e9c <TIM_Base_SetConfig+0xe8>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d007      	beq.n	8001dec <TIM_Base_SetConfig+0x38>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a30      	ldr	r2, [pc, #192]	; (8001ea0 <TIM_Base_SetConfig+0xec>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d003      	beq.n	8001dec <TIM_Base_SetConfig+0x38>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a2f      	ldr	r2, [pc, #188]	; (8001ea4 <TIM_Base_SetConfig+0xf0>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d108      	bne.n	8001dfe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001df2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	68fa      	ldr	r2, [r7, #12]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a25      	ldr	r2, [pc, #148]	; (8001e98 <TIM_Base_SetConfig+0xe4>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d01b      	beq.n	8001e3e <TIM_Base_SetConfig+0x8a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e0c:	d017      	beq.n	8001e3e <TIM_Base_SetConfig+0x8a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a22      	ldr	r2, [pc, #136]	; (8001e9c <TIM_Base_SetConfig+0xe8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <TIM_Base_SetConfig+0x8a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a21      	ldr	r2, [pc, #132]	; (8001ea0 <TIM_Base_SetConfig+0xec>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d00f      	beq.n	8001e3e <TIM_Base_SetConfig+0x8a>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a20      	ldr	r2, [pc, #128]	; (8001ea4 <TIM_Base_SetConfig+0xf0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00b      	beq.n	8001e3e <TIM_Base_SetConfig+0x8a>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a1f      	ldr	r2, [pc, #124]	; (8001ea8 <TIM_Base_SetConfig+0xf4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d007      	beq.n	8001e3e <TIM_Base_SetConfig+0x8a>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a1e      	ldr	r2, [pc, #120]	; (8001eac <TIM_Base_SetConfig+0xf8>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d003      	beq.n	8001e3e <TIM_Base_SetConfig+0x8a>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a1d      	ldr	r2, [pc, #116]	; (8001eb0 <TIM_Base_SetConfig+0xfc>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d108      	bne.n	8001e50 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4a08      	ldr	r2, [pc, #32]	; (8001e98 <TIM_Base_SetConfig+0xe4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d103      	bne.n	8001e84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	615a      	str	r2, [r3, #20]
}
 8001e8a:	bf00      	nop
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40010000 	.word	0x40010000
 8001e9c:	40000400 	.word	0x40000400
 8001ea0:	40000800 	.word	0x40000800
 8001ea4:	40000c00 	.word	0x40000c00
 8001ea8:	40014000 	.word	0x40014000
 8001eac:	40014400 	.word	0x40014400
 8001eb0:	40014800 	.word	0x40014800

08001eb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e03f      	b.n	8001f6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d106      	bne.n	8001f08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7fe fd36 	bl	8000974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2224      	movs	r2, #36	; 0x24
 8001f0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f929 	bl	8002178 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	691a      	ldr	r2, [r3, #16]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	695a      	ldr	r2, [r3, #20]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2220      	movs	r2, #32
 8001f68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b088      	sub	sp, #32
 8001f7a:	af02      	add	r7, sp, #8
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	603b      	str	r3, [r7, #0]
 8001f82:	4613      	mov	r3, r2
 8001f84:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b20      	cmp	r3, #32
 8001f94:	f040 8083 	bne.w	800209e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <HAL_UART_Transmit+0x2e>
 8001f9e:	88fb      	ldrh	r3, [r7, #6]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d101      	bne.n	8001fa8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e07b      	b.n	80020a0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <HAL_UART_Transmit+0x40>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e074      	b.n	80020a0 <HAL_UART_Transmit+0x12a>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2221      	movs	r2, #33	; 0x21
 8001fc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001fcc:	f7fe fe40 	bl	8000c50 <HAL_GetTick>
 8001fd0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	88fa      	ldrh	r2, [r7, #6]
 8001fd6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	88fa      	ldrh	r2, [r7, #6]
 8001fdc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001fe6:	e042      	b.n	800206e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ffe:	d122      	bne.n	8002046 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	2200      	movs	r2, #0
 8002008:	2180      	movs	r1, #128	; 0x80
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 f86a 	bl	80020e4 <UART_WaitOnFlagUntilTimeout>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e042      	b.n	80020a0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800202c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d103      	bne.n	800203e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	3302      	adds	r3, #2
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	e017      	b.n	800206e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	3301      	adds	r3, #1
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	e013      	b.n	800206e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2200      	movs	r2, #0
 800204e:	2180      	movs	r1, #128	; 0x80
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 f847 	bl	80020e4 <UART_WaitOnFlagUntilTimeout>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e01f      	b.n	80020a0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	60ba      	str	r2, [r7, #8]
 8002066:	781a      	ldrb	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002072:	b29b      	uxth	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1b7      	bne.n	8001fe8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2200      	movs	r2, #0
 8002080:	2140      	movs	r1, #64	; 0x40
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 f82e 	bl	80020e4 <UART_WaitOnFlagUntilTimeout>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e006      	b.n	80020a0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2220      	movs	r2, #32
 8002096:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800209a:	2300      	movs	r3, #0
 800209c:	e000      	b.n	80020a0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800209e:	2302      	movs	r3, #2
  }
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	2300      	movs	r3, #0
 80020b6:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b2db      	uxtb	r3, r3
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	603b      	str	r3, [r7, #0]
 80020f0:	4613      	mov	r3, r2
 80020f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020f4:	e02c      	b.n	8002150 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020fc:	d028      	beq.n	8002150 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d007      	beq.n	8002114 <UART_WaitOnFlagUntilTimeout+0x30>
 8002104:	f7fe fda4 	bl	8000c50 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	429a      	cmp	r2, r3
 8002112:	d21d      	bcs.n	8002150 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002122:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	695a      	ldr	r2, [r3, #20]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0201 	bic.w	r2, r2, #1
 8002132:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2220      	movs	r2, #32
 8002138:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2220      	movs	r2, #32
 8002140:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e00f      	b.n	8002170 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	4013      	ands	r3, r2
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	429a      	cmp	r2, r3
 800215e:	bf0c      	ite	eq
 8002160:	2301      	moveq	r3, #1
 8002162:	2300      	movne	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	461a      	mov	r2, r3
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	429a      	cmp	r2, r3
 800216c:	d0c3      	beq.n	80020f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800217c:	b085      	sub	sp, #20
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	431a      	orrs	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80021ba:	f023 030c 	bic.w	r3, r3, #12
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	68f9      	ldr	r1, [r7, #12]
 80021c4:	430b      	orrs	r3, r1
 80021c6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699a      	ldr	r2, [r3, #24]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021e6:	f040 818b 	bne.w	8002500 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4ac1      	ldr	r2, [pc, #772]	; (80024f4 <UART_SetConfig+0x37c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d005      	beq.n	8002200 <UART_SetConfig+0x88>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4abf      	ldr	r2, [pc, #764]	; (80024f8 <UART_SetConfig+0x380>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	f040 80bd 	bne.w	800237a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002200:	f7ff fc08 	bl	8001a14 <HAL_RCC_GetPCLK2Freq>
 8002204:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	461d      	mov	r5, r3
 800220a:	f04f 0600 	mov.w	r6, #0
 800220e:	46a8      	mov	r8, r5
 8002210:	46b1      	mov	r9, r6
 8002212:	eb18 0308 	adds.w	r3, r8, r8
 8002216:	eb49 0409 	adc.w	r4, r9, r9
 800221a:	4698      	mov	r8, r3
 800221c:	46a1      	mov	r9, r4
 800221e:	eb18 0805 	adds.w	r8, r8, r5
 8002222:	eb49 0906 	adc.w	r9, r9, r6
 8002226:	f04f 0100 	mov.w	r1, #0
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002232:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002236:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800223a:	4688      	mov	r8, r1
 800223c:	4691      	mov	r9, r2
 800223e:	eb18 0005 	adds.w	r0, r8, r5
 8002242:	eb49 0106 	adc.w	r1, r9, r6
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	461d      	mov	r5, r3
 800224c:	f04f 0600 	mov.w	r6, #0
 8002250:	196b      	adds	r3, r5, r5
 8002252:	eb46 0406 	adc.w	r4, r6, r6
 8002256:	461a      	mov	r2, r3
 8002258:	4623      	mov	r3, r4
 800225a:	f7fe f819 	bl	8000290 <__aeabi_uldivmod>
 800225e:	4603      	mov	r3, r0
 8002260:	460c      	mov	r4, r1
 8002262:	461a      	mov	r2, r3
 8002264:	4ba5      	ldr	r3, [pc, #660]	; (80024fc <UART_SetConfig+0x384>)
 8002266:	fba3 2302 	umull	r2, r3, r3, r2
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	461d      	mov	r5, r3
 8002274:	f04f 0600 	mov.w	r6, #0
 8002278:	46a9      	mov	r9, r5
 800227a:	46b2      	mov	sl, r6
 800227c:	eb19 0309 	adds.w	r3, r9, r9
 8002280:	eb4a 040a 	adc.w	r4, sl, sl
 8002284:	4699      	mov	r9, r3
 8002286:	46a2      	mov	sl, r4
 8002288:	eb19 0905 	adds.w	r9, r9, r5
 800228c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002290:	f04f 0100 	mov.w	r1, #0
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800229c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022a4:	4689      	mov	r9, r1
 80022a6:	4692      	mov	sl, r2
 80022a8:	eb19 0005 	adds.w	r0, r9, r5
 80022ac:	eb4a 0106 	adc.w	r1, sl, r6
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	461d      	mov	r5, r3
 80022b6:	f04f 0600 	mov.w	r6, #0
 80022ba:	196b      	adds	r3, r5, r5
 80022bc:	eb46 0406 	adc.w	r4, r6, r6
 80022c0:	461a      	mov	r2, r3
 80022c2:	4623      	mov	r3, r4
 80022c4:	f7fd ffe4 	bl	8000290 <__aeabi_uldivmod>
 80022c8:	4603      	mov	r3, r0
 80022ca:	460c      	mov	r4, r1
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b8b      	ldr	r3, [pc, #556]	; (80024fc <UART_SetConfig+0x384>)
 80022d0:	fba3 1302 	umull	r1, r3, r3, r2
 80022d4:	095b      	lsrs	r3, r3, #5
 80022d6:	2164      	movs	r1, #100	; 0x64
 80022d8:	fb01 f303 	mul.w	r3, r1, r3
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	3332      	adds	r3, #50	; 0x32
 80022e2:	4a86      	ldr	r2, [pc, #536]	; (80024fc <UART_SetConfig+0x384>)
 80022e4:	fba2 2303 	umull	r2, r3, r2, r3
 80022e8:	095b      	lsrs	r3, r3, #5
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022f0:	4498      	add	r8, r3
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	461d      	mov	r5, r3
 80022f6:	f04f 0600 	mov.w	r6, #0
 80022fa:	46a9      	mov	r9, r5
 80022fc:	46b2      	mov	sl, r6
 80022fe:	eb19 0309 	adds.w	r3, r9, r9
 8002302:	eb4a 040a 	adc.w	r4, sl, sl
 8002306:	4699      	mov	r9, r3
 8002308:	46a2      	mov	sl, r4
 800230a:	eb19 0905 	adds.w	r9, r9, r5
 800230e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002312:	f04f 0100 	mov.w	r1, #0
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800231e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002322:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002326:	4689      	mov	r9, r1
 8002328:	4692      	mov	sl, r2
 800232a:	eb19 0005 	adds.w	r0, r9, r5
 800232e:	eb4a 0106 	adc.w	r1, sl, r6
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	461d      	mov	r5, r3
 8002338:	f04f 0600 	mov.w	r6, #0
 800233c:	196b      	adds	r3, r5, r5
 800233e:	eb46 0406 	adc.w	r4, r6, r6
 8002342:	461a      	mov	r2, r3
 8002344:	4623      	mov	r3, r4
 8002346:	f7fd ffa3 	bl	8000290 <__aeabi_uldivmod>
 800234a:	4603      	mov	r3, r0
 800234c:	460c      	mov	r4, r1
 800234e:	461a      	mov	r2, r3
 8002350:	4b6a      	ldr	r3, [pc, #424]	; (80024fc <UART_SetConfig+0x384>)
 8002352:	fba3 1302 	umull	r1, r3, r3, r2
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	2164      	movs	r1, #100	; 0x64
 800235a:	fb01 f303 	mul.w	r3, r1, r3
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	3332      	adds	r3, #50	; 0x32
 8002364:	4a65      	ldr	r2, [pc, #404]	; (80024fc <UART_SetConfig+0x384>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	f003 0207 	and.w	r2, r3, #7
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4442      	add	r2, r8
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	e26f      	b.n	800285a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800237a:	f7ff fb37 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 800237e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	461d      	mov	r5, r3
 8002384:	f04f 0600 	mov.w	r6, #0
 8002388:	46a8      	mov	r8, r5
 800238a:	46b1      	mov	r9, r6
 800238c:	eb18 0308 	adds.w	r3, r8, r8
 8002390:	eb49 0409 	adc.w	r4, r9, r9
 8002394:	4698      	mov	r8, r3
 8002396:	46a1      	mov	r9, r4
 8002398:	eb18 0805 	adds.w	r8, r8, r5
 800239c:	eb49 0906 	adc.w	r9, r9, r6
 80023a0:	f04f 0100 	mov.w	r1, #0
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80023ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80023b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80023b4:	4688      	mov	r8, r1
 80023b6:	4691      	mov	r9, r2
 80023b8:	eb18 0005 	adds.w	r0, r8, r5
 80023bc:	eb49 0106 	adc.w	r1, r9, r6
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	461d      	mov	r5, r3
 80023c6:	f04f 0600 	mov.w	r6, #0
 80023ca:	196b      	adds	r3, r5, r5
 80023cc:	eb46 0406 	adc.w	r4, r6, r6
 80023d0:	461a      	mov	r2, r3
 80023d2:	4623      	mov	r3, r4
 80023d4:	f7fd ff5c 	bl	8000290 <__aeabi_uldivmod>
 80023d8:	4603      	mov	r3, r0
 80023da:	460c      	mov	r4, r1
 80023dc:	461a      	mov	r2, r3
 80023de:	4b47      	ldr	r3, [pc, #284]	; (80024fc <UART_SetConfig+0x384>)
 80023e0:	fba3 2302 	umull	r2, r3, r3, r2
 80023e4:	095b      	lsrs	r3, r3, #5
 80023e6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	461d      	mov	r5, r3
 80023ee:	f04f 0600 	mov.w	r6, #0
 80023f2:	46a9      	mov	r9, r5
 80023f4:	46b2      	mov	sl, r6
 80023f6:	eb19 0309 	adds.w	r3, r9, r9
 80023fa:	eb4a 040a 	adc.w	r4, sl, sl
 80023fe:	4699      	mov	r9, r3
 8002400:	46a2      	mov	sl, r4
 8002402:	eb19 0905 	adds.w	r9, r9, r5
 8002406:	eb4a 0a06 	adc.w	sl, sl, r6
 800240a:	f04f 0100 	mov.w	r1, #0
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002416:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800241a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800241e:	4689      	mov	r9, r1
 8002420:	4692      	mov	sl, r2
 8002422:	eb19 0005 	adds.w	r0, r9, r5
 8002426:	eb4a 0106 	adc.w	r1, sl, r6
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	461d      	mov	r5, r3
 8002430:	f04f 0600 	mov.w	r6, #0
 8002434:	196b      	adds	r3, r5, r5
 8002436:	eb46 0406 	adc.w	r4, r6, r6
 800243a:	461a      	mov	r2, r3
 800243c:	4623      	mov	r3, r4
 800243e:	f7fd ff27 	bl	8000290 <__aeabi_uldivmod>
 8002442:	4603      	mov	r3, r0
 8002444:	460c      	mov	r4, r1
 8002446:	461a      	mov	r2, r3
 8002448:	4b2c      	ldr	r3, [pc, #176]	; (80024fc <UART_SetConfig+0x384>)
 800244a:	fba3 1302 	umull	r1, r3, r3, r2
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	2164      	movs	r1, #100	; 0x64
 8002452:	fb01 f303 	mul.w	r3, r1, r3
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	3332      	adds	r3, #50	; 0x32
 800245c:	4a27      	ldr	r2, [pc, #156]	; (80024fc <UART_SetConfig+0x384>)
 800245e:	fba2 2303 	umull	r2, r3, r2, r3
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800246a:	4498      	add	r8, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	461d      	mov	r5, r3
 8002470:	f04f 0600 	mov.w	r6, #0
 8002474:	46a9      	mov	r9, r5
 8002476:	46b2      	mov	sl, r6
 8002478:	eb19 0309 	adds.w	r3, r9, r9
 800247c:	eb4a 040a 	adc.w	r4, sl, sl
 8002480:	4699      	mov	r9, r3
 8002482:	46a2      	mov	sl, r4
 8002484:	eb19 0905 	adds.w	r9, r9, r5
 8002488:	eb4a 0a06 	adc.w	sl, sl, r6
 800248c:	f04f 0100 	mov.w	r1, #0
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002498:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800249c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024a0:	4689      	mov	r9, r1
 80024a2:	4692      	mov	sl, r2
 80024a4:	eb19 0005 	adds.w	r0, r9, r5
 80024a8:	eb4a 0106 	adc.w	r1, sl, r6
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	461d      	mov	r5, r3
 80024b2:	f04f 0600 	mov.w	r6, #0
 80024b6:	196b      	adds	r3, r5, r5
 80024b8:	eb46 0406 	adc.w	r4, r6, r6
 80024bc:	461a      	mov	r2, r3
 80024be:	4623      	mov	r3, r4
 80024c0:	f7fd fee6 	bl	8000290 <__aeabi_uldivmod>
 80024c4:	4603      	mov	r3, r0
 80024c6:	460c      	mov	r4, r1
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <UART_SetConfig+0x384>)
 80024cc:	fba3 1302 	umull	r1, r3, r3, r2
 80024d0:	095b      	lsrs	r3, r3, #5
 80024d2:	2164      	movs	r1, #100	; 0x64
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	3332      	adds	r3, #50	; 0x32
 80024de:	4a07      	ldr	r2, [pc, #28]	; (80024fc <UART_SetConfig+0x384>)
 80024e0:	fba2 2303 	umull	r2, r3, r2, r3
 80024e4:	095b      	lsrs	r3, r3, #5
 80024e6:	f003 0207 	and.w	r2, r3, #7
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4442      	add	r2, r8
 80024f0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80024f2:	e1b2      	b.n	800285a <UART_SetConfig+0x6e2>
 80024f4:	40011000 	.word	0x40011000
 80024f8:	40011400 	.word	0x40011400
 80024fc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4ad7      	ldr	r2, [pc, #860]	; (8002864 <UART_SetConfig+0x6ec>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d005      	beq.n	8002516 <UART_SetConfig+0x39e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4ad6      	ldr	r2, [pc, #856]	; (8002868 <UART_SetConfig+0x6f0>)
 8002510:	4293      	cmp	r3, r2
 8002512:	f040 80d1 	bne.w	80026b8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002516:	f7ff fa7d 	bl	8001a14 <HAL_RCC_GetPCLK2Freq>
 800251a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	469a      	mov	sl, r3
 8002520:	f04f 0b00 	mov.w	fp, #0
 8002524:	46d0      	mov	r8, sl
 8002526:	46d9      	mov	r9, fp
 8002528:	eb18 0308 	adds.w	r3, r8, r8
 800252c:	eb49 0409 	adc.w	r4, r9, r9
 8002530:	4698      	mov	r8, r3
 8002532:	46a1      	mov	r9, r4
 8002534:	eb18 080a 	adds.w	r8, r8, sl
 8002538:	eb49 090b 	adc.w	r9, r9, fp
 800253c:	f04f 0100 	mov.w	r1, #0
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002548:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800254c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002550:	4688      	mov	r8, r1
 8002552:	4691      	mov	r9, r2
 8002554:	eb1a 0508 	adds.w	r5, sl, r8
 8002558:	eb4b 0609 	adc.w	r6, fp, r9
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	4619      	mov	r1, r3
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	f04f 0300 	mov.w	r3, #0
 800256a:	f04f 0400 	mov.w	r4, #0
 800256e:	0094      	lsls	r4, r2, #2
 8002570:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002574:	008b      	lsls	r3, r1, #2
 8002576:	461a      	mov	r2, r3
 8002578:	4623      	mov	r3, r4
 800257a:	4628      	mov	r0, r5
 800257c:	4631      	mov	r1, r6
 800257e:	f7fd fe87 	bl	8000290 <__aeabi_uldivmod>
 8002582:	4603      	mov	r3, r0
 8002584:	460c      	mov	r4, r1
 8002586:	461a      	mov	r2, r3
 8002588:	4bb8      	ldr	r3, [pc, #736]	; (800286c <UART_SetConfig+0x6f4>)
 800258a:	fba3 2302 	umull	r2, r3, r3, r2
 800258e:	095b      	lsrs	r3, r3, #5
 8002590:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	469b      	mov	fp, r3
 8002598:	f04f 0c00 	mov.w	ip, #0
 800259c:	46d9      	mov	r9, fp
 800259e:	46e2      	mov	sl, ip
 80025a0:	eb19 0309 	adds.w	r3, r9, r9
 80025a4:	eb4a 040a 	adc.w	r4, sl, sl
 80025a8:	4699      	mov	r9, r3
 80025aa:	46a2      	mov	sl, r4
 80025ac:	eb19 090b 	adds.w	r9, r9, fp
 80025b0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80025b4:	f04f 0100 	mov.w	r1, #0
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80025c8:	4689      	mov	r9, r1
 80025ca:	4692      	mov	sl, r2
 80025cc:	eb1b 0509 	adds.w	r5, fp, r9
 80025d0:	eb4c 060a 	adc.w	r6, ip, sl
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	4619      	mov	r1, r3
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	f04f 0400 	mov.w	r4, #0
 80025e6:	0094      	lsls	r4, r2, #2
 80025e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80025ec:	008b      	lsls	r3, r1, #2
 80025ee:	461a      	mov	r2, r3
 80025f0:	4623      	mov	r3, r4
 80025f2:	4628      	mov	r0, r5
 80025f4:	4631      	mov	r1, r6
 80025f6:	f7fd fe4b 	bl	8000290 <__aeabi_uldivmod>
 80025fa:	4603      	mov	r3, r0
 80025fc:	460c      	mov	r4, r1
 80025fe:	461a      	mov	r2, r3
 8002600:	4b9a      	ldr	r3, [pc, #616]	; (800286c <UART_SetConfig+0x6f4>)
 8002602:	fba3 1302 	umull	r1, r3, r3, r2
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	2164      	movs	r1, #100	; 0x64
 800260a:	fb01 f303 	mul.w	r3, r1, r3
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	3332      	adds	r3, #50	; 0x32
 8002614:	4a95      	ldr	r2, [pc, #596]	; (800286c <UART_SetConfig+0x6f4>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	095b      	lsrs	r3, r3, #5
 800261c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002620:	4498      	add	r8, r3
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	469b      	mov	fp, r3
 8002626:	f04f 0c00 	mov.w	ip, #0
 800262a:	46d9      	mov	r9, fp
 800262c:	46e2      	mov	sl, ip
 800262e:	eb19 0309 	adds.w	r3, r9, r9
 8002632:	eb4a 040a 	adc.w	r4, sl, sl
 8002636:	4699      	mov	r9, r3
 8002638:	46a2      	mov	sl, r4
 800263a:	eb19 090b 	adds.w	r9, r9, fp
 800263e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002642:	f04f 0100 	mov.w	r1, #0
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800264e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002652:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002656:	4689      	mov	r9, r1
 8002658:	4692      	mov	sl, r2
 800265a:	eb1b 0509 	adds.w	r5, fp, r9
 800265e:	eb4c 060a 	adc.w	r6, ip, sl
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	4619      	mov	r1, r3
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	f04f 0300 	mov.w	r3, #0
 8002670:	f04f 0400 	mov.w	r4, #0
 8002674:	0094      	lsls	r4, r2, #2
 8002676:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800267a:	008b      	lsls	r3, r1, #2
 800267c:	461a      	mov	r2, r3
 800267e:	4623      	mov	r3, r4
 8002680:	4628      	mov	r0, r5
 8002682:	4631      	mov	r1, r6
 8002684:	f7fd fe04 	bl	8000290 <__aeabi_uldivmod>
 8002688:	4603      	mov	r3, r0
 800268a:	460c      	mov	r4, r1
 800268c:	461a      	mov	r2, r3
 800268e:	4b77      	ldr	r3, [pc, #476]	; (800286c <UART_SetConfig+0x6f4>)
 8002690:	fba3 1302 	umull	r1, r3, r3, r2
 8002694:	095b      	lsrs	r3, r3, #5
 8002696:	2164      	movs	r1, #100	; 0x64
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	3332      	adds	r3, #50	; 0x32
 80026a2:	4a72      	ldr	r2, [pc, #456]	; (800286c <UART_SetConfig+0x6f4>)
 80026a4:	fba2 2303 	umull	r2, r3, r2, r3
 80026a8:	095b      	lsrs	r3, r3, #5
 80026aa:	f003 020f 	and.w	r2, r3, #15
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4442      	add	r2, r8
 80026b4:	609a      	str	r2, [r3, #8]
 80026b6:	e0d0      	b.n	800285a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80026b8:	f7ff f998 	bl	80019ec <HAL_RCC_GetPCLK1Freq>
 80026bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	469a      	mov	sl, r3
 80026c2:	f04f 0b00 	mov.w	fp, #0
 80026c6:	46d0      	mov	r8, sl
 80026c8:	46d9      	mov	r9, fp
 80026ca:	eb18 0308 	adds.w	r3, r8, r8
 80026ce:	eb49 0409 	adc.w	r4, r9, r9
 80026d2:	4698      	mov	r8, r3
 80026d4:	46a1      	mov	r9, r4
 80026d6:	eb18 080a 	adds.w	r8, r8, sl
 80026da:	eb49 090b 	adc.w	r9, r9, fp
 80026de:	f04f 0100 	mov.w	r1, #0
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80026ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80026ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80026f2:	4688      	mov	r8, r1
 80026f4:	4691      	mov	r9, r2
 80026f6:	eb1a 0508 	adds.w	r5, sl, r8
 80026fa:	eb4b 0609 	adc.w	r6, fp, r9
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	4619      	mov	r1, r3
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	f04f 0300 	mov.w	r3, #0
 800270c:	f04f 0400 	mov.w	r4, #0
 8002710:	0094      	lsls	r4, r2, #2
 8002712:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002716:	008b      	lsls	r3, r1, #2
 8002718:	461a      	mov	r2, r3
 800271a:	4623      	mov	r3, r4
 800271c:	4628      	mov	r0, r5
 800271e:	4631      	mov	r1, r6
 8002720:	f7fd fdb6 	bl	8000290 <__aeabi_uldivmod>
 8002724:	4603      	mov	r3, r0
 8002726:	460c      	mov	r4, r1
 8002728:	461a      	mov	r2, r3
 800272a:	4b50      	ldr	r3, [pc, #320]	; (800286c <UART_SetConfig+0x6f4>)
 800272c:	fba3 2302 	umull	r2, r3, r3, r2
 8002730:	095b      	lsrs	r3, r3, #5
 8002732:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	469b      	mov	fp, r3
 800273a:	f04f 0c00 	mov.w	ip, #0
 800273e:	46d9      	mov	r9, fp
 8002740:	46e2      	mov	sl, ip
 8002742:	eb19 0309 	adds.w	r3, r9, r9
 8002746:	eb4a 040a 	adc.w	r4, sl, sl
 800274a:	4699      	mov	r9, r3
 800274c:	46a2      	mov	sl, r4
 800274e:	eb19 090b 	adds.w	r9, r9, fp
 8002752:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002756:	f04f 0100 	mov.w	r1, #0
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002762:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002766:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800276a:	4689      	mov	r9, r1
 800276c:	4692      	mov	sl, r2
 800276e:	eb1b 0509 	adds.w	r5, fp, r9
 8002772:	eb4c 060a 	adc.w	r6, ip, sl
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	4619      	mov	r1, r3
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	f04f 0400 	mov.w	r4, #0
 8002788:	0094      	lsls	r4, r2, #2
 800278a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800278e:	008b      	lsls	r3, r1, #2
 8002790:	461a      	mov	r2, r3
 8002792:	4623      	mov	r3, r4
 8002794:	4628      	mov	r0, r5
 8002796:	4631      	mov	r1, r6
 8002798:	f7fd fd7a 	bl	8000290 <__aeabi_uldivmod>
 800279c:	4603      	mov	r3, r0
 800279e:	460c      	mov	r4, r1
 80027a0:	461a      	mov	r2, r3
 80027a2:	4b32      	ldr	r3, [pc, #200]	; (800286c <UART_SetConfig+0x6f4>)
 80027a4:	fba3 1302 	umull	r1, r3, r3, r2
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	2164      	movs	r1, #100	; 0x64
 80027ac:	fb01 f303 	mul.w	r3, r1, r3
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	3332      	adds	r3, #50	; 0x32
 80027b6:	4a2d      	ldr	r2, [pc, #180]	; (800286c <UART_SetConfig+0x6f4>)
 80027b8:	fba2 2303 	umull	r2, r3, r2, r3
 80027bc:	095b      	lsrs	r3, r3, #5
 80027be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027c2:	4498      	add	r8, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	469b      	mov	fp, r3
 80027c8:	f04f 0c00 	mov.w	ip, #0
 80027cc:	46d9      	mov	r9, fp
 80027ce:	46e2      	mov	sl, ip
 80027d0:	eb19 0309 	adds.w	r3, r9, r9
 80027d4:	eb4a 040a 	adc.w	r4, sl, sl
 80027d8:	4699      	mov	r9, r3
 80027da:	46a2      	mov	sl, r4
 80027dc:	eb19 090b 	adds.w	r9, r9, fp
 80027e0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80027e4:	f04f 0100 	mov.w	r1, #0
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027f8:	4689      	mov	r9, r1
 80027fa:	4692      	mov	sl, r2
 80027fc:	eb1b 0509 	adds.w	r5, fp, r9
 8002800:	eb4c 060a 	adc.w	r6, ip, sl
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	4619      	mov	r1, r3
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	f04f 0300 	mov.w	r3, #0
 8002812:	f04f 0400 	mov.w	r4, #0
 8002816:	0094      	lsls	r4, r2, #2
 8002818:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800281c:	008b      	lsls	r3, r1, #2
 800281e:	461a      	mov	r2, r3
 8002820:	4623      	mov	r3, r4
 8002822:	4628      	mov	r0, r5
 8002824:	4631      	mov	r1, r6
 8002826:	f7fd fd33 	bl	8000290 <__aeabi_uldivmod>
 800282a:	4603      	mov	r3, r0
 800282c:	460c      	mov	r4, r1
 800282e:	461a      	mov	r2, r3
 8002830:	4b0e      	ldr	r3, [pc, #56]	; (800286c <UART_SetConfig+0x6f4>)
 8002832:	fba3 1302 	umull	r1, r3, r3, r2
 8002836:	095b      	lsrs	r3, r3, #5
 8002838:	2164      	movs	r1, #100	; 0x64
 800283a:	fb01 f303 	mul.w	r3, r1, r3
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	011b      	lsls	r3, r3, #4
 8002842:	3332      	adds	r3, #50	; 0x32
 8002844:	4a09      	ldr	r2, [pc, #36]	; (800286c <UART_SetConfig+0x6f4>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	095b      	lsrs	r3, r3, #5
 800284c:	f003 020f 	and.w	r2, r3, #15
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4442      	add	r2, r8
 8002856:	609a      	str	r2, [r3, #8]
}
 8002858:	e7ff      	b.n	800285a <UART_SetConfig+0x6e2>
 800285a:	bf00      	nop
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002864:	40011000 	.word	0x40011000
 8002868:	40011400 	.word	0x40011400
 800286c:	51eb851f 	.word	0x51eb851f

08002870 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f103 0208 	add.w	r2, r3, #8
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002888:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f103 0208 	add.w	r2, r3, #8
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f103 0208 	add.w	r2, r3, #8
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028ca:	b480      	push	{r7}
 80028cc:	b085      	sub	sp, #20
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
 80028d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	601a      	str	r2, [r3, #0]
}
 8002906:	bf00      	nop
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002912:	b480      	push	{r7}
 8002914:	b085      	sub	sp, #20
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
 800291a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002928:	d103      	bne.n	8002932 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	e00c      	b.n	800294c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3308      	adds	r3, #8
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	e002      	b.n	8002940 <vListInsert+0x2e>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	429a      	cmp	r2, r3
 800294a:	d2f6      	bcs.n	800293a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	1c5a      	adds	r2, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	601a      	str	r2, [r3, #0]
}
 8002978:	bf00      	nop
 800297a:	3714      	adds	r7, #20
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6892      	ldr	r2, [r2, #8]
 800299a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	6852      	ldr	r2, [r2, #4]
 80029a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d103      	bne.n	80029b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	1e5a      	subs	r2, r3, #1
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d109      	bne.n	8002a00 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80029ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f0:	f383 8811 	msr	BASEPRI, r3
 80029f4:	f3bf 8f6f 	isb	sy
 80029f8:	f3bf 8f4f 	dsb	sy
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	e7fe      	b.n	80029fe <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002a00:	f001 ffdc 	bl	80049bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0c:	68f9      	ldr	r1, [r7, #12]
 8002a0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a10:	fb01 f303 	mul.w	r3, r1, r3
 8002a14:	441a      	add	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a30:	3b01      	subs	r3, #1
 8002a32:	68f9      	ldr	r1, [r7, #12]
 8002a34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a36:	fb01 f303 	mul.w	r3, r1, r3
 8002a3a:	441a      	add	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	22ff      	movs	r2, #255	; 0xff
 8002a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	22ff      	movs	r2, #255	; 0xff
 8002a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d114      	bne.n	8002a80 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d01a      	beq.n	8002a94 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	3310      	adds	r3, #16
 8002a62:	4618      	mov	r0, r3
 8002a64:	f001 f80e 	bl	8003a84 <xTaskRemoveFromEventList>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d012      	beq.n	8002a94 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a6e:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <xQueueGenericReset+0xcc>)
 8002a70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	f3bf 8f4f 	dsb	sy
 8002a7a:	f3bf 8f6f 	isb	sy
 8002a7e:	e009      	b.n	8002a94 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	3310      	adds	r3, #16
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff fef3 	bl	8002870 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	3324      	adds	r3, #36	; 0x24
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff feee 	bl	8002870 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a94:	f001 ffc0 	bl	8004a18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a98:	2301      	movs	r3, #1
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	e000ed04 	.word	0xe000ed04

08002aa8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	; 0x28
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d109      	bne.n	8002ad0 <xQueueGenericCreate+0x28>
 8002abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac0:	f383 8811 	msr	BASEPRI, r3
 8002ac4:	f3bf 8f6f 	isb	sy
 8002ac8:	f3bf 8f4f 	dsb	sy
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	e7fe      	b.n	8002ace <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d102      	bne.n	8002adc <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
 8002ada:	e004      	b.n	8002ae6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	fb02 f303 	mul.w	r3, r2, r3
 8002ae4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3350      	adds	r3, #80	; 0x50
 8002aea:	4618      	mov	r0, r3
 8002aec:	f002 f880 	bl	8004bf0 <pvPortMalloc>
 8002af0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00d      	beq.n	8002b14 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	3350      	adds	r3, #80	; 0x50
 8002b00:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b02:	79fa      	ldrb	r2, [r7, #7]
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 f805 	bl	8002b1e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b14:	69bb      	ldr	r3, [r7, #24]
	}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3720      	adds	r7, #32
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b084      	sub	sp, #16
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d103      	bne.n	8002b3a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	e002      	b.n	8002b40 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	69b8      	ldr	r0, [r7, #24]
 8002b50:	f7ff ff42 	bl	80029d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	78fa      	ldrb	r2, [r7, #3]
 8002b58:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002b5c:	bf00      	nop
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08e      	sub	sp, #56	; 0x38
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b72:	2300      	movs	r3, #0
 8002b74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d109      	bne.n	8002b94 <xQueueGenericSend+0x30>
 8002b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b84:	f383 8811 	msr	BASEPRI, r3
 8002b88:	f3bf 8f6f 	isb	sy
 8002b8c:	f3bf 8f4f 	dsb	sy
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b92:	e7fe      	b.n	8002b92 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d103      	bne.n	8002ba2 <xQueueGenericSend+0x3e>
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <xQueueGenericSend+0x42>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <xQueueGenericSend+0x44>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d109      	bne.n	8002bc0 <xQueueGenericSend+0x5c>
 8002bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb0:	f383 8811 	msr	BASEPRI, r3
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	f3bf 8f4f 	dsb	sy
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bbe:	e7fe      	b.n	8002bbe <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d103      	bne.n	8002bce <xQueueGenericSend+0x6a>
 8002bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <xQueueGenericSend+0x6e>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <xQueueGenericSend+0x70>
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d109      	bne.n	8002bec <xQueueGenericSend+0x88>
 8002bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bdc:	f383 8811 	msr	BASEPRI, r3
 8002be0:	f3bf 8f6f 	isb	sy
 8002be4:	f3bf 8f4f 	dsb	sy
 8002be8:	623b      	str	r3, [r7, #32]
 8002bea:	e7fe      	b.n	8002bea <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bec:	f001 f8e2 	bl	8003db4 <xTaskGetSchedulerState>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d102      	bne.n	8002bfc <xQueueGenericSend+0x98>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <xQueueGenericSend+0x9c>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <xQueueGenericSend+0x9e>
 8002c00:	2300      	movs	r3, #0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d109      	bne.n	8002c1a <xQueueGenericSend+0xb6>
 8002c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0a:	f383 8811 	msr	BASEPRI, r3
 8002c0e:	f3bf 8f6f 	isb	sy
 8002c12:	f3bf 8f4f 	dsb	sy
 8002c16:	61fb      	str	r3, [r7, #28]
 8002c18:	e7fe      	b.n	8002c18 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c1a:	f001 fecf 	bl	80049bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d302      	bcc.n	8002c30 <xQueueGenericSend+0xcc>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d129      	bne.n	8002c84 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	68b9      	ldr	r1, [r7, #8]
 8002c34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c36:	f000 f9ff 	bl	8003038 <prvCopyDataToQueue>
 8002c3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d010      	beq.n	8002c66 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c46:	3324      	adds	r3, #36	; 0x24
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f000 ff1b 	bl	8003a84 <xTaskRemoveFromEventList>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d013      	beq.n	8002c7c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002c54:	4b3f      	ldr	r3, [pc, #252]	; (8002d54 <xQueueGenericSend+0x1f0>)
 8002c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	f3bf 8f4f 	dsb	sy
 8002c60:	f3bf 8f6f 	isb	sy
 8002c64:	e00a      	b.n	8002c7c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d007      	beq.n	8002c7c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c6c:	4b39      	ldr	r3, [pc, #228]	; (8002d54 <xQueueGenericSend+0x1f0>)
 8002c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c7c:	f001 fecc 	bl	8004a18 <vPortExitCritical>
				return pdPASS;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e063      	b.n	8002d4c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d103      	bne.n	8002c92 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c8a:	f001 fec5 	bl	8004a18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	e05c      	b.n	8002d4c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d106      	bne.n	8002ca6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c98:	f107 0314 	add.w	r3, r7, #20
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 ff53 	bl	8003b48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ca6:	f001 feb7 	bl	8004a18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002caa:	f000 fcbf 	bl	800362c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002cae:	f001 fe85 	bl	80049bc <vPortEnterCritical>
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cb8:	b25b      	sxtb	r3, r3
 8002cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cbe:	d103      	bne.n	8002cc8 <xQueueGenericSend+0x164>
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cce:	b25b      	sxtb	r3, r3
 8002cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cd4:	d103      	bne.n	8002cde <xQueueGenericSend+0x17a>
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cde:	f001 fe9b 	bl	8004a18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ce2:	1d3a      	adds	r2, r7, #4
 8002ce4:	f107 0314 	add.w	r3, r7, #20
 8002ce8:	4611      	mov	r1, r2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 ff42 	bl	8003b74 <xTaskCheckForTimeOut>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d124      	bne.n	8002d40 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002cf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cf8:	f000 fa96 	bl	8003228 <prvIsQueueFull>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d018      	beq.n	8002d34 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d04:	3310      	adds	r3, #16
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fe6c 	bl	80039e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002d10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d12:	f000 fa21 	bl	8003158 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002d16:	f000 fc97 	bl	8003648 <xTaskResumeAll>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f47f af7c 	bne.w	8002c1a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002d22:	4b0c      	ldr	r3, [pc, #48]	; (8002d54 <xQueueGenericSend+0x1f0>)
 8002d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	f3bf 8f6f 	isb	sy
 8002d32:	e772      	b.n	8002c1a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002d34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d36:	f000 fa0f 	bl	8003158 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d3a:	f000 fc85 	bl	8003648 <xTaskResumeAll>
 8002d3e:	e76c      	b.n	8002c1a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002d40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d42:	f000 fa09 	bl	8003158 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d46:	f000 fc7f 	bl	8003648 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002d4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3738      	adds	r7, #56	; 0x38
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	e000ed04 	.word	0xe000ed04

08002d58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08e      	sub	sp, #56	; 0x38
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d109      	bne.n	8002d84 <xQueueGenericSendFromISR+0x2c>
 8002d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d74:	f383 8811 	msr	BASEPRI, r3
 8002d78:	f3bf 8f6f 	isb	sy
 8002d7c:	f3bf 8f4f 	dsb	sy
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
 8002d82:	e7fe      	b.n	8002d82 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d103      	bne.n	8002d92 <xQueueGenericSendFromISR+0x3a>
 8002d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <xQueueGenericSendFromISR+0x3e>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <xQueueGenericSendFromISR+0x40>
 8002d96:	2300      	movs	r3, #0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d109      	bne.n	8002db0 <xQueueGenericSendFromISR+0x58>
 8002d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da0:	f383 8811 	msr	BASEPRI, r3
 8002da4:	f3bf 8f6f 	isb	sy
 8002da8:	f3bf 8f4f 	dsb	sy
 8002dac:	623b      	str	r3, [r7, #32]
 8002dae:	e7fe      	b.n	8002dae <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d103      	bne.n	8002dbe <xQueueGenericSendFromISR+0x66>
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <xQueueGenericSendFromISR+0x6a>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <xQueueGenericSendFromISR+0x6c>
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d109      	bne.n	8002ddc <xQueueGenericSendFromISR+0x84>
 8002dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dcc:	f383 8811 	msr	BASEPRI, r3
 8002dd0:	f3bf 8f6f 	isb	sy
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	e7fe      	b.n	8002dda <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ddc:	f001 feca 	bl	8004b74 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002de0:	f3ef 8211 	mrs	r2, BASEPRI
 8002de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de8:	f383 8811 	msr	BASEPRI, r3
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	61ba      	str	r2, [r7, #24]
 8002df6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002df8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d302      	bcc.n	8002e0e <xQueueGenericSendFromISR+0xb6>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d12c      	bne.n	8002e68 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	68b9      	ldr	r1, [r7, #8]
 8002e1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e1e:	f000 f90b 	bl	8003038 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002e22:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002e26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e2a:	d112      	bne.n	8002e52 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d016      	beq.n	8002e62 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e36:	3324      	adds	r3, #36	; 0x24
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 fe23 	bl	8003a84 <xTaskRemoveFromEventList>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00e      	beq.n	8002e62 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00b      	beq.n	8002e62 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	e007      	b.n	8002e62 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e56:	3301      	adds	r3, #1
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	b25a      	sxtb	r2, r3
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002e62:	2301      	movs	r3, #1
 8002e64:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002e66:	e001      	b.n	8002e6c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3738      	adds	r7, #56	; 0x38
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08c      	sub	sp, #48	; 0x30
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d109      	bne.n	8002eae <xQueueReceive+0x2e>
	__asm volatile
 8002e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9e:	f383 8811 	msr	BASEPRI, r3
 8002ea2:	f3bf 8f6f 	isb	sy
 8002ea6:	f3bf 8f4f 	dsb	sy
 8002eaa:	623b      	str	r3, [r7, #32]
 8002eac:	e7fe      	b.n	8002eac <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d103      	bne.n	8002ebc <xQueueReceive+0x3c>
 8002eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <xQueueReceive+0x40>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e000      	b.n	8002ec2 <xQueueReceive+0x42>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d109      	bne.n	8002eda <xQueueReceive+0x5a>
 8002ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eca:	f383 8811 	msr	BASEPRI, r3
 8002ece:	f3bf 8f6f 	isb	sy
 8002ed2:	f3bf 8f4f 	dsb	sy
 8002ed6:	61fb      	str	r3, [r7, #28]
 8002ed8:	e7fe      	b.n	8002ed8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002eda:	f000 ff6b 	bl	8003db4 <xTaskGetSchedulerState>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d102      	bne.n	8002eea <xQueueReceive+0x6a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <xQueueReceive+0x6e>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <xQueueReceive+0x70>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d109      	bne.n	8002f08 <xQueueReceive+0x88>
 8002ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef8:	f383 8811 	msr	BASEPRI, r3
 8002efc:	f3bf 8f6f 	isb	sy
 8002f00:	f3bf 8f4f 	dsb	sy
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	e7fe      	b.n	8002f06 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f08:	f001 fd58 	bl	80049bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d01f      	beq.n	8002f58 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f18:	68b9      	ldr	r1, [r7, #8]
 8002f1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f1c:	f000 f8f6 	bl	800310c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	1e5a      	subs	r2, r3, #1
 8002f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f26:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00f      	beq.n	8002f50 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f32:	3310      	adds	r3, #16
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 fda5 	bl	8003a84 <xTaskRemoveFromEventList>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d007      	beq.n	8002f50 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f40:	4b3c      	ldr	r3, [pc, #240]	; (8003034 <xQueueReceive+0x1b4>)
 8002f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	f3bf 8f4f 	dsb	sy
 8002f4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f50:	f001 fd62 	bl	8004a18 <vPortExitCritical>
				return pdPASS;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e069      	b.n	800302c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d103      	bne.n	8002f66 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f5e:	f001 fd5b 	bl	8004a18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f62:	2300      	movs	r3, #0
 8002f64:	e062      	b.n	800302c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d106      	bne.n	8002f7a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f6c:	f107 0310 	add.w	r3, r7, #16
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 fde9 	bl	8003b48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f76:	2301      	movs	r3, #1
 8002f78:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f7a:	f001 fd4d 	bl	8004a18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f7e:	f000 fb55 	bl	800362c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f82:	f001 fd1b 	bl	80049bc <vPortEnterCritical>
 8002f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f8c:	b25b      	sxtb	r3, r3
 8002f8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f92:	d103      	bne.n	8002f9c <xQueueReceive+0x11c>
 8002f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fa2:	b25b      	sxtb	r3, r3
 8002fa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fa8:	d103      	bne.n	8002fb2 <xQueueReceive+0x132>
 8002faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fb2:	f001 fd31 	bl	8004a18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fb6:	1d3a      	adds	r2, r7, #4
 8002fb8:	f107 0310 	add.w	r3, r7, #16
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 fdd8 	bl	8003b74 <xTaskCheckForTimeOut>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d123      	bne.n	8003012 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fcc:	f000 f916 	bl	80031fc <prvIsQueueEmpty>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d017      	beq.n	8003006 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd8:	3324      	adds	r3, #36	; 0x24
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	4611      	mov	r1, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 fd02 	bl	80039e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002fe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fe6:	f000 f8b7 	bl	8003158 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002fea:	f000 fb2d 	bl	8003648 <xTaskResumeAll>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d189      	bne.n	8002f08 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002ff4:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <xQueueReceive+0x1b4>)
 8002ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	f3bf 8f4f 	dsb	sy
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	e780      	b.n	8002f08 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003008:	f000 f8a6 	bl	8003158 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800300c:	f000 fb1c 	bl	8003648 <xTaskResumeAll>
 8003010:	e77a      	b.n	8002f08 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003012:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003014:	f000 f8a0 	bl	8003158 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003018:	f000 fb16 	bl	8003648 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800301c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800301e:	f000 f8ed 	bl	80031fc <prvIsQueueEmpty>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	f43f af6f 	beq.w	8002f08 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800302a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800302c:	4618      	mov	r0, r3
 800302e:	3730      	adds	r7, #48	; 0x30
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	e000ed04 	.word	0xe000ed04

08003038 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10d      	bne.n	8003072 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d14d      	bne.n	80030fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	4618      	mov	r0, r3
 8003064:	f000 fec4 	bl	8003df0 <xTaskPriorityDisinherit>
 8003068:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	e043      	b.n	80030fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d119      	bne.n	80030ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6858      	ldr	r0, [r3, #4]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	461a      	mov	r2, r3
 8003082:	68b9      	ldr	r1, [r7, #8]
 8003084:	f001 ffb4 	bl	8004ff0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	441a      	add	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	685a      	ldr	r2, [r3, #4]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d32b      	bcc.n	80030fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	e026      	b.n	80030fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	68d8      	ldr	r0, [r3, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	461a      	mov	r2, r3
 80030b6:	68b9      	ldr	r1, [r7, #8]
 80030b8:	f001 ff9a 	bl	8004ff0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	425b      	negs	r3, r3
 80030c6:	441a      	add	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d207      	bcs.n	80030e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	425b      	negs	r3, r3
 80030e2:	441a      	add	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d105      	bne.n	80030fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003102:	697b      	ldr	r3, [r7, #20]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	2b00      	cmp	r3, #0
 800311c:	d018      	beq.n	8003150 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	441a      	add	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	429a      	cmp	r2, r3
 8003136:	d303      	bcc.n	8003140 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	68d9      	ldr	r1, [r3, #12]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	461a      	mov	r2, r3
 800314a:	6838      	ldr	r0, [r7, #0]
 800314c:	f001 ff50 	bl	8004ff0 <memcpy>
	}
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003160:	f001 fc2c 	bl	80049bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800316a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800316c:	e011      	b.n	8003192 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	2b00      	cmp	r3, #0
 8003174:	d012      	beq.n	800319c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3324      	adds	r3, #36	; 0x24
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fc82 	bl	8003a84 <xTaskRemoveFromEventList>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003186:	f000 fd55 	bl	8003c34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	3b01      	subs	r3, #1
 800318e:	b2db      	uxtb	r3, r3
 8003190:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003196:	2b00      	cmp	r3, #0
 8003198:	dce9      	bgt.n	800316e <prvUnlockQueue+0x16>
 800319a:	e000      	b.n	800319e <prvUnlockQueue+0x46>
					break;
 800319c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	22ff      	movs	r2, #255	; 0xff
 80031a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80031a6:	f001 fc37 	bl	8004a18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80031aa:	f001 fc07 	bl	80049bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031b6:	e011      	b.n	80031dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d012      	beq.n	80031e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3310      	adds	r3, #16
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 fc5d 	bl	8003a84 <xTaskRemoveFromEventList>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80031d0:	f000 fd30 	bl	8003c34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80031d4:	7bbb      	ldrb	r3, [r7, #14]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	dce9      	bgt.n	80031b8 <prvUnlockQueue+0x60>
 80031e4:	e000      	b.n	80031e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80031e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	22ff      	movs	r2, #255	; 0xff
 80031ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80031f0:	f001 fc12 	bl	8004a18 <vPortExitCritical>
}
 80031f4:	bf00      	nop
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003204:	f001 fbda 	bl	80049bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320c:	2b00      	cmp	r3, #0
 800320e:	d102      	bne.n	8003216 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003210:	2301      	movs	r3, #1
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	e001      	b.n	800321a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800321a:	f001 fbfd 	bl	8004a18 <vPortExitCritical>

	return xReturn;
 800321e:	68fb      	ldr	r3, [r7, #12]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003230:	f001 fbc4 	bl	80049bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323c:	429a      	cmp	r2, r3
 800323e:	d102      	bne.n	8003246 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003240:	2301      	movs	r3, #1
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	e001      	b.n	800324a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003246:	2300      	movs	r3, #0
 8003248:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800324a:	f001 fbe5 	bl	8004a18 <vPortExitCritical>

	return xReturn;
 800324e:	68fb      	ldr	r3, [r7, #12]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003262:	2300      	movs	r3, #0
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	e014      	b.n	8003292 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003268:	4a0e      	ldr	r2, [pc, #56]	; (80032a4 <vQueueAddToRegistry+0x4c>)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10b      	bne.n	800328c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003274:	490b      	ldr	r1, [pc, #44]	; (80032a4 <vQueueAddToRegistry+0x4c>)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800327e:	4a09      	ldr	r2, [pc, #36]	; (80032a4 <vQueueAddToRegistry+0x4c>)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	4413      	add	r3, r2
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800328a:	e005      	b.n	8003298 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	3301      	adds	r3, #1
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2b07      	cmp	r3, #7
 8003296:	d9e7      	bls.n	8003268 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003298:	bf00      	nop
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	20012ec0 	.word	0x20012ec0

080032a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80032b8:	f001 fb80 	bl	80049bc <vPortEnterCritical>
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032c2:	b25b      	sxtb	r3, r3
 80032c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032c8:	d103      	bne.n	80032d2 <vQueueWaitForMessageRestricted+0x2a>
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032d8:	b25b      	sxtb	r3, r3
 80032da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032de:	d103      	bne.n	80032e8 <vQueueWaitForMessageRestricted+0x40>
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032e8:	f001 fb96 	bl	8004a18 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d106      	bne.n	8003302 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	3324      	adds	r3, #36	; 0x24
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	68b9      	ldr	r1, [r7, #8]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 fb97 	bl	8003a30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003302:	6978      	ldr	r0, [r7, #20]
 8003304:	f7ff ff28 	bl	8003158 <prvUnlockQueue>
	}
 8003308:	bf00      	nop
 800330a:	3718      	adds	r7, #24
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08c      	sub	sp, #48	; 0x30
 8003314:	af04      	add	r7, sp, #16
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	603b      	str	r3, [r7, #0]
 800331c:	4613      	mov	r3, r2
 800331e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003320:	88fb      	ldrh	r3, [r7, #6]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4618      	mov	r0, r3
 8003326:	f001 fc63 	bl	8004bf0 <pvPortMalloc>
 800332a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00e      	beq.n	8003350 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003332:	2058      	movs	r0, #88	; 0x58
 8003334:	f001 fc5c 	bl	8004bf0 <pvPortMalloc>
 8003338:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	631a      	str	r2, [r3, #48]	; 0x30
 8003346:	e005      	b.n	8003354 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003348:	6978      	ldr	r0, [r7, #20]
 800334a:	f001 fd13 	bl	8004d74 <vPortFree>
 800334e:	e001      	b.n	8003354 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003350:	2300      	movs	r3, #0
 8003352:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d013      	beq.n	8003382 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800335a:	88fa      	ldrh	r2, [r7, #6]
 800335c:	2300      	movs	r3, #0
 800335e:	9303      	str	r3, [sp, #12]
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	9302      	str	r3, [sp, #8]
 8003364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003366:	9301      	str	r3, [sp, #4]
 8003368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	68b9      	ldr	r1, [r7, #8]
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 f80e 	bl	8003392 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003376:	69f8      	ldr	r0, [r7, #28]
 8003378:	f000 f89e 	bl	80034b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800337c:	2301      	movs	r3, #1
 800337e:	61bb      	str	r3, [r7, #24]
 8003380:	e002      	b.n	8003388 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003386:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003388:	69bb      	ldr	r3, [r7, #24]
	}
 800338a:	4618      	mov	r0, r3
 800338c:	3720      	adds	r7, #32
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b088      	sub	sp, #32
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
 800339e:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d109      	bne.n	80033ba <prvInitialiseNewTask+0x28>
 80033a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	e7fe      	b.n	80033b8 <prvInitialiseNewTask+0x26>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80033ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	461a      	mov	r2, r3
 80033c4:	21a5      	movs	r1, #165	; 0xa5
 80033c6:	f001 fe1e 	bl	8005006 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80033ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80033d4:	3b01      	subs	r3, #1
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80033dc:	69bb      	ldr	r3, [r7, #24]
 80033de:	f023 0307 	bic.w	r3, r3, #7
 80033e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d009      	beq.n	8003402 <prvInitialiseNewTask+0x70>
 80033ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f2:	f383 8811 	msr	BASEPRI, r3
 80033f6:	f3bf 8f6f 	isb	sy
 80033fa:	f3bf 8f4f 	dsb	sy
 80033fe:	613b      	str	r3, [r7, #16]
 8003400:	e7fe      	b.n	8003400 <prvInitialiseNewTask+0x6e>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003402:	2300      	movs	r3, #0
 8003404:	61fb      	str	r3, [r7, #28]
 8003406:	e012      	b.n	800342e <prvInitialiseNewTask+0x9c>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	4413      	add	r3, r2
 800340e:	7819      	ldrb	r1, [r3, #0]
 8003410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	4413      	add	r3, r2
 8003416:	3334      	adds	r3, #52	; 0x34
 8003418:	460a      	mov	r2, r1
 800341a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	4413      	add	r3, r2
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d006      	beq.n	8003436 <prvInitialiseNewTask+0xa4>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	3301      	adds	r3, #1
 800342c:	61fb      	str	r3, [r7, #28]
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	2b09      	cmp	r3, #9
 8003432:	d9e9      	bls.n	8003408 <prvInitialiseNewTask+0x76>
 8003434:	e000      	b.n	8003438 <prvInitialiseNewTask+0xa6>
		{
			break;
 8003436:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003442:	2b04      	cmp	r3, #4
 8003444:	d901      	bls.n	800344a <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003446:	2304      	movs	r3, #4
 8003448:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800344a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800344e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003454:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8003456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003458:	2200      	movs	r2, #0
 800345a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800345c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345e:	3304      	adds	r3, #4
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff fa25 	bl	80028b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003468:	3318      	adds	r3, #24
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff fa20 	bl	80028b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003474:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003478:	f1c3 0205 	rsb	r2, r3, #5
 800347c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003482:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003484:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003488:	2200      	movs	r2, #0
 800348a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800348c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	68f9      	ldr	r1, [r7, #12]
 8003498:	69b8      	ldr	r0, [r7, #24]
 800349a:	f001 f96b 	bl	8004774 <pxPortInitialiseStack>
 800349e:	4602      	mov	r2, r0
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80034a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80034aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034b0:	bf00      	nop
 80034b2:	3720      	adds	r7, #32
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80034c0:	f001 fa7c 	bl	80049bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80034c4:	4b2c      	ldr	r3, [pc, #176]	; (8003578 <prvAddNewTaskToReadyList+0xc0>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3301      	adds	r3, #1
 80034ca:	4a2b      	ldr	r2, [pc, #172]	; (8003578 <prvAddNewTaskToReadyList+0xc0>)
 80034cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80034ce:	4b2b      	ldr	r3, [pc, #172]	; (800357c <prvAddNewTaskToReadyList+0xc4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d109      	bne.n	80034ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80034d6:	4a29      	ldr	r2, [pc, #164]	; (800357c <prvAddNewTaskToReadyList+0xc4>)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034dc:	4b26      	ldr	r3, [pc, #152]	; (8003578 <prvAddNewTaskToReadyList+0xc0>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d110      	bne.n	8003506 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034e4:	f000 fbca 	bl	8003c7c <prvInitialiseTaskLists>
 80034e8:	e00d      	b.n	8003506 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034ea:	4b25      	ldr	r3, [pc, #148]	; (8003580 <prvAddNewTaskToReadyList+0xc8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d109      	bne.n	8003506 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034f2:	4b22      	ldr	r3, [pc, #136]	; (800357c <prvAddNewTaskToReadyList+0xc4>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d802      	bhi.n	8003506 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003500:	4a1e      	ldr	r2, [pc, #120]	; (800357c <prvAddNewTaskToReadyList+0xc4>)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003506:	4b1f      	ldr	r3, [pc, #124]	; (8003584 <prvAddNewTaskToReadyList+0xcc>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	3301      	adds	r3, #1
 800350c:	4a1d      	ldr	r2, [pc, #116]	; (8003584 <prvAddNewTaskToReadyList+0xcc>)
 800350e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003510:	4b1c      	ldr	r3, [pc, #112]	; (8003584 <prvAddNewTaskToReadyList+0xcc>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351c:	2201      	movs	r2, #1
 800351e:	409a      	lsls	r2, r3
 8003520:	4b19      	ldr	r3, [pc, #100]	; (8003588 <prvAddNewTaskToReadyList+0xd0>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4313      	orrs	r3, r2
 8003526:	4a18      	ldr	r2, [pc, #96]	; (8003588 <prvAddNewTaskToReadyList+0xd0>)
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4a15      	ldr	r2, [pc, #84]	; (800358c <prvAddNewTaskToReadyList+0xd4>)
 8003538:	441a      	add	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3304      	adds	r3, #4
 800353e:	4619      	mov	r1, r3
 8003540:	4610      	mov	r0, r2
 8003542:	f7ff f9c2 	bl	80028ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003546:	f001 fa67 	bl	8004a18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800354a:	4b0d      	ldr	r3, [pc, #52]	; (8003580 <prvAddNewTaskToReadyList+0xc8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00e      	beq.n	8003570 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003552:	4b0a      	ldr	r3, [pc, #40]	; (800357c <prvAddNewTaskToReadyList+0xc4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	429a      	cmp	r2, r3
 800355e:	d207      	bcs.n	8003570 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003560:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <prvAddNewTaskToReadyList+0xd8>)
 8003562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003570:	bf00      	nop
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	20000178 	.word	0x20000178
 800357c:	200000a0 	.word	0x200000a0
 8003580:	20000184 	.word	0x20000184
 8003584:	20000194 	.word	0x20000194
 8003588:	20000180 	.word	0x20000180
 800358c:	200000a4 	.word	0x200000a4
 8003590:	e000ed04 	.word	0xe000ed04

08003594 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800359a:	4b1e      	ldr	r3, [pc, #120]	; (8003614 <vTaskStartScheduler+0x80>)
 800359c:	9301      	str	r3, [sp, #4]
 800359e:	2300      	movs	r3, #0
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	2300      	movs	r3, #0
 80035a4:	2282      	movs	r2, #130	; 0x82
 80035a6:	491c      	ldr	r1, [pc, #112]	; (8003618 <vTaskStartScheduler+0x84>)
 80035a8:	481c      	ldr	r0, [pc, #112]	; (800361c <vTaskStartScheduler+0x88>)
 80035aa:	f7ff feb1 	bl	8003310 <xTaskCreate>
 80035ae:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d102      	bne.n	80035bc <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80035b6:	f000 fe11 	bl	80041dc <xTimerCreateTimerTask>
 80035ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d115      	bne.n	80035ee <vTaskStartScheduler+0x5a>
 80035c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c6:	f383 8811 	msr	BASEPRI, r3
 80035ca:	f3bf 8f6f 	isb	sy
 80035ce:	f3bf 8f4f 	dsb	sy
 80035d2:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80035d4:	4b12      	ldr	r3, [pc, #72]	; (8003620 <vTaskStartScheduler+0x8c>)
 80035d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035dc:	4b11      	ldr	r3, [pc, #68]	; (8003624 <vTaskStartScheduler+0x90>)
 80035de:	2201      	movs	r2, #1
 80035e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80035e2:	4b11      	ldr	r3, [pc, #68]	; (8003628 <vTaskStartScheduler+0x94>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035e8:	f001 f94a 	bl	8004880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80035ec:	e00d      	b.n	800360a <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035f4:	d109      	bne.n	800360a <vTaskStartScheduler+0x76>
 80035f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035fa:	f383 8811 	msr	BASEPRI, r3
 80035fe:	f3bf 8f6f 	isb	sy
 8003602:	f3bf 8f4f 	dsb	sy
 8003606:	607b      	str	r3, [r7, #4]
 8003608:	e7fe      	b.n	8003608 <vTaskStartScheduler+0x74>
}
 800360a:	bf00      	nop
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	2000019c 	.word	0x2000019c
 8003618:	08005874 	.word	0x08005874
 800361c:	08003c4d 	.word	0x08003c4d
 8003620:	20000198 	.word	0x20000198
 8003624:	20000184 	.word	0x20000184
 8003628:	2000017c 	.word	0x2000017c

0800362c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003630:	4b04      	ldr	r3, [pc, #16]	; (8003644 <vTaskSuspendAll+0x18>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	3301      	adds	r3, #1
 8003636:	4a03      	ldr	r2, [pc, #12]	; (8003644 <vTaskSuspendAll+0x18>)
 8003638:	6013      	str	r3, [r2, #0]
}
 800363a:	bf00      	nop
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr
 8003644:	200001a0 	.word	0x200001a0

08003648 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003652:	2300      	movs	r3, #0
 8003654:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003656:	4b41      	ldr	r3, [pc, #260]	; (800375c <xTaskResumeAll+0x114>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d109      	bne.n	8003672 <xTaskResumeAll+0x2a>
 800365e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	603b      	str	r3, [r7, #0]
 8003670:	e7fe      	b.n	8003670 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003672:	f001 f9a3 	bl	80049bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003676:	4b39      	ldr	r3, [pc, #228]	; (800375c <xTaskResumeAll+0x114>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3b01      	subs	r3, #1
 800367c:	4a37      	ldr	r2, [pc, #220]	; (800375c <xTaskResumeAll+0x114>)
 800367e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003680:	4b36      	ldr	r3, [pc, #216]	; (800375c <xTaskResumeAll+0x114>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d161      	bne.n	800374c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003688:	4b35      	ldr	r3, [pc, #212]	; (8003760 <xTaskResumeAll+0x118>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d05d      	beq.n	800374c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003690:	e02e      	b.n	80036f0 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003692:	4b34      	ldr	r3, [pc, #208]	; (8003764 <xTaskResumeAll+0x11c>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	3318      	adds	r3, #24
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff f970 	bl	8002984 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	3304      	adds	r3, #4
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff f96b 	bl	8002984 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	2201      	movs	r2, #1
 80036b4:	409a      	lsls	r2, r3
 80036b6:	4b2c      	ldr	r3, [pc, #176]	; (8003768 <xTaskResumeAll+0x120>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	4a2a      	ldr	r2, [pc, #168]	; (8003768 <xTaskResumeAll+0x120>)
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4a27      	ldr	r2, [pc, #156]	; (800376c <xTaskResumeAll+0x124>)
 80036ce:	441a      	add	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	3304      	adds	r3, #4
 80036d4:	4619      	mov	r1, r3
 80036d6:	4610      	mov	r0, r2
 80036d8:	f7ff f8f7 	bl	80028ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e0:	4b23      	ldr	r3, [pc, #140]	; (8003770 <xTaskResumeAll+0x128>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d302      	bcc.n	80036f0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80036ea:	4b22      	ldr	r3, [pc, #136]	; (8003774 <xTaskResumeAll+0x12c>)
 80036ec:	2201      	movs	r2, #1
 80036ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036f0:	4b1c      	ldr	r3, [pc, #112]	; (8003764 <xTaskResumeAll+0x11c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1cc      	bne.n	8003692 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80036fe:	f000 fb39 	bl	8003d74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003702:	4b1d      	ldr	r3, [pc, #116]	; (8003778 <xTaskResumeAll+0x130>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d010      	beq.n	8003730 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800370e:	f000 f859 	bl	80037c4 <xTaskIncrementTick>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d002      	beq.n	800371e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003718:	4b16      	ldr	r3, [pc, #88]	; (8003774 <xTaskResumeAll+0x12c>)
 800371a:	2201      	movs	r2, #1
 800371c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3b01      	subs	r3, #1
 8003722:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f1      	bne.n	800370e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800372a:	4b13      	ldr	r3, [pc, #76]	; (8003778 <xTaskResumeAll+0x130>)
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003730:	4b10      	ldr	r3, [pc, #64]	; (8003774 <xTaskResumeAll+0x12c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d009      	beq.n	800374c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003738:	2301      	movs	r3, #1
 800373a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800373c:	4b0f      	ldr	r3, [pc, #60]	; (800377c <xTaskResumeAll+0x134>)
 800373e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	f3bf 8f4f 	dsb	sy
 8003748:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800374c:	f001 f964 	bl	8004a18 <vPortExitCritical>

	return xAlreadyYielded;
 8003750:	68bb      	ldr	r3, [r7, #8]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	200001a0 	.word	0x200001a0
 8003760:	20000178 	.word	0x20000178
 8003764:	20000138 	.word	0x20000138
 8003768:	20000180 	.word	0x20000180
 800376c:	200000a4 	.word	0x200000a4
 8003770:	200000a0 	.word	0x200000a0
 8003774:	2000018c 	.word	0x2000018c
 8003778:	20000188 	.word	0x20000188
 800377c:	e000ed04 	.word	0xe000ed04

08003780 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003786:	4b05      	ldr	r3, [pc, #20]	; (800379c <xTaskGetTickCount+0x1c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800378c:	687b      	ldr	r3, [r7, #4]
}
 800378e:	4618      	mov	r0, r3
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	2000017c 	.word	0x2000017c

080037a0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80037a6:	f001 f9e5 	bl	8004b74 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80037aa:	2300      	movs	r3, #0
 80037ac:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80037ae:	4b04      	ldr	r3, [pc, #16]	; (80037c0 <xTaskGetTickCountFromISR+0x20>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80037b4:	683b      	ldr	r3, [r7, #0]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	2000017c 	.word	0x2000017c

080037c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80037ca:	2300      	movs	r3, #0
 80037cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037ce:	4b4e      	ldr	r3, [pc, #312]	; (8003908 <xTaskIncrementTick+0x144>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f040 8087 	bne.w	80038e6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80037d8:	4b4c      	ldr	r3, [pc, #304]	; (800390c <xTaskIncrementTick+0x148>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3301      	adds	r3, #1
 80037de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80037e0:	4a4a      	ldr	r2, [pc, #296]	; (800390c <xTaskIncrementTick+0x148>)
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d11f      	bne.n	800382c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80037ec:	4b48      	ldr	r3, [pc, #288]	; (8003910 <xTaskIncrementTick+0x14c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <xTaskIncrementTick+0x46>
 80037f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	e7fe      	b.n	8003808 <xTaskIncrementTick+0x44>
 800380a:	4b41      	ldr	r3, [pc, #260]	; (8003910 <xTaskIncrementTick+0x14c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	4b40      	ldr	r3, [pc, #256]	; (8003914 <xTaskIncrementTick+0x150>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a3e      	ldr	r2, [pc, #248]	; (8003910 <xTaskIncrementTick+0x14c>)
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	4a3e      	ldr	r2, [pc, #248]	; (8003914 <xTaskIncrementTick+0x150>)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	4b3e      	ldr	r3, [pc, #248]	; (8003918 <xTaskIncrementTick+0x154>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	3301      	adds	r3, #1
 8003824:	4a3c      	ldr	r2, [pc, #240]	; (8003918 <xTaskIncrementTick+0x154>)
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	f000 faa4 	bl	8003d74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800382c:	4b3b      	ldr	r3, [pc, #236]	; (800391c <xTaskIncrementTick+0x158>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	429a      	cmp	r2, r3
 8003834:	d348      	bcc.n	80038c8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003836:	4b36      	ldr	r3, [pc, #216]	; (8003910 <xTaskIncrementTick+0x14c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d104      	bne.n	800384a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003840:	4b36      	ldr	r3, [pc, #216]	; (800391c <xTaskIncrementTick+0x158>)
 8003842:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003846:	601a      	str	r2, [r3, #0]
					break;
 8003848:	e03e      	b.n	80038c8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800384a:	4b31      	ldr	r3, [pc, #196]	; (8003910 <xTaskIncrementTick+0x14c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	429a      	cmp	r2, r3
 8003860:	d203      	bcs.n	800386a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003862:	4a2e      	ldr	r2, [pc, #184]	; (800391c <xTaskIncrementTick+0x158>)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003868:	e02e      	b.n	80038c8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	3304      	adds	r3, #4
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff f888 	bl	8002984 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	2b00      	cmp	r3, #0
 800387a:	d004      	beq.n	8003886 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	3318      	adds	r3, #24
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff f87f 	bl	8002984 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	2201      	movs	r2, #1
 800388c:	409a      	lsls	r2, r3
 800388e:	4b24      	ldr	r3, [pc, #144]	; (8003920 <xTaskIncrementTick+0x15c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4313      	orrs	r3, r2
 8003894:	4a22      	ldr	r2, [pc, #136]	; (8003920 <xTaskIncrementTick+0x15c>)
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389c:	4613      	mov	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4a1f      	ldr	r2, [pc, #124]	; (8003924 <xTaskIncrementTick+0x160>)
 80038a6:	441a      	add	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	3304      	adds	r3, #4
 80038ac:	4619      	mov	r1, r3
 80038ae:	4610      	mov	r0, r2
 80038b0:	f7ff f80b 	bl	80028ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b8:	4b1b      	ldr	r3, [pc, #108]	; (8003928 <xTaskIncrementTick+0x164>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038be:	429a      	cmp	r2, r3
 80038c0:	d3b9      	bcc.n	8003836 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80038c2:	2301      	movs	r3, #1
 80038c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038c6:	e7b6      	b.n	8003836 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038c8:	4b17      	ldr	r3, [pc, #92]	; (8003928 <xTaskIncrementTick+0x164>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ce:	4915      	ldr	r1, [pc, #84]	; (8003924 <xTaskIncrementTick+0x160>)
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d907      	bls.n	80038f0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80038e0:	2301      	movs	r3, #1
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	e004      	b.n	80038f0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80038e6:	4b11      	ldr	r3, [pc, #68]	; (800392c <xTaskIncrementTick+0x168>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	3301      	adds	r3, #1
 80038ec:	4a0f      	ldr	r2, [pc, #60]	; (800392c <xTaskIncrementTick+0x168>)
 80038ee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80038f0:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <xTaskIncrementTick+0x16c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80038f8:	2301      	movs	r3, #1
 80038fa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80038fc:	697b      	ldr	r3, [r7, #20]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	200001a0 	.word	0x200001a0
 800390c:	2000017c 	.word	0x2000017c
 8003910:	20000130 	.word	0x20000130
 8003914:	20000134 	.word	0x20000134
 8003918:	20000190 	.word	0x20000190
 800391c:	20000198 	.word	0x20000198
 8003920:	20000180 	.word	0x20000180
 8003924:	200000a4 	.word	0x200000a4
 8003928:	200000a0 	.word	0x200000a0
 800392c:	20000188 	.word	0x20000188
 8003930:	2000018c 	.word	0x2000018c

08003934 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800393a:	4b26      	ldr	r3, [pc, #152]	; (80039d4 <vTaskSwitchContext+0xa0>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003942:	4b25      	ldr	r3, [pc, #148]	; (80039d8 <vTaskSwitchContext+0xa4>)
 8003944:	2201      	movs	r2, #1
 8003946:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003948:	e03e      	b.n	80039c8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800394a:	4b23      	ldr	r3, [pc, #140]	; (80039d8 <vTaskSwitchContext+0xa4>)
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003950:	4b22      	ldr	r3, [pc, #136]	; (80039dc <vTaskSwitchContext+0xa8>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	fab3 f383 	clz	r3, r3
 800395c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800395e:	7afb      	ldrb	r3, [r7, #11]
 8003960:	f1c3 031f 	rsb	r3, r3, #31
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	491e      	ldr	r1, [pc, #120]	; (80039e0 <vTaskSwitchContext+0xac>)
 8003968:	697a      	ldr	r2, [r7, #20]
 800396a:	4613      	mov	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d109      	bne.n	800398e <vTaskSwitchContext+0x5a>
	__asm volatile
 800397a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397e:	f383 8811 	msr	BASEPRI, r3
 8003982:	f3bf 8f6f 	isb	sy
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	607b      	str	r3, [r7, #4]
 800398c:	e7fe      	b.n	800398c <vTaskSwitchContext+0x58>
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	4a11      	ldr	r2, [pc, #68]	; (80039e0 <vTaskSwitchContext+0xac>)
 800399a:	4413      	add	r3, r2
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	605a      	str	r2, [r3, #4]
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	3308      	adds	r3, #8
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d104      	bne.n	80039be <vTaskSwitchContext+0x8a>
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	605a      	str	r2, [r3, #4]
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	4a07      	ldr	r2, [pc, #28]	; (80039e4 <vTaskSwitchContext+0xb0>)
 80039c6:	6013      	str	r3, [r2, #0]
}
 80039c8:	bf00      	nop
 80039ca:	371c      	adds	r7, #28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	200001a0 	.word	0x200001a0
 80039d8:	2000018c 	.word	0x2000018c
 80039dc:	20000180 	.word	0x20000180
 80039e0:	200000a4 	.word	0x200000a4
 80039e4:	200000a0 	.word	0x200000a0

080039e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d109      	bne.n	8003a0c <vTaskPlaceOnEventList+0x24>
 80039f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	e7fe      	b.n	8003a0a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a0c:	4b07      	ldr	r3, [pc, #28]	; (8003a2c <vTaskPlaceOnEventList+0x44>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3318      	adds	r3, #24
 8003a12:	4619      	mov	r1, r3
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7fe ff7c 	bl	8002912 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	6838      	ldr	r0, [r7, #0]
 8003a1e:	f000 fb77 	bl	8004110 <prvAddCurrentTaskToDelayedList>
}
 8003a22:	bf00      	nop
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	200000a0 	.word	0x200000a0

08003a30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d109      	bne.n	8003a56 <vTaskPlaceOnEventListRestricted+0x26>
 8003a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a46:	f383 8811 	msr	BASEPRI, r3
 8003a4a:	f3bf 8f6f 	isb	sy
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	e7fe      	b.n	8003a54 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a56:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <vTaskPlaceOnEventListRestricted+0x50>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	3318      	adds	r3, #24
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f7fe ff33 	bl	80028ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003a6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a6e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a70:	6879      	ldr	r1, [r7, #4]
 8003a72:	68b8      	ldr	r0, [r7, #8]
 8003a74:	f000 fb4c 	bl	8004110 <prvAddCurrentTaskToDelayedList>
	}
 8003a78:	bf00      	nop
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	200000a0 	.word	0x200000a0

08003a84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d109      	bne.n	8003aae <xTaskRemoveFromEventList+0x2a>
 8003a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9e:	f383 8811 	msr	BASEPRI, r3
 8003aa2:	f3bf 8f6f 	isb	sy
 8003aa6:	f3bf 8f4f 	dsb	sy
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	e7fe      	b.n	8003aac <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	3318      	adds	r3, #24
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fe ff66 	bl	8002984 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ab8:	4b1d      	ldr	r3, [pc, #116]	; (8003b30 <xTaskRemoveFromEventList+0xac>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d11c      	bne.n	8003afa <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fe ff5d 	bl	8002984 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	2201      	movs	r2, #1
 8003ad0:	409a      	lsls	r2, r3
 8003ad2:	4b18      	ldr	r3, [pc, #96]	; (8003b34 <xTaskRemoveFromEventList+0xb0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	4a16      	ldr	r2, [pc, #88]	; (8003b34 <xTaskRemoveFromEventList+0xb0>)
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	4a13      	ldr	r2, [pc, #76]	; (8003b38 <xTaskRemoveFromEventList+0xb4>)
 8003aea:	441a      	add	r2, r3
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	3304      	adds	r3, #4
 8003af0:	4619      	mov	r1, r3
 8003af2:	4610      	mov	r0, r2
 8003af4:	f7fe fee9 	bl	80028ca <vListInsertEnd>
 8003af8:	e005      	b.n	8003b06 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	3318      	adds	r3, #24
 8003afe:	4619      	mov	r1, r3
 8003b00:	480e      	ldr	r0, [pc, #56]	; (8003b3c <xTaskRemoveFromEventList+0xb8>)
 8003b02:	f7fe fee2 	bl	80028ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0a:	4b0d      	ldr	r3, [pc, #52]	; (8003b40 <xTaskRemoveFromEventList+0xbc>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d905      	bls.n	8003b20 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003b14:	2301      	movs	r3, #1
 8003b16:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003b18:	4b0a      	ldr	r3, [pc, #40]	; (8003b44 <xTaskRemoveFromEventList+0xc0>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	e001      	b.n	8003b24 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8003b20:	2300      	movs	r3, #0
 8003b22:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003b24:	697b      	ldr	r3, [r7, #20]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3718      	adds	r7, #24
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	200001a0 	.word	0x200001a0
 8003b34:	20000180 	.word	0x20000180
 8003b38:	200000a4 	.word	0x200000a4
 8003b3c:	20000138 	.word	0x20000138
 8003b40:	200000a0 	.word	0x200000a0
 8003b44:	2000018c 	.word	0x2000018c

08003b48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b50:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <vTaskInternalSetTimeOutState+0x24>)
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b58:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <vTaskInternalSetTimeOutState+0x28>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	605a      	str	r2, [r3, #4]
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	20000190 	.word	0x20000190
 8003b70:	2000017c 	.word	0x2000017c

08003b74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b088      	sub	sp, #32
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d109      	bne.n	8003b98 <xTaskCheckForTimeOut+0x24>
 8003b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	613b      	str	r3, [r7, #16]
 8003b96:	e7fe      	b.n	8003b96 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <xTaskCheckForTimeOut+0x3e>
 8003b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba2:	f383 8811 	msr	BASEPRI, r3
 8003ba6:	f3bf 8f6f 	isb	sy
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	e7fe      	b.n	8003bb0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003bb2:	f000 ff03 	bl	80049bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003bb6:	4b1d      	ldr	r3, [pc, #116]	; (8003c2c <xTaskCheckForTimeOut+0xb8>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bce:	d102      	bne.n	8003bd6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	61fb      	str	r3, [r7, #28]
 8003bd4:	e023      	b.n	8003c1e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	4b15      	ldr	r3, [pc, #84]	; (8003c30 <xTaskCheckForTimeOut+0xbc>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d007      	beq.n	8003bf2 <xTaskCheckForTimeOut+0x7e>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	69ba      	ldr	r2, [r7, #24]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d302      	bcc.n	8003bf2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003bec:	2301      	movs	r3, #1
 8003bee:	61fb      	str	r3, [r7, #28]
 8003bf0:	e015      	b.n	8003c1e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d20b      	bcs.n	8003c14 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	1ad2      	subs	r2, r2, r3
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7ff ff9d 	bl	8003b48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	e004      	b.n	8003c1e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003c1e:	f000 fefb 	bl	8004a18 <vPortExitCritical>

	return xReturn;
 8003c22:	69fb      	ldr	r3, [r7, #28]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3720      	adds	r7, #32
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	2000017c 	.word	0x2000017c
 8003c30:	20000190 	.word	0x20000190

08003c34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c34:	b480      	push	{r7}
 8003c36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c38:	4b03      	ldr	r3, [pc, #12]	; (8003c48 <vTaskMissedYield+0x14>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]
}
 8003c3e:	bf00      	nop
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	2000018c 	.word	0x2000018c

08003c4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c54:	f000 f852 	bl	8003cfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c58:	4b06      	ldr	r3, [pc, #24]	; (8003c74 <prvIdleTask+0x28>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d9f9      	bls.n	8003c54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c60:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <prvIdleTask+0x2c>)
 8003c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003c70:	e7f0      	b.n	8003c54 <prvIdleTask+0x8>
 8003c72:	bf00      	nop
 8003c74:	200000a4 	.word	0x200000a4
 8003c78:	e000ed04 	.word	0xe000ed04

08003c7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c82:	2300      	movs	r3, #0
 8003c84:	607b      	str	r3, [r7, #4]
 8003c86:	e00c      	b.n	8003ca2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4a12      	ldr	r2, [pc, #72]	; (8003cdc <prvInitialiseTaskLists+0x60>)
 8003c94:	4413      	add	r3, r2
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fe fdea 	bl	8002870 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	607b      	str	r3, [r7, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d9ef      	bls.n	8003c88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ca8:	480d      	ldr	r0, [pc, #52]	; (8003ce0 <prvInitialiseTaskLists+0x64>)
 8003caa:	f7fe fde1 	bl	8002870 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003cae:	480d      	ldr	r0, [pc, #52]	; (8003ce4 <prvInitialiseTaskLists+0x68>)
 8003cb0:	f7fe fdde 	bl	8002870 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003cb4:	480c      	ldr	r0, [pc, #48]	; (8003ce8 <prvInitialiseTaskLists+0x6c>)
 8003cb6:	f7fe fddb 	bl	8002870 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003cba:	480c      	ldr	r0, [pc, #48]	; (8003cec <prvInitialiseTaskLists+0x70>)
 8003cbc:	f7fe fdd8 	bl	8002870 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003cc0:	480b      	ldr	r0, [pc, #44]	; (8003cf0 <prvInitialiseTaskLists+0x74>)
 8003cc2:	f7fe fdd5 	bl	8002870 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <prvInitialiseTaskLists+0x78>)
 8003cc8:	4a05      	ldr	r2, [pc, #20]	; (8003ce0 <prvInitialiseTaskLists+0x64>)
 8003cca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ccc:	4b0a      	ldr	r3, [pc, #40]	; (8003cf8 <prvInitialiseTaskLists+0x7c>)
 8003cce:	4a05      	ldr	r2, [pc, #20]	; (8003ce4 <prvInitialiseTaskLists+0x68>)
 8003cd0:	601a      	str	r2, [r3, #0]
}
 8003cd2:	bf00      	nop
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	200000a4 	.word	0x200000a4
 8003ce0:	20000108 	.word	0x20000108
 8003ce4:	2000011c 	.word	0x2000011c
 8003ce8:	20000138 	.word	0x20000138
 8003cec:	2000014c 	.word	0x2000014c
 8003cf0:	20000164 	.word	0x20000164
 8003cf4:	20000130 	.word	0x20000130
 8003cf8:	20000134 	.word	0x20000134

08003cfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d02:	e019      	b.n	8003d38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003d04:	f000 fe5a 	bl	80049bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d08:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <prvCheckTasksWaitingTermination+0x4c>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3304      	adds	r3, #4
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fe fe35 	bl	8002984 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003d1a:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <prvCheckTasksWaitingTermination+0x50>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	4a0a      	ldr	r2, [pc, #40]	; (8003d4c <prvCheckTasksWaitingTermination+0x50>)
 8003d22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003d24:	4b0a      	ldr	r3, [pc, #40]	; (8003d50 <prvCheckTasksWaitingTermination+0x54>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	4a09      	ldr	r2, [pc, #36]	; (8003d50 <prvCheckTasksWaitingTermination+0x54>)
 8003d2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003d2e:	f000 fe73 	bl	8004a18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f80e 	bl	8003d54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d38:	4b05      	ldr	r3, [pc, #20]	; (8003d50 <prvCheckTasksWaitingTermination+0x54>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1e1      	bne.n	8003d04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d40:	bf00      	nop
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	2000014c 	.word	0x2000014c
 8003d4c:	20000178 	.word	0x20000178
 8003d50:	20000160 	.word	0x20000160

08003d54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d60:	4618      	mov	r0, r3
 8003d62:	f001 f807 	bl	8004d74 <vPortFree>
			vPortFree( pxTCB );
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f001 f804 	bl	8004d74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d6c:	bf00      	nop
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d7a:	4b0c      	ldr	r3, [pc, #48]	; (8003dac <prvResetNextTaskUnblockTime+0x38>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d104      	bne.n	8003d8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d84:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <prvResetNextTaskUnblockTime+0x3c>)
 8003d86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d8c:	e008      	b.n	8003da0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d8e:	4b07      	ldr	r3, [pc, #28]	; (8003dac <prvResetNextTaskUnblockTime+0x38>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	4a04      	ldr	r2, [pc, #16]	; (8003db0 <prvResetNextTaskUnblockTime+0x3c>)
 8003d9e:	6013      	str	r3, [r2, #0]
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	20000130 	.word	0x20000130
 8003db0:	20000198 	.word	0x20000198

08003db4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003dba:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <xTaskGetSchedulerState+0x34>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d102      	bne.n	8003dc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	607b      	str	r3, [r7, #4]
 8003dc6:	e008      	b.n	8003dda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dc8:	4b08      	ldr	r3, [pc, #32]	; (8003dec <xTaskGetSchedulerState+0x38>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d102      	bne.n	8003dd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	607b      	str	r3, [r7, #4]
 8003dd4:	e001      	b.n	8003dda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003dda:	687b      	ldr	r3, [r7, #4]
	}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	20000184 	.word	0x20000184
 8003dec:	200001a0 	.word	0x200001a0

08003df0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d06c      	beq.n	8003ee0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e06:	4b39      	ldr	r3, [pc, #228]	; (8003eec <xTaskPriorityDisinherit+0xfc>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d009      	beq.n	8003e24 <xTaskPriorityDisinherit+0x34>
 8003e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	e7fe      	b.n	8003e22 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d109      	bne.n	8003e40 <xTaskPriorityDisinherit+0x50>
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	60bb      	str	r3, [r7, #8]
 8003e3e:	e7fe      	b.n	8003e3e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e44:	1e5a      	subs	r2, r3, #1
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d044      	beq.n	8003ee0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d140      	bne.n	8003ee0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	3304      	adds	r3, #4
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fe fd8e 	bl	8002984 <uxListRemove>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d115      	bne.n	8003e9a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e72:	491f      	ldr	r1, [pc, #124]	; (8003ef0 <xTaskPriorityDisinherit+0x100>)
 8003e74:	4613      	mov	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10a      	bne.n	8003e9a <xTaskPriorityDisinherit+0xaa>
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	2201      	movs	r2, #1
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	43da      	mvns	r2, r3
 8003e90:	4b18      	ldr	r3, [pc, #96]	; (8003ef4 <xTaskPriorityDisinherit+0x104>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4013      	ands	r3, r2
 8003e96:	4a17      	ldr	r2, [pc, #92]	; (8003ef4 <xTaskPriorityDisinherit+0x104>)
 8003e98:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea6:	f1c3 0205 	rsb	r2, r3, #5
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	409a      	lsls	r2, r3
 8003eb6:	4b0f      	ldr	r3, [pc, #60]	; (8003ef4 <xTaskPriorityDisinherit+0x104>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	4a0d      	ldr	r2, [pc, #52]	; (8003ef4 <xTaskPriorityDisinherit+0x104>)
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4a08      	ldr	r2, [pc, #32]	; (8003ef0 <xTaskPriorityDisinherit+0x100>)
 8003ece:	441a      	add	r2, r3
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	f7fe fcf7 	bl	80028ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003edc:	2301      	movs	r3, #1
 8003ede:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ee0:	697b      	ldr	r3, [r7, #20]
	}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	200000a0 	.word	0x200000a0
 8003ef0:	200000a4 	.word	0x200000a4
 8003ef4:	20000180 	.word	0x20000180

08003ef8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8003f06:	f000 fd59 	bl	80049bc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8003f0a:	4b26      	ldr	r3, [pc, #152]	; (8003fa4 <xTaskNotifyWait+0xac>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d01a      	beq.n	8003f4e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8003f18:	4b22      	ldr	r3, [pc, #136]	; (8003fa4 <xTaskNotifyWait+0xac>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	43d2      	mvns	r2, r2
 8003f22:	400a      	ands	r2, r1
 8003f24:	651a      	str	r2, [r3, #80]	; 0x50

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8003f26:	4b1f      	ldr	r3, [pc, #124]	; (8003fa4 <xTaskNotifyWait+0xac>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

				if( xTicksToWait > ( TickType_t ) 0 )
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00b      	beq.n	8003f4e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f36:	2101      	movs	r1, #1
 8003f38:	6838      	ldr	r0, [r7, #0]
 8003f3a:	f000 f8e9 	bl	8004110 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8003f3e:	4b1a      	ldr	r3, [pc, #104]	; (8003fa8 <xTaskNotifyWait+0xb0>)
 8003f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8003f4e:	f000 fd63 	bl	8004a18 <vPortExitCritical>

		taskENTER_CRITICAL();
 8003f52:	f000 fd33 	bl	80049bc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d004      	beq.n	8003f66 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8003f5c:	4b11      	ldr	r3, [pc, #68]	; (8003fa4 <xTaskNotifyWait+0xac>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8003f66:	4b0f      	ldr	r3, [pc, #60]	; (8003fa4 <xTaskNotifyWait+0xac>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d002      	beq.n	8003f7a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	e008      	b.n	8003f8c <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8003f7a:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <xTaskNotifyWait+0xac>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	43d2      	mvns	r2, r2
 8003f84:	400a      	ands	r2, r1
 8003f86:	651a      	str	r2, [r3, #80]	; 0x50
				xReturn = pdTRUE;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f8c:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <xTaskNotifyWait+0xac>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
		}
		taskEXIT_CRITICAL();
 8003f96:	f000 fd3f 	bl	8004a18 <vPortExitCritical>

		return xReturn;
 8003f9a:	697b      	ldr	r3, [r7, #20]
	}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	200000a0 	.word	0x200000a0
 8003fa8:	e000ed04 	.word	0xe000ed04

08003fac <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b08a      	sub	sp, #40	; 0x28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <xTaskGenericNotify+0x2e>
 8003fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fca:	f383 8811 	msr	BASEPRI, r3
 8003fce:	f3bf 8f6f 	isb	sy
 8003fd2:	f3bf 8f4f 	dsb	sy
 8003fd6:	61bb      	str	r3, [r7, #24]
 8003fd8:	e7fe      	b.n	8003fd8 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8003fde:	f000 fced 	bl	80049bc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003ff6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

			switch( eAction )
 8004000:	79fb      	ldrb	r3, [r7, #7]
 8004002:	2b04      	cmp	r3, #4
 8004004:	d827      	bhi.n	8004056 <xTaskGenericNotify+0xaa>
 8004006:	a201      	add	r2, pc, #4	; (adr r2, 800400c <xTaskGenericNotify+0x60>)
 8004008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400c:	08004075 	.word	0x08004075
 8004010:	08004021 	.word	0x08004021
 8004014:	0800402f 	.word	0x0800402f
 8004018:	0800403b 	.word	0x0800403b
 800401c:	08004043 	.word	0x08004043
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	431a      	orrs	r2, r3
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 800402c:	e025      	b.n	800407a <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8004038:	e01f      	b.n	800407a <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	651a      	str	r2, [r3, #80]	; 0x50
					break;
 8004040:	e01b      	b.n	800407a <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004042:	7ffb      	ldrb	r3, [r7, #31]
 8004044:	2b02      	cmp	r3, #2
 8004046:	d003      	beq.n	8004050 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	651a      	str	r2, [r3, #80]	; 0x50
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800404e:	e014      	b.n	800407a <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8004050:	2300      	movs	r3, #0
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8004054:	e011      	b.n	800407a <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800405a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800405e:	d00b      	beq.n	8004078 <xTaskGenericNotify+0xcc>
 8004060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004064:	f383 8811 	msr	BASEPRI, r3
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	e7fe      	b.n	8004072 <xTaskGenericNotify+0xc6>
					break;
 8004074:	bf00      	nop
 8004076:	e000      	b.n	800407a <xTaskGenericNotify+0xce>

					break;
 8004078:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800407a:	7ffb      	ldrb	r3, [r7, #31]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d138      	bne.n	80040f2 <xTaskGenericNotify+0x146>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	3304      	adds	r3, #4
 8004084:	4618      	mov	r0, r3
 8004086:	f7fe fc7d 	bl	8002984 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408e:	2201      	movs	r2, #1
 8004090:	409a      	lsls	r2, r3
 8004092:	4b1b      	ldr	r3, [pc, #108]	; (8004100 <xTaskGenericNotify+0x154>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4313      	orrs	r3, r2
 8004098:	4a19      	ldr	r2, [pc, #100]	; (8004100 <xTaskGenericNotify+0x154>)
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a0:	4613      	mov	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4a16      	ldr	r2, [pc, #88]	; (8004104 <xTaskGenericNotify+0x158>)
 80040aa:	441a      	add	r2, r3
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	3304      	adds	r3, #4
 80040b0:	4619      	mov	r1, r3
 80040b2:	4610      	mov	r0, r2
 80040b4:	f7fe fc09 	bl	80028ca <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d009      	beq.n	80040d4 <xTaskGenericNotify+0x128>
 80040c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	e7fe      	b.n	80040d2 <xTaskGenericNotify+0x126>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d8:	4b0b      	ldr	r3, [pc, #44]	; (8004108 <xTaskGenericNotify+0x15c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040de:	429a      	cmp	r2, r3
 80040e0:	d907      	bls.n	80040f2 <xTaskGenericNotify+0x146>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80040e2:	4b0a      	ldr	r3, [pc, #40]	; (800410c <xTaskGenericNotify+0x160>)
 80040e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80040f2:	f000 fc91 	bl	8004a18 <vPortExitCritical>

		return xReturn;
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3728      	adds	r7, #40	; 0x28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	20000180 	.word	0x20000180
 8004104:	200000a4 	.word	0x200000a4
 8004108:	200000a0 	.word	0x200000a0
 800410c:	e000ed04 	.word	0xe000ed04

08004110 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800411a:	4b29      	ldr	r3, [pc, #164]	; (80041c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004120:	4b28      	ldr	r3, [pc, #160]	; (80041c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3304      	adds	r3, #4
 8004126:	4618      	mov	r0, r3
 8004128:	f7fe fc2c 	bl	8002984 <uxListRemove>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10b      	bne.n	800414a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004132:	4b24      	ldr	r3, [pc, #144]	; (80041c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004138:	2201      	movs	r2, #1
 800413a:	fa02 f303 	lsl.w	r3, r2, r3
 800413e:	43da      	mvns	r2, r3
 8004140:	4b21      	ldr	r3, [pc, #132]	; (80041c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4013      	ands	r3, r2
 8004146:	4a20      	ldr	r2, [pc, #128]	; (80041c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004148:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004150:	d10a      	bne.n	8004168 <prvAddCurrentTaskToDelayedList+0x58>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d007      	beq.n	8004168 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004158:	4b1a      	ldr	r3, [pc, #104]	; (80041c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3304      	adds	r3, #4
 800415e:	4619      	mov	r1, r3
 8004160:	481a      	ldr	r0, [pc, #104]	; (80041cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004162:	f7fe fbb2 	bl	80028ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004166:	e026      	b.n	80041b6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4413      	add	r3, r2
 800416e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004170:	4b14      	ldr	r3, [pc, #80]	; (80041c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	429a      	cmp	r2, r3
 800417e:	d209      	bcs.n	8004194 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004180:	4b13      	ldr	r3, [pc, #76]	; (80041d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	4b0f      	ldr	r3, [pc, #60]	; (80041c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	3304      	adds	r3, #4
 800418a:	4619      	mov	r1, r3
 800418c:	4610      	mov	r0, r2
 800418e:	f7fe fbc0 	bl	8002912 <vListInsert>
}
 8004192:	e010      	b.n	80041b6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004194:	4b0f      	ldr	r3, [pc, #60]	; (80041d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	4b0a      	ldr	r3, [pc, #40]	; (80041c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3304      	adds	r3, #4
 800419e:	4619      	mov	r1, r3
 80041a0:	4610      	mov	r0, r2
 80041a2:	f7fe fbb6 	bl	8002912 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80041a6:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d202      	bcs.n	80041b6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80041b0:	4a09      	ldr	r2, [pc, #36]	; (80041d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	6013      	str	r3, [r2, #0]
}
 80041b6:	bf00      	nop
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	2000017c 	.word	0x2000017c
 80041c4:	200000a0 	.word	0x200000a0
 80041c8:	20000180 	.word	0x20000180
 80041cc:	20000164 	.word	0x20000164
 80041d0:	20000134 	.word	0x20000134
 80041d4:	20000130 	.word	0x20000130
 80041d8:	20000198 	.word	0x20000198

080041dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80041e6:	f000 fa8f 	bl	8004708 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80041ea:	4b11      	ldr	r3, [pc, #68]	; (8004230 <xTimerCreateTimerTask+0x54>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00b      	beq.n	800420a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80041f2:	4b10      	ldr	r3, [pc, #64]	; (8004234 <xTimerCreateTimerTask+0x58>)
 80041f4:	9301      	str	r3, [sp, #4]
 80041f6:	2302      	movs	r3, #2
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	2300      	movs	r3, #0
 80041fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004200:	490d      	ldr	r1, [pc, #52]	; (8004238 <xTimerCreateTimerTask+0x5c>)
 8004202:	480e      	ldr	r0, [pc, #56]	; (800423c <xTimerCreateTimerTask+0x60>)
 8004204:	f7ff f884 	bl	8003310 <xTaskCreate>
 8004208:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d109      	bne.n	8004224 <xTimerCreateTimerTask+0x48>
 8004210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	603b      	str	r3, [r7, #0]
 8004222:	e7fe      	b.n	8004222 <xTimerCreateTimerTask+0x46>
	return xReturn;
 8004224:	687b      	ldr	r3, [r7, #4]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	200001d4 	.word	0x200001d4
 8004234:	200001d8 	.word	0x200001d8
 8004238:	0800587c 	.word	0x0800587c
 800423c:	08004359 	.word	0x08004359

08004240 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b08a      	sub	sp, #40	; 0x28
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
 800424c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800424e:	2300      	movs	r3, #0
 8004250:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d109      	bne.n	800426c <xTimerGenericCommand+0x2c>
 8004258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425c:	f383 8811 	msr	BASEPRI, r3
 8004260:	f3bf 8f6f 	isb	sy
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	623b      	str	r3, [r7, #32]
 800426a:	e7fe      	b.n	800426a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800426c:	4b19      	ldr	r3, [pc, #100]	; (80042d4 <xTimerGenericCommand+0x94>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d02a      	beq.n	80042ca <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b05      	cmp	r3, #5
 8004284:	dc18      	bgt.n	80042b8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004286:	f7ff fd95 	bl	8003db4 <xTaskGetSchedulerState>
 800428a:	4603      	mov	r3, r0
 800428c:	2b02      	cmp	r3, #2
 800428e:	d109      	bne.n	80042a4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004290:	4b10      	ldr	r3, [pc, #64]	; (80042d4 <xTimerGenericCommand+0x94>)
 8004292:	6818      	ldr	r0, [r3, #0]
 8004294:	f107 0114 	add.w	r1, r7, #20
 8004298:	2300      	movs	r3, #0
 800429a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800429c:	f7fe fc62 	bl	8002b64 <xQueueGenericSend>
 80042a0:	6278      	str	r0, [r7, #36]	; 0x24
 80042a2:	e012      	b.n	80042ca <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80042a4:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <xTimerGenericCommand+0x94>)
 80042a6:	6818      	ldr	r0, [r3, #0]
 80042a8:	f107 0114 	add.w	r1, r7, #20
 80042ac:	2300      	movs	r3, #0
 80042ae:	2200      	movs	r2, #0
 80042b0:	f7fe fc58 	bl	8002b64 <xQueueGenericSend>
 80042b4:	6278      	str	r0, [r7, #36]	; 0x24
 80042b6:	e008      	b.n	80042ca <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80042b8:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <xTimerGenericCommand+0x94>)
 80042ba:	6818      	ldr	r0, [r3, #0]
 80042bc:	f107 0114 	add.w	r1, r7, #20
 80042c0:	2300      	movs	r3, #0
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	f7fe fd48 	bl	8002d58 <xQueueGenericSendFromISR>
 80042c8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3728      	adds	r7, #40	; 0x28
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	200001d4 	.word	0x200001d4

080042d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b088      	sub	sp, #32
 80042dc:	af02      	add	r7, sp, #8
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042e2:	4b1c      	ldr	r3, [pc, #112]	; (8004354 <prvProcessExpiredTimer+0x7c>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	3304      	adds	r3, #4
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fe fb47 	bl	8002984 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d121      	bne.n	8004342 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	699a      	ldr	r2, [r3, #24]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	18d1      	adds	r1, r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	683a      	ldr	r2, [r7, #0]
 800430a:	6978      	ldr	r0, [r7, #20]
 800430c:	f000 f8c8 	bl	80044a0 <prvInsertTimerInActiveList>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d015      	beq.n	8004342 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004316:	2300      	movs	r3, #0
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	2300      	movs	r3, #0
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	2100      	movs	r1, #0
 8004320:	6978      	ldr	r0, [r7, #20]
 8004322:	f7ff ff8d 	bl	8004240 <xTimerGenericCommand>
 8004326:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d109      	bne.n	8004342 <prvProcessExpiredTimer+0x6a>
 800432e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004332:	f383 8811 	msr	BASEPRI, r3
 8004336:	f3bf 8f6f 	isb	sy
 800433a:	f3bf 8f4f 	dsb	sy
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	e7fe      	b.n	8004340 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	6978      	ldr	r0, [r7, #20]
 8004348:	4798      	blx	r3
}
 800434a:	bf00      	nop
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	200001cc 	.word	0x200001cc

08004358 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004360:	f107 0308 	add.w	r3, r7, #8
 8004364:	4618      	mov	r0, r3
 8004366:	f000 f857 	bl	8004418 <prvGetNextExpireTime>
 800436a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4619      	mov	r1, r3
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 f803 	bl	800437c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004376:	f000 f8d5 	bl	8004524 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800437a:	e7f1      	b.n	8004360 <prvTimerTask+0x8>

0800437c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004386:	f7ff f951 	bl	800362c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800438a:	f107 0308 	add.w	r3, r7, #8
 800438e:	4618      	mov	r0, r3
 8004390:	f000 f866 	bl	8004460 <prvSampleTimeNow>
 8004394:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d130      	bne.n	80043fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10a      	bne.n	80043b8 <prvProcessTimerOrBlockTask+0x3c>
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d806      	bhi.n	80043b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80043aa:	f7ff f94d 	bl	8003648 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80043ae:	68f9      	ldr	r1, [r7, #12]
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff ff91 	bl	80042d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80043b6:	e024      	b.n	8004402 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d008      	beq.n	80043d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80043be:	4b13      	ldr	r3, [pc, #76]	; (800440c <prvProcessTimerOrBlockTask+0x90>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <prvProcessTimerOrBlockTask+0x50>
 80043c8:	2301      	movs	r3, #1
 80043ca:	e000      	b.n	80043ce <prvProcessTimerOrBlockTask+0x52>
 80043cc:	2300      	movs	r3, #0
 80043ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80043d0:	4b0f      	ldr	r3, [pc, #60]	; (8004410 <prvProcessTimerOrBlockTask+0x94>)
 80043d2:	6818      	ldr	r0, [r3, #0]
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	4619      	mov	r1, r3
 80043de:	f7fe ff63 	bl	80032a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80043e2:	f7ff f931 	bl	8003648 <xTaskResumeAll>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10a      	bne.n	8004402 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80043ec:	4b09      	ldr	r3, [pc, #36]	; (8004414 <prvProcessTimerOrBlockTask+0x98>)
 80043ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	f3bf 8f6f 	isb	sy
}
 80043fc:	e001      	b.n	8004402 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80043fe:	f7ff f923 	bl	8003648 <xTaskResumeAll>
}
 8004402:	bf00      	nop
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	200001d0 	.word	0x200001d0
 8004410:	200001d4 	.word	0x200001d4
 8004414:	e000ed04 	.word	0xe000ed04

08004418 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004420:	4b0e      	ldr	r3, [pc, #56]	; (800445c <prvGetNextExpireTime+0x44>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <prvGetNextExpireTime+0x16>
 800442a:	2201      	movs	r2, #1
 800442c:	e000      	b.n	8004430 <prvGetNextExpireTime+0x18>
 800442e:	2200      	movs	r2, #0
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d105      	bne.n	8004448 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800443c:	4b07      	ldr	r3, [pc, #28]	; (800445c <prvGetNextExpireTime+0x44>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	e001      	b.n	800444c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800444c:	68fb      	ldr	r3, [r7, #12]
}
 800444e:	4618      	mov	r0, r3
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	200001cc 	.word	0x200001cc

08004460 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004468:	f7ff f98a 	bl	8003780 <xTaskGetTickCount>
 800446c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800446e:	4b0b      	ldr	r3, [pc, #44]	; (800449c <prvSampleTimeNow+0x3c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	429a      	cmp	r2, r3
 8004476:	d205      	bcs.n	8004484 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004478:	f000 f8e6 	bl	8004648 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	e002      	b.n	800448a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800448a:	4a04      	ldr	r2, [pc, #16]	; (800449c <prvSampleTimeNow+0x3c>)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004490:	68fb      	ldr	r3, [r7, #12]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	200001dc 	.word	0x200001dc

080044a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80044ae:	2300      	movs	r3, #0
 80044b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d812      	bhi.n	80044ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	1ad2      	subs	r2, r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d302      	bcc.n	80044da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80044d4:	2301      	movs	r3, #1
 80044d6:	617b      	str	r3, [r7, #20]
 80044d8:	e01b      	b.n	8004512 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80044da:	4b10      	ldr	r3, [pc, #64]	; (800451c <prvInsertTimerInActiveList+0x7c>)
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	3304      	adds	r3, #4
 80044e2:	4619      	mov	r1, r3
 80044e4:	4610      	mov	r0, r2
 80044e6:	f7fe fa14 	bl	8002912 <vListInsert>
 80044ea:	e012      	b.n	8004512 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d206      	bcs.n	8004502 <prvInsertTimerInActiveList+0x62>
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d302      	bcc.n	8004502 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80044fc:	2301      	movs	r3, #1
 80044fe:	617b      	str	r3, [r7, #20]
 8004500:	e007      	b.n	8004512 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004502:	4b07      	ldr	r3, [pc, #28]	; (8004520 <prvInsertTimerInActiveList+0x80>)
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3304      	adds	r3, #4
 800450a:	4619      	mov	r1, r3
 800450c:	4610      	mov	r0, r2
 800450e:	f7fe fa00 	bl	8002912 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004512:	697b      	ldr	r3, [r7, #20]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	200001d0 	.word	0x200001d0
 8004520:	200001cc 	.word	0x200001cc

08004524 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b08c      	sub	sp, #48	; 0x30
 8004528:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800452a:	e07a      	b.n	8004622 <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	2b00      	cmp	r3, #0
 8004530:	db76      	blt.n	8004620 <prvProcessReceivedCommands+0xfc>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d004      	beq.n	8004548 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	3304      	adds	r3, #4
 8004542:	4618      	mov	r0, r3
 8004544:	f7fe fa1e 	bl	8002984 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004548:	1d3b      	adds	r3, r7, #4
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff ff88 	bl	8004460 <prvSampleTimeNow>
 8004550:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b09      	cmp	r3, #9
 8004556:	d864      	bhi.n	8004622 <prvProcessReceivedCommands+0xfe>
 8004558:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <prvProcessReceivedCommands+0x3c>)
 800455a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800455e:	bf00      	nop
 8004560:	08004589 	.word	0x08004589
 8004564:	08004589 	.word	0x08004589
 8004568:	08004589 	.word	0x08004589
 800456c:	08004623 	.word	0x08004623
 8004570:	080045e3 	.word	0x080045e3
 8004574:	08004619 	.word	0x08004619
 8004578:	08004589 	.word	0x08004589
 800457c:	08004589 	.word	0x08004589
 8004580:	08004623 	.word	0x08004623
 8004584:	080045e3 	.word	0x080045e3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	18d1      	adds	r1, r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6a3a      	ldr	r2, [r7, #32]
 8004594:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004596:	f7ff ff83 	bl	80044a0 <prvInsertTimerInActiveList>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d040      	beq.n	8004622 <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045a6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d138      	bne.n	8004622 <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	441a      	add	r2, r3
 80045b8:	2300      	movs	r3, #0
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	2300      	movs	r3, #0
 80045be:	2100      	movs	r1, #0
 80045c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045c2:	f7ff fe3d 	bl	8004240 <xTimerGenericCommand>
 80045c6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d129      	bne.n	8004622 <prvProcessReceivedCommands+0xfe>
 80045ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d2:	f383 8811 	msr	BASEPRI, r3
 80045d6:	f3bf 8f6f 	isb	sy
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	61bb      	str	r3, [r7, #24]
 80045e0:	e7fe      	b.n	80045e0 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d109      	bne.n	8004604 <prvProcessReceivedCommands+0xe0>
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	617b      	str	r3, [r7, #20]
 8004602:	e7fe      	b.n	8004602 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	699a      	ldr	r2, [r3, #24]
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	18d1      	adds	r1, r2, r3
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	6a3a      	ldr	r2, [r7, #32]
 8004610:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004612:	f7ff ff45 	bl	80044a0 <prvInsertTimerInActiveList>
					break;
 8004616:	e004      	b.n	8004622 <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8004618:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800461a:	f000 fbab 	bl	8004d74 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800461e:	e000      	b.n	8004622 <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004620:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004622:	4b08      	ldr	r3, [pc, #32]	; (8004644 <prvProcessReceivedCommands+0x120>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f107 0108 	add.w	r1, r7, #8
 800462a:	2200      	movs	r2, #0
 800462c:	4618      	mov	r0, r3
 800462e:	f7fe fc27 	bl	8002e80 <xQueueReceive>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	f47f af79 	bne.w	800452c <prvProcessReceivedCommands+0x8>
	}
}
 800463a:	bf00      	nop
 800463c:	3728      	adds	r7, #40	; 0x28
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	200001d4 	.word	0x200001d4

08004648 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b088      	sub	sp, #32
 800464c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800464e:	e044      	b.n	80046da <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004650:	4b2b      	ldr	r3, [pc, #172]	; (8004700 <prvSwitchTimerLists+0xb8>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800465a:	4b29      	ldr	r3, [pc, #164]	; (8004700 <prvSwitchTimerLists+0xb8>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	3304      	adds	r3, #4
 8004668:	4618      	mov	r0, r3
 800466a:	f7fe f98b 	bl	8002984 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d12d      	bne.n	80046da <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4413      	add	r3, r2
 8004686:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	429a      	cmp	r2, r3
 800468e:	d90e      	bls.n	80046ae <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800469c:	4b18      	ldr	r3, [pc, #96]	; (8004700 <prvSwitchTimerLists+0xb8>)
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	3304      	adds	r3, #4
 80046a4:	4619      	mov	r1, r3
 80046a6:	4610      	mov	r0, r2
 80046a8:	f7fe f933 	bl	8002912 <vListInsert>
 80046ac:	e015      	b.n	80046da <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046ae:	2300      	movs	r3, #0
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	2300      	movs	r3, #0
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	2100      	movs	r1, #0
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f7ff fdc1 	bl	8004240 <xTimerGenericCommand>
 80046be:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d109      	bne.n	80046da <prvSwitchTimerLists+0x92>
 80046c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ca:	f383 8811 	msr	BASEPRI, r3
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	603b      	str	r3, [r7, #0]
 80046d8:	e7fe      	b.n	80046d8 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80046da:	4b09      	ldr	r3, [pc, #36]	; (8004700 <prvSwitchTimerLists+0xb8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1b5      	bne.n	8004650 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80046e4:	4b06      	ldr	r3, [pc, #24]	; (8004700 <prvSwitchTimerLists+0xb8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80046ea:	4b06      	ldr	r3, [pc, #24]	; (8004704 <prvSwitchTimerLists+0xbc>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a04      	ldr	r2, [pc, #16]	; (8004700 <prvSwitchTimerLists+0xb8>)
 80046f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80046f2:	4a04      	ldr	r2, [pc, #16]	; (8004704 <prvSwitchTimerLists+0xbc>)
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	6013      	str	r3, [r2, #0]
}
 80046f8:	bf00      	nop
 80046fa:	3718      	adds	r7, #24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	200001cc 	.word	0x200001cc
 8004704:	200001d0 	.word	0x200001d0

08004708 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800470c:	f000 f956 	bl	80049bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004710:	4b12      	ldr	r3, [pc, #72]	; (800475c <prvCheckForValidListAndQueue+0x54>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d11d      	bne.n	8004754 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8004718:	4811      	ldr	r0, [pc, #68]	; (8004760 <prvCheckForValidListAndQueue+0x58>)
 800471a:	f7fe f8a9 	bl	8002870 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800471e:	4811      	ldr	r0, [pc, #68]	; (8004764 <prvCheckForValidListAndQueue+0x5c>)
 8004720:	f7fe f8a6 	bl	8002870 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004724:	4b10      	ldr	r3, [pc, #64]	; (8004768 <prvCheckForValidListAndQueue+0x60>)
 8004726:	4a0e      	ldr	r2, [pc, #56]	; (8004760 <prvCheckForValidListAndQueue+0x58>)
 8004728:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800472a:	4b10      	ldr	r3, [pc, #64]	; (800476c <prvCheckForValidListAndQueue+0x64>)
 800472c:	4a0d      	ldr	r2, [pc, #52]	; (8004764 <prvCheckForValidListAndQueue+0x5c>)
 800472e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004730:	2200      	movs	r2, #0
 8004732:	210c      	movs	r1, #12
 8004734:	200a      	movs	r0, #10
 8004736:	f7fe f9b7 	bl	8002aa8 <xQueueGenericCreate>
 800473a:	4602      	mov	r2, r0
 800473c:	4b07      	ldr	r3, [pc, #28]	; (800475c <prvCheckForValidListAndQueue+0x54>)
 800473e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004740:	4b06      	ldr	r3, [pc, #24]	; (800475c <prvCheckForValidListAndQueue+0x54>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d005      	beq.n	8004754 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004748:	4b04      	ldr	r3, [pc, #16]	; (800475c <prvCheckForValidListAndQueue+0x54>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4908      	ldr	r1, [pc, #32]	; (8004770 <prvCheckForValidListAndQueue+0x68>)
 800474e:	4618      	mov	r0, r3
 8004750:	f7fe fd82 	bl	8003258 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004754:	f000 f960 	bl	8004a18 <vPortExitCritical>
}
 8004758:	bf00      	nop
 800475a:	bd80      	pop	{r7, pc}
 800475c:	200001d4 	.word	0x200001d4
 8004760:	200001a4 	.word	0x200001a4
 8004764:	200001b8 	.word	0x200001b8
 8004768:	200001cc 	.word	0x200001cc
 800476c:	200001d0 	.word	0x200001d0
 8004770:	08005884 	.word	0x08005884

08004774 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t* pxPortInitialiseStack(StackType_t *pxTopOfStack,
		TaskFunction_t pxCode, void *pvParameters) {
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	 interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	 of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	3b04      	subs	r3, #4
 8004784:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800478c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	3b04      	subs	r3, #4
 8004792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ((StackType_t) pxCode) & portSTART_ADDRESS_MASK; /* PC */
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f023 0201 	bic.w	r2, r3, #1
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	3b04      	subs	r3, #4
 80047a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (StackType_t) portTASK_RETURN_ADDRESS; /* LR */
 80047a4:	4a0c      	ldr	r2, [pc, #48]	; (80047d8 <pxPortInitialiseStack+0x64>)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5; /* R12, R3, R2 and R1. */
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	3b14      	subs	r3, #20
 80047ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (StackType_t) pvParameters; /* R0 */
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	 own exec return value. */
	pxTopOfStack--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	3b04      	subs	r3, #4
 80047ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f06f 0202 	mvn.w	r2, #2
 80047c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	3b20      	subs	r3, #32
 80047c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80047ca:	68fb      	ldr	r3, [r7, #12]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr
 80047d8:	080047dd 	.word	0x080047dd

080047dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError(void) {
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
	volatile uint32_t ulDummy = 0;
 80047e2:	2300      	movs	r3, #0
 80047e4:	607b      	str	r3, [r7, #4]
	 its caller as there is nothing to return to.  If a task wants to exit it
	 should instead call vTaskDelete( NULL ).

	 Artificially force an assert() to be triggered if configASSERT() is
	 defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
 80047e6:	4b11      	ldr	r3, [pc, #68]	; (800482c <prvTaskExitError+0x50>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047ee:	d009      	beq.n	8004804 <prvTaskExitError+0x28>
 80047f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	60fb      	str	r3, [r7, #12]
 8004802:	e7fe      	b.n	8004802 <prvTaskExitError+0x26>
 8004804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while (ulDummy == 0) {
 8004816:	bf00      	nop
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0fc      	beq.n	8004818 <prvTaskExitError+0x3c>
		 about code appearing after this function is called - making ulDummy
		 volatile makes the compiler think the function could return and
		 therefore not output an 'unreachable code' warning for code that appears
		 after it. */
	}
}
 800481e:	bf00      	nop
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	2000000c 	.word	0x2000000c

08004830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler(void) {
	__asm volatile (
 8004830:	4b07      	ldr	r3, [pc, #28]	; (8004850 <pxCurrentTCBConst2>)
 8004832:	6819      	ldr	r1, [r3, #0]
 8004834:	6808      	ldr	r0, [r1, #0]
 8004836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800483a:	f380 8809 	msr	PSP, r0
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f04f 0000 	mov.w	r0, #0
 8004846:	f380 8811 	msr	BASEPRI, r0
 800484a:	4770      	bx	lr
 800484c:	f3af 8000 	nop.w

08004850 <pxCurrentTCBConst2>:
 8004850:	200000a0 	.word	0x200000a0
			"	bx r14							\n"
			"									\n"
			"	.align 4						\n"
			"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
	);
}
 8004854:	bf00      	nop
 8004856:	bf00      	nop

08004858 <prvPortStartFirstTask>:
static void prvPortStartFirstTask(void) {
	/* Start the first task.  This also clears the bit that indicates the FPU is
	 in use in case the FPU was used before the scheduler was started - which
	 would otherwise result in the unnecessary leaving of space in the SVC stack
	 for lazy saving of FPU registers. */
	__asm volatile(
 8004858:	4808      	ldr	r0, [pc, #32]	; (800487c <prvPortStartFirstTask+0x24>)
 800485a:	6800      	ldr	r0, [r0, #0]
 800485c:	6800      	ldr	r0, [r0, #0]
 800485e:	f380 8808 	msr	MSP, r0
 8004862:	f04f 0000 	mov.w	r0, #0
 8004866:	f380 8814 	msr	CONTROL, r0
 800486a:	b662      	cpsie	i
 800486c:	b661      	cpsie	f
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	df00      	svc	0
 8004878:	bf00      	nop
			" dsb					\n"
			" isb					\n"
			" svc 0					\n" /* System call to start first task. */
			" nop					\n"
	);
}
 800487a:	bf00      	nop
 800487c:	e000ed08 	.word	0xe000ed08

08004880 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler(void) {
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
	configASSERT(configMAX_SYSCALL_INTERRUPT_PRIORITY);

	/* This port can be used on all revisions of the Cortex-M7 core other than
	 the r0p1 parts.  r0p1 parts should use the port from the
	 /source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
 8004886:	4b44      	ldr	r3, [pc, #272]	; (8004998 <xPortStartScheduler+0x118>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a44      	ldr	r2, [pc, #272]	; (800499c <xPortStartScheduler+0x11c>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d109      	bne.n	80048a4 <xPortStartScheduler+0x24>
 8004890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	613b      	str	r3, [r7, #16]
 80048a2:	e7fe      	b.n	80048a2 <xPortStartScheduler+0x22>
	configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
 80048a4:	4b3c      	ldr	r3, [pc, #240]	; (8004998 <xPortStartScheduler+0x118>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a3d      	ldr	r2, [pc, #244]	; (80049a0 <xPortStartScheduler+0x120>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d109      	bne.n	80048c2 <xPortStartScheduler+0x42>
 80048ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	e7fe      	b.n	80048c0 <xPortStartScheduler+0x40>

#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t *const pucFirstUserPriorityRegister =
 80048c2:	4b38      	ldr	r3, [pc, #224]	; (80049a4 <xPortStartScheduler+0x124>)
 80048c4:	617b      	str	r3, [r7, #20]
		 functions can be called.  ISR safe functions are those that end in
		 "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		 ensure interrupt entry is as fast and simple as possible.

		 Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		 possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	22ff      	movs	r2, #255	; 0xff
 80048d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY
				& ucMaxPriorityValue;
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80048e4:	b2da      	uxtb	r2, r3
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY
 80048e6:	4b30      	ldr	r3, [pc, #192]	; (80049a8 <xPortStartScheduler+0x128>)
 80048e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		 of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80048ea:	4b30      	ldr	r3, [pc, #192]	; (80049ac <xPortStartScheduler+0x12c>)
 80048ec:	2207      	movs	r2, #7
 80048ee:	601a      	str	r2, [r3, #0]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 80048f0:	e009      	b.n	8004906 <xPortStartScheduler+0x86>
			ulMaxPRIGROUPValue--;
 80048f2:	4b2e      	ldr	r3, [pc, #184]	; (80049ac <xPortStartScheduler+0x12c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	4a2c      	ldr	r2, [pc, #176]	; (80049ac <xPortStartScheduler+0x12c>)
 80048fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= (uint8_t) 0x01;
 80048fc:	78fb      	ldrb	r3, [r7, #3]
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	b2db      	uxtb	r3, r3
 8004904:	70fb      	strb	r3, [r7, #3]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 8004906:	78fb      	ldrb	r3, [r7, #3]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490e:	2b80      	cmp	r3, #128	; 0x80
 8004910:	d0ef      	beq.n	80048f2 <xPortStartScheduler+0x72>
#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			 priority bits matches the number of priority bits actually queried
			 from the hardware. */
			configASSERT(
 8004912:	4b26      	ldr	r3, [pc, #152]	; (80049ac <xPortStartScheduler+0x12c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f1c3 0307 	rsb	r3, r3, #7
 800491a:	2b04      	cmp	r3, #4
 800491c:	d009      	beq.n	8004932 <xPortStartScheduler+0xb2>
 800491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	60bb      	str	r3, [r7, #8]
 8004930:	e7fe      	b.n	8004930 <xPortStartScheduler+0xb0>
		}
#endif

		/* Shift the priority group value back to its position within the AIRCR
		 register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004932:	4b1e      	ldr	r3, [pc, #120]	; (80049ac <xPortStartScheduler+0x12c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	021b      	lsls	r3, r3, #8
 8004938:	4a1c      	ldr	r2, [pc, #112]	; (80049ac <xPortStartScheduler+0x12c>)
 800493a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800493c:	4b1b      	ldr	r3, [pc, #108]	; (80049ac <xPortStartScheduler+0x12c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004944:	4a19      	ldr	r2, [pc, #100]	; (80049ac <xPortStartScheduler+0x12c>)
 8004946:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		 value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	b2da      	uxtb	r2, r3
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	701a      	strb	r2, [r3, #0]
	}
#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004950:	4b17      	ldr	r3, [pc, #92]	; (80049b0 <xPortStartScheduler+0x130>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a16      	ldr	r2, [pc, #88]	; (80049b0 <xPortStartScheduler+0x130>)
 8004956:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800495a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800495c:	4b14      	ldr	r3, [pc, #80]	; (80049b0 <xPortStartScheduler+0x130>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a13      	ldr	r2, [pc, #76]	; (80049b0 <xPortStartScheduler+0x130>)
 8004962:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004966:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	 here already. */
	vPortSetupTimerInterrupt();
 8004968:	f000 f8d6 	bl	8004b18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800496c:	4b11      	ldr	r3, [pc, #68]	; (80049b4 <xPortStartScheduler+0x134>)
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004972:	f000 f8f5 	bl	8004b60 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR) |= portASPEN_AND_LSPEN_BITS;
 8004976:	4b10      	ldr	r3, [pc, #64]	; (80049b8 <xPortStartScheduler+0x138>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a0f      	ldr	r2, [pc, #60]	; (80049b8 <xPortStartScheduler+0x138>)
 800497c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004980:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004982:	f7ff ff69 	bl	8004858 <prvPortStartFirstTask>
	 exit error function to prevent compiler warnings about a static function
	 not being called in the case that the application writer overrides this
	 functionality by defining configTASK_RETURN_ADDRESS.  Call
	 vTaskSwitchContext() so link time optimisation does not remove the
	 symbol. */
	vTaskSwitchContext();
 8004986:	f7fe ffd5 	bl	8003934 <vTaskSwitchContext>
	prvTaskExitError();
 800498a:	f7ff ff27 	bl	80047dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	e000ed00 	.word	0xe000ed00
 800499c:	410fc271 	.word	0x410fc271
 80049a0:	410fc270 	.word	0x410fc270
 80049a4:	e000e400 	.word	0xe000e400
 80049a8:	200001e0 	.word	0x200001e0
 80049ac:	200001e4 	.word	0x200001e4
 80049b0:	e000ed20 	.word	0xe000ed20
 80049b4:	2000000c 	.word	0x2000000c
 80049b8:	e000ef34 	.word	0xe000ef34

080049bc <vPortEnterCritical>:
	 Artificially force an assert. */
	configASSERT(uxCriticalNesting == 1000UL);
}
/*-----------------------------------------------------------*/

void vPortEnterCritical(void) {
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80049d4:	4b0e      	ldr	r3, [pc, #56]	; (8004a10 <vPortEnterCritical+0x54>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3301      	adds	r3, #1
 80049da:	4a0d      	ldr	r2, [pc, #52]	; (8004a10 <vPortEnterCritical+0x54>)
 80049dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	 assert() if it is being called from an interrupt context.  Only API
	 functions that end in "FromISR" can be used in an interrupt.  Only assert if
	 the critical nesting count is 1 to protect against recursive calls if the
	 assert function also uses a critical section. */
	if (uxCriticalNesting == 1) {
 80049de:	4b0c      	ldr	r3, [pc, #48]	; (8004a10 <vPortEnterCritical+0x54>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d10e      	bne.n	8004a04 <vPortEnterCritical+0x48>
		configASSERT(( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0);
 80049e6:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <vPortEnterCritical+0x58>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d009      	beq.n	8004a04 <vPortEnterCritical+0x48>
 80049f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	603b      	str	r3, [r7, #0]
 8004a02:	e7fe      	b.n	8004a02 <vPortEnterCritical+0x46>
	}
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	2000000c 	.word	0x2000000c
 8004a14:	e000ed04 	.word	0xe000ed04

08004a18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical(void) {
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
	configASSERT(uxCriticalNesting);
 8004a1e:	4b11      	ldr	r3, [pc, #68]	; (8004a64 <vPortExitCritical+0x4c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d109      	bne.n	8004a3a <vPortExitCritical+0x22>
 8004a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2a:	f383 8811 	msr	BASEPRI, r3
 8004a2e:	f3bf 8f6f 	isb	sy
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	607b      	str	r3, [r7, #4]
 8004a38:	e7fe      	b.n	8004a38 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004a3a:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <vPortExitCritical+0x4c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	4a08      	ldr	r2, [pc, #32]	; (8004a64 <vPortExitCritical+0x4c>)
 8004a42:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
 8004a44:	4b07      	ldr	r3, [pc, #28]	; (8004a64 <vPortExitCritical+0x4c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d104      	bne.n	8004a56 <vPortExitCritical+0x3e>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	f383 8811 	msr	BASEPRI, r3
		portENABLE_INTERRUPTS();
	}
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	2000000c 	.word	0x2000000c
	...

08004a70 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void xPortPendSVHandler(void) {
	/* This is a naked function. */

	__asm volatile
 8004a70:	f3ef 8009 	mrs	r0, PSP
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	4b15      	ldr	r3, [pc, #84]	; (8004ad0 <pxCurrentTCBConst>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	f01e 0f10 	tst.w	lr, #16
 8004a80:	bf08      	it	eq
 8004a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a8a:	6010      	str	r0, [r2, #0]
 8004a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004a90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a94:	f380 8811 	msr	BASEPRI, r0
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f7fe ff48 	bl	8003934 <vTaskSwitchContext>
 8004aa4:	f04f 0000 	mov.w	r0, #0
 8004aa8:	f380 8811 	msr	BASEPRI, r0
 8004aac:	bc09      	pop	{r0, r3}
 8004aae:	6819      	ldr	r1, [r3, #0]
 8004ab0:	6808      	ldr	r0, [r1, #0]
 8004ab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab6:	f01e 0f10 	tst.w	lr, #16
 8004aba:	bf08      	it	eq
 8004abc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ac0:	f380 8809 	msr	PSP, r0
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	f3af 8000 	nop.w

08004ad0 <pxCurrentTCBConst>:
 8004ad0:	200000a0 	.word	0x200000a0
			"										\n"
			"	.align 4							\n"
			"pxCurrentTCBConst: .word pxCurrentTCB	\n"
			::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ad4:	bf00      	nop
 8004ad6:	bf00      	nop

08004ad8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler(void) {
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	607b      	str	r3, [r7, #4]
	 known. */
	portDISABLE_INTERRUPTS();
	traceISR_ENTER();
	{
		/* Increment the RTOS tick. */
		if (xTaskIncrementTick() != pdFALSE) {
 8004af0:	f7fe fe68 	bl	80037c4 <xTaskIncrementTick>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <SysTick_Handler+0x2a>
			traceISR_EXIT_TO_SCHEDULER();
			/* A context switch is required.  Context switching is performed in
			 the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004afa:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <SysTick_Handler+0x3c>)
 8004afc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b00:	601a      	str	r2, [r3, #0]
 8004b02:	2300      	movs	r3, #0
 8004b04:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	f383 8811 	msr	BASEPRI, r3
		} else {
			traceISR_EXIT();
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b0c:	bf00      	nop
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	e000ed04 	.word	0xe000ed04

08004b18 <vPortSetupTimerInterrupt>:

/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt(void) {
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <vPortSetupTimerInterrupt+0x34>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b22:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <vPortSetupTimerInterrupt+0x38>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ)
 8004b28:	4b0a      	ldr	r3, [pc, #40]	; (8004b54 <vPortSetupTimerInterrupt+0x3c>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a0a      	ldr	r2, [pc, #40]	; (8004b58 <vPortSetupTimerInterrupt+0x40>)
 8004b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b32:	099b      	lsrs	r3, r3, #6
 8004b34:	4a09      	ldr	r2, [pc, #36]	; (8004b5c <vPortSetupTimerInterrupt+0x44>)
			- 1UL;
 8004b36:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ)
 8004b38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT
 8004b3a:	4b04      	ldr	r3, [pc, #16]	; (8004b4c <vPortSetupTimerInterrupt+0x34>)
 8004b3c:	2207      	movs	r2, #7
 8004b3e:	601a      	str	r2, [r3, #0]
			| portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
}
 8004b40:	bf00      	nop
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	e000e010 	.word	0xe000e010
 8004b50:	e000e018 	.word	0xe000e018
 8004b54:	20000000 	.word	0x20000000
 8004b58:	10624dd3 	.word	0x10624dd3
 8004b5c:	e000e014 	.word	0xe000e014

08004b60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void) {
	__asm volatile
 8004b60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004b70 <vPortEnableVFP+0x10>
 8004b64:	6801      	ldr	r1, [r0, #0]
 8004b66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004b6a:	6001      	str	r1, [r0, #0]
 8004b6c:	4770      	bx	lr
			"								\n"
			"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
			"	str r1, [r0]				\n"
			"	bx r14						"
	);
}
 8004b6e:	bf00      	nop
 8004b70:	e000ed88 	.word	0xe000ed88

08004b74 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

void vPortValidateInterruptPriority(void) {
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004b7a:	f3ef 8305 	mrs	r3, IPSR
 8004b7e:	60fb      	str	r3, [r7, #12]

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b0f      	cmp	r3, #15
 8004b84:	d913      	bls.n	8004bae <vPortValidateInterruptPriority+0x3a>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
 8004b86:	4a16      	ldr	r2, [pc, #88]	; (8004be0 <vPortValidateInterruptPriority+0x6c>)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	72fb      	strb	r3, [r7, #11]
		 interrupt entry is as fast and simple as possible.

		 The following links provide detailed information:
		 http://www.freertos.org/RTOS-Cortex-M3-M4.html
		 http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
 8004b90:	4b14      	ldr	r3, [pc, #80]	; (8004be4 <vPortValidateInterruptPriority+0x70>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	7afa      	ldrb	r2, [r7, #11]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d209      	bcs.n	8004bae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9e:	f383 8811 	msr	BASEPRI, r3
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	607b      	str	r3, [r7, #4]
 8004bac:	e7fe      	b.n	8004bac <vPortValidateInterruptPriority+0x38>
	 configuration then the correct setting can be achieved on all Cortex-M
	 devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	 scheduler.  Note however that some vendor specific peripheral libraries
	 assume a non-zero priority group setting, in which cases using a value
	 of zero will result in unpredictable behaviour. */
	configASSERT(
 8004bae:	4b0e      	ldr	r3, [pc, #56]	; (8004be8 <vPortValidateInterruptPriority+0x74>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bb6:	4b0d      	ldr	r3, [pc, #52]	; (8004bec <vPortValidateInterruptPriority+0x78>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d909      	bls.n	8004bd2 <vPortValidateInterruptPriority+0x5e>
 8004bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	603b      	str	r3, [r7, #0]
 8004bd0:	e7fe      	b.n	8004bd0 <vPortValidateInterruptPriority+0x5c>
			( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue);
}
 8004bd2:	bf00      	nop
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	e000e3f0 	.word	0xe000e3f0
 8004be4:	200001e0 	.word	0x200001e0
 8004be8:	e000ed0c 	.word	0xe000ed0c
 8004bec:	200001e4 	.word	0x200001e4

08004bf0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08a      	sub	sp, #40	; 0x28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004bfc:	f7fe fd16 	bl	800362c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c00:	4b57      	ldr	r3, [pc, #348]	; (8004d60 <pvPortMalloc+0x170>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c08:	f000 f90c 	bl	8004e24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c0c:	4b55      	ldr	r3, [pc, #340]	; (8004d64 <pvPortMalloc+0x174>)
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f040 808c 	bne.w	8004d32 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d01c      	beq.n	8004c5a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004c20:	2208      	movs	r2, #8
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4413      	add	r3, r2
 8004c26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d013      	beq.n	8004c5a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f023 0307 	bic.w	r3, r3, #7
 8004c38:	3308      	adds	r3, #8
 8004c3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d009      	beq.n	8004c5a <pvPortMalloc+0x6a>
 8004c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4a:	f383 8811 	msr	BASEPRI, r3
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f3bf 8f4f 	dsb	sy
 8004c56:	617b      	str	r3, [r7, #20]
 8004c58:	e7fe      	b.n	8004c58 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d068      	beq.n	8004d32 <pvPortMalloc+0x142>
 8004c60:	4b41      	ldr	r3, [pc, #260]	; (8004d68 <pvPortMalloc+0x178>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d863      	bhi.n	8004d32 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004c6a:	4b40      	ldr	r3, [pc, #256]	; (8004d6c <pvPortMalloc+0x17c>)
 8004c6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004c6e:	4b3f      	ldr	r3, [pc, #252]	; (8004d6c <pvPortMalloc+0x17c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c74:	e004      	b.n	8004c80 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d903      	bls.n	8004c92 <pvPortMalloc+0xa2>
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1f1      	bne.n	8004c76 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004c92:	4b33      	ldr	r3, [pc, #204]	; (8004d60 <pvPortMalloc+0x170>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d04a      	beq.n	8004d32 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2208      	movs	r2, #8
 8004ca2:	4413      	add	r3, r2
 8004ca4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	6a3b      	ldr	r3, [r7, #32]
 8004cac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	1ad2      	subs	r2, r2, r3
 8004cb6:	2308      	movs	r3, #8
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d91e      	bls.n	8004cfc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d009      	beq.n	8004ce4 <pvPortMalloc+0xf4>
 8004cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	613b      	str	r3, [r7, #16]
 8004ce2:	e7fe      	b.n	8004ce2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	1ad2      	subs	r2, r2, r3
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004cf6:	69b8      	ldr	r0, [r7, #24]
 8004cf8:	f000 f8f6 	bl	8004ee8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004cfc:	4b1a      	ldr	r3, [pc, #104]	; (8004d68 <pvPortMalloc+0x178>)
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	4a18      	ldr	r2, [pc, #96]	; (8004d68 <pvPortMalloc+0x178>)
 8004d08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d0a:	4b17      	ldr	r3, [pc, #92]	; (8004d68 <pvPortMalloc+0x178>)
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	4b18      	ldr	r3, [pc, #96]	; (8004d70 <pvPortMalloc+0x180>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d203      	bcs.n	8004d1e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d16:	4b14      	ldr	r3, [pc, #80]	; (8004d68 <pvPortMalloc+0x178>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a15      	ldr	r2, [pc, #84]	; (8004d70 <pvPortMalloc+0x180>)
 8004d1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	4b10      	ldr	r3, [pc, #64]	; (8004d64 <pvPortMalloc+0x174>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	431a      	orrs	r2, r3
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	2200      	movs	r2, #0
 8004d30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004d32:	f7fe fc89 	bl	8003648 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d009      	beq.n	8004d54 <pvPortMalloc+0x164>
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	e7fe      	b.n	8004d52 <pvPortMalloc+0x162>
	return pvReturn;
 8004d54:	69fb      	ldr	r3, [r7, #28]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3728      	adds	r7, #40	; 0x28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	20012df0 	.word	0x20012df0
 8004d64:	20012dfc 	.word	0x20012dfc
 8004d68:	20012df4 	.word	0x20012df4
 8004d6c:	20012de8 	.word	0x20012de8
 8004d70:	20012df8 	.word	0x20012df8

08004d74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d046      	beq.n	8004e14 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004d86:	2308      	movs	r3, #8
 8004d88:	425b      	negs	r3, r3
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	4b20      	ldr	r3, [pc, #128]	; (8004e1c <vPortFree+0xa8>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d109      	bne.n	8004db6 <vPortFree+0x42>
 8004da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	e7fe      	b.n	8004db4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d009      	beq.n	8004dd2 <vPortFree+0x5e>
 8004dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc2:	f383 8811 	msr	BASEPRI, r3
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	60bb      	str	r3, [r7, #8]
 8004dd0:	e7fe      	b.n	8004dd0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	4b11      	ldr	r3, [pc, #68]	; (8004e1c <vPortFree+0xa8>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d019      	beq.n	8004e14 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d115      	bne.n	8004e14 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	4b0b      	ldr	r3, [pc, #44]	; (8004e1c <vPortFree+0xa8>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	43db      	mvns	r3, r3
 8004df2:	401a      	ands	r2, r3
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004df8:	f7fe fc18 	bl	800362c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	4b07      	ldr	r3, [pc, #28]	; (8004e20 <vPortFree+0xac>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4413      	add	r3, r2
 8004e06:	4a06      	ldr	r2, [pc, #24]	; (8004e20 <vPortFree+0xac>)
 8004e08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e0a:	6938      	ldr	r0, [r7, #16]
 8004e0c:	f000 f86c 	bl	8004ee8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004e10:	f7fe fc1a 	bl	8003648 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e14:	bf00      	nop
 8004e16:	3718      	adds	r7, #24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	20012dfc 	.word	0x20012dfc
 8004e20:	20012df4 	.word	0x20012df4

08004e24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004e2a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004e2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004e30:	4b27      	ldr	r3, [pc, #156]	; (8004ed0 <prvHeapInit+0xac>)
 8004e32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00c      	beq.n	8004e58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	3307      	adds	r3, #7
 8004e42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0307 	bic.w	r3, r3, #7
 8004e4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	4a1f      	ldr	r2, [pc, #124]	; (8004ed0 <prvHeapInit+0xac>)
 8004e54:	4413      	add	r3, r2
 8004e56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004e5c:	4a1d      	ldr	r2, [pc, #116]	; (8004ed4 <prvHeapInit+0xb0>)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004e62:	4b1c      	ldr	r3, [pc, #112]	; (8004ed4 <prvHeapInit+0xb0>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004e70:	2208      	movs	r2, #8
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	1a9b      	subs	r3, r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f023 0307 	bic.w	r3, r3, #7
 8004e7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4a15      	ldr	r2, [pc, #84]	; (8004ed8 <prvHeapInit+0xb4>)
 8004e84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004e86:	4b14      	ldr	r3, [pc, #80]	; (8004ed8 <prvHeapInit+0xb4>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004e8e:	4b12      	ldr	r3, [pc, #72]	; (8004ed8 <prvHeapInit+0xb4>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2200      	movs	r2, #0
 8004e94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	1ad2      	subs	r2, r2, r3
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ea4:	4b0c      	ldr	r3, [pc, #48]	; (8004ed8 <prvHeapInit+0xb4>)
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	4a0a      	ldr	r2, [pc, #40]	; (8004edc <prvHeapInit+0xb8>)
 8004eb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	4a09      	ldr	r2, [pc, #36]	; (8004ee0 <prvHeapInit+0xbc>)
 8004eba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ebc:	4b09      	ldr	r3, [pc, #36]	; (8004ee4 <prvHeapInit+0xc0>)
 8004ebe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004ec2:	601a      	str	r2, [r3, #0]
}
 8004ec4:	bf00      	nop
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	200001e8 	.word	0x200001e8
 8004ed4:	20012de8 	.word	0x20012de8
 8004ed8:	20012df0 	.word	0x20012df0
 8004edc:	20012df8 	.word	0x20012df8
 8004ee0:	20012df4 	.word	0x20012df4
 8004ee4:	20012dfc 	.word	0x20012dfc

08004ee8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ef0:	4b28      	ldr	r3, [pc, #160]	; (8004f94 <prvInsertBlockIntoFreeList+0xac>)
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	e002      	b.n	8004efc <prvInsertBlockIntoFreeList+0x14>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d8f7      	bhi.n	8004ef6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	4413      	add	r3, r2
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d108      	bne.n	8004f2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	441a      	add	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	441a      	add	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d118      	bne.n	8004f70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	4b15      	ldr	r3, [pc, #84]	; (8004f98 <prvInsertBlockIntoFreeList+0xb0>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d00d      	beq.n	8004f66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	441a      	add	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	e008      	b.n	8004f78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004f66:	4b0c      	ldr	r3, [pc, #48]	; (8004f98 <prvInsertBlockIntoFreeList+0xb0>)
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	e003      	b.n	8004f78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d002      	beq.n	8004f86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f86:	bf00      	nop
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	20012de8 	.word	0x20012de8
 8004f98:	20012df0 	.word	0x20012df0

08004f9c <__errno>:
 8004f9c:	4b01      	ldr	r3, [pc, #4]	; (8004fa4 <__errno+0x8>)
 8004f9e:	6818      	ldr	r0, [r3, #0]
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	20000010 	.word	0x20000010

08004fa8 <__libc_init_array>:
 8004fa8:	b570      	push	{r4, r5, r6, lr}
 8004faa:	4e0d      	ldr	r6, [pc, #52]	; (8004fe0 <__libc_init_array+0x38>)
 8004fac:	4c0d      	ldr	r4, [pc, #52]	; (8004fe4 <__libc_init_array+0x3c>)
 8004fae:	1ba4      	subs	r4, r4, r6
 8004fb0:	10a4      	asrs	r4, r4, #2
 8004fb2:	2500      	movs	r5, #0
 8004fb4:	42a5      	cmp	r5, r4
 8004fb6:	d109      	bne.n	8004fcc <__libc_init_array+0x24>
 8004fb8:	4e0b      	ldr	r6, [pc, #44]	; (8004fe8 <__libc_init_array+0x40>)
 8004fba:	4c0c      	ldr	r4, [pc, #48]	; (8004fec <__libc_init_array+0x44>)
 8004fbc:	f000 fc28 	bl	8005810 <_init>
 8004fc0:	1ba4      	subs	r4, r4, r6
 8004fc2:	10a4      	asrs	r4, r4, #2
 8004fc4:	2500      	movs	r5, #0
 8004fc6:	42a5      	cmp	r5, r4
 8004fc8:	d105      	bne.n	8004fd6 <__libc_init_array+0x2e>
 8004fca:	bd70      	pop	{r4, r5, r6, pc}
 8004fcc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fd0:	4798      	blx	r3
 8004fd2:	3501      	adds	r5, #1
 8004fd4:	e7ee      	b.n	8004fb4 <__libc_init_array+0xc>
 8004fd6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004fda:	4798      	blx	r3
 8004fdc:	3501      	adds	r5, #1
 8004fde:	e7f2      	b.n	8004fc6 <__libc_init_array+0x1e>
 8004fe0:	080058e0 	.word	0x080058e0
 8004fe4:	080058e0 	.word	0x080058e0
 8004fe8:	080058e0 	.word	0x080058e0
 8004fec:	080058e4 	.word	0x080058e4

08004ff0 <memcpy>:
 8004ff0:	b510      	push	{r4, lr}
 8004ff2:	1e43      	subs	r3, r0, #1
 8004ff4:	440a      	add	r2, r1
 8004ff6:	4291      	cmp	r1, r2
 8004ff8:	d100      	bne.n	8004ffc <memcpy+0xc>
 8004ffa:	bd10      	pop	{r4, pc}
 8004ffc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005000:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005004:	e7f7      	b.n	8004ff6 <memcpy+0x6>

08005006 <memset>:
 8005006:	4402      	add	r2, r0
 8005008:	4603      	mov	r3, r0
 800500a:	4293      	cmp	r3, r2
 800500c:	d100      	bne.n	8005010 <memset+0xa>
 800500e:	4770      	bx	lr
 8005010:	f803 1b01 	strb.w	r1, [r3], #1
 8005014:	e7f9      	b.n	800500a <memset+0x4>
	...

08005018 <siprintf>:
 8005018:	b40e      	push	{r1, r2, r3}
 800501a:	b500      	push	{lr}
 800501c:	b09c      	sub	sp, #112	; 0x70
 800501e:	ab1d      	add	r3, sp, #116	; 0x74
 8005020:	9002      	str	r0, [sp, #8]
 8005022:	9006      	str	r0, [sp, #24]
 8005024:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005028:	4809      	ldr	r0, [pc, #36]	; (8005050 <siprintf+0x38>)
 800502a:	9107      	str	r1, [sp, #28]
 800502c:	9104      	str	r1, [sp, #16]
 800502e:	4909      	ldr	r1, [pc, #36]	; (8005054 <siprintf+0x3c>)
 8005030:	f853 2b04 	ldr.w	r2, [r3], #4
 8005034:	9105      	str	r1, [sp, #20]
 8005036:	6800      	ldr	r0, [r0, #0]
 8005038:	9301      	str	r3, [sp, #4]
 800503a:	a902      	add	r1, sp, #8
 800503c:	f000 f866 	bl	800510c <_svfiprintf_r>
 8005040:	9b02      	ldr	r3, [sp, #8]
 8005042:	2200      	movs	r2, #0
 8005044:	701a      	strb	r2, [r3, #0]
 8005046:	b01c      	add	sp, #112	; 0x70
 8005048:	f85d eb04 	ldr.w	lr, [sp], #4
 800504c:	b003      	add	sp, #12
 800504e:	4770      	bx	lr
 8005050:	20000010 	.word	0x20000010
 8005054:	ffff0208 	.word	0xffff0208

08005058 <__ssputs_r>:
 8005058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800505c:	688e      	ldr	r6, [r1, #8]
 800505e:	429e      	cmp	r6, r3
 8005060:	4682      	mov	sl, r0
 8005062:	460c      	mov	r4, r1
 8005064:	4690      	mov	r8, r2
 8005066:	4699      	mov	r9, r3
 8005068:	d837      	bhi.n	80050da <__ssputs_r+0x82>
 800506a:	898a      	ldrh	r2, [r1, #12]
 800506c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005070:	d031      	beq.n	80050d6 <__ssputs_r+0x7e>
 8005072:	6825      	ldr	r5, [r4, #0]
 8005074:	6909      	ldr	r1, [r1, #16]
 8005076:	1a6f      	subs	r7, r5, r1
 8005078:	6965      	ldr	r5, [r4, #20]
 800507a:	2302      	movs	r3, #2
 800507c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005080:	fb95 f5f3 	sdiv	r5, r5, r3
 8005084:	f109 0301 	add.w	r3, r9, #1
 8005088:	443b      	add	r3, r7
 800508a:	429d      	cmp	r5, r3
 800508c:	bf38      	it	cc
 800508e:	461d      	movcc	r5, r3
 8005090:	0553      	lsls	r3, r2, #21
 8005092:	d530      	bpl.n	80050f6 <__ssputs_r+0x9e>
 8005094:	4629      	mov	r1, r5
 8005096:	f000 fb21 	bl	80056dc <_malloc_r>
 800509a:	4606      	mov	r6, r0
 800509c:	b950      	cbnz	r0, 80050b4 <__ssputs_r+0x5c>
 800509e:	230c      	movs	r3, #12
 80050a0:	f8ca 3000 	str.w	r3, [sl]
 80050a4:	89a3      	ldrh	r3, [r4, #12]
 80050a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050aa:	81a3      	strh	r3, [r4, #12]
 80050ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b4:	463a      	mov	r2, r7
 80050b6:	6921      	ldr	r1, [r4, #16]
 80050b8:	f7ff ff9a 	bl	8004ff0 <memcpy>
 80050bc:	89a3      	ldrh	r3, [r4, #12]
 80050be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80050c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c6:	81a3      	strh	r3, [r4, #12]
 80050c8:	6126      	str	r6, [r4, #16]
 80050ca:	6165      	str	r5, [r4, #20]
 80050cc:	443e      	add	r6, r7
 80050ce:	1bed      	subs	r5, r5, r7
 80050d0:	6026      	str	r6, [r4, #0]
 80050d2:	60a5      	str	r5, [r4, #8]
 80050d4:	464e      	mov	r6, r9
 80050d6:	454e      	cmp	r6, r9
 80050d8:	d900      	bls.n	80050dc <__ssputs_r+0x84>
 80050da:	464e      	mov	r6, r9
 80050dc:	4632      	mov	r2, r6
 80050de:	4641      	mov	r1, r8
 80050e0:	6820      	ldr	r0, [r4, #0]
 80050e2:	f000 fa93 	bl	800560c <memmove>
 80050e6:	68a3      	ldr	r3, [r4, #8]
 80050e8:	1b9b      	subs	r3, r3, r6
 80050ea:	60a3      	str	r3, [r4, #8]
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	441e      	add	r6, r3
 80050f0:	6026      	str	r6, [r4, #0]
 80050f2:	2000      	movs	r0, #0
 80050f4:	e7dc      	b.n	80050b0 <__ssputs_r+0x58>
 80050f6:	462a      	mov	r2, r5
 80050f8:	f000 fb4a 	bl	8005790 <_realloc_r>
 80050fc:	4606      	mov	r6, r0
 80050fe:	2800      	cmp	r0, #0
 8005100:	d1e2      	bne.n	80050c8 <__ssputs_r+0x70>
 8005102:	6921      	ldr	r1, [r4, #16]
 8005104:	4650      	mov	r0, sl
 8005106:	f000 fa9b 	bl	8005640 <_free_r>
 800510a:	e7c8      	b.n	800509e <__ssputs_r+0x46>

0800510c <_svfiprintf_r>:
 800510c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005110:	461d      	mov	r5, r3
 8005112:	898b      	ldrh	r3, [r1, #12]
 8005114:	061f      	lsls	r7, r3, #24
 8005116:	b09d      	sub	sp, #116	; 0x74
 8005118:	4680      	mov	r8, r0
 800511a:	460c      	mov	r4, r1
 800511c:	4616      	mov	r6, r2
 800511e:	d50f      	bpl.n	8005140 <_svfiprintf_r+0x34>
 8005120:	690b      	ldr	r3, [r1, #16]
 8005122:	b96b      	cbnz	r3, 8005140 <_svfiprintf_r+0x34>
 8005124:	2140      	movs	r1, #64	; 0x40
 8005126:	f000 fad9 	bl	80056dc <_malloc_r>
 800512a:	6020      	str	r0, [r4, #0]
 800512c:	6120      	str	r0, [r4, #16]
 800512e:	b928      	cbnz	r0, 800513c <_svfiprintf_r+0x30>
 8005130:	230c      	movs	r3, #12
 8005132:	f8c8 3000 	str.w	r3, [r8]
 8005136:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800513a:	e0c8      	b.n	80052ce <_svfiprintf_r+0x1c2>
 800513c:	2340      	movs	r3, #64	; 0x40
 800513e:	6163      	str	r3, [r4, #20]
 8005140:	2300      	movs	r3, #0
 8005142:	9309      	str	r3, [sp, #36]	; 0x24
 8005144:	2320      	movs	r3, #32
 8005146:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800514a:	2330      	movs	r3, #48	; 0x30
 800514c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005150:	9503      	str	r5, [sp, #12]
 8005152:	f04f 0b01 	mov.w	fp, #1
 8005156:	4637      	mov	r7, r6
 8005158:	463d      	mov	r5, r7
 800515a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800515e:	b10b      	cbz	r3, 8005164 <_svfiprintf_r+0x58>
 8005160:	2b25      	cmp	r3, #37	; 0x25
 8005162:	d13e      	bne.n	80051e2 <_svfiprintf_r+0xd6>
 8005164:	ebb7 0a06 	subs.w	sl, r7, r6
 8005168:	d00b      	beq.n	8005182 <_svfiprintf_r+0x76>
 800516a:	4653      	mov	r3, sl
 800516c:	4632      	mov	r2, r6
 800516e:	4621      	mov	r1, r4
 8005170:	4640      	mov	r0, r8
 8005172:	f7ff ff71 	bl	8005058 <__ssputs_r>
 8005176:	3001      	adds	r0, #1
 8005178:	f000 80a4 	beq.w	80052c4 <_svfiprintf_r+0x1b8>
 800517c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800517e:	4453      	add	r3, sl
 8005180:	9309      	str	r3, [sp, #36]	; 0x24
 8005182:	783b      	ldrb	r3, [r7, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	f000 809d 	beq.w	80052c4 <_svfiprintf_r+0x1b8>
 800518a:	2300      	movs	r3, #0
 800518c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005190:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005194:	9304      	str	r3, [sp, #16]
 8005196:	9307      	str	r3, [sp, #28]
 8005198:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800519c:	931a      	str	r3, [sp, #104]	; 0x68
 800519e:	462f      	mov	r7, r5
 80051a0:	2205      	movs	r2, #5
 80051a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80051a6:	4850      	ldr	r0, [pc, #320]	; (80052e8 <_svfiprintf_r+0x1dc>)
 80051a8:	f7fb f822 	bl	80001f0 <memchr>
 80051ac:	9b04      	ldr	r3, [sp, #16]
 80051ae:	b9d0      	cbnz	r0, 80051e6 <_svfiprintf_r+0xda>
 80051b0:	06d9      	lsls	r1, r3, #27
 80051b2:	bf44      	itt	mi
 80051b4:	2220      	movmi	r2, #32
 80051b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80051ba:	071a      	lsls	r2, r3, #28
 80051bc:	bf44      	itt	mi
 80051be:	222b      	movmi	r2, #43	; 0x2b
 80051c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80051c4:	782a      	ldrb	r2, [r5, #0]
 80051c6:	2a2a      	cmp	r2, #42	; 0x2a
 80051c8:	d015      	beq.n	80051f6 <_svfiprintf_r+0xea>
 80051ca:	9a07      	ldr	r2, [sp, #28]
 80051cc:	462f      	mov	r7, r5
 80051ce:	2000      	movs	r0, #0
 80051d0:	250a      	movs	r5, #10
 80051d2:	4639      	mov	r1, r7
 80051d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051d8:	3b30      	subs	r3, #48	; 0x30
 80051da:	2b09      	cmp	r3, #9
 80051dc:	d94d      	bls.n	800527a <_svfiprintf_r+0x16e>
 80051de:	b1b8      	cbz	r0, 8005210 <_svfiprintf_r+0x104>
 80051e0:	e00f      	b.n	8005202 <_svfiprintf_r+0xf6>
 80051e2:	462f      	mov	r7, r5
 80051e4:	e7b8      	b.n	8005158 <_svfiprintf_r+0x4c>
 80051e6:	4a40      	ldr	r2, [pc, #256]	; (80052e8 <_svfiprintf_r+0x1dc>)
 80051e8:	1a80      	subs	r0, r0, r2
 80051ea:	fa0b f000 	lsl.w	r0, fp, r0
 80051ee:	4318      	orrs	r0, r3
 80051f0:	9004      	str	r0, [sp, #16]
 80051f2:	463d      	mov	r5, r7
 80051f4:	e7d3      	b.n	800519e <_svfiprintf_r+0x92>
 80051f6:	9a03      	ldr	r2, [sp, #12]
 80051f8:	1d11      	adds	r1, r2, #4
 80051fa:	6812      	ldr	r2, [r2, #0]
 80051fc:	9103      	str	r1, [sp, #12]
 80051fe:	2a00      	cmp	r2, #0
 8005200:	db01      	blt.n	8005206 <_svfiprintf_r+0xfa>
 8005202:	9207      	str	r2, [sp, #28]
 8005204:	e004      	b.n	8005210 <_svfiprintf_r+0x104>
 8005206:	4252      	negs	r2, r2
 8005208:	f043 0302 	orr.w	r3, r3, #2
 800520c:	9207      	str	r2, [sp, #28]
 800520e:	9304      	str	r3, [sp, #16]
 8005210:	783b      	ldrb	r3, [r7, #0]
 8005212:	2b2e      	cmp	r3, #46	; 0x2e
 8005214:	d10c      	bne.n	8005230 <_svfiprintf_r+0x124>
 8005216:	787b      	ldrb	r3, [r7, #1]
 8005218:	2b2a      	cmp	r3, #42	; 0x2a
 800521a:	d133      	bne.n	8005284 <_svfiprintf_r+0x178>
 800521c:	9b03      	ldr	r3, [sp, #12]
 800521e:	1d1a      	adds	r2, r3, #4
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	9203      	str	r2, [sp, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	bfb8      	it	lt
 8005228:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800522c:	3702      	adds	r7, #2
 800522e:	9305      	str	r3, [sp, #20]
 8005230:	4d2e      	ldr	r5, [pc, #184]	; (80052ec <_svfiprintf_r+0x1e0>)
 8005232:	7839      	ldrb	r1, [r7, #0]
 8005234:	2203      	movs	r2, #3
 8005236:	4628      	mov	r0, r5
 8005238:	f7fa ffda 	bl	80001f0 <memchr>
 800523c:	b138      	cbz	r0, 800524e <_svfiprintf_r+0x142>
 800523e:	2340      	movs	r3, #64	; 0x40
 8005240:	1b40      	subs	r0, r0, r5
 8005242:	fa03 f000 	lsl.w	r0, r3, r0
 8005246:	9b04      	ldr	r3, [sp, #16]
 8005248:	4303      	orrs	r3, r0
 800524a:	3701      	adds	r7, #1
 800524c:	9304      	str	r3, [sp, #16]
 800524e:	7839      	ldrb	r1, [r7, #0]
 8005250:	4827      	ldr	r0, [pc, #156]	; (80052f0 <_svfiprintf_r+0x1e4>)
 8005252:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005256:	2206      	movs	r2, #6
 8005258:	1c7e      	adds	r6, r7, #1
 800525a:	f7fa ffc9 	bl	80001f0 <memchr>
 800525e:	2800      	cmp	r0, #0
 8005260:	d038      	beq.n	80052d4 <_svfiprintf_r+0x1c8>
 8005262:	4b24      	ldr	r3, [pc, #144]	; (80052f4 <_svfiprintf_r+0x1e8>)
 8005264:	bb13      	cbnz	r3, 80052ac <_svfiprintf_r+0x1a0>
 8005266:	9b03      	ldr	r3, [sp, #12]
 8005268:	3307      	adds	r3, #7
 800526a:	f023 0307 	bic.w	r3, r3, #7
 800526e:	3308      	adds	r3, #8
 8005270:	9303      	str	r3, [sp, #12]
 8005272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005274:	444b      	add	r3, r9
 8005276:	9309      	str	r3, [sp, #36]	; 0x24
 8005278:	e76d      	b.n	8005156 <_svfiprintf_r+0x4a>
 800527a:	fb05 3202 	mla	r2, r5, r2, r3
 800527e:	2001      	movs	r0, #1
 8005280:	460f      	mov	r7, r1
 8005282:	e7a6      	b.n	80051d2 <_svfiprintf_r+0xc6>
 8005284:	2300      	movs	r3, #0
 8005286:	3701      	adds	r7, #1
 8005288:	9305      	str	r3, [sp, #20]
 800528a:	4619      	mov	r1, r3
 800528c:	250a      	movs	r5, #10
 800528e:	4638      	mov	r0, r7
 8005290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005294:	3a30      	subs	r2, #48	; 0x30
 8005296:	2a09      	cmp	r2, #9
 8005298:	d903      	bls.n	80052a2 <_svfiprintf_r+0x196>
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0c8      	beq.n	8005230 <_svfiprintf_r+0x124>
 800529e:	9105      	str	r1, [sp, #20]
 80052a0:	e7c6      	b.n	8005230 <_svfiprintf_r+0x124>
 80052a2:	fb05 2101 	mla	r1, r5, r1, r2
 80052a6:	2301      	movs	r3, #1
 80052a8:	4607      	mov	r7, r0
 80052aa:	e7f0      	b.n	800528e <_svfiprintf_r+0x182>
 80052ac:	ab03      	add	r3, sp, #12
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	4622      	mov	r2, r4
 80052b2:	4b11      	ldr	r3, [pc, #68]	; (80052f8 <_svfiprintf_r+0x1ec>)
 80052b4:	a904      	add	r1, sp, #16
 80052b6:	4640      	mov	r0, r8
 80052b8:	f3af 8000 	nop.w
 80052bc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80052c0:	4681      	mov	r9, r0
 80052c2:	d1d6      	bne.n	8005272 <_svfiprintf_r+0x166>
 80052c4:	89a3      	ldrh	r3, [r4, #12]
 80052c6:	065b      	lsls	r3, r3, #25
 80052c8:	f53f af35 	bmi.w	8005136 <_svfiprintf_r+0x2a>
 80052cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052ce:	b01d      	add	sp, #116	; 0x74
 80052d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052d4:	ab03      	add	r3, sp, #12
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	4622      	mov	r2, r4
 80052da:	4b07      	ldr	r3, [pc, #28]	; (80052f8 <_svfiprintf_r+0x1ec>)
 80052dc:	a904      	add	r1, sp, #16
 80052de:	4640      	mov	r0, r8
 80052e0:	f000 f882 	bl	80053e8 <_printf_i>
 80052e4:	e7ea      	b.n	80052bc <_svfiprintf_r+0x1b0>
 80052e6:	bf00      	nop
 80052e8:	080058a4 	.word	0x080058a4
 80052ec:	080058aa 	.word	0x080058aa
 80052f0:	080058ae 	.word	0x080058ae
 80052f4:	00000000 	.word	0x00000000
 80052f8:	08005059 	.word	0x08005059

080052fc <_printf_common>:
 80052fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005300:	4691      	mov	r9, r2
 8005302:	461f      	mov	r7, r3
 8005304:	688a      	ldr	r2, [r1, #8]
 8005306:	690b      	ldr	r3, [r1, #16]
 8005308:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800530c:	4293      	cmp	r3, r2
 800530e:	bfb8      	it	lt
 8005310:	4613      	movlt	r3, r2
 8005312:	f8c9 3000 	str.w	r3, [r9]
 8005316:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800531a:	4606      	mov	r6, r0
 800531c:	460c      	mov	r4, r1
 800531e:	b112      	cbz	r2, 8005326 <_printf_common+0x2a>
 8005320:	3301      	adds	r3, #1
 8005322:	f8c9 3000 	str.w	r3, [r9]
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	0699      	lsls	r1, r3, #26
 800532a:	bf42      	ittt	mi
 800532c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005330:	3302      	addmi	r3, #2
 8005332:	f8c9 3000 	strmi.w	r3, [r9]
 8005336:	6825      	ldr	r5, [r4, #0]
 8005338:	f015 0506 	ands.w	r5, r5, #6
 800533c:	d107      	bne.n	800534e <_printf_common+0x52>
 800533e:	f104 0a19 	add.w	sl, r4, #25
 8005342:	68e3      	ldr	r3, [r4, #12]
 8005344:	f8d9 2000 	ldr.w	r2, [r9]
 8005348:	1a9b      	subs	r3, r3, r2
 800534a:	42ab      	cmp	r3, r5
 800534c:	dc28      	bgt.n	80053a0 <_printf_common+0xa4>
 800534e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005352:	6822      	ldr	r2, [r4, #0]
 8005354:	3300      	adds	r3, #0
 8005356:	bf18      	it	ne
 8005358:	2301      	movne	r3, #1
 800535a:	0692      	lsls	r2, r2, #26
 800535c:	d42d      	bmi.n	80053ba <_printf_common+0xbe>
 800535e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005362:	4639      	mov	r1, r7
 8005364:	4630      	mov	r0, r6
 8005366:	47c0      	blx	r8
 8005368:	3001      	adds	r0, #1
 800536a:	d020      	beq.n	80053ae <_printf_common+0xb2>
 800536c:	6823      	ldr	r3, [r4, #0]
 800536e:	68e5      	ldr	r5, [r4, #12]
 8005370:	f8d9 2000 	ldr.w	r2, [r9]
 8005374:	f003 0306 	and.w	r3, r3, #6
 8005378:	2b04      	cmp	r3, #4
 800537a:	bf08      	it	eq
 800537c:	1aad      	subeq	r5, r5, r2
 800537e:	68a3      	ldr	r3, [r4, #8]
 8005380:	6922      	ldr	r2, [r4, #16]
 8005382:	bf0c      	ite	eq
 8005384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005388:	2500      	movne	r5, #0
 800538a:	4293      	cmp	r3, r2
 800538c:	bfc4      	itt	gt
 800538e:	1a9b      	subgt	r3, r3, r2
 8005390:	18ed      	addgt	r5, r5, r3
 8005392:	f04f 0900 	mov.w	r9, #0
 8005396:	341a      	adds	r4, #26
 8005398:	454d      	cmp	r5, r9
 800539a:	d11a      	bne.n	80053d2 <_printf_common+0xd6>
 800539c:	2000      	movs	r0, #0
 800539e:	e008      	b.n	80053b2 <_printf_common+0xb6>
 80053a0:	2301      	movs	r3, #1
 80053a2:	4652      	mov	r2, sl
 80053a4:	4639      	mov	r1, r7
 80053a6:	4630      	mov	r0, r6
 80053a8:	47c0      	blx	r8
 80053aa:	3001      	adds	r0, #1
 80053ac:	d103      	bne.n	80053b6 <_printf_common+0xba>
 80053ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053b6:	3501      	adds	r5, #1
 80053b8:	e7c3      	b.n	8005342 <_printf_common+0x46>
 80053ba:	18e1      	adds	r1, r4, r3
 80053bc:	1c5a      	adds	r2, r3, #1
 80053be:	2030      	movs	r0, #48	; 0x30
 80053c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053c4:	4422      	add	r2, r4
 80053c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053ce:	3302      	adds	r3, #2
 80053d0:	e7c5      	b.n	800535e <_printf_common+0x62>
 80053d2:	2301      	movs	r3, #1
 80053d4:	4622      	mov	r2, r4
 80053d6:	4639      	mov	r1, r7
 80053d8:	4630      	mov	r0, r6
 80053da:	47c0      	blx	r8
 80053dc:	3001      	adds	r0, #1
 80053de:	d0e6      	beq.n	80053ae <_printf_common+0xb2>
 80053e0:	f109 0901 	add.w	r9, r9, #1
 80053e4:	e7d8      	b.n	8005398 <_printf_common+0x9c>
	...

080053e8 <_printf_i>:
 80053e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80053ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80053f0:	460c      	mov	r4, r1
 80053f2:	7e09      	ldrb	r1, [r1, #24]
 80053f4:	b085      	sub	sp, #20
 80053f6:	296e      	cmp	r1, #110	; 0x6e
 80053f8:	4617      	mov	r7, r2
 80053fa:	4606      	mov	r6, r0
 80053fc:	4698      	mov	r8, r3
 80053fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005400:	f000 80b3 	beq.w	800556a <_printf_i+0x182>
 8005404:	d822      	bhi.n	800544c <_printf_i+0x64>
 8005406:	2963      	cmp	r1, #99	; 0x63
 8005408:	d036      	beq.n	8005478 <_printf_i+0x90>
 800540a:	d80a      	bhi.n	8005422 <_printf_i+0x3a>
 800540c:	2900      	cmp	r1, #0
 800540e:	f000 80b9 	beq.w	8005584 <_printf_i+0x19c>
 8005412:	2958      	cmp	r1, #88	; 0x58
 8005414:	f000 8083 	beq.w	800551e <_printf_i+0x136>
 8005418:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800541c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005420:	e032      	b.n	8005488 <_printf_i+0xa0>
 8005422:	2964      	cmp	r1, #100	; 0x64
 8005424:	d001      	beq.n	800542a <_printf_i+0x42>
 8005426:	2969      	cmp	r1, #105	; 0x69
 8005428:	d1f6      	bne.n	8005418 <_printf_i+0x30>
 800542a:	6820      	ldr	r0, [r4, #0]
 800542c:	6813      	ldr	r3, [r2, #0]
 800542e:	0605      	lsls	r5, r0, #24
 8005430:	f103 0104 	add.w	r1, r3, #4
 8005434:	d52a      	bpl.n	800548c <_printf_i+0xa4>
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6011      	str	r1, [r2, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	da03      	bge.n	8005446 <_printf_i+0x5e>
 800543e:	222d      	movs	r2, #45	; 0x2d
 8005440:	425b      	negs	r3, r3
 8005442:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005446:	486f      	ldr	r0, [pc, #444]	; (8005604 <_printf_i+0x21c>)
 8005448:	220a      	movs	r2, #10
 800544a:	e039      	b.n	80054c0 <_printf_i+0xd8>
 800544c:	2973      	cmp	r1, #115	; 0x73
 800544e:	f000 809d 	beq.w	800558c <_printf_i+0x1a4>
 8005452:	d808      	bhi.n	8005466 <_printf_i+0x7e>
 8005454:	296f      	cmp	r1, #111	; 0x6f
 8005456:	d020      	beq.n	800549a <_printf_i+0xb2>
 8005458:	2970      	cmp	r1, #112	; 0x70
 800545a:	d1dd      	bne.n	8005418 <_printf_i+0x30>
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	f043 0320 	orr.w	r3, r3, #32
 8005462:	6023      	str	r3, [r4, #0]
 8005464:	e003      	b.n	800546e <_printf_i+0x86>
 8005466:	2975      	cmp	r1, #117	; 0x75
 8005468:	d017      	beq.n	800549a <_printf_i+0xb2>
 800546a:	2978      	cmp	r1, #120	; 0x78
 800546c:	d1d4      	bne.n	8005418 <_printf_i+0x30>
 800546e:	2378      	movs	r3, #120	; 0x78
 8005470:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005474:	4864      	ldr	r0, [pc, #400]	; (8005608 <_printf_i+0x220>)
 8005476:	e055      	b.n	8005524 <_printf_i+0x13c>
 8005478:	6813      	ldr	r3, [r2, #0]
 800547a:	1d19      	adds	r1, r3, #4
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6011      	str	r1, [r2, #0]
 8005480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005488:	2301      	movs	r3, #1
 800548a:	e08c      	b.n	80055a6 <_printf_i+0x1be>
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6011      	str	r1, [r2, #0]
 8005490:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005494:	bf18      	it	ne
 8005496:	b21b      	sxthne	r3, r3
 8005498:	e7cf      	b.n	800543a <_printf_i+0x52>
 800549a:	6813      	ldr	r3, [r2, #0]
 800549c:	6825      	ldr	r5, [r4, #0]
 800549e:	1d18      	adds	r0, r3, #4
 80054a0:	6010      	str	r0, [r2, #0]
 80054a2:	0628      	lsls	r0, r5, #24
 80054a4:	d501      	bpl.n	80054aa <_printf_i+0xc2>
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	e002      	b.n	80054b0 <_printf_i+0xc8>
 80054aa:	0668      	lsls	r0, r5, #25
 80054ac:	d5fb      	bpl.n	80054a6 <_printf_i+0xbe>
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	4854      	ldr	r0, [pc, #336]	; (8005604 <_printf_i+0x21c>)
 80054b2:	296f      	cmp	r1, #111	; 0x6f
 80054b4:	bf14      	ite	ne
 80054b6:	220a      	movne	r2, #10
 80054b8:	2208      	moveq	r2, #8
 80054ba:	2100      	movs	r1, #0
 80054bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054c0:	6865      	ldr	r5, [r4, #4]
 80054c2:	60a5      	str	r5, [r4, #8]
 80054c4:	2d00      	cmp	r5, #0
 80054c6:	f2c0 8095 	blt.w	80055f4 <_printf_i+0x20c>
 80054ca:	6821      	ldr	r1, [r4, #0]
 80054cc:	f021 0104 	bic.w	r1, r1, #4
 80054d0:	6021      	str	r1, [r4, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d13d      	bne.n	8005552 <_printf_i+0x16a>
 80054d6:	2d00      	cmp	r5, #0
 80054d8:	f040 808e 	bne.w	80055f8 <_printf_i+0x210>
 80054dc:	4665      	mov	r5, ip
 80054de:	2a08      	cmp	r2, #8
 80054e0:	d10b      	bne.n	80054fa <_printf_i+0x112>
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	07db      	lsls	r3, r3, #31
 80054e6:	d508      	bpl.n	80054fa <_printf_i+0x112>
 80054e8:	6923      	ldr	r3, [r4, #16]
 80054ea:	6862      	ldr	r2, [r4, #4]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	bfde      	ittt	le
 80054f0:	2330      	movle	r3, #48	; 0x30
 80054f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054f6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80054fa:	ebac 0305 	sub.w	r3, ip, r5
 80054fe:	6123      	str	r3, [r4, #16]
 8005500:	f8cd 8000 	str.w	r8, [sp]
 8005504:	463b      	mov	r3, r7
 8005506:	aa03      	add	r2, sp, #12
 8005508:	4621      	mov	r1, r4
 800550a:	4630      	mov	r0, r6
 800550c:	f7ff fef6 	bl	80052fc <_printf_common>
 8005510:	3001      	adds	r0, #1
 8005512:	d14d      	bne.n	80055b0 <_printf_i+0x1c8>
 8005514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005518:	b005      	add	sp, #20
 800551a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800551e:	4839      	ldr	r0, [pc, #228]	; (8005604 <_printf_i+0x21c>)
 8005520:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005524:	6813      	ldr	r3, [r2, #0]
 8005526:	6821      	ldr	r1, [r4, #0]
 8005528:	1d1d      	adds	r5, r3, #4
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6015      	str	r5, [r2, #0]
 800552e:	060a      	lsls	r2, r1, #24
 8005530:	d50b      	bpl.n	800554a <_printf_i+0x162>
 8005532:	07ca      	lsls	r2, r1, #31
 8005534:	bf44      	itt	mi
 8005536:	f041 0120 	orrmi.w	r1, r1, #32
 800553a:	6021      	strmi	r1, [r4, #0]
 800553c:	b91b      	cbnz	r3, 8005546 <_printf_i+0x15e>
 800553e:	6822      	ldr	r2, [r4, #0]
 8005540:	f022 0220 	bic.w	r2, r2, #32
 8005544:	6022      	str	r2, [r4, #0]
 8005546:	2210      	movs	r2, #16
 8005548:	e7b7      	b.n	80054ba <_printf_i+0xd2>
 800554a:	064d      	lsls	r5, r1, #25
 800554c:	bf48      	it	mi
 800554e:	b29b      	uxthmi	r3, r3
 8005550:	e7ef      	b.n	8005532 <_printf_i+0x14a>
 8005552:	4665      	mov	r5, ip
 8005554:	fbb3 f1f2 	udiv	r1, r3, r2
 8005558:	fb02 3311 	mls	r3, r2, r1, r3
 800555c:	5cc3      	ldrb	r3, [r0, r3]
 800555e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005562:	460b      	mov	r3, r1
 8005564:	2900      	cmp	r1, #0
 8005566:	d1f5      	bne.n	8005554 <_printf_i+0x16c>
 8005568:	e7b9      	b.n	80054de <_printf_i+0xf6>
 800556a:	6813      	ldr	r3, [r2, #0]
 800556c:	6825      	ldr	r5, [r4, #0]
 800556e:	6961      	ldr	r1, [r4, #20]
 8005570:	1d18      	adds	r0, r3, #4
 8005572:	6010      	str	r0, [r2, #0]
 8005574:	0628      	lsls	r0, r5, #24
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	d501      	bpl.n	800557e <_printf_i+0x196>
 800557a:	6019      	str	r1, [r3, #0]
 800557c:	e002      	b.n	8005584 <_printf_i+0x19c>
 800557e:	066a      	lsls	r2, r5, #25
 8005580:	d5fb      	bpl.n	800557a <_printf_i+0x192>
 8005582:	8019      	strh	r1, [r3, #0]
 8005584:	2300      	movs	r3, #0
 8005586:	6123      	str	r3, [r4, #16]
 8005588:	4665      	mov	r5, ip
 800558a:	e7b9      	b.n	8005500 <_printf_i+0x118>
 800558c:	6813      	ldr	r3, [r2, #0]
 800558e:	1d19      	adds	r1, r3, #4
 8005590:	6011      	str	r1, [r2, #0]
 8005592:	681d      	ldr	r5, [r3, #0]
 8005594:	6862      	ldr	r2, [r4, #4]
 8005596:	2100      	movs	r1, #0
 8005598:	4628      	mov	r0, r5
 800559a:	f7fa fe29 	bl	80001f0 <memchr>
 800559e:	b108      	cbz	r0, 80055a4 <_printf_i+0x1bc>
 80055a0:	1b40      	subs	r0, r0, r5
 80055a2:	6060      	str	r0, [r4, #4]
 80055a4:	6863      	ldr	r3, [r4, #4]
 80055a6:	6123      	str	r3, [r4, #16]
 80055a8:	2300      	movs	r3, #0
 80055aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055ae:	e7a7      	b.n	8005500 <_printf_i+0x118>
 80055b0:	6923      	ldr	r3, [r4, #16]
 80055b2:	462a      	mov	r2, r5
 80055b4:	4639      	mov	r1, r7
 80055b6:	4630      	mov	r0, r6
 80055b8:	47c0      	blx	r8
 80055ba:	3001      	adds	r0, #1
 80055bc:	d0aa      	beq.n	8005514 <_printf_i+0x12c>
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	079b      	lsls	r3, r3, #30
 80055c2:	d413      	bmi.n	80055ec <_printf_i+0x204>
 80055c4:	68e0      	ldr	r0, [r4, #12]
 80055c6:	9b03      	ldr	r3, [sp, #12]
 80055c8:	4298      	cmp	r0, r3
 80055ca:	bfb8      	it	lt
 80055cc:	4618      	movlt	r0, r3
 80055ce:	e7a3      	b.n	8005518 <_printf_i+0x130>
 80055d0:	2301      	movs	r3, #1
 80055d2:	464a      	mov	r2, r9
 80055d4:	4639      	mov	r1, r7
 80055d6:	4630      	mov	r0, r6
 80055d8:	47c0      	blx	r8
 80055da:	3001      	adds	r0, #1
 80055dc:	d09a      	beq.n	8005514 <_printf_i+0x12c>
 80055de:	3501      	adds	r5, #1
 80055e0:	68e3      	ldr	r3, [r4, #12]
 80055e2:	9a03      	ldr	r2, [sp, #12]
 80055e4:	1a9b      	subs	r3, r3, r2
 80055e6:	42ab      	cmp	r3, r5
 80055e8:	dcf2      	bgt.n	80055d0 <_printf_i+0x1e8>
 80055ea:	e7eb      	b.n	80055c4 <_printf_i+0x1dc>
 80055ec:	2500      	movs	r5, #0
 80055ee:	f104 0919 	add.w	r9, r4, #25
 80055f2:	e7f5      	b.n	80055e0 <_printf_i+0x1f8>
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1ac      	bne.n	8005552 <_printf_i+0x16a>
 80055f8:	7803      	ldrb	r3, [r0, #0]
 80055fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005602:	e76c      	b.n	80054de <_printf_i+0xf6>
 8005604:	080058b5 	.word	0x080058b5
 8005608:	080058c6 	.word	0x080058c6

0800560c <memmove>:
 800560c:	4288      	cmp	r0, r1
 800560e:	b510      	push	{r4, lr}
 8005610:	eb01 0302 	add.w	r3, r1, r2
 8005614:	d807      	bhi.n	8005626 <memmove+0x1a>
 8005616:	1e42      	subs	r2, r0, #1
 8005618:	4299      	cmp	r1, r3
 800561a:	d00a      	beq.n	8005632 <memmove+0x26>
 800561c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005620:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005624:	e7f8      	b.n	8005618 <memmove+0xc>
 8005626:	4283      	cmp	r3, r0
 8005628:	d9f5      	bls.n	8005616 <memmove+0xa>
 800562a:	1881      	adds	r1, r0, r2
 800562c:	1ad2      	subs	r2, r2, r3
 800562e:	42d3      	cmn	r3, r2
 8005630:	d100      	bne.n	8005634 <memmove+0x28>
 8005632:	bd10      	pop	{r4, pc}
 8005634:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005638:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800563c:	e7f7      	b.n	800562e <memmove+0x22>
	...

08005640 <_free_r>:
 8005640:	b538      	push	{r3, r4, r5, lr}
 8005642:	4605      	mov	r5, r0
 8005644:	2900      	cmp	r1, #0
 8005646:	d045      	beq.n	80056d4 <_free_r+0x94>
 8005648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800564c:	1f0c      	subs	r4, r1, #4
 800564e:	2b00      	cmp	r3, #0
 8005650:	bfb8      	it	lt
 8005652:	18e4      	addlt	r4, r4, r3
 8005654:	f000 f8d2 	bl	80057fc <__malloc_lock>
 8005658:	4a1f      	ldr	r2, [pc, #124]	; (80056d8 <_free_r+0x98>)
 800565a:	6813      	ldr	r3, [r2, #0]
 800565c:	4610      	mov	r0, r2
 800565e:	b933      	cbnz	r3, 800566e <_free_r+0x2e>
 8005660:	6063      	str	r3, [r4, #4]
 8005662:	6014      	str	r4, [r2, #0]
 8005664:	4628      	mov	r0, r5
 8005666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800566a:	f000 b8c8 	b.w	80057fe <__malloc_unlock>
 800566e:	42a3      	cmp	r3, r4
 8005670:	d90c      	bls.n	800568c <_free_r+0x4c>
 8005672:	6821      	ldr	r1, [r4, #0]
 8005674:	1862      	adds	r2, r4, r1
 8005676:	4293      	cmp	r3, r2
 8005678:	bf04      	itt	eq
 800567a:	681a      	ldreq	r2, [r3, #0]
 800567c:	685b      	ldreq	r3, [r3, #4]
 800567e:	6063      	str	r3, [r4, #4]
 8005680:	bf04      	itt	eq
 8005682:	1852      	addeq	r2, r2, r1
 8005684:	6022      	streq	r2, [r4, #0]
 8005686:	6004      	str	r4, [r0, #0]
 8005688:	e7ec      	b.n	8005664 <_free_r+0x24>
 800568a:	4613      	mov	r3, r2
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	b10a      	cbz	r2, 8005694 <_free_r+0x54>
 8005690:	42a2      	cmp	r2, r4
 8005692:	d9fa      	bls.n	800568a <_free_r+0x4a>
 8005694:	6819      	ldr	r1, [r3, #0]
 8005696:	1858      	adds	r0, r3, r1
 8005698:	42a0      	cmp	r0, r4
 800569a:	d10b      	bne.n	80056b4 <_free_r+0x74>
 800569c:	6820      	ldr	r0, [r4, #0]
 800569e:	4401      	add	r1, r0
 80056a0:	1858      	adds	r0, r3, r1
 80056a2:	4282      	cmp	r2, r0
 80056a4:	6019      	str	r1, [r3, #0]
 80056a6:	d1dd      	bne.n	8005664 <_free_r+0x24>
 80056a8:	6810      	ldr	r0, [r2, #0]
 80056aa:	6852      	ldr	r2, [r2, #4]
 80056ac:	605a      	str	r2, [r3, #4]
 80056ae:	4401      	add	r1, r0
 80056b0:	6019      	str	r1, [r3, #0]
 80056b2:	e7d7      	b.n	8005664 <_free_r+0x24>
 80056b4:	d902      	bls.n	80056bc <_free_r+0x7c>
 80056b6:	230c      	movs	r3, #12
 80056b8:	602b      	str	r3, [r5, #0]
 80056ba:	e7d3      	b.n	8005664 <_free_r+0x24>
 80056bc:	6820      	ldr	r0, [r4, #0]
 80056be:	1821      	adds	r1, r4, r0
 80056c0:	428a      	cmp	r2, r1
 80056c2:	bf04      	itt	eq
 80056c4:	6811      	ldreq	r1, [r2, #0]
 80056c6:	6852      	ldreq	r2, [r2, #4]
 80056c8:	6062      	str	r2, [r4, #4]
 80056ca:	bf04      	itt	eq
 80056cc:	1809      	addeq	r1, r1, r0
 80056ce:	6021      	streq	r1, [r4, #0]
 80056d0:	605c      	str	r4, [r3, #4]
 80056d2:	e7c7      	b.n	8005664 <_free_r+0x24>
 80056d4:	bd38      	pop	{r3, r4, r5, pc}
 80056d6:	bf00      	nop
 80056d8:	20012e00 	.word	0x20012e00

080056dc <_malloc_r>:
 80056dc:	b570      	push	{r4, r5, r6, lr}
 80056de:	1ccd      	adds	r5, r1, #3
 80056e0:	f025 0503 	bic.w	r5, r5, #3
 80056e4:	3508      	adds	r5, #8
 80056e6:	2d0c      	cmp	r5, #12
 80056e8:	bf38      	it	cc
 80056ea:	250c      	movcc	r5, #12
 80056ec:	2d00      	cmp	r5, #0
 80056ee:	4606      	mov	r6, r0
 80056f0:	db01      	blt.n	80056f6 <_malloc_r+0x1a>
 80056f2:	42a9      	cmp	r1, r5
 80056f4:	d903      	bls.n	80056fe <_malloc_r+0x22>
 80056f6:	230c      	movs	r3, #12
 80056f8:	6033      	str	r3, [r6, #0]
 80056fa:	2000      	movs	r0, #0
 80056fc:	bd70      	pop	{r4, r5, r6, pc}
 80056fe:	f000 f87d 	bl	80057fc <__malloc_lock>
 8005702:	4a21      	ldr	r2, [pc, #132]	; (8005788 <_malloc_r+0xac>)
 8005704:	6814      	ldr	r4, [r2, #0]
 8005706:	4621      	mov	r1, r4
 8005708:	b991      	cbnz	r1, 8005730 <_malloc_r+0x54>
 800570a:	4c20      	ldr	r4, [pc, #128]	; (800578c <_malloc_r+0xb0>)
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	b91b      	cbnz	r3, 8005718 <_malloc_r+0x3c>
 8005710:	4630      	mov	r0, r6
 8005712:	f000 f863 	bl	80057dc <_sbrk_r>
 8005716:	6020      	str	r0, [r4, #0]
 8005718:	4629      	mov	r1, r5
 800571a:	4630      	mov	r0, r6
 800571c:	f000 f85e 	bl	80057dc <_sbrk_r>
 8005720:	1c43      	adds	r3, r0, #1
 8005722:	d124      	bne.n	800576e <_malloc_r+0x92>
 8005724:	230c      	movs	r3, #12
 8005726:	6033      	str	r3, [r6, #0]
 8005728:	4630      	mov	r0, r6
 800572a:	f000 f868 	bl	80057fe <__malloc_unlock>
 800572e:	e7e4      	b.n	80056fa <_malloc_r+0x1e>
 8005730:	680b      	ldr	r3, [r1, #0]
 8005732:	1b5b      	subs	r3, r3, r5
 8005734:	d418      	bmi.n	8005768 <_malloc_r+0x8c>
 8005736:	2b0b      	cmp	r3, #11
 8005738:	d90f      	bls.n	800575a <_malloc_r+0x7e>
 800573a:	600b      	str	r3, [r1, #0]
 800573c:	50cd      	str	r5, [r1, r3]
 800573e:	18cc      	adds	r4, r1, r3
 8005740:	4630      	mov	r0, r6
 8005742:	f000 f85c 	bl	80057fe <__malloc_unlock>
 8005746:	f104 000b 	add.w	r0, r4, #11
 800574a:	1d23      	adds	r3, r4, #4
 800574c:	f020 0007 	bic.w	r0, r0, #7
 8005750:	1ac3      	subs	r3, r0, r3
 8005752:	d0d3      	beq.n	80056fc <_malloc_r+0x20>
 8005754:	425a      	negs	r2, r3
 8005756:	50e2      	str	r2, [r4, r3]
 8005758:	e7d0      	b.n	80056fc <_malloc_r+0x20>
 800575a:	428c      	cmp	r4, r1
 800575c:	684b      	ldr	r3, [r1, #4]
 800575e:	bf16      	itet	ne
 8005760:	6063      	strne	r3, [r4, #4]
 8005762:	6013      	streq	r3, [r2, #0]
 8005764:	460c      	movne	r4, r1
 8005766:	e7eb      	b.n	8005740 <_malloc_r+0x64>
 8005768:	460c      	mov	r4, r1
 800576a:	6849      	ldr	r1, [r1, #4]
 800576c:	e7cc      	b.n	8005708 <_malloc_r+0x2c>
 800576e:	1cc4      	adds	r4, r0, #3
 8005770:	f024 0403 	bic.w	r4, r4, #3
 8005774:	42a0      	cmp	r0, r4
 8005776:	d005      	beq.n	8005784 <_malloc_r+0xa8>
 8005778:	1a21      	subs	r1, r4, r0
 800577a:	4630      	mov	r0, r6
 800577c:	f000 f82e 	bl	80057dc <_sbrk_r>
 8005780:	3001      	adds	r0, #1
 8005782:	d0cf      	beq.n	8005724 <_malloc_r+0x48>
 8005784:	6025      	str	r5, [r4, #0]
 8005786:	e7db      	b.n	8005740 <_malloc_r+0x64>
 8005788:	20012e00 	.word	0x20012e00
 800578c:	20012e04 	.word	0x20012e04

08005790 <_realloc_r>:
 8005790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005792:	4607      	mov	r7, r0
 8005794:	4614      	mov	r4, r2
 8005796:	460e      	mov	r6, r1
 8005798:	b921      	cbnz	r1, 80057a4 <_realloc_r+0x14>
 800579a:	4611      	mov	r1, r2
 800579c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80057a0:	f7ff bf9c 	b.w	80056dc <_malloc_r>
 80057a4:	b922      	cbnz	r2, 80057b0 <_realloc_r+0x20>
 80057a6:	f7ff ff4b 	bl	8005640 <_free_r>
 80057aa:	4625      	mov	r5, r4
 80057ac:	4628      	mov	r0, r5
 80057ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057b0:	f000 f826 	bl	8005800 <_malloc_usable_size_r>
 80057b4:	42a0      	cmp	r0, r4
 80057b6:	d20f      	bcs.n	80057d8 <_realloc_r+0x48>
 80057b8:	4621      	mov	r1, r4
 80057ba:	4638      	mov	r0, r7
 80057bc:	f7ff ff8e 	bl	80056dc <_malloc_r>
 80057c0:	4605      	mov	r5, r0
 80057c2:	2800      	cmp	r0, #0
 80057c4:	d0f2      	beq.n	80057ac <_realloc_r+0x1c>
 80057c6:	4631      	mov	r1, r6
 80057c8:	4622      	mov	r2, r4
 80057ca:	f7ff fc11 	bl	8004ff0 <memcpy>
 80057ce:	4631      	mov	r1, r6
 80057d0:	4638      	mov	r0, r7
 80057d2:	f7ff ff35 	bl	8005640 <_free_r>
 80057d6:	e7e9      	b.n	80057ac <_realloc_r+0x1c>
 80057d8:	4635      	mov	r5, r6
 80057da:	e7e7      	b.n	80057ac <_realloc_r+0x1c>

080057dc <_sbrk_r>:
 80057dc:	b538      	push	{r3, r4, r5, lr}
 80057de:	4c06      	ldr	r4, [pc, #24]	; (80057f8 <_sbrk_r+0x1c>)
 80057e0:	2300      	movs	r3, #0
 80057e2:	4605      	mov	r5, r0
 80057e4:	4608      	mov	r0, r1
 80057e6:	6023      	str	r3, [r4, #0]
 80057e8:	f7fb f990 	bl	8000b0c <_sbrk>
 80057ec:	1c43      	adds	r3, r0, #1
 80057ee:	d102      	bne.n	80057f6 <_sbrk_r+0x1a>
 80057f0:	6823      	ldr	r3, [r4, #0]
 80057f2:	b103      	cbz	r3, 80057f6 <_sbrk_r+0x1a>
 80057f4:	602b      	str	r3, [r5, #0]
 80057f6:	bd38      	pop	{r3, r4, r5, pc}
 80057f8:	20012f00 	.word	0x20012f00

080057fc <__malloc_lock>:
 80057fc:	4770      	bx	lr

080057fe <__malloc_unlock>:
 80057fe:	4770      	bx	lr

08005800 <_malloc_usable_size_r>:
 8005800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005804:	1f18      	subs	r0, r3, #4
 8005806:	2b00      	cmp	r3, #0
 8005808:	bfbc      	itt	lt
 800580a:	580b      	ldrlt	r3, [r1, r0]
 800580c:	18c0      	addlt	r0, r0, r3
 800580e:	4770      	bx	lr

08005810 <_init>:
 8005810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005812:	bf00      	nop
 8005814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005816:	bc08      	pop	{r3}
 8005818:	469e      	mov	lr, r3
 800581a:	4770      	bx	lr

0800581c <_fini>:
 800581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581e:	bf00      	nop
 8005820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005822:	bc08      	pop	{r3}
 8005824:	469e      	mov	lr, r3
 8005826:	4770      	bx	lr
