
STM32_HelloWorld_freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006714  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  080068b4  080068b4  000168b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a28  08006a28  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08006a28  08006a28  00016a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a30  08006a30  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a30  08006a30  00016a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a34  08006a34  00016a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006a38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000138c0  20000014  08006a4c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200138d4  08006a4c  000238d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001838d  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003083  00000000  00000000  000383d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001460  00000000  00000000  0003b458  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012d8  00000000  00000000  0003c8b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018c4f  00000000  00000000  0003db90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010363  00000000  00000000  000567df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00099de7  00000000  00000000  00066b42  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00100929  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055b8  00000000  00000000  001009a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800689c 	.word	0x0800689c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	0800689c 	.word	0x0800689c

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	2001382c 	.word	0x2001382c

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000294:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000298:	f000 b972 	b.w	8000580 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	9e08      	ldr	r6, [sp, #32]
 80002ba:	4604      	mov	r4, r0
 80002bc:	4688      	mov	r8, r1
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d14b      	bne.n	800035a <__udivmoddi4+0xa6>
 80002c2:	428a      	cmp	r2, r1
 80002c4:	4615      	mov	r5, r2
 80002c6:	d967      	bls.n	8000398 <__udivmoddi4+0xe4>
 80002c8:	fab2 f282 	clz	r2, r2
 80002cc:	b14a      	cbz	r2, 80002e2 <__udivmoddi4+0x2e>
 80002ce:	f1c2 0720 	rsb	r7, r2, #32
 80002d2:	fa01 f302 	lsl.w	r3, r1, r2
 80002d6:	fa20 f707 	lsr.w	r7, r0, r7
 80002da:	4095      	lsls	r5, r2
 80002dc:	ea47 0803 	orr.w	r8, r7, r3
 80002e0:	4094      	lsls	r4, r2
 80002e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e6:	0c23      	lsrs	r3, r4, #16
 80002e8:	fbb8 f7fe 	udiv	r7, r8, lr
 80002ec:	fa1f fc85 	uxth.w	ip, r5
 80002f0:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f8:	fb07 f10c 	mul.w	r1, r7, ip
 80002fc:	4299      	cmp	r1, r3
 80002fe:	d909      	bls.n	8000314 <__udivmoddi4+0x60>
 8000300:	18eb      	adds	r3, r5, r3
 8000302:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000306:	f080 811b 	bcs.w	8000540 <__udivmoddi4+0x28c>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 8118 	bls.w	8000540 <__udivmoddi4+0x28c>
 8000310:	3f02      	subs	r7, #2
 8000312:	442b      	add	r3, r5
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0fe 	udiv	r0, r3, lr
 800031c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 fc0c 	mul.w	ip, r0, ip
 8000328:	45a4      	cmp	ip, r4
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x8c>
 800032c:	192c      	adds	r4, r5, r4
 800032e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x290>
 8000336:	45a4      	cmp	ip, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x290>
 800033c:	3802      	subs	r0, #2
 800033e:	442c      	add	r4, r5
 8000340:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000344:	eba4 040c 	sub.w	r4, r4, ip
 8000348:	2700      	movs	r7, #0
 800034a:	b11e      	cbz	r6, 8000354 <__udivmoddi4+0xa0>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c6 4300 	strd	r4, r3, [r6]
 8000354:	4639      	mov	r1, r7
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xbe>
 800035e:	2e00      	cmp	r6, #0
 8000360:	f000 80eb 	beq.w	800053a <__udivmoddi4+0x286>
 8000364:	2700      	movs	r7, #0
 8000366:	e9c6 0100 	strd	r0, r1, [r6]
 800036a:	4638      	mov	r0, r7
 800036c:	4639      	mov	r1, r7
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f783 	clz	r7, r3
 8000376:	2f00      	cmp	r7, #0
 8000378:	d147      	bne.n	800040a <__udivmoddi4+0x156>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd0>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80fa 	bhi.w	8000578 <__udivmoddi4+0x2c4>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	4698      	mov	r8, r3
 800038e:	2e00      	cmp	r6, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa0>
 8000392:	e9c6 4800 	strd	r4, r8, [r6]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa0>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xe8>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 808f 	bne.w	80004c4 <__udivmoddi4+0x210>
 80003a6:	1b49      	subs	r1, r1, r5
 80003a8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003ac:	fa1f f885 	uxth.w	r8, r5
 80003b0:	2701      	movs	r7, #1
 80003b2:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b6:	0c23      	lsrs	r3, r4, #16
 80003b8:	fb0e 111c 	mls	r1, lr, ip, r1
 80003bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c0:	fb08 f10c 	mul.w	r1, r8, ip
 80003c4:	4299      	cmp	r1, r3
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0x124>
 80003c8:	18eb      	adds	r3, r5, r3
 80003ca:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ce:	d202      	bcs.n	80003d6 <__udivmoddi4+0x122>
 80003d0:	4299      	cmp	r1, r3
 80003d2:	f200 80cd 	bhi.w	8000570 <__udivmoddi4+0x2bc>
 80003d6:	4684      	mov	ip, r0
 80003d8:	1a59      	subs	r1, r3, r1
 80003da:	b2a3      	uxth	r3, r4
 80003dc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003e0:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e8:	fb08 f800 	mul.w	r8, r8, r0
 80003ec:	45a0      	cmp	r8, r4
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x14c>
 80003f0:	192c      	adds	r4, r5, r4
 80003f2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0x14a>
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	f200 80b6 	bhi.w	800056a <__udivmoddi4+0x2b6>
 80003fe:	4618      	mov	r0, r3
 8000400:	eba4 0408 	sub.w	r4, r4, r8
 8000404:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000408:	e79f      	b.n	800034a <__udivmoddi4+0x96>
 800040a:	f1c7 0c20 	rsb	ip, r7, #32
 800040e:	40bb      	lsls	r3, r7
 8000410:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000414:	ea4e 0e03 	orr.w	lr, lr, r3
 8000418:	fa01 f407 	lsl.w	r4, r1, r7
 800041c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000420:	fa21 f30c 	lsr.w	r3, r1, ip
 8000424:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000428:	4325      	orrs	r5, r4
 800042a:	fbb3 f9f8 	udiv	r9, r3, r8
 800042e:	0c2c      	lsrs	r4, r5, #16
 8000430:	fb08 3319 	mls	r3, r8, r9, r3
 8000434:	fa1f fa8e 	uxth.w	sl, lr
 8000438:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800043c:	fb09 f40a 	mul.w	r4, r9, sl
 8000440:	429c      	cmp	r4, r3
 8000442:	fa02 f207 	lsl.w	r2, r2, r7
 8000446:	fa00 f107 	lsl.w	r1, r0, r7
 800044a:	d90b      	bls.n	8000464 <__udivmoddi4+0x1b0>
 800044c:	eb1e 0303 	adds.w	r3, lr, r3
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	f080 8087 	bcs.w	8000566 <__udivmoddi4+0x2b2>
 8000458:	429c      	cmp	r4, r3
 800045a:	f240 8084 	bls.w	8000566 <__udivmoddi4+0x2b2>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	4473      	add	r3, lr
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	b2ad      	uxth	r5, r5
 8000468:	fbb3 f0f8 	udiv	r0, r3, r8
 800046c:	fb08 3310 	mls	r3, r8, r0, r3
 8000470:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000474:	fb00 fa0a 	mul.w	sl, r0, sl
 8000478:	45a2      	cmp	sl, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1da>
 800047c:	eb1e 0404 	adds.w	r4, lr, r4
 8000480:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000484:	d26b      	bcs.n	800055e <__udivmoddi4+0x2aa>
 8000486:	45a2      	cmp	sl, r4
 8000488:	d969      	bls.n	800055e <__udivmoddi4+0x2aa>
 800048a:	3802      	subs	r0, #2
 800048c:	4474      	add	r4, lr
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	eba4 040a 	sub.w	r4, r4, sl
 800049a:	454c      	cmp	r4, r9
 800049c:	46c2      	mov	sl, r8
 800049e:	464b      	mov	r3, r9
 80004a0:	d354      	bcc.n	800054c <__udivmoddi4+0x298>
 80004a2:	d051      	beq.n	8000548 <__udivmoddi4+0x294>
 80004a4:	2e00      	cmp	r6, #0
 80004a6:	d069      	beq.n	800057c <__udivmoddi4+0x2c8>
 80004a8:	ebb1 050a 	subs.w	r5, r1, sl
 80004ac:	eb64 0403 	sbc.w	r4, r4, r3
 80004b0:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b4:	40fd      	lsrs	r5, r7
 80004b6:	40fc      	lsrs	r4, r7
 80004b8:	ea4c 0505 	orr.w	r5, ip, r5
 80004bc:	e9c6 5400 	strd	r5, r4, [r6]
 80004c0:	2700      	movs	r7, #0
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0xa0>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f703 	lsr.w	r7, r0, r3
 80004cc:	4095      	lsls	r5, r2
 80004ce:	fa01 f002 	lsl.w	r0, r1, r2
 80004d2:	fa21 f303 	lsr.w	r3, r1, r3
 80004d6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004da:	4338      	orrs	r0, r7
 80004dc:	0c01      	lsrs	r1, r0, #16
 80004de:	fbb3 f7fe 	udiv	r7, r3, lr
 80004e2:	fa1f f885 	uxth.w	r8, r5
 80004e6:	fb0e 3317 	mls	r3, lr, r7, r3
 80004ea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ee:	fb07 f308 	mul.w	r3, r7, r8
 80004f2:	428b      	cmp	r3, r1
 80004f4:	fa04 f402 	lsl.w	r4, r4, r2
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x256>
 80004fa:	1869      	adds	r1, r5, r1
 80004fc:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000500:	d22f      	bcs.n	8000562 <__udivmoddi4+0x2ae>
 8000502:	428b      	cmp	r3, r1
 8000504:	d92d      	bls.n	8000562 <__udivmoddi4+0x2ae>
 8000506:	3f02      	subs	r7, #2
 8000508:	4429      	add	r1, r5
 800050a:	1acb      	subs	r3, r1, r3
 800050c:	b281      	uxth	r1, r0
 800050e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000512:	fb0e 3310 	mls	r3, lr, r0, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb00 f308 	mul.w	r3, r0, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	d907      	bls.n	8000532 <__udivmoddi4+0x27e>
 8000522:	1869      	adds	r1, r5, r1
 8000524:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000528:	d217      	bcs.n	800055a <__udivmoddi4+0x2a6>
 800052a:	428b      	cmp	r3, r1
 800052c:	d915      	bls.n	800055a <__udivmoddi4+0x2a6>
 800052e:	3802      	subs	r0, #2
 8000530:	4429      	add	r1, r5
 8000532:	1ac9      	subs	r1, r1, r3
 8000534:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000538:	e73b      	b.n	80003b2 <__udivmoddi4+0xfe>
 800053a:	4637      	mov	r7, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e709      	b.n	8000354 <__udivmoddi4+0xa0>
 8000540:	4607      	mov	r7, r0
 8000542:	e6e7      	b.n	8000314 <__udivmoddi4+0x60>
 8000544:	4618      	mov	r0, r3
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x8c>
 8000548:	4541      	cmp	r1, r8
 800054a:	d2ab      	bcs.n	80004a4 <__udivmoddi4+0x1f0>
 800054c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000550:	eb69 020e 	sbc.w	r2, r9, lr
 8000554:	3801      	subs	r0, #1
 8000556:	4613      	mov	r3, r2
 8000558:	e7a4      	b.n	80004a4 <__udivmoddi4+0x1f0>
 800055a:	4660      	mov	r0, ip
 800055c:	e7e9      	b.n	8000532 <__udivmoddi4+0x27e>
 800055e:	4618      	mov	r0, r3
 8000560:	e795      	b.n	800048e <__udivmoddi4+0x1da>
 8000562:	4667      	mov	r7, ip
 8000564:	e7d1      	b.n	800050a <__udivmoddi4+0x256>
 8000566:	4681      	mov	r9, r0
 8000568:	e77c      	b.n	8000464 <__udivmoddi4+0x1b0>
 800056a:	3802      	subs	r0, #2
 800056c:	442c      	add	r4, r5
 800056e:	e747      	b.n	8000400 <__udivmoddi4+0x14c>
 8000570:	f1ac 0c02 	sub.w	ip, ip, #2
 8000574:	442b      	add	r3, r5
 8000576:	e72f      	b.n	80003d8 <__udivmoddi4+0x124>
 8000578:	4638      	mov	r0, r7
 800057a:	e708      	b.n	800038e <__udivmoddi4+0xda>
 800057c:	4637      	mov	r7, r6
 800057e:	e6e9      	b.n	8000354 <__udivmoddi4+0xa0>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000584:	b5b0      	push	{r4, r5, r7, lr}
 8000586:	b090      	sub	sp, #64	; 0x40
 8000588:	af02      	add	r7, sp, #8
#ifdef USE_SEMI_HOSTING
  initialise_monitor_handles();
  printf("This is Hello World example code:\r\n");
#endif

  	DWT->CTRL |= (1 << 0);	//to enable the DWT_CYCCNT register for cycle counting
 800058a:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <main+0x80>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a1d      	ldr	r2, [pc, #116]	; (8000604 <main+0x80>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6013      	str	r3, [r2, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000596:	f000 fa85 	bl	8000aa4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800059a:	f000 f843 	bl	8000624 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	//to start application recording via SEGGER
	vSetVarulMaxPRIGROUPValue();
 800059e:	f004 fa1f 	bl	80049e0 <vSetVarulMaxPRIGROUPValue>
	SEGGER_SYSVIEW_Conf();
 80005a2:	f004 fc47 	bl	8004e34 <SEGGER_SYSVIEW_Conf>
	SEGGER_SYSVIEW_Start();
 80005a6:	f005 fb69 	bl	8005c7c <SEGGER_SYSVIEW_Start>

	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4); //4 bits for priority, 0 bits for subpriority
 80005aa:	2003      	movs	r0, #3
 80005ac:	f000 fb69 	bl	8000c82 <HAL_NVIC_SetPriorityGrouping>
	xTaskCreate(vTask1_handler, "Task-1", configMINIMAL_STACK_SIZE, NULL, 2,
 80005b0:	4b15      	ldr	r3, [pc, #84]	; (8000608 <main+0x84>)
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	2302      	movs	r3, #2
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2300      	movs	r3, #0
 80005ba:	2282      	movs	r2, #130	; 0x82
 80005bc:	4913      	ldr	r1, [pc, #76]	; (800060c <main+0x88>)
 80005be:	4814      	ldr	r0, [pc, #80]	; (8000610 <main+0x8c>)
 80005c0:	f002 fe3e 	bl	8003240 <xTaskCreate>
			&xTaskHandle1);
	xTaskCreate(vTask2_handler, "Task-2", configMINIMAL_STACK_SIZE, NULL, 2,
 80005c4:	4b13      	ldr	r3, [pc, #76]	; (8000614 <main+0x90>)
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	2302      	movs	r3, #2
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	2300      	movs	r3, #0
 80005ce:	2282      	movs	r2, #130	; 0x82
 80005d0:	4911      	ldr	r1, [pc, #68]	; (8000618 <main+0x94>)
 80005d2:	4812      	ldr	r0, [pc, #72]	; (800061c <main+0x98>)
 80005d4:	f002 fe34 	bl	8003240 <xTaskCreate>
			&xTaskHandle2);

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005d8:	f000 f8ac 	bl	8000734 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005dc:	f000 f880 	bl	80006e0 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	//Start the task scheduler. This function will never return.
	char usr_msg[50];
	sprintf(usr_msg, "This is Hello World example code:\r\n");
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	4a0f      	ldr	r2, [pc, #60]	; (8000620 <main+0x9c>)
 80005e4:	461c      	mov	r4, r3
 80005e6:	4615      	mov	r5, r2
 80005e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f0:	682b      	ldr	r3, [r5, #0]
 80005f2:	6023      	str	r3, [r4, #0]
	printmsg(usr_msg);
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f8b6 	bl	8000768 <printmsg>

	vTaskStartScheduler();
 80005fc:	f002 ff80 	bl	8003500 <vTaskStartScheduler>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000600:	e7fe      	b.n	8000600 <main+0x7c>
 8000602:	bf00      	nop
 8000604:	e0001000 	.word	0xe0001000
 8000608:	20000030 	.word	0x20000030
 800060c:	080068b4 	.word	0x080068b4
 8000610:	080007a1 	.word	0x080007a1
 8000614:	20000034 	.word	0x20000034
 8000618:	080068bc 	.word	0x080068bc
 800061c:	080007e1 	.word	0x080007e1
 8000620:	080068c4 	.word	0x080068c4

08000624 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	2230      	movs	r2, #48	; 0x30
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f006 f92a 	bl	800688c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <SystemClock_Config+0xb4>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <SystemClock_Config+0xb4>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	; 0x40
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <SystemClock_Config+0xb4>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemClock_Config+0xb8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a1b      	ldr	r2, [pc, #108]	; (80006dc <SystemClock_Config+0xb8>)
 800066e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemClock_Config+0xb8>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000680:	2302      	movs	r3, #2
 8000682:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000688:	2310      	movs	r3, #16
 800068a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800068c:	2300      	movs	r3, #0
 800068e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fcab 	bl	8000ff0 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x80>
		Error_Handler();
 80006a0:	f000 f8cd 	bl	800083e <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 ff06 	bl	80014d0 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xaa>
		Error_Handler();
 80006ca:	f000 f8b8 	bl	800083e <Error_Handler>
	}
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	; 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_USART2_UART_Init+0x4c>)
 80006e6:	4a12      	ldr	r2, [pc, #72]	; (8000730 <MX_USART2_UART_Init+0x50>)
 80006e8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <MX_USART2_UART_Init+0x4c>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_USART2_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_USART2_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_USART2_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_USART2_UART_Init+0x4c>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_USART2_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_USART2_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_USART2_UART_Init+0x4c>)
 8000718:	f001 faf6 	bl	8001d08 <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000722:	f000 f88c 	bl	800083e <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20013768 	.word	0x20013768
 8000730:	40004400 	.word	0x40004400

08000734 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_GPIO_Init+0x30>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a08      	ldr	r2, [pc, #32]	; (8000764 <MX_GPIO_Init+0x30>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_GPIO_Init+0x30>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]

}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800

08000768 <printmsg>:

/* USER CODE BEGIN 4 */
void printmsg(const char *msg) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	while (HAL_UART_GetState(&huart2) == HAL_UART_STATE_BUSY_TX);
 8000770:	bf00      	nop
 8000772:	480a      	ldr	r0, [pc, #40]	; (800079c <printmsg+0x34>)
 8000774:	f001 fbae 	bl	8001ed4 <HAL_UART_GetState>
 8000778:	4603      	mov	r3, r0
 800077a:	2b21      	cmp	r3, #33	; 0x21
 800077c:	d0f9      	beq.n	8000772 <printmsg+0xa>
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, (uint16_t) strlen(msg),
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff fd78 	bl	8000274 <strlen>
 8000784:	4603      	mov	r3, r0
 8000786:	b29a      	uxth	r2, r3
 8000788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800078c:	6879      	ldr	r1, [r7, #4]
 800078e:	4803      	ldr	r0, [pc, #12]	; (800079c <printmsg+0x34>)
 8000790:	f001 fb07 	bl	8001da2 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20013768 	.word	0x20013768

080007a0 <vTask1_handler>:

//had to introduce a key to prevent preemption of the task before it finishes sending data via UART
void vTask1_handler(void *params) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	while (1) {
		if (uart_access_key == AVAILABLE) {
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <vTask1_handler+0x34>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d1fb      	bne.n	80007a8 <vTask1_handler+0x8>
			uart_access_key = UNAVAILABLE;
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <vTask1_handler+0x34>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]
			//printf("Hello-World from T1\r\n");
			printmsg("Hello-World from T1\r\n");
 80007b6:	4808      	ldr	r0, [pc, #32]	; (80007d8 <vTask1_handler+0x38>)
 80007b8:	f7ff ffd6 	bl	8000768 <printmsg>
			uart_access_key = AVAILABLE;
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <vTask1_handler+0x34>)
 80007be:	2201      	movs	r2, #1
 80007c0:	701a      	strb	r2, [r3, #0]
			taskYIELD(); //after UART is done, manually trigger context switch to the other task
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <vTask1_handler+0x3c>)
 80007c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	f3bf 8f4f 	dsb	sy
 80007ce:	f3bf 8f6f 	isb	sy
		if (uart_access_key == AVAILABLE) {
 80007d2:	e7e9      	b.n	80007a8 <vTask1_handler+0x8>
 80007d4:	20000000 	.word	0x20000000
 80007d8:	080068e8 	.word	0x080068e8
 80007dc:	e000ed04 	.word	0xe000ed04

080007e0 <vTask2_handler>:
		}
	}
}

//had to introduce a key to prevent preemption of the task before it finishes sending data via UART
void vTask2_handler(void *params) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	while (1) {
		if (uart_access_key == AVAILABLE) {
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <vTask2_handler+0x34>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d1fb      	bne.n	80007e8 <vTask2_handler+0x8>
			uart_access_key = UNAVAILABLE;
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <vTask2_handler+0x34>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
			//printf("Hello-World from T2\r\n");
			printmsg("Hello-World from T2\r\n");
 80007f6:	4808      	ldr	r0, [pc, #32]	; (8000818 <vTask2_handler+0x38>)
 80007f8:	f7ff ffb6 	bl	8000768 <printmsg>
			uart_access_key = AVAILABLE;
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <vTask2_handler+0x34>)
 80007fe:	2201      	movs	r2, #1
 8000800:	701a      	strb	r2, [r3, #0]
			taskYIELD(); //after UART is done, manually trigger context switch to the other task
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <vTask2_handler+0x3c>)
 8000804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	f3bf 8f4f 	dsb	sy
 800080e:	f3bf 8f6f 	isb	sy
		if (uart_access_key == AVAILABLE) {
 8000812:	e7e9      	b.n	80007e8 <vTask2_handler+0x8>
 8000814:	20000000 	.word	0x20000000
 8000818:	08006900 	.word	0x08006900
 800081c:	e000ed04 	.word	0xe000ed04

08000820 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM2) {
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000830:	d101      	bne.n	8000836 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000832:	f000 f959 	bl	8000ae8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <HAL_MspInit+0x4c>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800085a:	4a0f      	ldr	r2, [pc, #60]	; (8000898 <HAL_MspInit+0x4c>)
 800085c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000860:	6453      	str	r3, [r2, #68]	; 0x44
 8000862:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <HAL_MspInit+0x4c>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <HAL_MspInit+0x4c>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	4a08      	ldr	r2, [pc, #32]	; (8000898 <HAL_MspInit+0x4c>)
 8000878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087c:	6413      	str	r3, [r2, #64]	; 0x40
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_MspInit+0x4c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800

0800089c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a19      	ldr	r2, [pc, #100]	; (8000920 <HAL_UART_MspInit+0x84>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d12b      	bne.n	8000916 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	613b      	str	r3, [r7, #16]
 80008c2:	4b18      	ldr	r3, [pc, #96]	; (8000924 <HAL_UART_MspInit+0x88>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	4a17      	ldr	r2, [pc, #92]	; (8000924 <HAL_UART_MspInit+0x88>)
 80008c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008cc:	6413      	str	r3, [r2, #64]	; 0x40
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <HAL_UART_MspInit+0x88>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <HAL_UART_MspInit+0x88>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a10      	ldr	r2, [pc, #64]	; (8000924 <HAL_UART_MspInit+0x88>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <HAL_UART_MspInit+0x88>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008f6:	230c      	movs	r3, #12
 80008f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000902:	2303      	movs	r3, #3
 8000904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000906:	2307      	movs	r3, #7
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4805      	ldr	r0, [pc, #20]	; (8000928 <HAL_UART_MspInit+0x8c>)
 8000912:	f000 f9eb 	bl	8000cec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	; 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40004400 	.word	0x40004400
 8000924:	40023800 	.word	0x40023800
 8000928:	40020000 	.word	0x40020000

0800092c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08c      	sub	sp, #48	; 0x30
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 800093c:	2200      	movs	r2, #0
 800093e:	6879      	ldr	r1, [r7, #4]
 8000940:	201c      	movs	r0, #28
 8000942:	f000 f9a9 	bl	8000c98 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8000946:	201c      	movs	r0, #28
 8000948:	f000 f9c2 	bl	8000cd0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <HAL_InitTick+0xa4>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	4a1e      	ldr	r2, [pc, #120]	; (80009d0 <HAL_InitTick+0xa4>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	6413      	str	r3, [r2, #64]	; 0x40
 800095c:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <HAL_InitTick+0xa4>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000968:	f107 0210 	add.w	r2, r7, #16
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	4611      	mov	r1, r2
 8000972:	4618      	mov	r0, r3
 8000974:	f000 ff78 	bl	8001868 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000978:	f000 ff4e 	bl	8001818 <HAL_RCC_GetPCLK1Freq>
 800097c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800097e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000980:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <HAL_InitTick+0xa8>)
 8000982:	fba2 2303 	umull	r2, r3, r2, r3
 8000986:	0c9b      	lsrs	r3, r3, #18
 8000988:	3b01      	subs	r3, #1
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <HAL_InitTick+0xac>)
 800098e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000992:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8000994:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <HAL_InitTick+0xac>)
 8000996:	f240 32e7 	movw	r2, #999	; 0x3e7
 800099a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800099c:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <HAL_InitTick+0xac>)
 800099e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009a0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <HAL_InitTick+0xac>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a8:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <HAL_InitTick+0xac>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80009ae:	480a      	ldr	r0, [pc, #40]	; (80009d8 <HAL_InitTick+0xac>)
 80009b0:	f000 ff8c 	bl	80018cc <HAL_TIM_Base_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d104      	bne.n	80009c4 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80009ba:	4807      	ldr	r0, [pc, #28]	; (80009d8 <HAL_InitTick+0xac>)
 80009bc:	f000 ffbb 	bl	8001936 <HAL_TIM_Base_Start_IT>
 80009c0:	4603      	mov	r3, r0
 80009c2:	e000      	b.n	80009c6 <HAL_InitTick+0x9a>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80009c4:	2301      	movs	r3, #1
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3730      	adds	r7, #48	; 0x30
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800
 80009d4:	431bde83 	.word	0x431bde83
 80009d8:	200137a8 	.word	0x200137a8

080009dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <HardFault_Handler+0x4>

080009f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <MemManage_Handler+0x4>

080009f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <BusFault_Handler+0x4>

080009fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <UsageFault_Handler+0x4>

08000a02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <TIM2_IRQHandler+0x10>)
 8000a16:	f000 ffb2 	bl	800197e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200137a8 	.word	0x200137a8

08000a24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a28:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <SystemInit+0x28>)
 8000a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2e:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <SystemInit+0x28>)
 8000a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a38:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <SystemInit+0x28>)
 8000a3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a3e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a88 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a54:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a56:	e003      	b.n	8000a60 <LoopCopyDataInit>

08000a58 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a5a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a5c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a5e:	3104      	adds	r1, #4

08000a60 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a60:	480b      	ldr	r0, [pc, #44]	; (8000a90 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a64:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a66:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a68:	d3f6      	bcc.n	8000a58 <CopyDataInit>
  ldr  r2, =_sbss
 8000a6a:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a6c:	e002      	b.n	8000a74 <LoopFillZerobss>

08000a6e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a6e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a70:	f842 3b04 	str.w	r3, [r2], #4

08000a74 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a76:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a78:	d3f9      	bcc.n	8000a6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a7a:	f7ff ffd3 	bl	8000a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a7e:	f005 fec7 	bl	8006810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a82:	f7ff fd7f 	bl	8000584 <main>
  bx  lr    
 8000a86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a88:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a8c:	08006a38 	.word	0x08006a38
  ldr  r0, =_sdata
 8000a90:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a94:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000a98:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000a9c:	200138d4 	.word	0x200138d4

08000aa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aa0:	e7fe      	b.n	8000aa0 <ADC_IRQHandler>
	...

08000aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0d      	ldr	r2, [pc, #52]	; (8000ae4 <HAL_Init+0x40>)
 8000aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <HAL_Init+0x40>)
 8000aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <HAL_Init+0x40>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <HAL_Init+0x40>)
 8000ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000acc:	2003      	movs	r0, #3
 8000ace:	f000 f8d8 	bl	8000c82 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f7ff ff2a 	bl	800092c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad8:	f7ff feb8 	bl	800084c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000adc:	2300      	movs	r3, #0
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023c00 	.word	0x40023c00

08000ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_IncTick+0x20>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_IncTick+0x24>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <HAL_IncTick+0x24>)
 8000afa:	6013      	str	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	2000000c 	.word	0x2000000c
 8000b0c:	200137e8 	.word	0x200137e8

08000b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return uwTick;
 8000b14:	4b03      	ldr	r3, [pc, #12]	; (8000b24 <HAL_GetTick+0x14>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	200137e8 	.word	0x200137e8

08000b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b44:	4013      	ands	r3, r2
 8000b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5a:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	60d3      	str	r3, [r2, #12]
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <__NVIC_GetPriorityGrouping+0x18>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	0a1b      	lsrs	r3, r3, #8
 8000b7a:	f003 0307 	and.w	r3, r3, #7
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	db0b      	blt.n	8000bb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	f003 021f 	and.w	r2, r3, #31
 8000ba4:	4907      	ldr	r1, [pc, #28]	; (8000bc4 <__NVIC_EnableIRQ+0x38>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	095b      	lsrs	r3, r3, #5
 8000bac:	2001      	movs	r0, #1
 8000bae:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000e100 	.word	0xe000e100

08000bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	6039      	str	r1, [r7, #0]
 8000bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	db0a      	blt.n	8000bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	490c      	ldr	r1, [pc, #48]	; (8000c14 <__NVIC_SetPriority+0x4c>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	0112      	lsls	r2, r2, #4
 8000be8:	b2d2      	uxtb	r2, r2
 8000bea:	440b      	add	r3, r1
 8000bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf0:	e00a      	b.n	8000c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4908      	ldr	r1, [pc, #32]	; (8000c18 <__NVIC_SetPriority+0x50>)
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	f003 030f 	and.w	r3, r3, #15
 8000bfe:	3b04      	subs	r3, #4
 8000c00:	0112      	lsls	r2, r2, #4
 8000c02:	b2d2      	uxtb	r2, r2
 8000c04:	440b      	add	r3, r1
 8000c06:	761a      	strb	r2, [r3, #24]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000e100 	.word	0xe000e100
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b089      	sub	sp, #36	; 0x24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	f1c3 0307 	rsb	r3, r3, #7
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	bf28      	it	cs
 8000c3a:	2304      	movcs	r3, #4
 8000c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3304      	adds	r3, #4
 8000c42:	2b06      	cmp	r3, #6
 8000c44:	d902      	bls.n	8000c4c <NVIC_EncodePriority+0x30>
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3b03      	subs	r3, #3
 8000c4a:	e000      	b.n	8000c4e <NVIC_EncodePriority+0x32>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43da      	mvns	r2, r3
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	401a      	ands	r2, r3
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6e:	43d9      	mvns	r1, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	4313      	orrs	r3, r2
         );
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3724      	adds	r7, #36	; 0x24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff ff4c 	bl	8000b28 <__NVIC_SetPriorityGrouping>
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
 8000ca4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000caa:	f7ff ff61 	bl	8000b70 <__NVIC_GetPriorityGrouping>
 8000cae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	68b9      	ldr	r1, [r7, #8]
 8000cb4:	6978      	ldr	r0, [r7, #20]
 8000cb6:	f7ff ffb1 	bl	8000c1c <NVIC_EncodePriority>
 8000cba:	4602      	mov	r2, r0
 8000cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ff80 	bl	8000bc8 <__NVIC_SetPriority>
}
 8000cc8:	bf00      	nop
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff ff54 	bl	8000b8c <__NVIC_EnableIRQ>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b089      	sub	sp, #36	; 0x24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
 8000d06:	e159      	b.n	8000fbc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d08:	2201      	movs	r2, #1
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	f040 8148 	bne.w	8000fb6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d00b      	beq.n	8000d46 <HAL_GPIO_Init+0x5a>
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d007      	beq.n	8000d46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d3a:	2b11      	cmp	r3, #17
 8000d3c:	d003      	beq.n	8000d46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	2b12      	cmp	r3, #18
 8000d44:	d130      	bne.n	8000da8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	2203      	movs	r2, #3
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	68da      	ldr	r2, [r3, #12]
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	091b      	lsrs	r3, r3, #4
 8000d92:	f003 0201 	and.w	r2, r3, #1
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	2203      	movs	r2, #3
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	689a      	ldr	r2, [r3, #8]
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d003      	beq.n	8000de8 <HAL_GPIO_Init+0xfc>
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	2b12      	cmp	r3, #18
 8000de6:	d123      	bne.n	8000e30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	08da      	lsrs	r2, r3, #3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3208      	adds	r2, #8
 8000df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	f003 0307 	and.w	r3, r3, #7
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	220f      	movs	r2, #15
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	691a      	ldr	r2, [r3, #16]
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	08da      	lsrs	r2, r3, #3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3208      	adds	r2, #8
 8000e2a:	69b9      	ldr	r1, [r7, #24]
 8000e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 0203 	and.w	r2, r3, #3
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f000 80a2 	beq.w	8000fb6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b56      	ldr	r3, [pc, #344]	; (8000fd0 <HAL_GPIO_Init+0x2e4>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	4a55      	ldr	r2, [pc, #340]	; (8000fd0 <HAL_GPIO_Init+0x2e4>)
 8000e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e80:	6453      	str	r3, [r2, #68]	; 0x44
 8000e82:	4b53      	ldr	r3, [pc, #332]	; (8000fd0 <HAL_GPIO_Init+0x2e4>)
 8000e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e8e:	4a51      	ldr	r2, [pc, #324]	; (8000fd4 <HAL_GPIO_Init+0x2e8>)
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	089b      	lsrs	r3, r3, #2
 8000e94:	3302      	adds	r3, #2
 8000e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	220f      	movs	r2, #15
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a48      	ldr	r2, [pc, #288]	; (8000fd8 <HAL_GPIO_Init+0x2ec>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d019      	beq.n	8000eee <HAL_GPIO_Init+0x202>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a47      	ldr	r2, [pc, #284]	; (8000fdc <HAL_GPIO_Init+0x2f0>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d013      	beq.n	8000eea <HAL_GPIO_Init+0x1fe>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a46      	ldr	r2, [pc, #280]	; (8000fe0 <HAL_GPIO_Init+0x2f4>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d00d      	beq.n	8000ee6 <HAL_GPIO_Init+0x1fa>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a45      	ldr	r2, [pc, #276]	; (8000fe4 <HAL_GPIO_Init+0x2f8>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d007      	beq.n	8000ee2 <HAL_GPIO_Init+0x1f6>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a44      	ldr	r2, [pc, #272]	; (8000fe8 <HAL_GPIO_Init+0x2fc>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d101      	bne.n	8000ede <HAL_GPIO_Init+0x1f2>
 8000eda:	2304      	movs	r3, #4
 8000edc:	e008      	b.n	8000ef0 <HAL_GPIO_Init+0x204>
 8000ede:	2307      	movs	r3, #7
 8000ee0:	e006      	b.n	8000ef0 <HAL_GPIO_Init+0x204>
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e004      	b.n	8000ef0 <HAL_GPIO_Init+0x204>
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	e002      	b.n	8000ef0 <HAL_GPIO_Init+0x204>
 8000eea:	2301      	movs	r3, #1
 8000eec:	e000      	b.n	8000ef0 <HAL_GPIO_Init+0x204>
 8000eee:	2300      	movs	r3, #0
 8000ef0:	69fa      	ldr	r2, [r7, #28]
 8000ef2:	f002 0203 	and.w	r2, r2, #3
 8000ef6:	0092      	lsls	r2, r2, #2
 8000ef8:	4093      	lsls	r3, r2
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f00:	4934      	ldr	r1, [pc, #208]	; (8000fd4 <HAL_GPIO_Init+0x2e8>)
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	089b      	lsrs	r3, r3, #2
 8000f06:	3302      	adds	r3, #2
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f0e:	4b37      	ldr	r3, [pc, #220]	; (8000fec <HAL_GPIO_Init+0x300>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f32:	4a2e      	ldr	r2, [pc, #184]	; (8000fec <HAL_GPIO_Init+0x300>)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f38:	4b2c      	ldr	r3, [pc, #176]	; (8000fec <HAL_GPIO_Init+0x300>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f5c:	4a23      	ldr	r2, [pc, #140]	; (8000fec <HAL_GPIO_Init+0x300>)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f62:	4b22      	ldr	r3, [pc, #136]	; (8000fec <HAL_GPIO_Init+0x300>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f86:	4a19      	ldr	r2, [pc, #100]	; (8000fec <HAL_GPIO_Init+0x300>)
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f8c:	4b17      	ldr	r3, [pc, #92]	; (8000fec <HAL_GPIO_Init+0x300>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d003      	beq.n	8000fb0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fb0:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <HAL_GPIO_Init+0x300>)
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	61fb      	str	r3, [r7, #28]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	2b0f      	cmp	r3, #15
 8000fc0:	f67f aea2 	bls.w	8000d08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	3724      	adds	r7, #36	; 0x24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40013800 	.word	0x40013800
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	40020400 	.word	0x40020400
 8000fe0:	40020800 	.word	0x40020800
 8000fe4:	40020c00 	.word	0x40020c00
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40013c00 	.word	0x40013c00

08000ff0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d101      	bne.n	8001002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e25b      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d075      	beq.n	80010fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800100e:	4ba3      	ldr	r3, [pc, #652]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f003 030c 	and.w	r3, r3, #12
 8001016:	2b04      	cmp	r3, #4
 8001018:	d00c      	beq.n	8001034 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800101a:	4ba0      	ldr	r3, [pc, #640]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001022:	2b08      	cmp	r3, #8
 8001024:	d112      	bne.n	800104c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001026:	4b9d      	ldr	r3, [pc, #628]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800102e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001032:	d10b      	bne.n	800104c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001034:	4b99      	ldr	r3, [pc, #612]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d05b      	beq.n	80010f8 <HAL_RCC_OscConfig+0x108>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d157      	bne.n	80010f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e236      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001054:	d106      	bne.n	8001064 <HAL_RCC_OscConfig+0x74>
 8001056:	4b91      	ldr	r3, [pc, #580]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a90      	ldr	r2, [pc, #576]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800105c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	e01d      	b.n	80010a0 <HAL_RCC_OscConfig+0xb0>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800106c:	d10c      	bne.n	8001088 <HAL_RCC_OscConfig+0x98>
 800106e:	4b8b      	ldr	r3, [pc, #556]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a8a      	ldr	r2, [pc, #552]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	4b88      	ldr	r3, [pc, #544]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a87      	ldr	r2, [pc, #540]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001084:	6013      	str	r3, [r2, #0]
 8001086:	e00b      	b.n	80010a0 <HAL_RCC_OscConfig+0xb0>
 8001088:	4b84      	ldr	r3, [pc, #528]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a83      	ldr	r2, [pc, #524]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800108e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001092:	6013      	str	r3, [r2, #0]
 8001094:	4b81      	ldr	r3, [pc, #516]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a80      	ldr	r2, [pc, #512]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800109a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800109e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d013      	beq.n	80010d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a8:	f7ff fd32 	bl	8000b10 <HAL_GetTick>
 80010ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ae:	e008      	b.n	80010c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010b0:	f7ff fd2e 	bl	8000b10 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b64      	cmp	r3, #100	; 0x64
 80010bc:	d901      	bls.n	80010c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010be:	2303      	movs	r3, #3
 80010c0:	e1fb      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c2:	4b76      	ldr	r3, [pc, #472]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0f0      	beq.n	80010b0 <HAL_RCC_OscConfig+0xc0>
 80010ce:	e014      	b.n	80010fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fd1e 	bl	8000b10 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d8:	f7ff fd1a 	bl	8000b10 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b64      	cmp	r3, #100	; 0x64
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e1e7      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ea:	4b6c      	ldr	r3, [pc, #432]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f0      	bne.n	80010d8 <HAL_RCC_OscConfig+0xe8>
 80010f6:	e000      	b.n	80010fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d063      	beq.n	80011ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001106:	4b65      	ldr	r3, [pc, #404]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 030c 	and.w	r3, r3, #12
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00b      	beq.n	800112a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001112:	4b62      	ldr	r3, [pc, #392]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800111a:	2b08      	cmp	r3, #8
 800111c:	d11c      	bne.n	8001158 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800111e:	4b5f      	ldr	r3, [pc, #380]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d116      	bne.n	8001158 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800112a:	4b5c      	ldr	r3, [pc, #368]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d005      	beq.n	8001142 <HAL_RCC_OscConfig+0x152>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d001      	beq.n	8001142 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e1bb      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001142:	4b56      	ldr	r3, [pc, #344]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	4952      	ldr	r1, [pc, #328]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001152:	4313      	orrs	r3, r2
 8001154:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001156:	e03a      	b.n	80011ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d020      	beq.n	80011a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001160:	4b4f      	ldr	r3, [pc, #316]	; (80012a0 <HAL_RCC_OscConfig+0x2b0>)
 8001162:	2201      	movs	r2, #1
 8001164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001166:	f7ff fcd3 	bl	8000b10 <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800116e:	f7ff fccf 	bl	8000b10 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e19c      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001180:	4b46      	ldr	r3, [pc, #280]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0f0      	beq.n	800116e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118c:	4b43      	ldr	r3, [pc, #268]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	4940      	ldr	r1, [pc, #256]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800119c:	4313      	orrs	r3, r2
 800119e:	600b      	str	r3, [r1, #0]
 80011a0:	e015      	b.n	80011ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011a2:	4b3f      	ldr	r3, [pc, #252]	; (80012a0 <HAL_RCC_OscConfig+0x2b0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a8:	f7ff fcb2 	bl	8000b10 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011b0:	f7ff fcae 	bl	8000b10 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e17b      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c2:	4b36      	ldr	r3, [pc, #216]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1f0      	bne.n	80011b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d030      	beq.n	800123c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d016      	beq.n	8001210 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011e2:	4b30      	ldr	r3, [pc, #192]	; (80012a4 <HAL_RCC_OscConfig+0x2b4>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e8:	f7ff fc92 	bl	8000b10 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011f0:	f7ff fc8e 	bl	8000b10 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e15b      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001202:	4b26      	ldr	r3, [pc, #152]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f0      	beq.n	80011f0 <HAL_RCC_OscConfig+0x200>
 800120e:	e015      	b.n	800123c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001210:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <HAL_RCC_OscConfig+0x2b4>)
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001216:	f7ff fc7b 	bl	8000b10 <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800121e:	f7ff fc77 	bl	8000b10 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e144      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001230:	4b1a      	ldr	r3, [pc, #104]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f0      	bne.n	800121e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 80a0 	beq.w	800138a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800124a:	2300      	movs	r3, #0
 800124c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10f      	bne.n	800127a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	4b0f      	ldr	r3, [pc, #60]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a0e      	ldr	r2, [pc, #56]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 8001264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
 800126a:	4b0c      	ldr	r3, [pc, #48]	; (800129c <HAL_RCC_OscConfig+0x2ac>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001276:	2301      	movs	r3, #1
 8001278:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <HAL_RCC_OscConfig+0x2b8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001282:	2b00      	cmp	r3, #0
 8001284:	d121      	bne.n	80012ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001286:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <HAL_RCC_OscConfig+0x2b8>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a07      	ldr	r2, [pc, #28]	; (80012a8 <HAL_RCC_OscConfig+0x2b8>)
 800128c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001290:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001292:	f7ff fc3d 	bl	8000b10 <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001298:	e011      	b.n	80012be <HAL_RCC_OscConfig+0x2ce>
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800
 80012a0:	42470000 	.word	0x42470000
 80012a4:	42470e80 	.word	0x42470e80
 80012a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012ac:	f7ff fc30 	bl	8000b10 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e0fd      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012be:	4b81      	ldr	r3, [pc, #516]	; (80014c4 <HAL_RCC_OscConfig+0x4d4>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f0      	beq.n	80012ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d106      	bne.n	80012e0 <HAL_RCC_OscConfig+0x2f0>
 80012d2:	4b7d      	ldr	r3, [pc, #500]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 80012d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d6:	4a7c      	ldr	r2, [pc, #496]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6713      	str	r3, [r2, #112]	; 0x70
 80012de:	e01c      	b.n	800131a <HAL_RCC_OscConfig+0x32a>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	2b05      	cmp	r3, #5
 80012e6:	d10c      	bne.n	8001302 <HAL_RCC_OscConfig+0x312>
 80012e8:	4b77      	ldr	r3, [pc, #476]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 80012ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ec:	4a76      	ldr	r2, [pc, #472]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 80012ee:	f043 0304 	orr.w	r3, r3, #4
 80012f2:	6713      	str	r3, [r2, #112]	; 0x70
 80012f4:	4b74      	ldr	r3, [pc, #464]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 80012f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f8:	4a73      	ldr	r2, [pc, #460]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001300:	e00b      	b.n	800131a <HAL_RCC_OscConfig+0x32a>
 8001302:	4b71      	ldr	r3, [pc, #452]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001306:	4a70      	ldr	r2, [pc, #448]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001308:	f023 0301 	bic.w	r3, r3, #1
 800130c:	6713      	str	r3, [r2, #112]	; 0x70
 800130e:	4b6e      	ldr	r3, [pc, #440]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001312:	4a6d      	ldr	r2, [pc, #436]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001314:	f023 0304 	bic.w	r3, r3, #4
 8001318:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d015      	beq.n	800134e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001322:	f7ff fbf5 	bl	8000b10 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001328:	e00a      	b.n	8001340 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800132a:	f7ff fbf1 	bl	8000b10 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	f241 3288 	movw	r2, #5000	; 0x1388
 8001338:	4293      	cmp	r3, r2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e0bc      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001340:	4b61      	ldr	r3, [pc, #388]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0ee      	beq.n	800132a <HAL_RCC_OscConfig+0x33a>
 800134c:	e014      	b.n	8001378 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134e:	f7ff fbdf 	bl	8000b10 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001354:	e00a      	b.n	800136c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001356:	f7ff fbdb 	bl	8000b10 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	f241 3288 	movw	r2, #5000	; 0x1388
 8001364:	4293      	cmp	r3, r2
 8001366:	d901      	bls.n	800136c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001368:	2303      	movs	r3, #3
 800136a:	e0a6      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800136c:	4b56      	ldr	r3, [pc, #344]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 800136e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1ee      	bne.n	8001356 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001378:	7dfb      	ldrb	r3, [r7, #23]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d105      	bne.n	800138a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800137e:	4b52      	ldr	r3, [pc, #328]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a51      	ldr	r2, [pc, #324]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	2b00      	cmp	r3, #0
 8001390:	f000 8092 	beq.w	80014b8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001394:	4b4c      	ldr	r3, [pc, #304]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 030c 	and.w	r3, r3, #12
 800139c:	2b08      	cmp	r3, #8
 800139e:	d05c      	beq.n	800145a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d141      	bne.n	800142c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013a8:	4b48      	ldr	r3, [pc, #288]	; (80014cc <HAL_RCC_OscConfig+0x4dc>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ae:	f7ff fbaf 	bl	8000b10 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013b6:	f7ff fbab 	bl	8000b10 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e078      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013c8:	4b3f      	ldr	r3, [pc, #252]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1f0      	bne.n	80013b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69da      	ldr	r2, [r3, #28]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	431a      	orrs	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e2:	019b      	lsls	r3, r3, #6
 80013e4:	431a      	orrs	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ea:	085b      	lsrs	r3, r3, #1
 80013ec:	3b01      	subs	r3, #1
 80013ee:	041b      	lsls	r3, r3, #16
 80013f0:	431a      	orrs	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f6:	061b      	lsls	r3, r3, #24
 80013f8:	4933      	ldr	r1, [pc, #204]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013fe:	4b33      	ldr	r3, [pc, #204]	; (80014cc <HAL_RCC_OscConfig+0x4dc>)
 8001400:	2201      	movs	r2, #1
 8001402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7ff fb84 	bl	8000b10 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800140c:	f7ff fb80 	bl	8000b10 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e04d      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800141e:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f0      	beq.n	800140c <HAL_RCC_OscConfig+0x41c>
 800142a:	e045      	b.n	80014b8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800142c:	4b27      	ldr	r3, [pc, #156]	; (80014cc <HAL_RCC_OscConfig+0x4dc>)
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001432:	f7ff fb6d 	bl	8000b10 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800143a:	f7ff fb69 	bl	8000b10 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e036      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1f0      	bne.n	800143a <HAL_RCC_OscConfig+0x44a>
 8001458:	e02e      	b.n	80014b8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d101      	bne.n	8001466 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e029      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <HAL_RCC_OscConfig+0x4d8>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	429a      	cmp	r2, r3
 8001478:	d11c      	bne.n	80014b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001484:	429a      	cmp	r2, r3
 8001486:	d115      	bne.n	80014b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800148e:	4013      	ands	r3, r2
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001494:	4293      	cmp	r3, r2
 8001496:	d10d      	bne.n	80014b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d106      	bne.n	80014b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d001      	beq.n	80014b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40007000 	.word	0x40007000
 80014c8:	40023800 	.word	0x40023800
 80014cc:	42470060 	.word	0x42470060

080014d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e0cc      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014e4:	4b68      	ldr	r3, [pc, #416]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 030f 	and.w	r3, r3, #15
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d90c      	bls.n	800150c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f2:	4b65      	ldr	r3, [pc, #404]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fa:	4b63      	ldr	r3, [pc, #396]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d001      	beq.n	800150c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e0b8      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d020      	beq.n	800155a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001524:	4b59      	ldr	r3, [pc, #356]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	4a58      	ldr	r2, [pc, #352]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800152e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800153c:	4b53      	ldr	r3, [pc, #332]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	4a52      	ldr	r2, [pc, #328]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001542:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001546:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001548:	4b50      	ldr	r3, [pc, #320]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	494d      	ldr	r1, [pc, #308]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	4313      	orrs	r3, r2
 8001558:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b00      	cmp	r3, #0
 8001564:	d044      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d107      	bne.n	800157e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800156e:	4b47      	ldr	r3, [pc, #284]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d119      	bne.n	80015ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e07f      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d003      	beq.n	800158e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800158a:	2b03      	cmp	r3, #3
 800158c:	d107      	bne.n	800159e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800158e:	4b3f      	ldr	r3, [pc, #252]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d109      	bne.n	80015ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e06f      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159e:	4b3b      	ldr	r3, [pc, #236]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e067      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ae:	4b37      	ldr	r3, [pc, #220]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f023 0203 	bic.w	r2, r3, #3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	4934      	ldr	r1, [pc, #208]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015c0:	f7ff faa6 	bl	8000b10 <HAL_GetTick>
 80015c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015c6:	e00a      	b.n	80015de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015c8:	f7ff faa2 	bl	8000b10 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e04f      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015de:	4b2b      	ldr	r3, [pc, #172]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 020c 	and.w	r2, r3, #12
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d1eb      	bne.n	80015c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015f0:	4b25      	ldr	r3, [pc, #148]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 030f 	and.w	r3, r3, #15
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d20c      	bcs.n	8001618 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015fe:	4b22      	ldr	r3, [pc, #136]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001606:	4b20      	ldr	r3, [pc, #128]	; (8001688 <HAL_RCC_ClockConfig+0x1b8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d001      	beq.n	8001618 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e032      	b.n	800167e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	d008      	beq.n	8001636 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001624:	4b19      	ldr	r3, [pc, #100]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	4916      	ldr	r1, [pc, #88]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	4313      	orrs	r3, r2
 8001634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b00      	cmp	r3, #0
 8001640:	d009      	beq.n	8001656 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001642:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	490e      	ldr	r1, [pc, #56]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	4313      	orrs	r3, r2
 8001654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001656:	f000 f821 	bl	800169c <HAL_RCC_GetSysClockFreq>
 800165a:	4601      	mov	r1, r0
 800165c:	4b0b      	ldr	r3, [pc, #44]	; (800168c <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	091b      	lsrs	r3, r3, #4
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <HAL_RCC_ClockConfig+0x1c0>)
 8001668:	5cd3      	ldrb	r3, [r2, r3]
 800166a:	fa21 f303 	lsr.w	r3, r1, r3
 800166e:	4a09      	ldr	r2, [pc, #36]	; (8001694 <HAL_RCC_ClockConfig+0x1c4>)
 8001670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_RCC_ClockConfig+0x1c8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff f958 	bl	800092c <HAL_InitTick>

  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023c00 	.word	0x40023c00
 800168c:	40023800 	.word	0x40023800
 8001690:	080069fc 	.word	0x080069fc
 8001694:	20000004 	.word	0x20000004
 8001698:	20000008 	.word	0x20000008

0800169c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800169c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	2300      	movs	r3, #0
 80016ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016b2:	4b50      	ldr	r3, [pc, #320]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 030c 	and.w	r3, r3, #12
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	d007      	beq.n	80016ce <HAL_RCC_GetSysClockFreq+0x32>
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d008      	beq.n	80016d4 <HAL_RCC_GetSysClockFreq+0x38>
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f040 808d 	bne.w	80017e2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016c8:	4b4b      	ldr	r3, [pc, #300]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80016ca:	60bb      	str	r3, [r7, #8]
       break;
 80016cc:	e08c      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016ce:	4b4b      	ldr	r3, [pc, #300]	; (80017fc <HAL_RCC_GetSysClockFreq+0x160>)
 80016d0:	60bb      	str	r3, [r7, #8]
      break;
 80016d2:	e089      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016d4:	4b47      	ldr	r3, [pc, #284]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016de:	4b45      	ldr	r3, [pc, #276]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d023      	beq.n	8001732 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ea:	4b42      	ldr	r3, [pc, #264]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	099b      	lsrs	r3, r3, #6
 80016f0:	f04f 0400 	mov.w	r4, #0
 80016f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	ea03 0501 	and.w	r5, r3, r1
 8001700:	ea04 0602 	and.w	r6, r4, r2
 8001704:	4a3d      	ldr	r2, [pc, #244]	; (80017fc <HAL_RCC_GetSysClockFreq+0x160>)
 8001706:	fb02 f106 	mul.w	r1, r2, r6
 800170a:	2200      	movs	r2, #0
 800170c:	fb02 f205 	mul.w	r2, r2, r5
 8001710:	440a      	add	r2, r1
 8001712:	493a      	ldr	r1, [pc, #232]	; (80017fc <HAL_RCC_GetSysClockFreq+0x160>)
 8001714:	fba5 0101 	umull	r0, r1, r5, r1
 8001718:	1853      	adds	r3, r2, r1
 800171a:	4619      	mov	r1, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f04f 0400 	mov.w	r4, #0
 8001722:	461a      	mov	r2, r3
 8001724:	4623      	mov	r3, r4
 8001726:	f7fe fdad 	bl	8000284 <__aeabi_uldivmod>
 800172a:	4603      	mov	r3, r0
 800172c:	460c      	mov	r4, r1
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	e049      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001732:	4b30      	ldr	r3, [pc, #192]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	099b      	lsrs	r3, r3, #6
 8001738:	f04f 0400 	mov.w	r4, #0
 800173c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	ea03 0501 	and.w	r5, r3, r1
 8001748:	ea04 0602 	and.w	r6, r4, r2
 800174c:	4629      	mov	r1, r5
 800174e:	4632      	mov	r2, r6
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	f04f 0400 	mov.w	r4, #0
 8001758:	0154      	lsls	r4, r2, #5
 800175a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800175e:	014b      	lsls	r3, r1, #5
 8001760:	4619      	mov	r1, r3
 8001762:	4622      	mov	r2, r4
 8001764:	1b49      	subs	r1, r1, r5
 8001766:	eb62 0206 	sbc.w	r2, r2, r6
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	f04f 0400 	mov.w	r4, #0
 8001772:	0194      	lsls	r4, r2, #6
 8001774:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001778:	018b      	lsls	r3, r1, #6
 800177a:	1a5b      	subs	r3, r3, r1
 800177c:	eb64 0402 	sbc.w	r4, r4, r2
 8001780:	f04f 0100 	mov.w	r1, #0
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	00e2      	lsls	r2, r4, #3
 800178a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800178e:	00d9      	lsls	r1, r3, #3
 8001790:	460b      	mov	r3, r1
 8001792:	4614      	mov	r4, r2
 8001794:	195b      	adds	r3, r3, r5
 8001796:	eb44 0406 	adc.w	r4, r4, r6
 800179a:	f04f 0100 	mov.w	r1, #0
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	02a2      	lsls	r2, r4, #10
 80017a4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80017a8:	0299      	lsls	r1, r3, #10
 80017aa:	460b      	mov	r3, r1
 80017ac:	4614      	mov	r4, r2
 80017ae:	4618      	mov	r0, r3
 80017b0:	4621      	mov	r1, r4
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f04f 0400 	mov.w	r4, #0
 80017b8:	461a      	mov	r2, r3
 80017ba:	4623      	mov	r3, r4
 80017bc:	f7fe fd62 	bl	8000284 <__aeabi_uldivmod>
 80017c0:	4603      	mov	r3, r0
 80017c2:	460c      	mov	r4, r1
 80017c4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	0c1b      	lsrs	r3, r3, #16
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	3301      	adds	r3, #1
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	fbb2 f3f3 	udiv	r3, r2, r3
 80017de:	60bb      	str	r3, [r7, #8]
      break;
 80017e0:	e002      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017e2:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80017e4:	60bb      	str	r3, [r7, #8]
      break;
 80017e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017e8:	68bb      	ldr	r3, [r7, #8]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800
 80017f8:	00f42400 	.word	0x00f42400
 80017fc:	017d7840 	.word	0x017d7840

08001800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <HAL_RCC_GetHCLKFreq+0x14>)
 8001806:	681b      	ldr	r3, [r3, #0]
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000004 	.word	0x20000004

08001818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800181c:	f7ff fff0 	bl	8001800 <HAL_RCC_GetHCLKFreq>
 8001820:	4601      	mov	r1, r0
 8001822:	4b05      	ldr	r3, [pc, #20]	; (8001838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	0a9b      	lsrs	r3, r3, #10
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	4a03      	ldr	r2, [pc, #12]	; (800183c <HAL_RCC_GetPCLK1Freq+0x24>)
 800182e:	5cd3      	ldrb	r3, [r2, r3]
 8001830:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001834:	4618      	mov	r0, r3
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40023800 	.word	0x40023800
 800183c:	08006a0c 	.word	0x08006a0c

08001840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001844:	f7ff ffdc 	bl	8001800 <HAL_RCC_GetHCLKFreq>
 8001848:	4601      	mov	r1, r0
 800184a:	4b05      	ldr	r3, [pc, #20]	; (8001860 <HAL_RCC_GetPCLK2Freq+0x20>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	0b5b      	lsrs	r3, r3, #13
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	4a03      	ldr	r2, [pc, #12]	; (8001864 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001856:	5cd3      	ldrb	r3, [r2, r3]
 8001858:	fa21 f303 	lsr.w	r3, r1, r3
}
 800185c:	4618      	mov	r0, r3
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40023800 	.word	0x40023800
 8001864:	08006a0c 	.word	0x08006a0c

08001868 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	220f      	movs	r2, #15
 8001876:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_RCC_GetClockConfig+0x5c>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 0203 	and.w	r2, r3, #3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <HAL_RCC_GetClockConfig+0x5c>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <HAL_RCC_GetClockConfig+0x5c>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800189c:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <HAL_RCC_GetClockConfig+0x5c>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	08db      	lsrs	r3, r3, #3
 80018a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <HAL_RCC_GetClockConfig+0x60>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 020f 	and.w	r2, r3, #15
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	601a      	str	r2, [r3, #0]
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40023c00 	.word	0x40023c00

080018cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e01d      	b.n	800191a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d106      	bne.n	80018f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f815 	bl	8001922 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2202      	movs	r2, #2
 80018fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3304      	adds	r3, #4
 8001908:	4619      	mov	r1, r3
 800190a:	4610      	mov	r0, r2
 800190c:	f000 f968 	bl	8001be0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001936:	b480      	push	{r7}
 8001938:	b085      	sub	sp, #20
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f042 0201 	orr.w	r2, r2, #1
 800194c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2b06      	cmp	r3, #6
 800195e:	d007      	beq.n	8001970 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0201 	orr.w	r2, r2, #1
 800196e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b02      	cmp	r3, #2
 8001992:	d122      	bne.n	80019da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d11b      	bne.n	80019da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f06f 0202 	mvn.w	r2, #2
 80019aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f000 f8ee 	bl	8001ba2 <HAL_TIM_IC_CaptureCallback>
 80019c6:	e005      	b.n	80019d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f8e0 	bl	8001b8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 f8f1 	bl	8001bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d122      	bne.n	8001a2e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d11b      	bne.n	8001a2e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f06f 0204 	mvn.w	r2, #4
 80019fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2202      	movs	r2, #2
 8001a04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d003      	beq.n	8001a1c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f8c4 	bl	8001ba2 <HAL_TIM_IC_CaptureCallback>
 8001a1a:	e005      	b.n	8001a28 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 f8b6 	bl	8001b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f8c7 	bl	8001bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d122      	bne.n	8001a82 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d11b      	bne.n	8001a82 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f06f 0208 	mvn.w	r2, #8
 8001a52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2204      	movs	r2, #4
 8001a58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	69db      	ldr	r3, [r3, #28]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 f89a 	bl	8001ba2 <HAL_TIM_IC_CaptureCallback>
 8001a6e:	e005      	b.n	8001a7c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f88c 	bl	8001b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 f89d 	bl	8001bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	f003 0310 	and.w	r3, r3, #16
 8001a8c:	2b10      	cmp	r3, #16
 8001a8e:	d122      	bne.n	8001ad6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	f003 0310 	and.w	r3, r3, #16
 8001a9a:	2b10      	cmp	r3, #16
 8001a9c:	d11b      	bne.n	8001ad6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f06f 0210 	mvn.w	r2, #16
 8001aa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2208      	movs	r2, #8
 8001aac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f870 	bl	8001ba2 <HAL_TIM_IC_CaptureCallback>
 8001ac2:	e005      	b.n	8001ad0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 f862 	bl	8001b8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f000 f873 	bl	8001bb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d10e      	bne.n	8001b02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d107      	bne.n	8001b02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f06f 0201 	mvn.w	r2, #1
 8001afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7fe fe8f 	bl	8000820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0c:	2b80      	cmp	r3, #128	; 0x80
 8001b0e:	d10e      	bne.n	8001b2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b1a:	2b80      	cmp	r3, #128	; 0x80
 8001b1c:	d107      	bne.n	8001b2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f000 f8e3 	bl	8001cf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b38:	2b40      	cmp	r3, #64	; 0x40
 8001b3a:	d10e      	bne.n	8001b5a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b46:	2b40      	cmp	r3, #64	; 0x40
 8001b48:	d107      	bne.n	8001b5a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f000 f838 	bl	8001bca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	f003 0320 	and.w	r3, r3, #32
 8001b64:	2b20      	cmp	r3, #32
 8001b66:	d10e      	bne.n	8001b86 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	f003 0320 	and.w	r3, r3, #32
 8001b72:	2b20      	cmp	r3, #32
 8001b74:	d107      	bne.n	8001b86 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f06f 0220 	mvn.w	r2, #32
 8001b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f8ad 	bl	8001ce0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4a34      	ldr	r2, [pc, #208]	; (8001cc4 <TIM_Base_SetConfig+0xe4>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d00f      	beq.n	8001c18 <TIM_Base_SetConfig+0x38>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bfe:	d00b      	beq.n	8001c18 <TIM_Base_SetConfig+0x38>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4a31      	ldr	r2, [pc, #196]	; (8001cc8 <TIM_Base_SetConfig+0xe8>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d007      	beq.n	8001c18 <TIM_Base_SetConfig+0x38>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a30      	ldr	r2, [pc, #192]	; (8001ccc <TIM_Base_SetConfig+0xec>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d003      	beq.n	8001c18 <TIM_Base_SetConfig+0x38>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4a2f      	ldr	r2, [pc, #188]	; (8001cd0 <TIM_Base_SetConfig+0xf0>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d108      	bne.n	8001c2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a25      	ldr	r2, [pc, #148]	; (8001cc4 <TIM_Base_SetConfig+0xe4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d01b      	beq.n	8001c6a <TIM_Base_SetConfig+0x8a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c38:	d017      	beq.n	8001c6a <TIM_Base_SetConfig+0x8a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a22      	ldr	r2, [pc, #136]	; (8001cc8 <TIM_Base_SetConfig+0xe8>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d013      	beq.n	8001c6a <TIM_Base_SetConfig+0x8a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a21      	ldr	r2, [pc, #132]	; (8001ccc <TIM_Base_SetConfig+0xec>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d00f      	beq.n	8001c6a <TIM_Base_SetConfig+0x8a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a20      	ldr	r2, [pc, #128]	; (8001cd0 <TIM_Base_SetConfig+0xf0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d00b      	beq.n	8001c6a <TIM_Base_SetConfig+0x8a>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a1f      	ldr	r2, [pc, #124]	; (8001cd4 <TIM_Base_SetConfig+0xf4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d007      	beq.n	8001c6a <TIM_Base_SetConfig+0x8a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a1e      	ldr	r2, [pc, #120]	; (8001cd8 <TIM_Base_SetConfig+0xf8>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d003      	beq.n	8001c6a <TIM_Base_SetConfig+0x8a>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a1d      	ldr	r2, [pc, #116]	; (8001cdc <TIM_Base_SetConfig+0xfc>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d108      	bne.n	8001c7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a08      	ldr	r2, [pc, #32]	; (8001cc4 <TIM_Base_SetConfig+0xe4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d103      	bne.n	8001cb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	691a      	ldr	r2, [r3, #16]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	615a      	str	r2, [r3, #20]
}
 8001cb6:	bf00      	nop
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40010000 	.word	0x40010000
 8001cc8:	40000400 	.word	0x40000400
 8001ccc:	40000800 	.word	0x40000800
 8001cd0:	40000c00 	.word	0x40000c00
 8001cd4:	40014000 	.word	0x40014000
 8001cd8:	40014400 	.word	0x40014400
 8001cdc:	40014800 	.word	0x40014800

08001ce0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e03f      	b.n	8001d9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d106      	bne.n	8001d34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7fe fdb4 	bl	800089c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2224      	movs	r2, #36	; 0x24
 8001d38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f929 	bl	8001fa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	691a      	ldr	r2, [r3, #16]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	695a      	ldr	r2, [r3, #20]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2220      	movs	r2, #32
 8001d94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b088      	sub	sp, #32
 8001da6:	af02      	add	r7, sp, #8
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	603b      	str	r3, [r7, #0]
 8001dae:	4613      	mov	r3, r2
 8001db0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b20      	cmp	r3, #32
 8001dc0:	f040 8083 	bne.w	8001eca <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d002      	beq.n	8001dd0 <HAL_UART_Transmit+0x2e>
 8001dca:	88fb      	ldrh	r3, [r7, #6]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e07b      	b.n	8001ecc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_UART_Transmit+0x40>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e074      	b.n	8001ecc <HAL_UART_Transmit+0x12a>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2221      	movs	r2, #33	; 0x21
 8001df4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001df8:	f7fe fe8a 	bl	8000b10 <HAL_GetTick>
 8001dfc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	88fa      	ldrh	r2, [r7, #6]
 8001e02:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	88fa      	ldrh	r2, [r7, #6]
 8001e08:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001e12:	e042      	b.n	8001e9a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e2a:	d122      	bne.n	8001e72 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2200      	movs	r2, #0
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 f86a 	bl	8001f10 <UART_WaitOnFlagUntilTimeout>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e042      	b.n	8001ecc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e58:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d103      	bne.n	8001e6a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	3302      	adds	r3, #2
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	e017      	b.n	8001e9a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	e013      	b.n	8001e9a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2180      	movs	r1, #128	; 0x80
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f000 f847 	bl	8001f10 <UART_WaitOnFlagUntilTimeout>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e01f      	b.n	8001ecc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	60ba      	str	r2, [r7, #8]
 8001e92:	781a      	ldrb	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1b7      	bne.n	8001e14 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2140      	movs	r1, #64	; 0x40
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 f82e 	bl	8001f10 <UART_WaitOnFlagUntilTimeout>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e006      	b.n	8001ecc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e000      	b.n	8001ecc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001eca:	2302      	movs	r3, #2
  }
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	4313      	orrs	r3, r2
 8001f02:	b2db      	uxtb	r3, r3
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f20:	e02c      	b.n	8001f7c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f28:	d028      	beq.n	8001f7c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d007      	beq.n	8001f40 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f30:	f7fe fdee 	bl	8000b10 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d21d      	bcs.n	8001f7c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f4e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0201 	bic.w	r2, r2, #1
 8001f5e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2220      	movs	r2, #32
 8001f64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e00f      	b.n	8001f9c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	4013      	ands	r3, r2
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	461a      	mov	r2, r3
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d0c3      	beq.n	8001f22 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fa8:	b085      	sub	sp, #20
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001fe6:	f023 030c 	bic.w	r3, r3, #12
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6812      	ldr	r2, [r2, #0]
 8001fee:	68f9      	ldr	r1, [r7, #12]
 8001ff0:	430b      	orrs	r3, r1
 8001ff2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699a      	ldr	r2, [r3, #24]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002012:	f040 818b 	bne.w	800232c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4ac1      	ldr	r2, [pc, #772]	; (8002320 <UART_SetConfig+0x37c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d005      	beq.n	800202c <UART_SetConfig+0x88>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4abf      	ldr	r2, [pc, #764]	; (8002324 <UART_SetConfig+0x380>)
 8002026:	4293      	cmp	r3, r2
 8002028:	f040 80bd 	bne.w	80021a6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800202c:	f7ff fc08 	bl	8001840 <HAL_RCC_GetPCLK2Freq>
 8002030:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	461d      	mov	r5, r3
 8002036:	f04f 0600 	mov.w	r6, #0
 800203a:	46a8      	mov	r8, r5
 800203c:	46b1      	mov	r9, r6
 800203e:	eb18 0308 	adds.w	r3, r8, r8
 8002042:	eb49 0409 	adc.w	r4, r9, r9
 8002046:	4698      	mov	r8, r3
 8002048:	46a1      	mov	r9, r4
 800204a:	eb18 0805 	adds.w	r8, r8, r5
 800204e:	eb49 0906 	adc.w	r9, r9, r6
 8002052:	f04f 0100 	mov.w	r1, #0
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800205e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002062:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002066:	4688      	mov	r8, r1
 8002068:	4691      	mov	r9, r2
 800206a:	eb18 0005 	adds.w	r0, r8, r5
 800206e:	eb49 0106 	adc.w	r1, r9, r6
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	461d      	mov	r5, r3
 8002078:	f04f 0600 	mov.w	r6, #0
 800207c:	196b      	adds	r3, r5, r5
 800207e:	eb46 0406 	adc.w	r4, r6, r6
 8002082:	461a      	mov	r2, r3
 8002084:	4623      	mov	r3, r4
 8002086:	f7fe f8fd 	bl	8000284 <__aeabi_uldivmod>
 800208a:	4603      	mov	r3, r0
 800208c:	460c      	mov	r4, r1
 800208e:	461a      	mov	r2, r3
 8002090:	4ba5      	ldr	r3, [pc, #660]	; (8002328 <UART_SetConfig+0x384>)
 8002092:	fba3 2302 	umull	r2, r3, r3, r2
 8002096:	095b      	lsrs	r3, r3, #5
 8002098:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	461d      	mov	r5, r3
 80020a0:	f04f 0600 	mov.w	r6, #0
 80020a4:	46a9      	mov	r9, r5
 80020a6:	46b2      	mov	sl, r6
 80020a8:	eb19 0309 	adds.w	r3, r9, r9
 80020ac:	eb4a 040a 	adc.w	r4, sl, sl
 80020b0:	4699      	mov	r9, r3
 80020b2:	46a2      	mov	sl, r4
 80020b4:	eb19 0905 	adds.w	r9, r9, r5
 80020b8:	eb4a 0a06 	adc.w	sl, sl, r6
 80020bc:	f04f 0100 	mov.w	r1, #0
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80020d0:	4689      	mov	r9, r1
 80020d2:	4692      	mov	sl, r2
 80020d4:	eb19 0005 	adds.w	r0, r9, r5
 80020d8:	eb4a 0106 	adc.w	r1, sl, r6
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	461d      	mov	r5, r3
 80020e2:	f04f 0600 	mov.w	r6, #0
 80020e6:	196b      	adds	r3, r5, r5
 80020e8:	eb46 0406 	adc.w	r4, r6, r6
 80020ec:	461a      	mov	r2, r3
 80020ee:	4623      	mov	r3, r4
 80020f0:	f7fe f8c8 	bl	8000284 <__aeabi_uldivmod>
 80020f4:	4603      	mov	r3, r0
 80020f6:	460c      	mov	r4, r1
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b8b      	ldr	r3, [pc, #556]	; (8002328 <UART_SetConfig+0x384>)
 80020fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002100:	095b      	lsrs	r3, r3, #5
 8002102:	2164      	movs	r1, #100	; 0x64
 8002104:	fb01 f303 	mul.w	r3, r1, r3
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	3332      	adds	r3, #50	; 0x32
 800210e:	4a86      	ldr	r2, [pc, #536]	; (8002328 <UART_SetConfig+0x384>)
 8002110:	fba2 2303 	umull	r2, r3, r2, r3
 8002114:	095b      	lsrs	r3, r3, #5
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800211c:	4498      	add	r8, r3
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	461d      	mov	r5, r3
 8002122:	f04f 0600 	mov.w	r6, #0
 8002126:	46a9      	mov	r9, r5
 8002128:	46b2      	mov	sl, r6
 800212a:	eb19 0309 	adds.w	r3, r9, r9
 800212e:	eb4a 040a 	adc.w	r4, sl, sl
 8002132:	4699      	mov	r9, r3
 8002134:	46a2      	mov	sl, r4
 8002136:	eb19 0905 	adds.w	r9, r9, r5
 800213a:	eb4a 0a06 	adc.w	sl, sl, r6
 800213e:	f04f 0100 	mov.w	r1, #0
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800214a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800214e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002152:	4689      	mov	r9, r1
 8002154:	4692      	mov	sl, r2
 8002156:	eb19 0005 	adds.w	r0, r9, r5
 800215a:	eb4a 0106 	adc.w	r1, sl, r6
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	461d      	mov	r5, r3
 8002164:	f04f 0600 	mov.w	r6, #0
 8002168:	196b      	adds	r3, r5, r5
 800216a:	eb46 0406 	adc.w	r4, r6, r6
 800216e:	461a      	mov	r2, r3
 8002170:	4623      	mov	r3, r4
 8002172:	f7fe f887 	bl	8000284 <__aeabi_uldivmod>
 8002176:	4603      	mov	r3, r0
 8002178:	460c      	mov	r4, r1
 800217a:	461a      	mov	r2, r3
 800217c:	4b6a      	ldr	r3, [pc, #424]	; (8002328 <UART_SetConfig+0x384>)
 800217e:	fba3 1302 	umull	r1, r3, r3, r2
 8002182:	095b      	lsrs	r3, r3, #5
 8002184:	2164      	movs	r1, #100	; 0x64
 8002186:	fb01 f303 	mul.w	r3, r1, r3
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	3332      	adds	r3, #50	; 0x32
 8002190:	4a65      	ldr	r2, [pc, #404]	; (8002328 <UART_SetConfig+0x384>)
 8002192:	fba2 2303 	umull	r2, r3, r2, r3
 8002196:	095b      	lsrs	r3, r3, #5
 8002198:	f003 0207 	and.w	r2, r3, #7
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4442      	add	r2, r8
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	e26f      	b.n	8002686 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021a6:	f7ff fb37 	bl	8001818 <HAL_RCC_GetPCLK1Freq>
 80021aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	461d      	mov	r5, r3
 80021b0:	f04f 0600 	mov.w	r6, #0
 80021b4:	46a8      	mov	r8, r5
 80021b6:	46b1      	mov	r9, r6
 80021b8:	eb18 0308 	adds.w	r3, r8, r8
 80021bc:	eb49 0409 	adc.w	r4, r9, r9
 80021c0:	4698      	mov	r8, r3
 80021c2:	46a1      	mov	r9, r4
 80021c4:	eb18 0805 	adds.w	r8, r8, r5
 80021c8:	eb49 0906 	adc.w	r9, r9, r6
 80021cc:	f04f 0100 	mov.w	r1, #0
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80021d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80021dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80021e0:	4688      	mov	r8, r1
 80021e2:	4691      	mov	r9, r2
 80021e4:	eb18 0005 	adds.w	r0, r8, r5
 80021e8:	eb49 0106 	adc.w	r1, r9, r6
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	461d      	mov	r5, r3
 80021f2:	f04f 0600 	mov.w	r6, #0
 80021f6:	196b      	adds	r3, r5, r5
 80021f8:	eb46 0406 	adc.w	r4, r6, r6
 80021fc:	461a      	mov	r2, r3
 80021fe:	4623      	mov	r3, r4
 8002200:	f7fe f840 	bl	8000284 <__aeabi_uldivmod>
 8002204:	4603      	mov	r3, r0
 8002206:	460c      	mov	r4, r1
 8002208:	461a      	mov	r2, r3
 800220a:	4b47      	ldr	r3, [pc, #284]	; (8002328 <UART_SetConfig+0x384>)
 800220c:	fba3 2302 	umull	r2, r3, r3, r2
 8002210:	095b      	lsrs	r3, r3, #5
 8002212:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	461d      	mov	r5, r3
 800221a:	f04f 0600 	mov.w	r6, #0
 800221e:	46a9      	mov	r9, r5
 8002220:	46b2      	mov	sl, r6
 8002222:	eb19 0309 	adds.w	r3, r9, r9
 8002226:	eb4a 040a 	adc.w	r4, sl, sl
 800222a:	4699      	mov	r9, r3
 800222c:	46a2      	mov	sl, r4
 800222e:	eb19 0905 	adds.w	r9, r9, r5
 8002232:	eb4a 0a06 	adc.w	sl, sl, r6
 8002236:	f04f 0100 	mov.w	r1, #0
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002242:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002246:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800224a:	4689      	mov	r9, r1
 800224c:	4692      	mov	sl, r2
 800224e:	eb19 0005 	adds.w	r0, r9, r5
 8002252:	eb4a 0106 	adc.w	r1, sl, r6
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	461d      	mov	r5, r3
 800225c:	f04f 0600 	mov.w	r6, #0
 8002260:	196b      	adds	r3, r5, r5
 8002262:	eb46 0406 	adc.w	r4, r6, r6
 8002266:	461a      	mov	r2, r3
 8002268:	4623      	mov	r3, r4
 800226a:	f7fe f80b 	bl	8000284 <__aeabi_uldivmod>
 800226e:	4603      	mov	r3, r0
 8002270:	460c      	mov	r4, r1
 8002272:	461a      	mov	r2, r3
 8002274:	4b2c      	ldr	r3, [pc, #176]	; (8002328 <UART_SetConfig+0x384>)
 8002276:	fba3 1302 	umull	r1, r3, r3, r2
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	2164      	movs	r1, #100	; 0x64
 800227e:	fb01 f303 	mul.w	r3, r1, r3
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	3332      	adds	r3, #50	; 0x32
 8002288:	4a27      	ldr	r2, [pc, #156]	; (8002328 <UART_SetConfig+0x384>)
 800228a:	fba2 2303 	umull	r2, r3, r2, r3
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002296:	4498      	add	r8, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	461d      	mov	r5, r3
 800229c:	f04f 0600 	mov.w	r6, #0
 80022a0:	46a9      	mov	r9, r5
 80022a2:	46b2      	mov	sl, r6
 80022a4:	eb19 0309 	adds.w	r3, r9, r9
 80022a8:	eb4a 040a 	adc.w	r4, sl, sl
 80022ac:	4699      	mov	r9, r3
 80022ae:	46a2      	mov	sl, r4
 80022b0:	eb19 0905 	adds.w	r9, r9, r5
 80022b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80022b8:	f04f 0100 	mov.w	r1, #0
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022cc:	4689      	mov	r9, r1
 80022ce:	4692      	mov	sl, r2
 80022d0:	eb19 0005 	adds.w	r0, r9, r5
 80022d4:	eb4a 0106 	adc.w	r1, sl, r6
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	461d      	mov	r5, r3
 80022de:	f04f 0600 	mov.w	r6, #0
 80022e2:	196b      	adds	r3, r5, r5
 80022e4:	eb46 0406 	adc.w	r4, r6, r6
 80022e8:	461a      	mov	r2, r3
 80022ea:	4623      	mov	r3, r4
 80022ec:	f7fd ffca 	bl	8000284 <__aeabi_uldivmod>
 80022f0:	4603      	mov	r3, r0
 80022f2:	460c      	mov	r4, r1
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <UART_SetConfig+0x384>)
 80022f8:	fba3 1302 	umull	r1, r3, r3, r2
 80022fc:	095b      	lsrs	r3, r3, #5
 80022fe:	2164      	movs	r1, #100	; 0x64
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	3332      	adds	r3, #50	; 0x32
 800230a:	4a07      	ldr	r2, [pc, #28]	; (8002328 <UART_SetConfig+0x384>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	095b      	lsrs	r3, r3, #5
 8002312:	f003 0207 	and.w	r2, r3, #7
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4442      	add	r2, r8
 800231c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800231e:	e1b2      	b.n	8002686 <UART_SetConfig+0x6e2>
 8002320:	40011000 	.word	0x40011000
 8002324:	40011400 	.word	0x40011400
 8002328:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4ad7      	ldr	r2, [pc, #860]	; (8002690 <UART_SetConfig+0x6ec>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d005      	beq.n	8002342 <UART_SetConfig+0x39e>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4ad6      	ldr	r2, [pc, #856]	; (8002694 <UART_SetConfig+0x6f0>)
 800233c:	4293      	cmp	r3, r2
 800233e:	f040 80d1 	bne.w	80024e4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002342:	f7ff fa7d 	bl	8001840 <HAL_RCC_GetPCLK2Freq>
 8002346:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	469a      	mov	sl, r3
 800234c:	f04f 0b00 	mov.w	fp, #0
 8002350:	46d0      	mov	r8, sl
 8002352:	46d9      	mov	r9, fp
 8002354:	eb18 0308 	adds.w	r3, r8, r8
 8002358:	eb49 0409 	adc.w	r4, r9, r9
 800235c:	4698      	mov	r8, r3
 800235e:	46a1      	mov	r9, r4
 8002360:	eb18 080a 	adds.w	r8, r8, sl
 8002364:	eb49 090b 	adc.w	r9, r9, fp
 8002368:	f04f 0100 	mov.w	r1, #0
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002374:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002378:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800237c:	4688      	mov	r8, r1
 800237e:	4691      	mov	r9, r2
 8002380:	eb1a 0508 	adds.w	r5, sl, r8
 8002384:	eb4b 0609 	adc.w	r6, fp, r9
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	4619      	mov	r1, r3
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	f04f 0300 	mov.w	r3, #0
 8002396:	f04f 0400 	mov.w	r4, #0
 800239a:	0094      	lsls	r4, r2, #2
 800239c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80023a0:	008b      	lsls	r3, r1, #2
 80023a2:	461a      	mov	r2, r3
 80023a4:	4623      	mov	r3, r4
 80023a6:	4628      	mov	r0, r5
 80023a8:	4631      	mov	r1, r6
 80023aa:	f7fd ff6b 	bl	8000284 <__aeabi_uldivmod>
 80023ae:	4603      	mov	r3, r0
 80023b0:	460c      	mov	r4, r1
 80023b2:	461a      	mov	r2, r3
 80023b4:	4bb8      	ldr	r3, [pc, #736]	; (8002698 <UART_SetConfig+0x6f4>)
 80023b6:	fba3 2302 	umull	r2, r3, r3, r2
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	469b      	mov	fp, r3
 80023c4:	f04f 0c00 	mov.w	ip, #0
 80023c8:	46d9      	mov	r9, fp
 80023ca:	46e2      	mov	sl, ip
 80023cc:	eb19 0309 	adds.w	r3, r9, r9
 80023d0:	eb4a 040a 	adc.w	r4, sl, sl
 80023d4:	4699      	mov	r9, r3
 80023d6:	46a2      	mov	sl, r4
 80023d8:	eb19 090b 	adds.w	r9, r9, fp
 80023dc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80023e0:	f04f 0100 	mov.w	r1, #0
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023f4:	4689      	mov	r9, r1
 80023f6:	4692      	mov	sl, r2
 80023f8:	eb1b 0509 	adds.w	r5, fp, r9
 80023fc:	eb4c 060a 	adc.w	r6, ip, sl
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	4619      	mov	r1, r3
 8002406:	f04f 0200 	mov.w	r2, #0
 800240a:	f04f 0300 	mov.w	r3, #0
 800240e:	f04f 0400 	mov.w	r4, #0
 8002412:	0094      	lsls	r4, r2, #2
 8002414:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002418:	008b      	lsls	r3, r1, #2
 800241a:	461a      	mov	r2, r3
 800241c:	4623      	mov	r3, r4
 800241e:	4628      	mov	r0, r5
 8002420:	4631      	mov	r1, r6
 8002422:	f7fd ff2f 	bl	8000284 <__aeabi_uldivmod>
 8002426:	4603      	mov	r3, r0
 8002428:	460c      	mov	r4, r1
 800242a:	461a      	mov	r2, r3
 800242c:	4b9a      	ldr	r3, [pc, #616]	; (8002698 <UART_SetConfig+0x6f4>)
 800242e:	fba3 1302 	umull	r1, r3, r3, r2
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	2164      	movs	r1, #100	; 0x64
 8002436:	fb01 f303 	mul.w	r3, r1, r3
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	3332      	adds	r3, #50	; 0x32
 8002440:	4a95      	ldr	r2, [pc, #596]	; (8002698 <UART_SetConfig+0x6f4>)
 8002442:	fba2 2303 	umull	r2, r3, r2, r3
 8002446:	095b      	lsrs	r3, r3, #5
 8002448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800244c:	4498      	add	r8, r3
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	469b      	mov	fp, r3
 8002452:	f04f 0c00 	mov.w	ip, #0
 8002456:	46d9      	mov	r9, fp
 8002458:	46e2      	mov	sl, ip
 800245a:	eb19 0309 	adds.w	r3, r9, r9
 800245e:	eb4a 040a 	adc.w	r4, sl, sl
 8002462:	4699      	mov	r9, r3
 8002464:	46a2      	mov	sl, r4
 8002466:	eb19 090b 	adds.w	r9, r9, fp
 800246a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800246e:	f04f 0100 	mov.w	r1, #0
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800247a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800247e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002482:	4689      	mov	r9, r1
 8002484:	4692      	mov	sl, r2
 8002486:	eb1b 0509 	adds.w	r5, fp, r9
 800248a:	eb4c 060a 	adc.w	r6, ip, sl
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	4619      	mov	r1, r3
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	f04f 0400 	mov.w	r4, #0
 80024a0:	0094      	lsls	r4, r2, #2
 80024a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80024a6:	008b      	lsls	r3, r1, #2
 80024a8:	461a      	mov	r2, r3
 80024aa:	4623      	mov	r3, r4
 80024ac:	4628      	mov	r0, r5
 80024ae:	4631      	mov	r1, r6
 80024b0:	f7fd fee8 	bl	8000284 <__aeabi_uldivmod>
 80024b4:	4603      	mov	r3, r0
 80024b6:	460c      	mov	r4, r1
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b77      	ldr	r3, [pc, #476]	; (8002698 <UART_SetConfig+0x6f4>)
 80024bc:	fba3 1302 	umull	r1, r3, r3, r2
 80024c0:	095b      	lsrs	r3, r3, #5
 80024c2:	2164      	movs	r1, #100	; 0x64
 80024c4:	fb01 f303 	mul.w	r3, r1, r3
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	3332      	adds	r3, #50	; 0x32
 80024ce:	4a72      	ldr	r2, [pc, #456]	; (8002698 <UART_SetConfig+0x6f4>)
 80024d0:	fba2 2303 	umull	r2, r3, r2, r3
 80024d4:	095b      	lsrs	r3, r3, #5
 80024d6:	f003 020f 	and.w	r2, r3, #15
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4442      	add	r2, r8
 80024e0:	609a      	str	r2, [r3, #8]
 80024e2:	e0d0      	b.n	8002686 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80024e4:	f7ff f998 	bl	8001818 <HAL_RCC_GetPCLK1Freq>
 80024e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	469a      	mov	sl, r3
 80024ee:	f04f 0b00 	mov.w	fp, #0
 80024f2:	46d0      	mov	r8, sl
 80024f4:	46d9      	mov	r9, fp
 80024f6:	eb18 0308 	adds.w	r3, r8, r8
 80024fa:	eb49 0409 	adc.w	r4, r9, r9
 80024fe:	4698      	mov	r8, r3
 8002500:	46a1      	mov	r9, r4
 8002502:	eb18 080a 	adds.w	r8, r8, sl
 8002506:	eb49 090b 	adc.w	r9, r9, fp
 800250a:	f04f 0100 	mov.w	r1, #0
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002516:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800251a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800251e:	4688      	mov	r8, r1
 8002520:	4691      	mov	r9, r2
 8002522:	eb1a 0508 	adds.w	r5, sl, r8
 8002526:	eb4b 0609 	adc.w	r6, fp, r9
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	4619      	mov	r1, r3
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	f04f 0400 	mov.w	r4, #0
 800253c:	0094      	lsls	r4, r2, #2
 800253e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002542:	008b      	lsls	r3, r1, #2
 8002544:	461a      	mov	r2, r3
 8002546:	4623      	mov	r3, r4
 8002548:	4628      	mov	r0, r5
 800254a:	4631      	mov	r1, r6
 800254c:	f7fd fe9a 	bl	8000284 <__aeabi_uldivmod>
 8002550:	4603      	mov	r3, r0
 8002552:	460c      	mov	r4, r1
 8002554:	461a      	mov	r2, r3
 8002556:	4b50      	ldr	r3, [pc, #320]	; (8002698 <UART_SetConfig+0x6f4>)
 8002558:	fba3 2302 	umull	r2, r3, r3, r2
 800255c:	095b      	lsrs	r3, r3, #5
 800255e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	469b      	mov	fp, r3
 8002566:	f04f 0c00 	mov.w	ip, #0
 800256a:	46d9      	mov	r9, fp
 800256c:	46e2      	mov	sl, ip
 800256e:	eb19 0309 	adds.w	r3, r9, r9
 8002572:	eb4a 040a 	adc.w	r4, sl, sl
 8002576:	4699      	mov	r9, r3
 8002578:	46a2      	mov	sl, r4
 800257a:	eb19 090b 	adds.w	r9, r9, fp
 800257e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002582:	f04f 0100 	mov.w	r1, #0
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800258e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002592:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002596:	4689      	mov	r9, r1
 8002598:	4692      	mov	sl, r2
 800259a:	eb1b 0509 	adds.w	r5, fp, r9
 800259e:	eb4c 060a 	adc.w	r6, ip, sl
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	4619      	mov	r1, r3
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	f04f 0400 	mov.w	r4, #0
 80025b4:	0094      	lsls	r4, r2, #2
 80025b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80025ba:	008b      	lsls	r3, r1, #2
 80025bc:	461a      	mov	r2, r3
 80025be:	4623      	mov	r3, r4
 80025c0:	4628      	mov	r0, r5
 80025c2:	4631      	mov	r1, r6
 80025c4:	f7fd fe5e 	bl	8000284 <__aeabi_uldivmod>
 80025c8:	4603      	mov	r3, r0
 80025ca:	460c      	mov	r4, r1
 80025cc:	461a      	mov	r2, r3
 80025ce:	4b32      	ldr	r3, [pc, #200]	; (8002698 <UART_SetConfig+0x6f4>)
 80025d0:	fba3 1302 	umull	r1, r3, r3, r2
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	2164      	movs	r1, #100	; 0x64
 80025d8:	fb01 f303 	mul.w	r3, r1, r3
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	3332      	adds	r3, #50	; 0x32
 80025e2:	4a2d      	ldr	r2, [pc, #180]	; (8002698 <UART_SetConfig+0x6f4>)
 80025e4:	fba2 2303 	umull	r2, r3, r2, r3
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025ee:	4498      	add	r8, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	469b      	mov	fp, r3
 80025f4:	f04f 0c00 	mov.w	ip, #0
 80025f8:	46d9      	mov	r9, fp
 80025fa:	46e2      	mov	sl, ip
 80025fc:	eb19 0309 	adds.w	r3, r9, r9
 8002600:	eb4a 040a 	adc.w	r4, sl, sl
 8002604:	4699      	mov	r9, r3
 8002606:	46a2      	mov	sl, r4
 8002608:	eb19 090b 	adds.w	r9, r9, fp
 800260c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002610:	f04f 0100 	mov.w	r1, #0
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800261c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002620:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002624:	4689      	mov	r9, r1
 8002626:	4692      	mov	sl, r2
 8002628:	eb1b 0509 	adds.w	r5, fp, r9
 800262c:	eb4c 060a 	adc.w	r6, ip, sl
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4619      	mov	r1, r3
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	f04f 0300 	mov.w	r3, #0
 800263e:	f04f 0400 	mov.w	r4, #0
 8002642:	0094      	lsls	r4, r2, #2
 8002644:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002648:	008b      	lsls	r3, r1, #2
 800264a:	461a      	mov	r2, r3
 800264c:	4623      	mov	r3, r4
 800264e:	4628      	mov	r0, r5
 8002650:	4631      	mov	r1, r6
 8002652:	f7fd fe17 	bl	8000284 <__aeabi_uldivmod>
 8002656:	4603      	mov	r3, r0
 8002658:	460c      	mov	r4, r1
 800265a:	461a      	mov	r2, r3
 800265c:	4b0e      	ldr	r3, [pc, #56]	; (8002698 <UART_SetConfig+0x6f4>)
 800265e:	fba3 1302 	umull	r1, r3, r3, r2
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	2164      	movs	r1, #100	; 0x64
 8002666:	fb01 f303 	mul.w	r3, r1, r3
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	3332      	adds	r3, #50	; 0x32
 8002670:	4a09      	ldr	r2, [pc, #36]	; (8002698 <UART_SetConfig+0x6f4>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	f003 020f 	and.w	r2, r3, #15
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4442      	add	r2, r8
 8002682:	609a      	str	r2, [r3, #8]
}
 8002684:	e7ff      	b.n	8002686 <UART_SetConfig+0x6e2>
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002690:	40011000 	.word	0x40011000
 8002694:	40011400 	.word	0x40011400
 8002698:	51eb851f 	.word	0x51eb851f

0800269c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f103 0208 	add.w	r2, r3, #8
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f103 0208 	add.w	r2, r3, #8
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f103 0208 	add.w	r2, r3, #8
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026f6:	b480      	push	{r7}
 80026f8:	b085      	sub	sp, #20
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	1c5a      	adds	r2, r3, #1
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	601a      	str	r2, [r3, #0]
}
 8002732:	bf00      	nop
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800273e:	b480      	push	{r7}
 8002740:	b085      	sub	sp, #20
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002754:	d103      	bne.n	800275e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	e00c      	b.n	8002778 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3308      	adds	r3, #8
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	e002      	b.n	800276c <vListInsert+0x2e>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	429a      	cmp	r2, r3
 8002776:	d2f6      	bcs.n	8002766 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	601a      	str	r2, [r3, #0]
}
 80027a4:	bf00      	nop
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6892      	ldr	r2, [r2, #8]
 80027c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6852      	ldr	r2, [r2, #4]
 80027d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d103      	bne.n	80027e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	1e5a      	subs	r2, r3, #1
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3714      	adds	r7, #20
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d109      	bne.n	800282c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281c:	f383 8811 	msr	BASEPRI, r3
 8002820:	f3bf 8f6f 	isb	sy
 8002824:	f3bf 8f4f 	dsb	sy
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	e7fe      	b.n	800282a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800282c:	f001 ffb6 	bl	800479c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002838:	68f9      	ldr	r1, [r7, #12]
 800283a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	441a      	add	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285c:	3b01      	subs	r3, #1
 800285e:	68f9      	ldr	r1, [r7, #12]
 8002860:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002862:	fb01 f303 	mul.w	r3, r1, r3
 8002866:	441a      	add	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	22ff      	movs	r2, #255	; 0xff
 8002870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	22ff      	movs	r2, #255	; 0xff
 8002878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d114      	bne.n	80028ac <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d01a      	beq.n	80028c0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	3310      	adds	r3, #16
 800288e:	4618      	mov	r0, r3
 8002890:	f001 f8d8 	bl	8003a44 <xTaskRemoveFromEventList>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d012      	beq.n	80028c0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800289a:	4b0d      	ldr	r3, [pc, #52]	; (80028d0 <xQueueGenericReset+0xcc>)
 800289c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	f3bf 8f4f 	dsb	sy
 80028a6:	f3bf 8f6f 	isb	sy
 80028aa:	e009      	b.n	80028c0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	3310      	adds	r3, #16
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff fef3 	bl	800269c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	3324      	adds	r3, #36	; 0x24
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff feee 	bl	800269c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80028c0:	f001 ff9a 	bl	80047f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80028c4:	2301      	movs	r3, #1
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	e000ed04 	.word	0xe000ed04

080028d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08a      	sub	sp, #40	; 0x28
 80028d8:	af02      	add	r7, sp, #8
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	4613      	mov	r3, r2
 80028e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d109      	bne.n	80028fc <xQueueGenericCreate+0x28>
 80028e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ec:	f383 8811 	msr	BASEPRI, r3
 80028f0:	f3bf 8f6f 	isb	sy
 80028f4:	f3bf 8f4f 	dsb	sy
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	e7fe      	b.n	80028fa <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d102      	bne.n	8002908 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002902:	2300      	movs	r3, #0
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	e004      	b.n	8002912 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	fb02 f303 	mul.w	r3, r2, r3
 8002910:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3350      	adds	r3, #80	; 0x50
 8002916:	4618      	mov	r0, r3
 8002918:	f002 f8a8 	bl	8004a6c <pvPortMalloc>
 800291c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00d      	beq.n	8002940 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	3350      	adds	r3, #80	; 0x50
 800292c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800292e:	79fa      	ldrb	r2, [r7, #7]
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	4613      	mov	r3, r2
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f805 	bl	800294a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002940:	69bb      	ldr	r3, [r7, #24]
	}
 8002942:	4618      	mov	r0, r3
 8002944:	3720      	adds	r7, #32
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af00      	add	r7, sp, #0
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d103      	bne.n	8002966 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	e002      	b.n	800296c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002978:	2101      	movs	r1, #1
 800297a:	69b8      	ldr	r0, [r7, #24]
 800297c:	f7ff ff42 	bl	8002804 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	78fa      	ldrb	r2, [r7, #3]
 8002984:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8002988:	78fb      	ldrb	r3, [r7, #3]
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	68f9      	ldr	r1, [r7, #12]
 800298e:	2073      	movs	r0, #115	; 0x73
 8002990:	f003 f86c 	bl	8005a6c <SEGGER_SYSVIEW_RecordU32x3>
}
 8002994:	bf00      	nop
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b090      	sub	sp, #64	; 0x40
 80029a0:	af02      	add	r7, sp, #8
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80029aa:	2300      	movs	r3, #0
 80029ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80029b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d109      	bne.n	80029cc <xQueueGenericSend+0x30>
 80029b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029bc:	f383 8811 	msr	BASEPRI, r3
 80029c0:	f3bf 8f6f 	isb	sy
 80029c4:	f3bf 8f4f 	dsb	sy
 80029c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ca:	e7fe      	b.n	80029ca <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d103      	bne.n	80029da <xQueueGenericSend+0x3e>
 80029d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <xQueueGenericSend+0x42>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <xQueueGenericSend+0x44>
 80029de:	2300      	movs	r3, #0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d109      	bne.n	80029f8 <xQueueGenericSend+0x5c>
 80029e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e8:	f383 8811 	msr	BASEPRI, r3
 80029ec:	f3bf 8f6f 	isb	sy
 80029f0:	f3bf 8f4f 	dsb	sy
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
 80029f6:	e7fe      	b.n	80029f6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d103      	bne.n	8002a06 <xQueueGenericSend+0x6a>
 80029fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <xQueueGenericSend+0x6e>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <xQueueGenericSend+0x70>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d109      	bne.n	8002a24 <xQueueGenericSend+0x88>
 8002a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	623b      	str	r3, [r7, #32]
 8002a22:	e7fe      	b.n	8002a22 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a24:	f001 f9aa 	bl	8003d7c <xTaskGetSchedulerState>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d102      	bne.n	8002a34 <xQueueGenericSend+0x98>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <xQueueGenericSend+0x9c>
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <xQueueGenericSend+0x9e>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d109      	bne.n	8002a52 <xQueueGenericSend+0xb6>
 8002a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a42:	f383 8811 	msr	BASEPRI, r3
 8002a46:	f3bf 8f6f 	isb	sy
 8002a4a:	f3bf 8f4f 	dsb	sy
 8002a4e:	61fb      	str	r3, [r7, #28]
 8002a50:	e7fe      	b.n	8002a50 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a52:	f001 fea3 	bl	800479c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d302      	bcc.n	8002a68 <xQueueGenericSend+0xcc>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d136      	bne.n	8002ad6 <xQueueGenericSend+0x13a>
			{
				traceQUEUE_SEND( pxQueue );
 8002a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f003 fd88 	bl	8006580 <SEGGER_SYSVIEW_ShrinkId>
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	4601      	mov	r1, r0
 8002a7c:	205a      	movs	r0, #90	; 0x5a
 8002a7e:	f003 f86b 	bl	8005b58 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a88:	f000 fa66 	bl	8002f58 <prvCopyDataToQueue>
 8002a8c:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d010      	beq.n	8002ab8 <xQueueGenericSend+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a98:	3324      	adds	r3, #36	; 0x24
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 ffd2 	bl	8003a44 <xTaskRemoveFromEventList>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d013      	beq.n	8002ace <xQueueGenericSend+0x132>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002aa6:	4b4d      	ldr	r3, [pc, #308]	; (8002bdc <xQueueGenericSend+0x240>)
 8002aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aac:	601a      	str	r2, [r3, #0]
 8002aae:	f3bf 8f4f 	dsb	sy
 8002ab2:	f3bf 8f6f 	isb	sy
 8002ab6:	e00a      	b.n	8002ace <xQueueGenericSend+0x132>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d007      	beq.n	8002ace <xQueueGenericSend+0x132>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002abe:	4b47      	ldr	r3, [pc, #284]	; (8002bdc <xQueueGenericSend+0x240>)
 8002ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	f3bf 8f4f 	dsb	sy
 8002aca:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002ace:	f001 fe93 	bl	80047f8 <vPortExitCritical>
				return pdPASS;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e07d      	b.n	8002bd2 <xQueueGenericSend+0x236>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d110      	bne.n	8002afe <xQueueGenericSend+0x162>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002adc:	f001 fe8c 	bl	80047f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f003 fd4c 	bl	8006580 <SEGGER_SYSVIEW_ShrinkId>
 8002ae8:	68ba      	ldr	r2, [r7, #8]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	460b      	mov	r3, r1
 8002af2:	4601      	mov	r1, r0
 8002af4:	205a      	movs	r0, #90	; 0x5a
 8002af6:	f003 f82f 	bl	8005b58 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	e069      	b.n	8002bd2 <xQueueGenericSend+0x236>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d106      	bne.n	8002b12 <xQueueGenericSend+0x176>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b04:	f107 0314 	add.w	r3, r7, #20
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f001 f801 	bl	8003b10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b12:	f001 fe71 	bl	80047f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b16:	f000 fd4f 	bl	80035b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b1a:	f001 fe3f 	bl	800479c <vPortEnterCritical>
 8002b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b24:	b25b      	sxtb	r3, r3
 8002b26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b2a:	d103      	bne.n	8002b34 <xQueueGenericSend+0x198>
 8002b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b3a:	b25b      	sxtb	r3, r3
 8002b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b40:	d103      	bne.n	8002b4a <xQueueGenericSend+0x1ae>
 8002b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b4a:	f001 fe55 	bl	80047f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b4e:	1d3a      	adds	r2, r7, #4
 8002b50:	f107 0314 	add.w	r3, r7, #20
 8002b54:	4611      	mov	r1, r2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fff0 	bl	8003b3c <xTaskCheckForTimeOut>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d124      	bne.n	8002bac <xQueueGenericSend+0x210>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b64:	f000 faf0 	bl	8003148 <prvIsQueueFull>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d018      	beq.n	8002ba0 <xQueueGenericSend+0x204>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b70:	3310      	adds	r3, #16
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 ff12 	bl	80039a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b7e:	f000 fa7b 	bl	8003078 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b82:	f000 fd27 	bl	80035d4 <xTaskResumeAll>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f47f af62 	bne.w	8002a52 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002b8e:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <xQueueGenericSend+0x240>)
 8002b90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	f3bf 8f4f 	dsb	sy
 8002b9a:	f3bf 8f6f 	isb	sy
 8002b9e:	e758      	b.n	8002a52 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ba2:	f000 fa69 	bl	8003078 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ba6:	f000 fd15 	bl	80035d4 <xTaskResumeAll>
 8002baa:	e752      	b.n	8002a52 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bae:	f000 fa63 	bl	8003078 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002bb2:	f000 fd0f 	bl	80035d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f003 fce1 	bl	8006580 <SEGGER_SYSVIEW_ShrinkId>
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4601      	mov	r1, r0
 8002bca:	205a      	movs	r0, #90	; 0x5a
 8002bcc:	f002 ffc4 	bl	8005b58 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8002bd0:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3738      	adds	r7, #56	; 0x38
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	e000ed04 	.word	0xe000ed04

08002be0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08e      	sub	sp, #56	; 0x38
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d109      	bne.n	8002c0c <xQueueGenericSendFromISR+0x2c>
 8002bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfc:	f383 8811 	msr	BASEPRI, r3
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
 8002c0a:	e7fe      	b.n	8002c0a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d103      	bne.n	8002c1a <xQueueGenericSendFromISR+0x3a>
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <xQueueGenericSendFromISR+0x3e>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <xQueueGenericSendFromISR+0x40>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d109      	bne.n	8002c38 <xQueueGenericSendFromISR+0x58>
 8002c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c28:	f383 8811 	msr	BASEPRI, r3
 8002c2c:	f3bf 8f6f 	isb	sy
 8002c30:	f3bf 8f4f 	dsb	sy
 8002c34:	623b      	str	r3, [r7, #32]
 8002c36:	e7fe      	b.n	8002c36 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d103      	bne.n	8002c46 <xQueueGenericSendFromISR+0x66>
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <xQueueGenericSendFromISR+0x6a>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <xQueueGenericSendFromISR+0x6c>
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d109      	bne.n	8002c64 <xQueueGenericSendFromISR+0x84>
 8002c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c54:	f383 8811 	msr	BASEPRI, r3
 8002c58:	f3bf 8f6f 	isb	sy
 8002c5c:	f3bf 8f4f 	dsb	sy
 8002c60:	61fb      	str	r3, [r7, #28]
 8002c62:	e7fe      	b.n	8002c62 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c64:	f001 fe7e 	bl	8004964 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c68:	f3ef 8211 	mrs	r2, BASEPRI
 8002c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c70:	f383 8811 	msr	BASEPRI, r3
 8002c74:	f3bf 8f6f 	isb	sy
 8002c78:	f3bf 8f4f 	dsb	sy
 8002c7c:	61ba      	str	r2, [r7, #24]
 8002c7e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c80:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c82:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d302      	bcc.n	8002c96 <xQueueGenericSendFromISR+0xb6>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d136      	bne.n	8002d04 <xQueueGenericSendFromISR+0x124>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f003 fc6c 	bl	8006580 <SEGGER_SYSVIEW_ShrinkId>
 8002ca8:	4601      	mov	r1, r0
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	461a      	mov	r2, r3
 8002cae:	2060      	movs	r0, #96	; 0x60
 8002cb0:	f002 fe82 	bl	80059b8 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	68b9      	ldr	r1, [r7, #8]
 8002cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cba:	f000 f94d 	bl	8002f58 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002cbe:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002cc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cc6:	d112      	bne.n	8002cee <xQueueGenericSendFromISR+0x10e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d016      	beq.n	8002cfe <xQueueGenericSendFromISR+0x11e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd2:	3324      	adds	r3, #36	; 0x24
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f000 feb5 	bl	8003a44 <xTaskRemoveFromEventList>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00e      	beq.n	8002cfe <xQueueGenericSendFromISR+0x11e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00b      	beq.n	8002cfe <xQueueGenericSendFromISR+0x11e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	e007      	b.n	8002cfe <xQueueGenericSendFromISR+0x11e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002cee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	b25a      	sxtb	r2, r3
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002d02:	e00b      	b.n	8002d1c <xQueueGenericSendFromISR+0x13c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d06:	4618      	mov	r0, r3
 8002d08:	f003 fc3a 	bl	8006580 <SEGGER_SYSVIEW_ShrinkId>
 8002d0c:	4601      	mov	r1, r0
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	461a      	mov	r2, r3
 8002d12:	2060      	movs	r0, #96	; 0x60
 8002d14:	f002 fe50 	bl	80059b8 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3738      	adds	r7, #56	; 0x38
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002d30:	b590      	push	{r4, r7, lr}
 8002d32:	b08f      	sub	sp, #60	; 0x3c
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d109      	bne.n	8002d5e <xQueueReceive+0x2e>
	__asm volatile
 8002d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4e:	f383 8811 	msr	BASEPRI, r3
 8002d52:	f3bf 8f6f 	isb	sy
 8002d56:	f3bf 8f4f 	dsb	sy
 8002d5a:	623b      	str	r3, [r7, #32]
 8002d5c:	e7fe      	b.n	8002d5c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d103      	bne.n	8002d6c <xQueueReceive+0x3c>
 8002d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <xQueueReceive+0x40>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <xQueueReceive+0x42>
 8002d70:	2300      	movs	r3, #0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <xQueueReceive+0x5a>
 8002d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7a:	f383 8811 	msr	BASEPRI, r3
 8002d7e:	f3bf 8f6f 	isb	sy
 8002d82:	f3bf 8f4f 	dsb	sy
 8002d86:	61fb      	str	r3, [r7, #28]
 8002d88:	e7fe      	b.n	8002d88 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d8a:	f000 fff7 	bl	8003d7c <xTaskGetSchedulerState>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d102      	bne.n	8002d9a <xQueueReceive+0x6a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <xQueueReceive+0x6e>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <xQueueReceive+0x70>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d109      	bne.n	8002db8 <xQueueReceive+0x88>
 8002da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da8:	f383 8811 	msr	BASEPRI, r3
 8002dac:	f3bf 8f6f 	isb	sy
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	61bb      	str	r3, [r7, #24]
 8002db6:	e7fe      	b.n	8002db6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002db8:	f001 fcf0 	bl	800479c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d031      	beq.n	8002e2c <xQueueReceive+0xfc>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dcc:	f000 f92e 	bl	800302c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8002dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f003 fbd4 	bl	8006580 <SEGGER_SYSVIEW_ShrinkId>
 8002dd8:	4604      	mov	r4, r0
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f003 fbd0 	bl	8006580 <SEGGER_SYSVIEW_ShrinkId>
 8002de0:	4601      	mov	r1, r0
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	2301      	movs	r3, #1
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	4613      	mov	r3, r2
 8002dea:	460a      	mov	r2, r1
 8002dec:	4621      	mov	r1, r4
 8002dee:	205c      	movs	r0, #92	; 0x5c
 8002df0:	f002 feb2 	bl	8005b58 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	1e5a      	subs	r2, r3, #1
 8002df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00f      	beq.n	8002e24 <xQueueReceive+0xf4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e06:	3310      	adds	r3, #16
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f000 fe1b 	bl	8003a44 <xTaskRemoveFromEventList>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d007      	beq.n	8002e24 <xQueueReceive+0xf4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e14:	4b4f      	ldr	r3, [pc, #316]	; (8002f54 <xQueueReceive+0x224>)
 8002e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e24:	f001 fce8 	bl	80047f8 <vPortExitCritical>
				return pdPASS;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e08e      	b.n	8002f4a <xQueueReceive+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d115      	bne.n	8002e5e <xQueueReceive+0x12e>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e32:	f001 fce1 	bl	80047f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f003 fba1 	bl	8006580 <SEGGER_SYSVIEW_ShrinkId>
 8002e3e:	4604      	mov	r4, r0
 8002e40:	2000      	movs	r0, #0
 8002e42:	f003 fb9d 	bl	8006580 <SEGGER_SYSVIEW_ShrinkId>
 8002e46:	4601      	mov	r1, r0
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	460a      	mov	r2, r1
 8002e52:	4621      	mov	r1, r4
 8002e54:	205c      	movs	r0, #92	; 0x5c
 8002e56:	f002 fe7f 	bl	8005b58 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e075      	b.n	8002f4a <xQueueReceive+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d106      	bne.n	8002e72 <xQueueReceive+0x142>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e64:	f107 0310 	add.w	r3, r7, #16
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 fe51 	bl	8003b10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e72:	f001 fcc1 	bl	80047f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e76:	f000 fb9f 	bl	80035b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e7a:	f001 fc8f 	bl	800479c <vPortEnterCritical>
 8002e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e84:	b25b      	sxtb	r3, r3
 8002e86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e8a:	d103      	bne.n	8002e94 <xQueueReceive+0x164>
 8002e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e9a:	b25b      	sxtb	r3, r3
 8002e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ea0:	d103      	bne.n	8002eaa <xQueueReceive+0x17a>
 8002ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002eaa:	f001 fca5 	bl	80047f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002eae:	1d3a      	adds	r2, r7, #4
 8002eb0:	f107 0310 	add.w	r3, r7, #16
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 fe40 	bl	8003b3c <xTaskCheckForTimeOut>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d124      	bne.n	8002f0c <xQueueReceive+0x1dc>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ec4:	f000 f92a 	bl	800311c <prvIsQueueEmpty>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d018      	beq.n	8002f00 <xQueueReceive+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed0:	3324      	adds	r3, #36	; 0x24
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 fd62 	bl	80039a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002edc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ede:	f000 f8cb 	bl	8003078 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ee2:	f000 fb77 	bl	80035d4 <xTaskResumeAll>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f47f af65 	bne.w	8002db8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002eee:	4b19      	ldr	r3, [pc, #100]	; (8002f54 <xQueueReceive+0x224>)
 8002ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	f3bf 8f6f 	isb	sy
 8002efe:	e75b      	b.n	8002db8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f02:	f000 f8b9 	bl	8003078 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f06:	f000 fb65 	bl	80035d4 <xTaskResumeAll>
 8002f0a:	e755      	b.n	8002db8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f0e:	f000 f8b3 	bl	8003078 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f12:	f000 fb5f 	bl	80035d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f18:	f000 f900 	bl	800311c <prvIsQueueEmpty>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f43f af4a 	beq.w	8002db8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f26:	4618      	mov	r0, r3
 8002f28:	f003 fb2a 	bl	8006580 <SEGGER_SYSVIEW_ShrinkId>
 8002f2c:	4604      	mov	r4, r0
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f003 fb26 	bl	8006580 <SEGGER_SYSVIEW_ShrinkId>
 8002f34:	4601      	mov	r1, r0
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	2301      	movs	r3, #1
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	460a      	mov	r2, r1
 8002f40:	4621      	mov	r1, r4
 8002f42:	205c      	movs	r0, #92	; 0x5c
 8002f44:	f002 fe08 	bl	8005b58 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8002f48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3734      	adds	r7, #52	; 0x34
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd90      	pop	{r4, r7, pc}
 8002f52:	bf00      	nop
 8002f54:	e000ed04 	.word	0xe000ed04

08002f58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f64:	2300      	movs	r3, #0
 8002f66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10d      	bne.n	8002f92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d14d      	bne.n	800301a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 ff18 	bl	8003db8 <xTaskPriorityDisinherit>
 8002f88:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	e043      	b.n	800301a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d119      	bne.n	8002fcc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6858      	ldr	r0, [r3, #4]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68b9      	ldr	r1, [r7, #8]
 8002fa4:	f003 fc67 	bl	8006876 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	441a      	add	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d32b      	bcc.n	800301a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	e026      	b.n	800301a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	68d8      	ldr	r0, [r3, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	68b9      	ldr	r1, [r7, #8]
 8002fd8:	f003 fc4d 	bl	8006876 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	425b      	negs	r3, r3
 8002fe6:	441a      	add	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d207      	bcs.n	8003008 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	425b      	negs	r3, r3
 8003002:	441a      	add	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d105      	bne.n	800301a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	3b01      	subs	r3, #1
 8003018:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1c5a      	adds	r2, r3, #1
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003022:	697b      	ldr	r3, [r7, #20]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	2b00      	cmp	r3, #0
 800303c:	d018      	beq.n	8003070 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	441a      	add	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	429a      	cmp	r2, r3
 8003056:	d303      	bcc.n	8003060 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68d9      	ldr	r1, [r3, #12]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003068:	461a      	mov	r2, r3
 800306a:	6838      	ldr	r0, [r7, #0]
 800306c:	f003 fc03 	bl	8006876 <memcpy>
	}
}
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003080:	f001 fb8c 	bl	800479c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800308a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800308c:	e011      	b.n	80030b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003092:	2b00      	cmp	r3, #0
 8003094:	d012      	beq.n	80030bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3324      	adds	r3, #36	; 0x24
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fcd2 	bl	8003a44 <xTaskRemoveFromEventList>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80030a6:	f000 fda9 	bl	8003bfc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80030aa:	7bfb      	ldrb	r3, [r7, #15]
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	dce9      	bgt.n	800308e <prvUnlockQueue+0x16>
 80030ba:	e000      	b.n	80030be <prvUnlockQueue+0x46>
					break;
 80030bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	22ff      	movs	r2, #255	; 0xff
 80030c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80030c6:	f001 fb97 	bl	80047f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80030ca:	f001 fb67 	bl	800479c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030d6:	e011      	b.n	80030fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d012      	beq.n	8003106 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3310      	adds	r3, #16
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 fcad 	bl	8003a44 <xTaskRemoveFromEventList>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80030f0:	f000 fd84 	bl	8003bfc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80030f4:	7bbb      	ldrb	r3, [r7, #14]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003100:	2b00      	cmp	r3, #0
 8003102:	dce9      	bgt.n	80030d8 <prvUnlockQueue+0x60>
 8003104:	e000      	b.n	8003108 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003106:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	22ff      	movs	r2, #255	; 0xff
 800310c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003110:	f001 fb72 	bl	80047f8 <vPortExitCritical>
}
 8003114:	bf00      	nop
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003124:	f001 fb3a 	bl	800479c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	2b00      	cmp	r3, #0
 800312e:	d102      	bne.n	8003136 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003130:	2301      	movs	r3, #1
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	e001      	b.n	800313a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800313a:	f001 fb5d 	bl	80047f8 <vPortExitCritical>

	return xReturn;
 800313e:	68fb      	ldr	r3, [r7, #12]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003150:	f001 fb24 	bl	800479c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315c:	429a      	cmp	r2, r3
 800315e:	d102      	bne.n	8003166 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003160:	2301      	movs	r3, #1
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	e001      	b.n	800316a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800316a:	f001 fb45 	bl	80047f8 <vPortExitCritical>

	return xReturn;
 800316e:	68fb      	ldr	r3, [r7, #12]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003182:	2300      	movs	r3, #0
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	e01e      	b.n	80031c6 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003188:	4a12      	ldr	r2, [pc, #72]	; (80031d4 <vQueueAddToRegistry+0x5c>)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d115      	bne.n	80031c0 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003194:	490f      	ldr	r1, [pc, #60]	; (80031d4 <vQueueAddToRegistry+0x5c>)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800319e:	4a0d      	ldr	r2, [pc, #52]	; (80031d4 <vQueueAddToRegistry+0x5c>)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	4413      	add	r3, r2
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f003 f9e7 	bl	8006580 <SEGGER_SYSVIEW_ShrinkId>
 80031b2:	4601      	mov	r1, r0
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	2071      	movs	r0, #113	; 0x71
 80031ba:	f002 fbfd 	bl	80059b8 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 80031be:	e005      	b.n	80031cc <vQueueAddToRegistry+0x54>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	3301      	adds	r3, #1
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2b07      	cmp	r3, #7
 80031ca:	d9dd      	bls.n	8003188 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80031cc:	bf00      	nop
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	200137ec 	.word	0x200137ec

080031d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80031e8:	f001 fad8 	bl	800479c <vPortEnterCritical>
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031f2:	b25b      	sxtb	r3, r3
 80031f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031f8:	d103      	bne.n	8003202 <vQueueWaitForMessageRestricted+0x2a>
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003208:	b25b      	sxtb	r3, r3
 800320a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800320e:	d103      	bne.n	8003218 <vQueueWaitForMessageRestricted+0x40>
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003218:	f001 faee 	bl	80047f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003220:	2b00      	cmp	r3, #0
 8003222:	d106      	bne.n	8003232 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	3324      	adds	r3, #36	; 0x24
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	68b9      	ldr	r1, [r7, #8]
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fbdb 	bl	80039e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003232:	6978      	ldr	r0, [r7, #20]
 8003234:	f7ff ff20 	bl	8003078 <prvUnlockQueue>
	}
 8003238:	bf00      	nop
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08c      	sub	sp, #48	; 0x30
 8003244:	af04      	add	r7, sp, #16
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	603b      	str	r3, [r7, #0]
 800324c:	4613      	mov	r3, r2
 800324e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003250:	88fb      	ldrh	r3, [r7, #6]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4618      	mov	r0, r3
 8003256:	f001 fc09 	bl	8004a6c <pvPortMalloc>
 800325a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00e      	beq.n	8003280 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003262:	2058      	movs	r0, #88	; 0x58
 8003264:	f001 fc02 	bl	8004a6c <pvPortMalloc>
 8003268:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	631a      	str	r2, [r3, #48]	; 0x30
 8003276:	e005      	b.n	8003284 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003278:	6978      	ldr	r0, [r7, #20]
 800327a:	f001 fcb9 	bl	8004bf0 <vPortFree>
 800327e:	e001      	b.n	8003284 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003280:	2300      	movs	r3, #0
 8003282:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d013      	beq.n	80032b2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800328a:	88fa      	ldrh	r2, [r7, #6]
 800328c:	2300      	movs	r3, #0
 800328e:	9303      	str	r3, [sp, #12]
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	9302      	str	r3, [sp, #8]
 8003294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003296:	9301      	str	r3, [sp, #4]
 8003298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	68b9      	ldr	r1, [r7, #8]
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f80e 	bl	80032c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032a6:	69f8      	ldr	r0, [r7, #28]
 80032a8:	f000 f89e 	bl	80033e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032ac:	2301      	movs	r3, #1
 80032ae:	61bb      	str	r3, [r7, #24]
 80032b0:	e002      	b.n	80032b8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80032b8:	69bb      	ldr	r3, [r7, #24]
	}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3720      	adds	r7, #32
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b088      	sub	sp, #32
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	60f8      	str	r0, [r7, #12]
 80032ca:	60b9      	str	r1, [r7, #8]
 80032cc:	607a      	str	r2, [r7, #4]
 80032ce:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d109      	bne.n	80032ea <prvInitialiseNewTask+0x28>
 80032d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032da:	f383 8811 	msr	BASEPRI, r3
 80032de:	f3bf 8f6f 	isb	sy
 80032e2:	f3bf 8f4f 	dsb	sy
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	e7fe      	b.n	80032e8 <prvInitialiseNewTask+0x26>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80032ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	461a      	mov	r2, r3
 80032f4:	21a5      	movs	r1, #165	; 0xa5
 80032f6:	f003 fac9 	bl	800688c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80032fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003304:	3b01      	subs	r3, #1
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	f023 0307 	bic.w	r3, r3, #7
 8003312:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	2b00      	cmp	r3, #0
 800331c:	d009      	beq.n	8003332 <prvInitialiseNewTask+0x70>
 800331e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	e7fe      	b.n	8003330 <prvInitialiseNewTask+0x6e>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003332:	2300      	movs	r3, #0
 8003334:	61fb      	str	r3, [r7, #28]
 8003336:	e012      	b.n	800335e <prvInitialiseNewTask+0x9c>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	4413      	add	r3, r2
 800333e:	7819      	ldrb	r1, [r3, #0]
 8003340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	4413      	add	r3, r2
 8003346:	3334      	adds	r3, #52	; 0x34
 8003348:	460a      	mov	r2, r1
 800334a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	4413      	add	r3, r2
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d006      	beq.n	8003366 <prvInitialiseNewTask+0xa4>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	3301      	adds	r3, #1
 800335c:	61fb      	str	r3, [r7, #28]
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	2b09      	cmp	r3, #9
 8003362:	d9e9      	bls.n	8003338 <prvInitialiseNewTask+0x76>
 8003364:	e000      	b.n	8003368 <prvInitialiseNewTask+0xa6>
		{
			break;
 8003366:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003372:	2b04      	cmp	r3, #4
 8003374:	d901      	bls.n	800337a <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003376:	2304      	movs	r3, #4
 8003378:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800337a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800337e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003384:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8003386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003388:	2200      	movs	r2, #0
 800338a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800338c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338e:	3304      	adds	r3, #4
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff f9a3 	bl	80026dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003398:	3318      	adds	r3, #24
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff f99e 	bl	80026dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a8:	f1c3 0205 	rsb	r2, r3, #5
 80033ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80033b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033b4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80033b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b8:	2200      	movs	r2, #0
 80033ba:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80033bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	68f9      	ldr	r1, [r7, #12]
 80033c8:	69b8      	ldr	r0, [r7, #24]
 80033ca:	f001 f8c1 	bl	8004550 <pxPortInitialiseStack>
 80033ce:	4602      	mov	r2, r0
 80033d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80033d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80033da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033e0:	bf00      	nop
 80033e2:	3720      	adds	r7, #32
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80033e8:	b5b0      	push	{r4, r5, r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80033f0:	f001 f9d4 	bl	800479c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80033f4:	4b3b      	ldr	r3, [pc, #236]	; (80034e4 <prvAddNewTaskToReadyList+0xfc>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3301      	adds	r3, #1
 80033fa:	4a3a      	ldr	r2, [pc, #232]	; (80034e4 <prvAddNewTaskToReadyList+0xfc>)
 80033fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80033fe:	4b3a      	ldr	r3, [pc, #232]	; (80034e8 <prvAddNewTaskToReadyList+0x100>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d109      	bne.n	800341a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003406:	4a38      	ldr	r2, [pc, #224]	; (80034e8 <prvAddNewTaskToReadyList+0x100>)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800340c:	4b35      	ldr	r3, [pc, #212]	; (80034e4 <prvAddNewTaskToReadyList+0xfc>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d110      	bne.n	8003436 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003414:	f000 fc16 	bl	8003c44 <prvInitialiseTaskLists>
 8003418:	e00d      	b.n	8003436 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800341a:	4b34      	ldr	r3, [pc, #208]	; (80034ec <prvAddNewTaskToReadyList+0x104>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d109      	bne.n	8003436 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003422:	4b31      	ldr	r3, [pc, #196]	; (80034e8 <prvAddNewTaskToReadyList+0x100>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342c:	429a      	cmp	r2, r3
 800342e:	d802      	bhi.n	8003436 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003430:	4a2d      	ldr	r2, [pc, #180]	; (80034e8 <prvAddNewTaskToReadyList+0x100>)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003436:	4b2e      	ldr	r3, [pc, #184]	; (80034f0 <prvAddNewTaskToReadyList+0x108>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	3301      	adds	r3, #1
 800343c:	4a2c      	ldr	r2, [pc, #176]	; (80034f0 <prvAddNewTaskToReadyList+0x108>)
 800343e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003440:	4b2b      	ldr	r3, [pc, #172]	; (80034f0 <prvAddNewTaskToReadyList+0x108>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d016      	beq.n	800347c <prvAddNewTaskToReadyList+0x94>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4618      	mov	r0, r3
 8003452:	f002 ff6f 	bl	8006334 <SEGGER_SYSVIEW_OnTaskCreate>
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	461d      	mov	r5, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	461c      	mov	r4, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	1ae3      	subs	r3, r4, r3
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	462b      	mov	r3, r5
 8003478:	f001 fd76 	bl	8004f68 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4618      	mov	r0, r3
 8003480:	f002 ffdc 	bl	800643c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	2201      	movs	r2, #1
 800348a:	409a      	lsls	r2, r3
 800348c:	4b19      	ldr	r3, [pc, #100]	; (80034f4 <prvAddNewTaskToReadyList+0x10c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4313      	orrs	r3, r2
 8003492:	4a18      	ldr	r2, [pc, #96]	; (80034f4 <prvAddNewTaskToReadyList+0x10c>)
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4a15      	ldr	r2, [pc, #84]	; (80034f8 <prvAddNewTaskToReadyList+0x110>)
 80034a4:	441a      	add	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	3304      	adds	r3, #4
 80034aa:	4619      	mov	r1, r3
 80034ac:	4610      	mov	r0, r2
 80034ae:	f7ff f922 	bl	80026f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80034b2:	f001 f9a1 	bl	80047f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80034b6:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <prvAddNewTaskToReadyList+0x104>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00e      	beq.n	80034dc <prvAddNewTaskToReadyList+0xf4>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80034be:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <prvAddNewTaskToReadyList+0x100>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d207      	bcs.n	80034dc <prvAddNewTaskToReadyList+0xf4>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <prvAddNewTaskToReadyList+0x114>)
 80034ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034dc:	bf00      	nop
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bdb0      	pop	{r4, r5, r7, pc}
 80034e4:	20000110 	.word	0x20000110
 80034e8:	20000038 	.word	0x20000038
 80034ec:	2000011c 	.word	0x2000011c
 80034f0:	2000012c 	.word	0x2000012c
 80034f4:	20000118 	.word	0x20000118
 80034f8:	2000003c 	.word	0x2000003c
 80034fc:	e000ed04 	.word	0xe000ed04

08003500 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003506:	4b25      	ldr	r3, [pc, #148]	; (800359c <vTaskStartScheduler+0x9c>)
 8003508:	9301      	str	r3, [sp, #4]
 800350a:	2300      	movs	r3, #0
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	2300      	movs	r3, #0
 8003510:	2282      	movs	r2, #130	; 0x82
 8003512:	4923      	ldr	r1, [pc, #140]	; (80035a0 <vTaskStartScheduler+0xa0>)
 8003514:	4823      	ldr	r0, [pc, #140]	; (80035a4 <vTaskStartScheduler+0xa4>)
 8003516:	f7ff fe93 	bl	8003240 <xTaskCreate>
 800351a:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d102      	bne.n	8003528 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8003522:	f000 fd49 	bl	8003fb8 <xTimerCreateTimerTask>
 8003526:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d123      	bne.n	8003576 <vTaskStartScheduler+0x76>
 800352e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003532:	f383 8811 	msr	BASEPRI, r3
 8003536:	f3bf 8f6f 	isb	sy
 800353a:	f3bf 8f4f 	dsb	sy
 800353e:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003540:	4b19      	ldr	r3, [pc, #100]	; (80035a8 <vTaskStartScheduler+0xa8>)
 8003542:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003546:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003548:	4b18      	ldr	r3, [pc, #96]	; (80035ac <vTaskStartScheduler+0xac>)
 800354a:	2201      	movs	r2, #1
 800354c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800354e:	4b18      	ldr	r3, [pc, #96]	; (80035b0 <vTaskStartScheduler+0xb0>)
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		traceTASK_SWITCHED_IN();
 8003554:	4b17      	ldr	r3, [pc, #92]	; (80035b4 <vTaskStartScheduler+0xb4>)
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	4b10      	ldr	r3, [pc, #64]	; (800359c <vTaskStartScheduler+0x9c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d102      	bne.n	8003566 <vTaskStartScheduler+0x66>
 8003560:	f002 fecc 	bl	80062fc <SEGGER_SYSVIEW_OnIdle>
 8003564:	e004      	b.n	8003570 <vTaskStartScheduler+0x70>
 8003566:	4b13      	ldr	r3, [pc, #76]	; (80035b4 <vTaskStartScheduler+0xb4>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f002 ff24 	bl	80063b8 <SEGGER_SYSVIEW_OnTaskStartExec>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003570:	f001 f876 	bl	8004660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003574:	e00d      	b.n	8003592 <vTaskStartScheduler+0x92>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800357c:	d109      	bne.n	8003592 <vTaskStartScheduler+0x92>
 800357e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003582:	f383 8811 	msr	BASEPRI, r3
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	607b      	str	r3, [r7, #4]
 8003590:	e7fe      	b.n	8003590 <vTaskStartScheduler+0x90>
}
 8003592:	bf00      	nop
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20000134 	.word	0x20000134
 80035a0:	08006918 	.word	0x08006918
 80035a4:	08003c15 	.word	0x08003c15
 80035a8:	20000130 	.word	0x20000130
 80035ac:	2000011c 	.word	0x2000011c
 80035b0:	20000114 	.word	0x20000114
 80035b4:	20000038 	.word	0x20000038

080035b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80035bc:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <vTaskSuspendAll+0x18>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	3301      	adds	r3, #1
 80035c2:	4a03      	ldr	r2, [pc, #12]	; (80035d0 <vTaskSuspendAll+0x18>)
 80035c4:	6013      	str	r3, [r2, #0]
}
 80035c6:	bf00      	nop
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	20000138 	.word	0x20000138

080035d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80035e2:	4b43      	ldr	r3, [pc, #268]	; (80036f0 <xTaskResumeAll+0x11c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d109      	bne.n	80035fe <xTaskResumeAll+0x2a>
 80035ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ee:	f383 8811 	msr	BASEPRI, r3
 80035f2:	f3bf 8f6f 	isb	sy
 80035f6:	f3bf 8f4f 	dsb	sy
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	e7fe      	b.n	80035fc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80035fe:	f001 f8cd 	bl	800479c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003602:	4b3b      	ldr	r3, [pc, #236]	; (80036f0 <xTaskResumeAll+0x11c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	3b01      	subs	r3, #1
 8003608:	4a39      	ldr	r2, [pc, #228]	; (80036f0 <xTaskResumeAll+0x11c>)
 800360a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800360c:	4b38      	ldr	r3, [pc, #224]	; (80036f0 <xTaskResumeAll+0x11c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d165      	bne.n	80036e0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003614:	4b37      	ldr	r3, [pc, #220]	; (80036f4 <xTaskResumeAll+0x120>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d061      	beq.n	80036e0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800361c:	e032      	b.n	8003684 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800361e:	4b36      	ldr	r3, [pc, #216]	; (80036f8 <xTaskResumeAll+0x124>)
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	3318      	adds	r3, #24
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff f8c0 	bl	80027b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	3304      	adds	r3, #4
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff f8bb 	bl	80027b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4618      	mov	r0, r3
 800363e:	f002 fefd 	bl	800643c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003646:	2201      	movs	r2, #1
 8003648:	409a      	lsls	r2, r3
 800364a:	4b2c      	ldr	r3, [pc, #176]	; (80036fc <xTaskResumeAll+0x128>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4313      	orrs	r3, r2
 8003650:	4a2a      	ldr	r2, [pc, #168]	; (80036fc <xTaskResumeAll+0x128>)
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4a27      	ldr	r2, [pc, #156]	; (8003700 <xTaskResumeAll+0x12c>)
 8003662:	441a      	add	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	3304      	adds	r3, #4
 8003668:	4619      	mov	r1, r3
 800366a:	4610      	mov	r0, r2
 800366c:	f7ff f843 	bl	80026f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003674:	4b23      	ldr	r3, [pc, #140]	; (8003704 <xTaskResumeAll+0x130>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	429a      	cmp	r2, r3
 800367c:	d302      	bcc.n	8003684 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800367e:	4b22      	ldr	r3, [pc, #136]	; (8003708 <xTaskResumeAll+0x134>)
 8003680:	2201      	movs	r2, #1
 8003682:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003684:	4b1c      	ldr	r3, [pc, #112]	; (80036f8 <xTaskResumeAll+0x124>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1c8      	bne.n	800361e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003692:	f000 fb53 	bl	8003d3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003696:	4b1d      	ldr	r3, [pc, #116]	; (800370c <xTaskResumeAll+0x138>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d010      	beq.n	80036c4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80036a2:	f000 f859 	bl	8003758 <xTaskIncrementTick>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80036ac:	4b16      	ldr	r3, [pc, #88]	; (8003708 <xTaskResumeAll+0x134>)
 80036ae:	2201      	movs	r2, #1
 80036b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3b01      	subs	r3, #1
 80036b6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f1      	bne.n	80036a2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80036be:	4b13      	ldr	r3, [pc, #76]	; (800370c <xTaskResumeAll+0x138>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80036c4:	4b10      	ldr	r3, [pc, #64]	; (8003708 <xTaskResumeAll+0x134>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d009      	beq.n	80036e0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80036cc:	2301      	movs	r3, #1
 80036ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80036d0:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <xTaskResumeAll+0x13c>)
 80036d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	f3bf 8f4f 	dsb	sy
 80036dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80036e0:	f001 f88a 	bl	80047f8 <vPortExitCritical>

	return xAlreadyYielded;
 80036e4:	68bb      	ldr	r3, [r7, #8]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20000138 	.word	0x20000138
 80036f4:	20000110 	.word	0x20000110
 80036f8:	200000d0 	.word	0x200000d0
 80036fc:	20000118 	.word	0x20000118
 8003700:	2000003c 	.word	0x2000003c
 8003704:	20000038 	.word	0x20000038
 8003708:	20000124 	.word	0x20000124
 800370c:	20000120 	.word	0x20000120
 8003710:	e000ed04 	.word	0xe000ed04

08003714 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800371a:	4b05      	ldr	r3, [pc, #20]	; (8003730 <xTaskGetTickCount+0x1c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003720:	687b      	ldr	r3, [r7, #4]
}
 8003722:	4618      	mov	r0, r3
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	20000114 	.word	0x20000114

08003734 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800373a:	f001 f913 	bl	8004964 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800373e:	2300      	movs	r3, #0
 8003740:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003742:	4b04      	ldr	r3, [pc, #16]	; (8003754 <xTaskGetTickCountFromISR+0x20>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003748:	683b      	ldr	r3, [r7, #0]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	20000114 	.word	0x20000114

08003758 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800375e:	2300      	movs	r3, #0
 8003760:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003762:	4b50      	ldr	r3, [pc, #320]	; (80038a4 <xTaskIncrementTick+0x14c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	f040 808b 	bne.w	8003882 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800376c:	4b4e      	ldr	r3, [pc, #312]	; (80038a8 <xTaskIncrementTick+0x150>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3301      	adds	r3, #1
 8003772:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003774:	4a4c      	ldr	r2, [pc, #304]	; (80038a8 <xTaskIncrementTick+0x150>)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d11f      	bne.n	80037c0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003780:	4b4a      	ldr	r3, [pc, #296]	; (80038ac <xTaskIncrementTick+0x154>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d009      	beq.n	800379e <xTaskIncrementTick+0x46>
 800378a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378e:	f383 8811 	msr	BASEPRI, r3
 8003792:	f3bf 8f6f 	isb	sy
 8003796:	f3bf 8f4f 	dsb	sy
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	e7fe      	b.n	800379c <xTaskIncrementTick+0x44>
 800379e:	4b43      	ldr	r3, [pc, #268]	; (80038ac <xTaskIncrementTick+0x154>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	4b42      	ldr	r3, [pc, #264]	; (80038b0 <xTaskIncrementTick+0x158>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a40      	ldr	r2, [pc, #256]	; (80038ac <xTaskIncrementTick+0x154>)
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	4a40      	ldr	r2, [pc, #256]	; (80038b0 <xTaskIncrementTick+0x158>)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	4b40      	ldr	r3, [pc, #256]	; (80038b4 <xTaskIncrementTick+0x15c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	3301      	adds	r3, #1
 80037b8:	4a3e      	ldr	r2, [pc, #248]	; (80038b4 <xTaskIncrementTick+0x15c>)
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	f000 fabe 	bl	8003d3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80037c0:	4b3d      	ldr	r3, [pc, #244]	; (80038b8 <xTaskIncrementTick+0x160>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d34c      	bcc.n	8003864 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037ca:	4b38      	ldr	r3, [pc, #224]	; (80038ac <xTaskIncrementTick+0x154>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d104      	bne.n	80037de <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037d4:	4b38      	ldr	r3, [pc, #224]	; (80038b8 <xTaskIncrementTick+0x160>)
 80037d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037da:	601a      	str	r2, [r3, #0]
					break;
 80037dc:	e042      	b.n	8003864 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037de:	4b33      	ldr	r3, [pc, #204]	; (80038ac <xTaskIncrementTick+0x154>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d203      	bcs.n	80037fe <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80037f6:	4a30      	ldr	r2, [pc, #192]	; (80038b8 <xTaskIncrementTick+0x160>)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80037fc:	e032      	b.n	8003864 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	3304      	adds	r3, #4
 8003802:	4618      	mov	r0, r3
 8003804:	f7fe ffd4 	bl	80027b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380c:	2b00      	cmp	r3, #0
 800380e:	d004      	beq.n	800381a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	3318      	adds	r3, #24
 8003814:	4618      	mov	r0, r3
 8003816:	f7fe ffcb 	bl	80027b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	4618      	mov	r0, r3
 800381e:	f002 fe0d 	bl	800643c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	2201      	movs	r2, #1
 8003828:	409a      	lsls	r2, r3
 800382a:	4b24      	ldr	r3, [pc, #144]	; (80038bc <xTaskIncrementTick+0x164>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4313      	orrs	r3, r2
 8003830:	4a22      	ldr	r2, [pc, #136]	; (80038bc <xTaskIncrementTick+0x164>)
 8003832:	6013      	str	r3, [r2, #0]
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003838:	4613      	mov	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4a1f      	ldr	r2, [pc, #124]	; (80038c0 <xTaskIncrementTick+0x168>)
 8003842:	441a      	add	r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	3304      	adds	r3, #4
 8003848:	4619      	mov	r1, r3
 800384a:	4610      	mov	r0, r2
 800384c:	f7fe ff53 	bl	80026f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003854:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <xTaskIncrementTick+0x16c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800385a:	429a      	cmp	r2, r3
 800385c:	d3b5      	bcc.n	80037ca <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800385e:	2301      	movs	r3, #1
 8003860:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003862:	e7b2      	b.n	80037ca <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003864:	4b17      	ldr	r3, [pc, #92]	; (80038c4 <xTaskIncrementTick+0x16c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386a:	4915      	ldr	r1, [pc, #84]	; (80038c0 <xTaskIncrementTick+0x168>)
 800386c:	4613      	mov	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d907      	bls.n	800388c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800387c:	2301      	movs	r3, #1
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	e004      	b.n	800388c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003882:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <xTaskIncrementTick+0x170>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3301      	adds	r3, #1
 8003888:	4a0f      	ldr	r2, [pc, #60]	; (80038c8 <xTaskIncrementTick+0x170>)
 800388a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800388c:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <xTaskIncrementTick+0x174>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8003894:	2301      	movs	r3, #1
 8003896:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003898:	697b      	ldr	r3, [r7, #20]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3718      	adds	r7, #24
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	20000138 	.word	0x20000138
 80038a8:	20000114 	.word	0x20000114
 80038ac:	200000c8 	.word	0x200000c8
 80038b0:	200000cc 	.word	0x200000cc
 80038b4:	20000128 	.word	0x20000128
 80038b8:	20000130 	.word	0x20000130
 80038bc:	20000118 	.word	0x20000118
 80038c0:	2000003c 	.word	0x2000003c
 80038c4:	20000038 	.word	0x20000038
 80038c8:	20000120 	.word	0x20000120
 80038cc:	20000124 	.word	0x20000124

080038d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038d6:	4b2c      	ldr	r3, [pc, #176]	; (8003988 <vTaskSwitchContext+0xb8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80038de:	4b2b      	ldr	r3, [pc, #172]	; (800398c <vTaskSwitchContext+0xbc>)
 80038e0:	2201      	movs	r2, #1
 80038e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80038e4:	e04c      	b.n	8003980 <vTaskSwitchContext+0xb0>
		xYieldPending = pdFALSE;
 80038e6:	4b29      	ldr	r3, [pc, #164]	; (800398c <vTaskSwitchContext+0xbc>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038ec:	4b28      	ldr	r3, [pc, #160]	; (8003990 <vTaskSwitchContext+0xc0>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	fab3 f383 	clz	r3, r3
 80038f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80038fa:	7afb      	ldrb	r3, [r7, #11]
 80038fc:	f1c3 031f 	rsb	r3, r3, #31
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	4924      	ldr	r1, [pc, #144]	; (8003994 <vTaskSwitchContext+0xc4>)
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	4613      	mov	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <vTaskSwitchContext+0x5a>
	__asm volatile
 8003916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391a:	f383 8811 	msr	BASEPRI, r3
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	f3bf 8f4f 	dsb	sy
 8003926:	607b      	str	r3, [r7, #4]
 8003928:	e7fe      	b.n	8003928 <vTaskSwitchContext+0x58>
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	4613      	mov	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4a17      	ldr	r2, [pc, #92]	; (8003994 <vTaskSwitchContext+0xc4>)
 8003936:	4413      	add	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	605a      	str	r2, [r3, #4]
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	3308      	adds	r3, #8
 800394c:	429a      	cmp	r2, r3
 800394e:	d104      	bne.n	800395a <vTaskSwitchContext+0x8a>
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	4a0d      	ldr	r2, [pc, #52]	; (8003998 <vTaskSwitchContext+0xc8>)
 8003962:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8003964:	4b0c      	ldr	r3, [pc, #48]	; (8003998 <vTaskSwitchContext+0xc8>)
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	4b0c      	ldr	r3, [pc, #48]	; (800399c <vTaskSwitchContext+0xcc>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d102      	bne.n	8003976 <vTaskSwitchContext+0xa6>
 8003970:	f002 fcc4 	bl	80062fc <SEGGER_SYSVIEW_OnIdle>
}
 8003974:	e004      	b.n	8003980 <vTaskSwitchContext+0xb0>
		traceTASK_SWITCHED_IN();
 8003976:	4b08      	ldr	r3, [pc, #32]	; (8003998 <vTaskSwitchContext+0xc8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f002 fd1c 	bl	80063b8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003980:	bf00      	nop
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	20000138 	.word	0x20000138
 800398c:	20000124 	.word	0x20000124
 8003990:	20000118 	.word	0x20000118
 8003994:	2000003c 	.word	0x2000003c
 8003998:	20000038 	.word	0x20000038
 800399c:	20000134 	.word	0x20000134

080039a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d109      	bne.n	80039c4 <vTaskPlaceOnEventList+0x24>
 80039b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	60fb      	str	r3, [r7, #12]
 80039c2:	e7fe      	b.n	80039c2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039c4:	4b07      	ldr	r3, [pc, #28]	; (80039e4 <vTaskPlaceOnEventList+0x44>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3318      	adds	r3, #24
 80039ca:	4619      	mov	r1, r3
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7fe feb6 	bl	800273e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80039d2:	2101      	movs	r1, #1
 80039d4:	6838      	ldr	r0, [r7, #0]
 80039d6:	f000 fa77 	bl	8003ec8 <prvAddCurrentTaskToDelayedList>
}
 80039da:	bf00      	nop
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	20000038 	.word	0x20000038

080039e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d109      	bne.n	8003a0e <vTaskPlaceOnEventListRestricted+0x26>
 80039fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fe:	f383 8811 	msr	BASEPRI, r3
 8003a02:	f3bf 8f6f 	isb	sy
 8003a06:	f3bf 8f4f 	dsb	sy
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	e7fe      	b.n	8003a0c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a0e:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <vTaskPlaceOnEventListRestricted+0x58>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	3318      	adds	r3, #24
 8003a14:	4619      	mov	r1, r3
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f7fe fe6d 	bl	80026f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8003a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a26:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003a28:	2024      	movs	r0, #36	; 0x24
 8003a2a:	f001 ff6b 	bl	8005904 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	68b8      	ldr	r0, [r7, #8]
 8003a32:	f000 fa49 	bl	8003ec8 <prvAddCurrentTaskToDelayedList>
	}
 8003a36:	bf00      	nop
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000038 	.word	0x20000038

08003a44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d109      	bne.n	8003a6e <xTaskRemoveFromEventList+0x2a>
 8003a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5e:	f383 8811 	msr	BASEPRI, r3
 8003a62:	f3bf 8f6f 	isb	sy
 8003a66:	f3bf 8f4f 	dsb	sy
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	e7fe      	b.n	8003a6c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	3318      	adds	r3, #24
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fe fe9c 	bl	80027b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a78:	4b1f      	ldr	r3, [pc, #124]	; (8003af8 <xTaskRemoveFromEventList+0xb4>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d120      	bne.n	8003ac2 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	3304      	adds	r3, #4
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fe fe93 	bl	80027b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f002 fcd5 	bl	800643c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a96:	2201      	movs	r2, #1
 8003a98:	409a      	lsls	r2, r3
 8003a9a:	4b18      	ldr	r3, [pc, #96]	; (8003afc <xTaskRemoveFromEventList+0xb8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	4a16      	ldr	r2, [pc, #88]	; (8003afc <xTaskRemoveFromEventList+0xb8>)
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4a13      	ldr	r2, [pc, #76]	; (8003b00 <xTaskRemoveFromEventList+0xbc>)
 8003ab2:	441a      	add	r2, r3
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	3304      	adds	r3, #4
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4610      	mov	r0, r2
 8003abc:	f7fe fe1b 	bl	80026f6 <vListInsertEnd>
 8003ac0:	e005      	b.n	8003ace <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	3318      	adds	r3, #24
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	480e      	ldr	r0, [pc, #56]	; (8003b04 <xTaskRemoveFromEventList+0xc0>)
 8003aca:	f7fe fe14 	bl	80026f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad2:	4b0d      	ldr	r3, [pc, #52]	; (8003b08 <xTaskRemoveFromEventList+0xc4>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d905      	bls.n	8003ae8 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003adc:	2301      	movs	r3, #1
 8003ade:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ae0:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <xTaskRemoveFromEventList+0xc8>)
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	e001      	b.n	8003aec <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003aec:	697b      	ldr	r3, [r7, #20]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20000138 	.word	0x20000138
 8003afc:	20000118 	.word	0x20000118
 8003b00:	2000003c 	.word	0x2000003c
 8003b04:	200000d0 	.word	0x200000d0
 8003b08:	20000038 	.word	0x20000038
 8003b0c:	20000124 	.word	0x20000124

08003b10 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b18:	4b06      	ldr	r3, [pc, #24]	; (8003b34 <vTaskInternalSetTimeOutState+0x24>)
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b20:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <vTaskInternalSetTimeOutState+0x28>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	605a      	str	r2, [r3, #4]
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr
 8003b34:	20000128 	.word	0x20000128
 8003b38:	20000114 	.word	0x20000114

08003b3c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d109      	bne.n	8003b60 <xTaskCheckForTimeOut+0x24>
 8003b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b50:	f383 8811 	msr	BASEPRI, r3
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	e7fe      	b.n	8003b5e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d109      	bne.n	8003b7a <xTaskCheckForTimeOut+0x3e>
 8003b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	e7fe      	b.n	8003b78 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003b7a:	f000 fe0f 	bl	800479c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003b7e:	4b1d      	ldr	r3, [pc, #116]	; (8003bf4 <xTaskCheckForTimeOut+0xb8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b96:	d102      	bne.n	8003b9e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61fb      	str	r3, [r7, #28]
 8003b9c:	e023      	b.n	8003be6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	4b15      	ldr	r3, [pc, #84]	; (8003bf8 <xTaskCheckForTimeOut+0xbc>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d007      	beq.n	8003bba <xTaskCheckForTimeOut+0x7e>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d302      	bcc.n	8003bba <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	61fb      	str	r3, [r7, #28]
 8003bb8:	e015      	b.n	8003be6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d20b      	bcs.n	8003bdc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	1ad2      	subs	r2, r2, r3
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff ff9d 	bl	8003b10 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61fb      	str	r3, [r7, #28]
 8003bda:	e004      	b.n	8003be6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	2200      	movs	r2, #0
 8003be0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003be2:	2301      	movs	r3, #1
 8003be4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003be6:	f000 fe07 	bl	80047f8 <vPortExitCritical>

	return xReturn;
 8003bea:	69fb      	ldr	r3, [r7, #28]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3720      	adds	r7, #32
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	20000114 	.word	0x20000114
 8003bf8:	20000128 	.word	0x20000128

08003bfc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c00:	4b03      	ldr	r3, [pc, #12]	; (8003c10 <vTaskMissedYield+0x14>)
 8003c02:	2201      	movs	r2, #1
 8003c04:	601a      	str	r2, [r3, #0]
}
 8003c06:	bf00      	nop
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	20000124 	.word	0x20000124

08003c14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c1c:	f000 f852 	bl	8003cc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c20:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <prvIdleTask+0x28>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d9f9      	bls.n	8003c1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c28:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <prvIdleTask+0x2c>)
 8003c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003c38:	e7f0      	b.n	8003c1c <prvIdleTask+0x8>
 8003c3a:	bf00      	nop
 8003c3c:	2000003c 	.word	0x2000003c
 8003c40:	e000ed04 	.word	0xe000ed04

08003c44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	607b      	str	r3, [r7, #4]
 8003c4e:	e00c      	b.n	8003c6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	4613      	mov	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4a12      	ldr	r2, [pc, #72]	; (8003ca4 <prvInitialiseTaskLists+0x60>)
 8003c5c:	4413      	add	r3, r2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fe fd1c 	bl	800269c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3301      	adds	r3, #1
 8003c68:	607b      	str	r3, [r7, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b04      	cmp	r3, #4
 8003c6e:	d9ef      	bls.n	8003c50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c70:	480d      	ldr	r0, [pc, #52]	; (8003ca8 <prvInitialiseTaskLists+0x64>)
 8003c72:	f7fe fd13 	bl	800269c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c76:	480d      	ldr	r0, [pc, #52]	; (8003cac <prvInitialiseTaskLists+0x68>)
 8003c78:	f7fe fd10 	bl	800269c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c7c:	480c      	ldr	r0, [pc, #48]	; (8003cb0 <prvInitialiseTaskLists+0x6c>)
 8003c7e:	f7fe fd0d 	bl	800269c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c82:	480c      	ldr	r0, [pc, #48]	; (8003cb4 <prvInitialiseTaskLists+0x70>)
 8003c84:	f7fe fd0a 	bl	800269c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c88:	480b      	ldr	r0, [pc, #44]	; (8003cb8 <prvInitialiseTaskLists+0x74>)
 8003c8a:	f7fe fd07 	bl	800269c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c8e:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <prvInitialiseTaskLists+0x78>)
 8003c90:	4a05      	ldr	r2, [pc, #20]	; (8003ca8 <prvInitialiseTaskLists+0x64>)
 8003c92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c94:	4b0a      	ldr	r3, [pc, #40]	; (8003cc0 <prvInitialiseTaskLists+0x7c>)
 8003c96:	4a05      	ldr	r2, [pc, #20]	; (8003cac <prvInitialiseTaskLists+0x68>)
 8003c98:	601a      	str	r2, [r3, #0]
}
 8003c9a:	bf00      	nop
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	2000003c 	.word	0x2000003c
 8003ca8:	200000a0 	.word	0x200000a0
 8003cac:	200000b4 	.word	0x200000b4
 8003cb0:	200000d0 	.word	0x200000d0
 8003cb4:	200000e4 	.word	0x200000e4
 8003cb8:	200000fc 	.word	0x200000fc
 8003cbc:	200000c8 	.word	0x200000c8
 8003cc0:	200000cc 	.word	0x200000cc

08003cc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cca:	e019      	b.n	8003d00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ccc:	f000 fd66 	bl	800479c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cd0:	4b0f      	ldr	r3, [pc, #60]	; (8003d10 <prvCheckTasksWaitingTermination+0x4c>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fe fd67 	bl	80027b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ce2:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <prvCheckTasksWaitingTermination+0x50>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	4a0a      	ldr	r2, [pc, #40]	; (8003d14 <prvCheckTasksWaitingTermination+0x50>)
 8003cea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003cec:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <prvCheckTasksWaitingTermination+0x54>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	4a09      	ldr	r2, [pc, #36]	; (8003d18 <prvCheckTasksWaitingTermination+0x54>)
 8003cf4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003cf6:	f000 fd7f 	bl	80047f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f80e 	bl	8003d1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d00:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <prvCheckTasksWaitingTermination+0x54>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1e1      	bne.n	8003ccc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d08:	bf00      	nop
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	200000e4 	.word	0x200000e4
 8003d14:	20000110 	.word	0x20000110
 8003d18:	200000f8 	.word	0x200000f8

08003d1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 ff61 	bl	8004bf0 <vPortFree>
			vPortFree( pxTCB );
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 ff5e 	bl	8004bf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d34:	bf00      	nop
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d42:	4b0c      	ldr	r3, [pc, #48]	; (8003d74 <prvResetNextTaskUnblockTime+0x38>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d104      	bne.n	8003d56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d4c:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <prvResetNextTaskUnblockTime+0x3c>)
 8003d4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d54:	e008      	b.n	8003d68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d56:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <prvResetNextTaskUnblockTime+0x38>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	4a04      	ldr	r2, [pc, #16]	; (8003d78 <prvResetNextTaskUnblockTime+0x3c>)
 8003d66:	6013      	str	r3, [r2, #0]
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	200000c8 	.word	0x200000c8
 8003d78:	20000130 	.word	0x20000130

08003d7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d82:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <xTaskGetSchedulerState+0x34>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d102      	bne.n	8003d90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	607b      	str	r3, [r7, #4]
 8003d8e:	e008      	b.n	8003da2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d90:	4b08      	ldr	r3, [pc, #32]	; (8003db4 <xTaskGetSchedulerState+0x38>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d102      	bne.n	8003d9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d98:	2302      	movs	r3, #2
 8003d9a:	607b      	str	r3, [r7, #4]
 8003d9c:	e001      	b.n	8003da2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003da2:	687b      	ldr	r3, [r7, #4]
	}
 8003da4:	4618      	mov	r0, r3
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	2000011c 	.word	0x2000011c
 8003db4:	20000138 	.word	0x20000138

08003db8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d071      	beq.n	8003eb2 <xTaskPriorityDisinherit+0xfa>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003dce:	4b3b      	ldr	r3, [pc, #236]	; (8003ebc <xTaskPriorityDisinherit+0x104>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d009      	beq.n	8003dec <xTaskPriorityDisinherit+0x34>
 8003dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ddc:	f383 8811 	msr	BASEPRI, r3
 8003de0:	f3bf 8f6f 	isb	sy
 8003de4:	f3bf 8f4f 	dsb	sy
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	e7fe      	b.n	8003dea <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d109      	bne.n	8003e08 <xTaskPriorityDisinherit+0x50>
 8003df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	e7fe      	b.n	8003e06 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0c:	1e5a      	subs	r2, r3, #1
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d049      	beq.n	8003eb2 <xTaskPriorityDisinherit+0xfa>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d145      	bne.n	8003eb2 <xTaskPriorityDisinherit+0xfa>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	3304      	adds	r3, #4
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fe fcc0 	bl	80027b0 <uxListRemove>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d115      	bne.n	8003e62 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e3a:	4921      	ldr	r1, [pc, #132]	; (8003ec0 <xTaskPriorityDisinherit+0x108>)
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10a      	bne.n	8003e62 <xTaskPriorityDisinherit+0xaa>
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e50:	2201      	movs	r2, #1
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	43da      	mvns	r2, r3
 8003e58:	4b1a      	ldr	r3, [pc, #104]	; (8003ec4 <xTaskPriorityDisinherit+0x10c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	4a19      	ldr	r2, [pc, #100]	; (8003ec4 <xTaskPriorityDisinherit+0x10c>)
 8003e60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4619      	mov	r1, r3
 8003e66:	204a      	movs	r0, #74	; 0x4a
 8003e68:	f001 fd6a 	bl	8005940 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e78:	f1c3 0205 	rsb	r2, r3, #5
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	2201      	movs	r2, #1
 8003e86:	409a      	lsls	r2, r3
 8003e88:	4b0e      	ldr	r3, [pc, #56]	; (8003ec4 <xTaskPriorityDisinherit+0x10c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	4a0d      	ldr	r2, [pc, #52]	; (8003ec4 <xTaskPriorityDisinherit+0x10c>)
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e96:	4613      	mov	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4a08      	ldr	r2, [pc, #32]	; (8003ec0 <xTaskPriorityDisinherit+0x108>)
 8003ea0:	441a      	add	r2, r3
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	f7fe fc24 	bl	80026f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003eb2:	697b      	ldr	r3, [r7, #20]
	}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	20000038 	.word	0x20000038
 8003ec0:	2000003c 	.word	0x2000003c
 8003ec4:	20000118 	.word	0x20000118

08003ec8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ed2:	4b32      	ldr	r3, [pc, #200]	; (8003f9c <prvAddCurrentTaskToDelayedList+0xd4>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ed8:	4b31      	ldr	r3, [pc, #196]	; (8003fa0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	3304      	adds	r3, #4
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7fe fc66 	bl	80027b0 <uxListRemove>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10b      	bne.n	8003f02 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003eea:	4b2d      	ldr	r3, [pc, #180]	; (8003fa0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef6:	43da      	mvns	r2, r3
 8003ef8:	4b2a      	ldr	r3, [pc, #168]	; (8003fa4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4013      	ands	r3, r2
 8003efe:	4a29      	ldr	r2, [pc, #164]	; (8003fa4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003f00:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f08:	d110      	bne.n	8003f2c <prvAddCurrentTaskToDelayedList+0x64>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00d      	beq.n	8003f2c <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003f10:	4b23      	ldr	r3, [pc, #140]	; (8003fa0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	211b      	movs	r1, #27
 8003f16:	4618      	mov	r0, r3
 8003f18:	f002 fad2 	bl	80064c0 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f1c:	4b20      	ldr	r3, [pc, #128]	; (8003fa0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	3304      	adds	r3, #4
 8003f22:	4619      	mov	r1, r3
 8003f24:	4820      	ldr	r0, [pc, #128]	; (8003fa8 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003f26:	f7fe fbe6 	bl	80026f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f2a:	e032      	b.n	8003f92 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4413      	add	r3, r2
 8003f32:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f34:	4b1a      	ldr	r3, [pc, #104]	; (8003fa0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d20f      	bcs.n	8003f64 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003f44:	4b16      	ldr	r3, [pc, #88]	; (8003fa0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2104      	movs	r1, #4
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f002 fab8 	bl	80064c0 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f50:	4b16      	ldr	r3, [pc, #88]	; (8003fac <prvAddCurrentTaskToDelayedList+0xe4>)
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	3304      	adds	r3, #4
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	f7fe fbee 	bl	800273e <vListInsert>
}
 8003f62:	e016      	b.n	8003f92 <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 8003f64:	4b0e      	ldr	r3, [pc, #56]	; (8003fa0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2104      	movs	r1, #4
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f002 faa8 	bl	80064c0 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f70:	4b0f      	ldr	r3, [pc, #60]	; (8003fb0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	f7fe fbde 	bl	800273e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f82:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <prvAddCurrentTaskToDelayedList+0xec>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d202      	bcs.n	8003f92 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 8003f8c:	4a09      	ldr	r2, [pc, #36]	; (8003fb4 <prvAddCurrentTaskToDelayedList+0xec>)
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	6013      	str	r3, [r2, #0]
}
 8003f92:	bf00      	nop
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20000114 	.word	0x20000114
 8003fa0:	20000038 	.word	0x20000038
 8003fa4:	20000118 	.word	0x20000118
 8003fa8:	200000fc 	.word	0x200000fc
 8003fac:	200000cc 	.word	0x200000cc
 8003fb0:	200000c8 	.word	0x200000c8
 8003fb4:	20000130 	.word	0x20000130

08003fb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003fc2:	f000 fa8f 	bl	80044e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003fc6:	4b11      	ldr	r3, [pc, #68]	; (800400c <xTimerCreateTimerTask+0x54>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00b      	beq.n	8003fe6 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8003fce:	4b10      	ldr	r3, [pc, #64]	; (8004010 <xTimerCreateTimerTask+0x58>)
 8003fd0:	9301      	str	r3, [sp, #4]
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003fdc:	490d      	ldr	r1, [pc, #52]	; (8004014 <xTimerCreateTimerTask+0x5c>)
 8003fde:	480e      	ldr	r0, [pc, #56]	; (8004018 <xTimerCreateTimerTask+0x60>)
 8003fe0:	f7ff f92e 	bl	8003240 <xTaskCreate>
 8003fe4:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d109      	bne.n	8004000 <xTimerCreateTimerTask+0x48>
 8003fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	603b      	str	r3, [r7, #0]
 8003ffe:	e7fe      	b.n	8003ffe <xTimerCreateTimerTask+0x46>
	return xReturn;
 8004000:	687b      	ldr	r3, [r7, #4]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	2000016c 	.word	0x2000016c
 8004010:	20000170 	.word	0x20000170
 8004014:	08006920 	.word	0x08006920
 8004018:	08004135 	.word	0x08004135

0800401c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08a      	sub	sp, #40	; 0x28
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
 8004028:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800402a:	2300      	movs	r3, #0
 800402c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d109      	bne.n	8004048 <xTimerGenericCommand+0x2c>
 8004034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	623b      	str	r3, [r7, #32]
 8004046:	e7fe      	b.n	8004046 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004048:	4b19      	ldr	r3, [pc, #100]	; (80040b0 <xTimerGenericCommand+0x94>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d02a      	beq.n	80040a6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	2b05      	cmp	r3, #5
 8004060:	dc18      	bgt.n	8004094 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004062:	f7ff fe8b 	bl	8003d7c <xTaskGetSchedulerState>
 8004066:	4603      	mov	r3, r0
 8004068:	2b02      	cmp	r3, #2
 800406a:	d109      	bne.n	8004080 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800406c:	4b10      	ldr	r3, [pc, #64]	; (80040b0 <xTimerGenericCommand+0x94>)
 800406e:	6818      	ldr	r0, [r3, #0]
 8004070:	f107 0114 	add.w	r1, r7, #20
 8004074:	2300      	movs	r3, #0
 8004076:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004078:	f7fe fc90 	bl	800299c <xQueueGenericSend>
 800407c:	6278      	str	r0, [r7, #36]	; 0x24
 800407e:	e012      	b.n	80040a6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004080:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <xTimerGenericCommand+0x94>)
 8004082:	6818      	ldr	r0, [r3, #0]
 8004084:	f107 0114 	add.w	r1, r7, #20
 8004088:	2300      	movs	r3, #0
 800408a:	2200      	movs	r2, #0
 800408c:	f7fe fc86 	bl	800299c <xQueueGenericSend>
 8004090:	6278      	str	r0, [r7, #36]	; 0x24
 8004092:	e008      	b.n	80040a6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004094:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <xTimerGenericCommand+0x94>)
 8004096:	6818      	ldr	r0, [r3, #0]
 8004098:	f107 0114 	add.w	r1, r7, #20
 800409c:	2300      	movs	r3, #0
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	f7fe fd9e 	bl	8002be0 <xQueueGenericSendFromISR>
 80040a4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3728      	adds	r7, #40	; 0x28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	2000016c 	.word	0x2000016c

080040b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b088      	sub	sp, #32
 80040b8:	af02      	add	r7, sp, #8
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040be:	4b1c      	ldr	r3, [pc, #112]	; (8004130 <prvProcessExpiredTimer+0x7c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	3304      	adds	r3, #4
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7fe fb6f 	bl	80027b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d121      	bne.n	800411e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	699a      	ldr	r2, [r3, #24]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	18d1      	adds	r1, r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	6978      	ldr	r0, [r7, #20]
 80040e8:	f000 f8c8 	bl	800427c <prvInsertTimerInActiveList>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d015      	beq.n	800411e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040f2:	2300      	movs	r3, #0
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	2300      	movs	r3, #0
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	2100      	movs	r1, #0
 80040fc:	6978      	ldr	r0, [r7, #20]
 80040fe:	f7ff ff8d 	bl	800401c <xTimerGenericCommand>
 8004102:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d109      	bne.n	800411e <prvProcessExpiredTimer+0x6a>
 800410a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	e7fe      	b.n	800411c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	6978      	ldr	r0, [r7, #20]
 8004124:	4798      	blx	r3
}
 8004126:	bf00      	nop
 8004128:	3718      	adds	r7, #24
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	20000164 	.word	0x20000164

08004134 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800413c:	f107 0308 	add.w	r3, r7, #8
 8004140:	4618      	mov	r0, r3
 8004142:	f000 f857 	bl	80041f4 <prvGetNextExpireTime>
 8004146:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4619      	mov	r1, r3
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f803 	bl	8004158 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004152:	f000 f8d5 	bl	8004300 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004156:	e7f1      	b.n	800413c <prvTimerTask+0x8>

08004158 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004162:	f7ff fa29 	bl	80035b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004166:	f107 0308 	add.w	r3, r7, #8
 800416a:	4618      	mov	r0, r3
 800416c:	f000 f866 	bl	800423c <prvSampleTimeNow>
 8004170:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d130      	bne.n	80041da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10a      	bne.n	8004194 <prvProcessTimerOrBlockTask+0x3c>
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	429a      	cmp	r2, r3
 8004184:	d806      	bhi.n	8004194 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004186:	f7ff fa25 	bl	80035d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800418a:	68f9      	ldr	r1, [r7, #12]
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f7ff ff91 	bl	80040b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004192:	e024      	b.n	80041de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d008      	beq.n	80041ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800419a:	4b13      	ldr	r3, [pc, #76]	; (80041e8 <prvProcessTimerOrBlockTask+0x90>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <prvProcessTimerOrBlockTask+0x50>
 80041a4:	2301      	movs	r3, #1
 80041a6:	e000      	b.n	80041aa <prvProcessTimerOrBlockTask+0x52>
 80041a8:	2300      	movs	r3, #0
 80041aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80041ac:	4b0f      	ldr	r3, [pc, #60]	; (80041ec <prvProcessTimerOrBlockTask+0x94>)
 80041ae:	6818      	ldr	r0, [r3, #0]
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	4619      	mov	r1, r3
 80041ba:	f7ff f80d 	bl	80031d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80041be:	f7ff fa09 	bl	80035d4 <xTaskResumeAll>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10a      	bne.n	80041de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80041c8:	4b09      	ldr	r3, [pc, #36]	; (80041f0 <prvProcessTimerOrBlockTask+0x98>)
 80041ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	f3bf 8f6f 	isb	sy
}
 80041d8:	e001      	b.n	80041de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80041da:	f7ff f9fb 	bl	80035d4 <xTaskResumeAll>
}
 80041de:	bf00      	nop
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	20000168 	.word	0x20000168
 80041ec:	2000016c 	.word	0x2000016c
 80041f0:	e000ed04 	.word	0xe000ed04

080041f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80041fc:	4b0e      	ldr	r3, [pc, #56]	; (8004238 <prvGetNextExpireTime+0x44>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <prvGetNextExpireTime+0x16>
 8004206:	2201      	movs	r2, #1
 8004208:	e000      	b.n	800420c <prvGetNextExpireTime+0x18>
 800420a:	2200      	movs	r2, #0
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d105      	bne.n	8004224 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004218:	4b07      	ldr	r3, [pc, #28]	; (8004238 <prvGetNextExpireTime+0x44>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	e001      	b.n	8004228 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004228:	68fb      	ldr	r3, [r7, #12]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	20000164 	.word	0x20000164

0800423c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004244:	f7ff fa66 	bl	8003714 <xTaskGetTickCount>
 8004248:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800424a:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <prvSampleTimeNow+0x3c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	429a      	cmp	r2, r3
 8004252:	d205      	bcs.n	8004260 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004254:	f000 f8e6 	bl	8004424 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	e002      	b.n	8004266 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004266:	4a04      	ldr	r2, [pc, #16]	; (8004278 <prvSampleTimeNow+0x3c>)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800426c:	68fb      	ldr	r3, [r7, #12]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	20000174 	.word	0x20000174

0800427c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800428a:	2300      	movs	r3, #0
 800428c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d812      	bhi.n	80042c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	1ad2      	subs	r2, r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d302      	bcc.n	80042b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80042b0:	2301      	movs	r3, #1
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	e01b      	b.n	80042ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80042b6:	4b10      	ldr	r3, [pc, #64]	; (80042f8 <prvInsertTimerInActiveList+0x7c>)
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	3304      	adds	r3, #4
 80042be:	4619      	mov	r1, r3
 80042c0:	4610      	mov	r0, r2
 80042c2:	f7fe fa3c 	bl	800273e <vListInsert>
 80042c6:	e012      	b.n	80042ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d206      	bcs.n	80042de <prvInsertTimerInActiveList+0x62>
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d302      	bcc.n	80042de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80042d8:	2301      	movs	r3, #1
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	e007      	b.n	80042ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80042de:	4b07      	ldr	r3, [pc, #28]	; (80042fc <prvInsertTimerInActiveList+0x80>)
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	3304      	adds	r3, #4
 80042e6:	4619      	mov	r1, r3
 80042e8:	4610      	mov	r0, r2
 80042ea:	f7fe fa28 	bl	800273e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80042ee:	697b      	ldr	r3, [r7, #20]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20000168 	.word	0x20000168
 80042fc:	20000164 	.word	0x20000164

08004300 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b08c      	sub	sp, #48	; 0x30
 8004304:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004306:	e07a      	b.n	80043fe <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	db76      	blt.n	80043fc <prvProcessReceivedCommands+0xfc>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d004      	beq.n	8004324 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	3304      	adds	r3, #4
 800431e:	4618      	mov	r0, r3
 8004320:	f7fe fa46 	bl	80027b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004324:	1d3b      	adds	r3, r7, #4
 8004326:	4618      	mov	r0, r3
 8004328:	f7ff ff88 	bl	800423c <prvSampleTimeNow>
 800432c:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2b09      	cmp	r3, #9
 8004332:	d864      	bhi.n	80043fe <prvProcessReceivedCommands+0xfe>
 8004334:	a201      	add	r2, pc, #4	; (adr r2, 800433c <prvProcessReceivedCommands+0x3c>)
 8004336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433a:	bf00      	nop
 800433c:	08004365 	.word	0x08004365
 8004340:	08004365 	.word	0x08004365
 8004344:	08004365 	.word	0x08004365
 8004348:	080043ff 	.word	0x080043ff
 800434c:	080043bf 	.word	0x080043bf
 8004350:	080043f5 	.word	0x080043f5
 8004354:	08004365 	.word	0x08004365
 8004358:	08004365 	.word	0x08004365
 800435c:	080043ff 	.word	0x080043ff
 8004360:	080043bf 	.word	0x080043bf
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	18d1      	adds	r1, r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a3a      	ldr	r2, [r7, #32]
 8004370:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004372:	f7ff ff83 	bl	800427c <prvInsertTimerInActiveList>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d040      	beq.n	80043fe <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004382:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d138      	bne.n	80043fe <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	441a      	add	r2, r3
 8004394:	2300      	movs	r3, #0
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	2300      	movs	r3, #0
 800439a:	2100      	movs	r1, #0
 800439c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800439e:	f7ff fe3d 	bl	800401c <xTimerGenericCommand>
 80043a2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d129      	bne.n	80043fe <prvProcessReceivedCommands+0xfe>
 80043aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	61bb      	str	r3, [r7, #24]
 80043bc:	e7fe      	b.n	80043bc <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d109      	bne.n	80043e0 <prvProcessReceivedCommands+0xe0>
 80043cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	617b      	str	r3, [r7, #20]
 80043de:	e7fe      	b.n	80043de <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	699a      	ldr	r2, [r3, #24]
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	18d1      	adds	r1, r2, r3
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	6a3a      	ldr	r2, [r7, #32]
 80043ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043ee:	f7ff ff45 	bl	800427c <prvInsertTimerInActiveList>
					break;
 80043f2:	e004      	b.n	80043fe <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 80043f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043f6:	f000 fbfb 	bl	8004bf0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80043fa:	e000      	b.n	80043fe <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80043fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043fe:	4b08      	ldr	r3, [pc, #32]	; (8004420 <prvProcessReceivedCommands+0x120>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f107 0108 	add.w	r1, r7, #8
 8004406:	2200      	movs	r2, #0
 8004408:	4618      	mov	r0, r3
 800440a:	f7fe fc91 	bl	8002d30 <xQueueReceive>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	f47f af79 	bne.w	8004308 <prvProcessReceivedCommands+0x8>
	}
}
 8004416:	bf00      	nop
 8004418:	3728      	adds	r7, #40	; 0x28
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	2000016c 	.word	0x2000016c

08004424 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b088      	sub	sp, #32
 8004428:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800442a:	e044      	b.n	80044b6 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800442c:	4b2b      	ldr	r3, [pc, #172]	; (80044dc <prvSwitchTimerLists+0xb8>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004436:	4b29      	ldr	r3, [pc, #164]	; (80044dc <prvSwitchTimerLists+0xb8>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	3304      	adds	r3, #4
 8004444:	4618      	mov	r0, r3
 8004446:	f7fe f9b3 	bl	80027b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d12d      	bne.n	80044b6 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	4413      	add	r3, r2
 8004462:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	429a      	cmp	r2, r3
 800446a:	d90e      	bls.n	800448a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004478:	4b18      	ldr	r3, [pc, #96]	; (80044dc <prvSwitchTimerLists+0xb8>)
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	3304      	adds	r3, #4
 8004480:	4619      	mov	r1, r3
 8004482:	4610      	mov	r0, r2
 8004484:	f7fe f95b 	bl	800273e <vListInsert>
 8004488:	e015      	b.n	80044b6 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800448a:	2300      	movs	r3, #0
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	2300      	movs	r3, #0
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	2100      	movs	r1, #0
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f7ff fdc1 	bl	800401c <xTimerGenericCommand>
 800449a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d109      	bne.n	80044b6 <prvSwitchTimerLists+0x92>
 80044a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a6:	f383 8811 	msr	BASEPRI, r3
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	603b      	str	r3, [r7, #0]
 80044b4:	e7fe      	b.n	80044b4 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044b6:	4b09      	ldr	r3, [pc, #36]	; (80044dc <prvSwitchTimerLists+0xb8>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1b5      	bne.n	800442c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80044c0:	4b06      	ldr	r3, [pc, #24]	; (80044dc <prvSwitchTimerLists+0xb8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80044c6:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <prvSwitchTimerLists+0xbc>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a04      	ldr	r2, [pc, #16]	; (80044dc <prvSwitchTimerLists+0xb8>)
 80044cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80044ce:	4a04      	ldr	r2, [pc, #16]	; (80044e0 <prvSwitchTimerLists+0xbc>)
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	6013      	str	r3, [r2, #0]
}
 80044d4:	bf00      	nop
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	20000164 	.word	0x20000164
 80044e0:	20000168 	.word	0x20000168

080044e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80044e8:	f000 f958 	bl	800479c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80044ec:	4b12      	ldr	r3, [pc, #72]	; (8004538 <prvCheckForValidListAndQueue+0x54>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d11d      	bne.n	8004530 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80044f4:	4811      	ldr	r0, [pc, #68]	; (800453c <prvCheckForValidListAndQueue+0x58>)
 80044f6:	f7fe f8d1 	bl	800269c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80044fa:	4811      	ldr	r0, [pc, #68]	; (8004540 <prvCheckForValidListAndQueue+0x5c>)
 80044fc:	f7fe f8ce 	bl	800269c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004500:	4b10      	ldr	r3, [pc, #64]	; (8004544 <prvCheckForValidListAndQueue+0x60>)
 8004502:	4a0e      	ldr	r2, [pc, #56]	; (800453c <prvCheckForValidListAndQueue+0x58>)
 8004504:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004506:	4b10      	ldr	r3, [pc, #64]	; (8004548 <prvCheckForValidListAndQueue+0x64>)
 8004508:	4a0d      	ldr	r2, [pc, #52]	; (8004540 <prvCheckForValidListAndQueue+0x5c>)
 800450a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800450c:	2200      	movs	r2, #0
 800450e:	210c      	movs	r1, #12
 8004510:	200a      	movs	r0, #10
 8004512:	f7fe f9df 	bl	80028d4 <xQueueGenericCreate>
 8004516:	4602      	mov	r2, r0
 8004518:	4b07      	ldr	r3, [pc, #28]	; (8004538 <prvCheckForValidListAndQueue+0x54>)
 800451a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800451c:	4b06      	ldr	r3, [pc, #24]	; (8004538 <prvCheckForValidListAndQueue+0x54>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d005      	beq.n	8004530 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004524:	4b04      	ldr	r3, [pc, #16]	; (8004538 <prvCheckForValidListAndQueue+0x54>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4908      	ldr	r1, [pc, #32]	; (800454c <prvCheckForValidListAndQueue+0x68>)
 800452a:	4618      	mov	r0, r3
 800452c:	f7fe fe24 	bl	8003178 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004530:	f000 f962 	bl	80047f8 <vPortExitCritical>
}
 8004534:	bf00      	nop
 8004536:	bd80      	pop	{r7, pc}
 8004538:	2000016c 	.word	0x2000016c
 800453c:	2000013c 	.word	0x2000013c
 8004540:	20000150 	.word	0x20000150
 8004544:	20000164 	.word	0x20000164
 8004548:	20000168 	.word	0x20000168
 800454c:	08006928 	.word	0x08006928

08004550 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t* pxPortInitialiseStack(StackType_t *pxTopOfStack,
		TaskFunction_t pxCode, void *pvParameters) {
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	 interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	 of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	3b04      	subs	r3, #4
 8004560:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004568:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	3b04      	subs	r3, #4
 800456e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ((StackType_t) pxCode) & portSTART_ADDRESS_MASK; /* PC */
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f023 0201 	bic.w	r2, r3, #1
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	3b04      	subs	r3, #4
 800457e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (StackType_t) portTASK_RETURN_ADDRESS; /* LR */
 8004580:	4a0c      	ldr	r2, [pc, #48]	; (80045b4 <pxPortInitialiseStack+0x64>)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5; /* R12, R3, R2 and R1. */
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	3b14      	subs	r3, #20
 800458a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (StackType_t) pvParameters; /* R0 */
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	 own exec return value. */
	pxTopOfStack--;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	3b04      	subs	r3, #4
 8004596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f06f 0202 	mvn.w	r2, #2
 800459e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	3b20      	subs	r3, #32
 80045a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80045a6:	68fb      	ldr	r3, [r7, #12]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	080045b9 	.word	0x080045b9

080045b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError(void) {
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
	volatile uint32_t ulDummy = 0;
 80045be:	2300      	movs	r3, #0
 80045c0:	607b      	str	r3, [r7, #4]
	 its caller as there is nothing to return to.  If a task wants to exit it
	 should instead call vTaskDelete( NULL ).

	 Artificially force an assert() to be triggered if configASSERT() is
	 defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
 80045c2:	4b11      	ldr	r3, [pc, #68]	; (8004608 <prvTaskExitError+0x50>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045ca:	d009      	beq.n	80045e0 <prvTaskExitError+0x28>
 80045cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	60fb      	str	r3, [r7, #12]
 80045de:	e7fe      	b.n	80045de <prvTaskExitError+0x26>
 80045e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e4:	f383 8811 	msr	BASEPRI, r3
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while (ulDummy == 0) {
 80045f2:	bf00      	nop
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0fc      	beq.n	80045f4 <prvTaskExitError+0x3c>
		 about code appearing after this function is called - making ulDummy
		 volatile makes the compiler think the function could return and
		 therefore not output an 'unreachable code' warning for code that appears
		 after it. */
	}
}
 80045fa:	bf00      	nop
 80045fc:	3714      	adds	r7, #20
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	20000010 	.word	0x20000010
 800460c:	00000000 	.word	0x00000000

08004610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler(void) {
	__asm volatile (
 8004610:	4b07      	ldr	r3, [pc, #28]	; (8004630 <pxCurrentTCBConst2>)
 8004612:	6819      	ldr	r1, [r3, #0]
 8004614:	6808      	ldr	r0, [r1, #0]
 8004616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800461a:	f380 8809 	msr	PSP, r0
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f04f 0000 	mov.w	r0, #0
 8004626:	f380 8811 	msr	BASEPRI, r0
 800462a:	4770      	bx	lr
 800462c:	f3af 8000 	nop.w

08004630 <pxCurrentTCBConst2>:
 8004630:	20000038 	.word	0x20000038
			"	bx r14							\n"
			"									\n"
			"	.align 4						\n"
			"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
	);
}
 8004634:	bf00      	nop
 8004636:	bf00      	nop

08004638 <prvPortStartFirstTask>:
static void prvPortStartFirstTask(void) {
	/* Start the first task.  This also clears the bit that indicates the FPU is
	 in use in case the FPU was used before the scheduler was started - which
	 would otherwise result in the unnecessary leaving of space in the SVC stack
	 for lazy saving of FPU registers. */
	__asm volatile(
 8004638:	4808      	ldr	r0, [pc, #32]	; (800465c <prvPortStartFirstTask+0x24>)
 800463a:	6800      	ldr	r0, [r0, #0]
 800463c:	6800      	ldr	r0, [r0, #0]
 800463e:	f380 8808 	msr	MSP, r0
 8004642:	f04f 0000 	mov.w	r0, #0
 8004646:	f380 8814 	msr	CONTROL, r0
 800464a:	b662      	cpsie	i
 800464c:	b661      	cpsie	f
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	df00      	svc	0
 8004658:	bf00      	nop
			" dsb					\n"
			" isb					\n"
			" svc 0					\n" /* System call to start first task. */
			" nop					\n"
	);
}
 800465a:	bf00      	nop
 800465c:	e000ed08 	.word	0xe000ed08

08004660 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler(void) {
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
	configASSERT(configMAX_SYSCALL_INTERRUPT_PRIORITY);

	/* This port can be used on all revisions of the Cortex-M7 core other than
	 the r0p1 parts.  r0p1 parts should use the port from the
	 /source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
 8004666:	4b44      	ldr	r3, [pc, #272]	; (8004778 <xPortStartScheduler+0x118>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a44      	ldr	r2, [pc, #272]	; (800477c <xPortStartScheduler+0x11c>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d109      	bne.n	8004684 <xPortStartScheduler+0x24>
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	e7fe      	b.n	8004682 <xPortStartScheduler+0x22>
	configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
 8004684:	4b3c      	ldr	r3, [pc, #240]	; (8004778 <xPortStartScheduler+0x118>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a3d      	ldr	r2, [pc, #244]	; (8004780 <xPortStartScheduler+0x120>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d109      	bne.n	80046a2 <xPortStartScheduler+0x42>
 800468e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	e7fe      	b.n	80046a0 <xPortStartScheduler+0x40>

#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t *const pucFirstUserPriorityRegister =
 80046a2:	4b38      	ldr	r3, [pc, #224]	; (8004784 <xPortStartScheduler+0x124>)
 80046a4:	617b      	str	r3, [r7, #20]
		 functions can be called.  ISR safe functions are those that end in
		 "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		 ensure interrupt entry is as fast and simple as possible.

		 Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		 possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	22ff      	movs	r2, #255	; 0xff
 80046b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY
				& ucMaxPriorityValue;
 80046bc:	78fb      	ldrb	r3, [r7, #3]
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046c4:	b2da      	uxtb	r2, r3
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY
 80046c6:	4b30      	ldr	r3, [pc, #192]	; (8004788 <xPortStartScheduler+0x128>)
 80046c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		 of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046ca:	4b30      	ldr	r3, [pc, #192]	; (800478c <xPortStartScheduler+0x12c>)
 80046cc:	2207      	movs	r2, #7
 80046ce:	601a      	str	r2, [r3, #0]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 80046d0:	e009      	b.n	80046e6 <xPortStartScheduler+0x86>
			ulMaxPRIGROUPValue--;
 80046d2:	4b2e      	ldr	r3, [pc, #184]	; (800478c <xPortStartScheduler+0x12c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	3b01      	subs	r3, #1
 80046d8:	4a2c      	ldr	r2, [pc, #176]	; (800478c <xPortStartScheduler+0x12c>)
 80046da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= (uint8_t) 0x01;
 80046dc:	78fb      	ldrb	r3, [r7, #3]
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	70fb      	strb	r3, [r7, #3]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 80046e6:	78fb      	ldrb	r3, [r7, #3]
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ee:	2b80      	cmp	r3, #128	; 0x80
 80046f0:	d0ef      	beq.n	80046d2 <xPortStartScheduler+0x72>
#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			 priority bits matches the number of priority bits actually queried
			 from the hardware. */
			configASSERT(
 80046f2:	4b26      	ldr	r3, [pc, #152]	; (800478c <xPortStartScheduler+0x12c>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f1c3 0307 	rsb	r3, r3, #7
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	d009      	beq.n	8004712 <xPortStartScheduler+0xb2>
 80046fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	60bb      	str	r3, [r7, #8]
 8004710:	e7fe      	b.n	8004710 <xPortStartScheduler+0xb0>
		}
#endif

		/* Shift the priority group value back to its position within the AIRCR
		 register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004712:	4b1e      	ldr	r3, [pc, #120]	; (800478c <xPortStartScheduler+0x12c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	021b      	lsls	r3, r3, #8
 8004718:	4a1c      	ldr	r2, [pc, #112]	; (800478c <xPortStartScheduler+0x12c>)
 800471a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800471c:	4b1b      	ldr	r3, [pc, #108]	; (800478c <xPortStartScheduler+0x12c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004724:	4a19      	ldr	r2, [pc, #100]	; (800478c <xPortStartScheduler+0x12c>)
 8004726:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		 value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	b2da      	uxtb	r2, r3
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	701a      	strb	r2, [r3, #0]
	}
#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004730:	4b17      	ldr	r3, [pc, #92]	; (8004790 <xPortStartScheduler+0x130>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a16      	ldr	r2, [pc, #88]	; (8004790 <xPortStartScheduler+0x130>)
 8004736:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800473a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800473c:	4b14      	ldr	r3, [pc, #80]	; (8004790 <xPortStartScheduler+0x130>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a13      	ldr	r2, [pc, #76]	; (8004790 <xPortStartScheduler+0x130>)
 8004742:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004746:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	 here already. */
	vPortSetupTimerInterrupt();
 8004748:	f000 f8de 	bl	8004908 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800474c:	4b11      	ldr	r3, [pc, #68]	; (8004794 <xPortStartScheduler+0x134>)
 800474e:	2200      	movs	r2, #0
 8004750:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004752:	f000 f8fd 	bl	8004950 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR) |= portASPEN_AND_LSPEN_BITS;
 8004756:	4b10      	ldr	r3, [pc, #64]	; (8004798 <xPortStartScheduler+0x138>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a0f      	ldr	r2, [pc, #60]	; (8004798 <xPortStartScheduler+0x138>)
 800475c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004760:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004762:	f7ff ff69 	bl	8004638 <prvPortStartFirstTask>
	 exit error function to prevent compiler warnings about a static function
	 not being called in the case that the application writer overrides this
	 functionality by defining configTASK_RETURN_ADDRESS.  Call
	 vTaskSwitchContext() so link time optimisation does not remove the
	 symbol. */
	vTaskSwitchContext();
 8004766:	f7ff f8b3 	bl	80038d0 <vTaskSwitchContext>
	prvTaskExitError();
 800476a:	f7ff ff25 	bl	80045b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	e000ed00 	.word	0xe000ed00
 800477c:	410fc271 	.word	0x410fc271
 8004780:	410fc270 	.word	0x410fc270
 8004784:	e000e400 	.word	0xe000e400
 8004788:	20000178 	.word	0x20000178
 800478c:	2000017c 	.word	0x2000017c
 8004790:	e000ed20 	.word	0xe000ed20
 8004794:	20000010 	.word	0x20000010
 8004798:	e000ef34 	.word	0xe000ef34

0800479c <vPortEnterCritical>:
	 Artificially force an assert. */
	configASSERT(uxCriticalNesting == 1000UL);
}
/*-----------------------------------------------------------*/

void vPortEnterCritical(void) {
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80047b4:	4b0e      	ldr	r3, [pc, #56]	; (80047f0 <vPortEnterCritical+0x54>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3301      	adds	r3, #1
 80047ba:	4a0d      	ldr	r2, [pc, #52]	; (80047f0 <vPortEnterCritical+0x54>)
 80047bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	 assert() if it is being called from an interrupt context.  Only API
	 functions that end in "FromISR" can be used in an interrupt.  Only assert if
	 the critical nesting count is 1 to protect against recursive calls if the
	 assert function also uses a critical section. */
	if (uxCriticalNesting == 1) {
 80047be:	4b0c      	ldr	r3, [pc, #48]	; (80047f0 <vPortEnterCritical+0x54>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d10e      	bne.n	80047e4 <vPortEnterCritical+0x48>
		configASSERT(( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0);
 80047c6:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <vPortEnterCritical+0x58>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d009      	beq.n	80047e4 <vPortEnterCritical+0x48>
 80047d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	603b      	str	r3, [r7, #0]
 80047e2:	e7fe      	b.n	80047e2 <vPortEnterCritical+0x46>
	}
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	20000010 	.word	0x20000010
 80047f4:	e000ed04 	.word	0xe000ed04

080047f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical(void) {
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
	configASSERT(uxCriticalNesting);
 80047fe:	4b11      	ldr	r3, [pc, #68]	; (8004844 <vPortExitCritical+0x4c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d109      	bne.n	800481a <vPortExitCritical+0x22>
 8004806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	607b      	str	r3, [r7, #4]
 8004818:	e7fe      	b.n	8004818 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800481a:	4b0a      	ldr	r3, [pc, #40]	; (8004844 <vPortExitCritical+0x4c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3b01      	subs	r3, #1
 8004820:	4a08      	ldr	r2, [pc, #32]	; (8004844 <vPortExitCritical+0x4c>)
 8004822:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
 8004824:	4b07      	ldr	r3, [pc, #28]	; (8004844 <vPortExitCritical+0x4c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d104      	bne.n	8004836 <vPortExitCritical+0x3e>
 800482c:	2300      	movs	r3, #0
 800482e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	f383 8811 	msr	BASEPRI, r3
		portENABLE_INTERRUPTS();
	}
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	20000010 	.word	0x20000010
	...

08004850 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void xPortPendSVHandler(void) {
	/* This is a naked function. */

	__asm volatile
 8004850:	f3ef 8009 	mrs	r0, PSP
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	4b15      	ldr	r3, [pc, #84]	; (80048b0 <pxCurrentTCBConst>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	f01e 0f10 	tst.w	lr, #16
 8004860:	bf08      	it	eq
 8004862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800486a:	6010      	str	r0, [r2, #0]
 800486c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004870:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004874:	f380 8811 	msr	BASEPRI, r0
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f7ff f826 	bl	80038d0 <vTaskSwitchContext>
 8004884:	f04f 0000 	mov.w	r0, #0
 8004888:	f380 8811 	msr	BASEPRI, r0
 800488c:	bc09      	pop	{r0, r3}
 800488e:	6819      	ldr	r1, [r3, #0]
 8004890:	6808      	ldr	r0, [r1, #0]
 8004892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004896:	f01e 0f10 	tst.w	lr, #16
 800489a:	bf08      	it	eq
 800489c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048a0:	f380 8809 	msr	PSP, r0
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	f3af 8000 	nop.w

080048b0 <pxCurrentTCBConst>:
 80048b0:	20000038 	.word	0x20000038
			"										\n"
			"	.align 4							\n"
			"pxCurrentTCBConst: .word pxCurrentTCB	\n"
			::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop

080048b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler(void) {
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
	__asm volatile
 80048be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c2:	f383 8811 	msr	BASEPRI, r3
 80048c6:	f3bf 8f6f 	isb	sy
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	607b      	str	r3, [r7, #4]
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	 executes all interrupts must be unmasked.  There is therefore no need to
	 save and then restore the interrupt mask value as its value is already
	 known. */
	portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80048d0:	f001 fc9a 	bl	8006208 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if (xTaskIncrementTick() != pdFALSE) {
 80048d4:	f7fe ff40 	bl	8003758 <xTaskIncrementTick>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d006      	beq.n	80048ec <SysTick_Handler+0x34>
			traceISR_EXIT_TO_SCHEDULER();
 80048de:	f001 fcf1 	bl	80062c4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			 the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80048e2:	4b08      	ldr	r3, [pc, #32]	; (8004904 <SysTick_Handler+0x4c>)
 80048e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	e001      	b.n	80048f0 <SysTick_Handler+0x38>
		} else {
			traceISR_EXIT();
 80048ec:	f001 fcce 	bl	800628c <SEGGER_SYSVIEW_RecordExitISR>
 80048f0:	2300      	movs	r3, #0
 80048f2:	603b      	str	r3, [r7, #0]
	__asm volatile
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80048fa:	bf00      	nop
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	e000ed04 	.word	0xe000ed04

08004908 <vPortSetupTimerInterrupt>:

/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt(void) {
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800490c:	4b0b      	ldr	r3, [pc, #44]	; (800493c <vPortSetupTimerInterrupt+0x34>)
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004912:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <vPortSetupTimerInterrupt+0x38>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ)
 8004918:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <vPortSetupTimerInterrupt+0x3c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a0a      	ldr	r2, [pc, #40]	; (8004948 <vPortSetupTimerInterrupt+0x40>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	099b      	lsrs	r3, r3, #6
 8004924:	4a09      	ldr	r2, [pc, #36]	; (800494c <vPortSetupTimerInterrupt+0x44>)
			- 1UL;
 8004926:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ)
 8004928:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT
 800492a:	4b04      	ldr	r3, [pc, #16]	; (800493c <vPortSetupTimerInterrupt+0x34>)
 800492c:	2207      	movs	r2, #7
 800492e:	601a      	str	r2, [r3, #0]
			| portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
}
 8004930:	bf00      	nop
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	e000e010 	.word	0xe000e010
 8004940:	e000e018 	.word	0xe000e018
 8004944:	20000004 	.word	0x20000004
 8004948:	10624dd3 	.word	0x10624dd3
 800494c:	e000e014 	.word	0xe000e014

08004950 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void) {
	__asm volatile
 8004950:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004960 <vPortEnableVFP+0x10>
 8004954:	6801      	ldr	r1, [r0, #0]
 8004956:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800495a:	6001      	str	r1, [r0, #0]
 800495c:	4770      	bx	lr
			"								\n"
			"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
			"	str r1, [r0]				\n"
			"	bx r14						"
	);
}
 800495e:	bf00      	nop
 8004960:	e000ed88 	.word	0xe000ed88

08004964 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

void vPortValidateInterruptPriority(void) {
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800496a:	f3ef 8305 	mrs	r3, IPSR
 800496e:	60fb      	str	r3, [r7, #12]

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b0f      	cmp	r3, #15
 8004974:	d913      	bls.n	800499e <vPortValidateInterruptPriority+0x3a>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
 8004976:	4a16      	ldr	r2, [pc, #88]	; (80049d0 <vPortValidateInterruptPriority+0x6c>)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4413      	add	r3, r2
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	72fb      	strb	r3, [r7, #11]
		 interrupt entry is as fast and simple as possible.

		 The following links provide detailed information:
		 http://www.freertos.org/RTOS-Cortex-M3-M4.html
		 http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
 8004980:	4b14      	ldr	r3, [pc, #80]	; (80049d4 <vPortValidateInterruptPriority+0x70>)
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	7afa      	ldrb	r2, [r7, #11]
 8004986:	429a      	cmp	r2, r3
 8004988:	d209      	bcs.n	800499e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	607b      	str	r3, [r7, #4]
 800499c:	e7fe      	b.n	800499c <vPortValidateInterruptPriority+0x38>
	 configuration then the correct setting can be achieved on all Cortex-M
	 devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	 scheduler.  Note however that some vendor specific peripheral libraries
	 assume a non-zero priority group setting, in which cases using a value
	 of zero will result in unpredictable behaviour. */
	configASSERT(
 800499e:	4b0e      	ldr	r3, [pc, #56]	; (80049d8 <vPortValidateInterruptPriority+0x74>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049a6:	4b0d      	ldr	r3, [pc, #52]	; (80049dc <vPortValidateInterruptPriority+0x78>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d909      	bls.n	80049c2 <vPortValidateInterruptPriority+0x5e>
 80049ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	e7fe      	b.n	80049c0 <vPortValidateInterruptPriority+0x5c>
			( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue);
}
 80049c2:	bf00      	nop
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	e000e3f0 	.word	0xe000e3f0
 80049d4:	20000178 	.word	0x20000178
 80049d8:	e000ed0c 	.word	0xe000ed0c
 80049dc:	2000017c 	.word	0x2000017c

080049e0 <vSetVarulMaxPRIGROUPValue>:
//###########################################################
// Add function below in file port.c
//see https://forum.segger.com/index.php/Thread/6046-SOLVED-Systemview-stuck-in-configASSERT-with-FreeRTOS-STM32CubeMX/
#if( configASSERT_DEFINED == 1 )

void vSetVarulMaxPRIGROUPValue(void) {
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
	volatile uint8_t *const pucFirstUserPriorityRegister =
 80049e6:	4b1f      	ldr	r3, [pc, #124]	; (8004a64 <vSetVarulMaxPRIGROUPValue+0x84>)
 80049e8:	60fb      	str	r3, [r7, #12]
			(volatile uint8_t* const ) ( portNVIC_IP_REGISTERS_OFFSET_16
					+ portFIRST_USER_INTERRUPT_NUMBER);
	volatile uint8_t ucMaxPriorityValue;
	/* Determine the number of priority bits available.  First write to all
	 possible bits. */
	*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	22ff      	movs	r2, #255	; 0xff
 80049ee:	701a      	strb	r2, [r3, #0]
	/* Read the value back to see how many bits stuck. */
	ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	71fb      	strb	r3, [r7, #7]
	/* Calculate the maximum acceptable priority group value for the number
	 of bits read back. */
	ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80049f8:	4b1b      	ldr	r3, [pc, #108]	; (8004a68 <vSetVarulMaxPRIGROUPValue+0x88>)
 80049fa:	2207      	movs	r2, #7
 80049fc:	601a      	str	r2, [r3, #0]
	while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 80049fe:	e009      	b.n	8004a14 <vSetVarulMaxPRIGROUPValue+0x34>
		ulMaxPRIGROUPValue--;
 8004a00:	4b19      	ldr	r3, [pc, #100]	; (8004a68 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3b01      	subs	r3, #1
 8004a06:	4a18      	ldr	r2, [pc, #96]	; (8004a68 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004a08:	6013      	str	r3, [r2, #0]
		ucMaxPriorityValue <<= (uint8_t) 0x01;
 8004a0a:	79fb      	ldrb	r3, [r7, #7]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	71fb      	strb	r3, [r7, #7]
	while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 8004a14:	79fb      	ldrb	r3, [r7, #7]
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1c:	2b80      	cmp	r3, #128	; 0x80
 8004a1e:	d0ef      	beq.n	8004a00 <vSetVarulMaxPRIGROUPValue+0x20>
#ifdef configPRIO_BITS
	{
		/* Check the FreeRTOS configuration that defines the number of
		 priority bits matches the number of priority bits actually queried
		 from the hardware. */
		configASSERT(
 8004a20:	4b11      	ldr	r3, [pc, #68]	; (8004a68 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f1c3 0307 	rsb	r3, r3, #7
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d009      	beq.n	8004a40 <vSetVarulMaxPRIGROUPValue+0x60>
 8004a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a30:	f383 8811 	msr	BASEPRI, r3
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	60bb      	str	r3, [r7, #8]
 8004a3e:	e7fe      	b.n	8004a3e <vSetVarulMaxPRIGROUPValue+0x5e>
				( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS);
	}
#endif
	/* Shift the priority group value back to its position within the AIRCR
	 register. */
	ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a40:	4b09      	ldr	r3, [pc, #36]	; (8004a68 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	021b      	lsls	r3, r3, #8
 8004a46:	4a08      	ldr	r2, [pc, #32]	; (8004a68 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004a48:	6013      	str	r3, [r2, #0]
	ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a4a:	4b07      	ldr	r3, [pc, #28]	; (8004a68 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a52:	4a05      	ldr	r2, [pc, #20]	; (8004a68 <vSetVarulMaxPRIGROUPValue+0x88>)
 8004a54:	6013      	str	r3, [r2, #0]
}
 8004a56:	bf00      	nop
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	e000e400 	.word	0xe000e400
 8004a68:	2000017c 	.word	0x2000017c

08004a6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b08a      	sub	sp, #40	; 0x28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a74:	2300      	movs	r3, #0
 8004a76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a78:	f7fe fd9e 	bl	80035b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a7c:	4b57      	ldr	r3, [pc, #348]	; (8004bdc <pvPortMalloc+0x170>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a84:	f000 f90c 	bl	8004ca0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a88:	4b55      	ldr	r3, [pc, #340]	; (8004be0 <pvPortMalloc+0x174>)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f040 808c 	bne.w	8004bae <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d01c      	beq.n	8004ad6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004a9c:	2208      	movs	r2, #8
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d013      	beq.n	8004ad6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f023 0307 	bic.w	r3, r3, #7
 8004ab4:	3308      	adds	r3, #8
 8004ab6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d009      	beq.n	8004ad6 <pvPortMalloc+0x6a>
 8004ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac6:	f383 8811 	msr	BASEPRI, r3
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	e7fe      	b.n	8004ad4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d068      	beq.n	8004bae <pvPortMalloc+0x142>
 8004adc:	4b41      	ldr	r3, [pc, #260]	; (8004be4 <pvPortMalloc+0x178>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d863      	bhi.n	8004bae <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ae6:	4b40      	ldr	r3, [pc, #256]	; (8004be8 <pvPortMalloc+0x17c>)
 8004ae8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004aea:	4b3f      	ldr	r3, [pc, #252]	; (8004be8 <pvPortMalloc+0x17c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004af0:	e004      	b.n	8004afc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d903      	bls.n	8004b0e <pvPortMalloc+0xa2>
 8004b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1f1      	bne.n	8004af2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b0e:	4b33      	ldr	r3, [pc, #204]	; (8004bdc <pvPortMalloc+0x170>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d04a      	beq.n	8004bae <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2208      	movs	r2, #8
 8004b1e:	4413      	add	r3, r2
 8004b20:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	1ad2      	subs	r2, r2, r3
 8004b32:	2308      	movs	r3, #8
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d91e      	bls.n	8004b78 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4413      	add	r3, r2
 8004b40:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d009      	beq.n	8004b60 <pvPortMalloc+0xf4>
 8004b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	e7fe      	b.n	8004b5e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	1ad2      	subs	r2, r2, r3
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b72:	69b8      	ldr	r0, [r7, #24]
 8004b74:	f000 f8f6 	bl	8004d64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b78:	4b1a      	ldr	r3, [pc, #104]	; (8004be4 <pvPortMalloc+0x178>)
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	4a18      	ldr	r2, [pc, #96]	; (8004be4 <pvPortMalloc+0x178>)
 8004b84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b86:	4b17      	ldr	r3, [pc, #92]	; (8004be4 <pvPortMalloc+0x178>)
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	4b18      	ldr	r3, [pc, #96]	; (8004bec <pvPortMalloc+0x180>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d203      	bcs.n	8004b9a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b92:	4b14      	ldr	r3, [pc, #80]	; (8004be4 <pvPortMalloc+0x178>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a15      	ldr	r2, [pc, #84]	; (8004bec <pvPortMalloc+0x180>)
 8004b98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	4b10      	ldr	r3, [pc, #64]	; (8004be0 <pvPortMalloc+0x174>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004bae:	f7fe fd11 	bl	80035d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d009      	beq.n	8004bd0 <pvPortMalloc+0x164>
 8004bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc0:	f383 8811 	msr	BASEPRI, r3
 8004bc4:	f3bf 8f6f 	isb	sy
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	e7fe      	b.n	8004bce <pvPortMalloc+0x162>
	return pvReturn;
 8004bd0:	69fb      	ldr	r3, [r7, #28]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3728      	adds	r7, #40	; 0x28
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20012d88 	.word	0x20012d88
 8004be0:	20012d94 	.word	0x20012d94
 8004be4:	20012d8c 	.word	0x20012d8c
 8004be8:	20012d80 	.word	0x20012d80
 8004bec:	20012d90 	.word	0x20012d90

08004bf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d046      	beq.n	8004c90 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c02:	2308      	movs	r3, #8
 8004c04:	425b      	negs	r3, r3
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4413      	add	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	4b20      	ldr	r3, [pc, #128]	; (8004c98 <vPortFree+0xa8>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d109      	bne.n	8004c32 <vPortFree+0x42>
 8004c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	e7fe      	b.n	8004c30 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d009      	beq.n	8004c4e <vPortFree+0x5e>
 8004c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	60bb      	str	r3, [r7, #8]
 8004c4c:	e7fe      	b.n	8004c4c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	4b11      	ldr	r3, [pc, #68]	; (8004c98 <vPortFree+0xa8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4013      	ands	r3, r2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d019      	beq.n	8004c90 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d115      	bne.n	8004c90 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	4b0b      	ldr	r3, [pc, #44]	; (8004c98 <vPortFree+0xa8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	43db      	mvns	r3, r3
 8004c6e:	401a      	ands	r2, r3
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c74:	f7fe fca0 	bl	80035b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	4b07      	ldr	r3, [pc, #28]	; (8004c9c <vPortFree+0xac>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4413      	add	r3, r2
 8004c82:	4a06      	ldr	r2, [pc, #24]	; (8004c9c <vPortFree+0xac>)
 8004c84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c86:	6938      	ldr	r0, [r7, #16]
 8004c88:	f000 f86c 	bl	8004d64 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004c8c:	f7fe fca2 	bl	80035d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c90:	bf00      	nop
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	20012d94 	.word	0x20012d94
 8004c9c:	20012d8c 	.word	0x20012d8c

08004ca0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ca6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004caa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004cac:	4b27      	ldr	r3, [pc, #156]	; (8004d4c <prvHeapInit+0xac>)
 8004cae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00c      	beq.n	8004cd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	3307      	adds	r3, #7
 8004cbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f023 0307 	bic.w	r3, r3, #7
 8004cc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	4a1f      	ldr	r2, [pc, #124]	; (8004d4c <prvHeapInit+0xac>)
 8004cd0:	4413      	add	r3, r2
 8004cd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004cd8:	4a1d      	ldr	r2, [pc, #116]	; (8004d50 <prvHeapInit+0xb0>)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cde:	4b1c      	ldr	r3, [pc, #112]	; (8004d50 <prvHeapInit+0xb0>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	4413      	add	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004cec:	2208      	movs	r2, #8
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	1a9b      	subs	r3, r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f023 0307 	bic.w	r3, r3, #7
 8004cfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4a15      	ldr	r2, [pc, #84]	; (8004d54 <prvHeapInit+0xb4>)
 8004d00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d02:	4b14      	ldr	r3, [pc, #80]	; (8004d54 <prvHeapInit+0xb4>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2200      	movs	r2, #0
 8004d08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d0a:	4b12      	ldr	r3, [pc, #72]	; (8004d54 <prvHeapInit+0xb4>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	1ad2      	subs	r2, r2, r3
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d20:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <prvHeapInit+0xb4>)
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	4a0a      	ldr	r2, [pc, #40]	; (8004d58 <prvHeapInit+0xb8>)
 8004d2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	4a09      	ldr	r2, [pc, #36]	; (8004d5c <prvHeapInit+0xbc>)
 8004d36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d38:	4b09      	ldr	r3, [pc, #36]	; (8004d60 <prvHeapInit+0xc0>)
 8004d3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d3e:	601a      	str	r2, [r3, #0]
}
 8004d40:	bf00      	nop
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	20000180 	.word	0x20000180
 8004d50:	20012d80 	.word	0x20012d80
 8004d54:	20012d88 	.word	0x20012d88
 8004d58:	20012d90 	.word	0x20012d90
 8004d5c:	20012d8c 	.word	0x20012d8c
 8004d60:	20012d94 	.word	0x20012d94

08004d64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d6c:	4b28      	ldr	r3, [pc, #160]	; (8004e10 <prvInsertBlockIntoFreeList+0xac>)
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	e002      	b.n	8004d78 <prvInsertBlockIntoFreeList+0x14>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d8f7      	bhi.n	8004d72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d108      	bne.n	8004da6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	441a      	add	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	441a      	add	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d118      	bne.n	8004dec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	4b15      	ldr	r3, [pc, #84]	; (8004e14 <prvInsertBlockIntoFreeList+0xb0>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d00d      	beq.n	8004de2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	441a      	add	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	e008      	b.n	8004df4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004de2:	4b0c      	ldr	r3, [pc, #48]	; (8004e14 <prvInsertBlockIntoFreeList+0xb0>)
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	e003      	b.n	8004df4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d002      	beq.n	8004e02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e02:	bf00      	nop
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	20012d80 	.word	0x20012d80
 8004e14:	20012d88 	.word	0x20012d88

08004e18 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004e1c:	4803      	ldr	r0, [pc, #12]	; (8004e2c <_cbSendSystemDesc+0x14>)
 8004e1e:	f001 f99f 	bl	8006160 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004e22:	4803      	ldr	r0, [pc, #12]	; (8004e30 <_cbSendSystemDesc+0x18>)
 8004e24:	f001 f99c 	bl	8006160 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004e28:	bf00      	nop
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	08006930 	.word	0x08006930
 8004e30:	08006974 	.word	0x08006974

08004e34 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004e38:	4b06      	ldr	r3, [pc, #24]	; (8004e54 <SEGGER_SYSVIEW_Conf+0x20>)
 8004e3a:	6818      	ldr	r0, [r3, #0]
 8004e3c:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <SEGGER_SYSVIEW_Conf+0x20>)
 8004e3e:	6819      	ldr	r1, [r3, #0]
 8004e40:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <SEGGER_SYSVIEW_Conf+0x24>)
 8004e42:	4a06      	ldr	r2, [pc, #24]	; (8004e5c <SEGGER_SYSVIEW_Conf+0x28>)
 8004e44:	f000 fd0a 	bl	800585c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004e48:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8004e4c:	f000 fd4a 	bl	80058e4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004e50:	bf00      	nop
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	20000004 	.word	0x20000004
 8004e58:	08004e19 	.word	0x08004e19
 8004e5c:	08006a14 	.word	0x08006a14

08004e60 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004e66:	2300      	movs	r3, #0
 8004e68:	607b      	str	r3, [r7, #4]
 8004e6a:	e034      	b.n	8004ed6 <_cbSendTaskList+0x76>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004e6c:	491e      	ldr	r1, [pc, #120]	; (8004ee8 <_cbSendTaskList+0x88>)
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	4613      	mov	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	440b      	add	r3, r1
 8004e7a:	6818      	ldr	r0, [r3, #0]
 8004e7c:	491a      	ldr	r1, [pc, #104]	; (8004ee8 <_cbSendTaskList+0x88>)
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	4613      	mov	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	440b      	add	r3, r1
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	681c      	ldr	r4, [r3, #0]
 8004e8e:	4916      	ldr	r1, [pc, #88]	; (8004ee8 <_cbSendTaskList+0x88>)
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	4613      	mov	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	3308      	adds	r3, #8
 8004e9e:	681d      	ldr	r5, [r3, #0]
 8004ea0:	4911      	ldr	r1, [pc, #68]	; (8004ee8 <_cbSendTaskList+0x88>)
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	440b      	add	r3, r1
 8004eae:	330c      	adds	r3, #12
 8004eb0:	681e      	ldr	r6, [r3, #0]
 8004eb2:	490d      	ldr	r1, [pc, #52]	; (8004ee8 <_cbSendTaskList+0x88>)
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	3310      	adds	r3, #16
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	4633      	mov	r3, r6
 8004ec8:	462a      	mov	r2, r5
 8004eca:	4621      	mov	r1, r4
 8004ecc:	f000 f8b4 	bl	8005038 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	607b      	str	r3, [r7, #4]
 8004ed6:	4b05      	ldr	r3, [pc, #20]	; (8004eec <_cbSendTaskList+0x8c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d3c5      	bcc.n	8004e6c <_cbSendTaskList+0xc>
  }
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ee8:	20012d98 	.word	0x20012d98
 8004eec:	20012e38 	.word	0x20012e38

08004ef0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004ef6:	f7fe fc1d 	bl	8003734 <xTaskGetTickCountFromISR>
 8004efa:	4603      	mov	r3, r0
 8004efc:	f04f 0400 	mov.w	r4, #0
 8004f00:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004f04:	e9d7 5600 	ldrd	r5, r6, [r7]
 8004f08:	462b      	mov	r3, r5
 8004f0a:	4634      	mov	r4, r6
 8004f0c:	f04f 0100 	mov.w	r1, #0
 8004f10:	f04f 0200 	mov.w	r2, #0
 8004f14:	0162      	lsls	r2, r4, #5
 8004f16:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8004f1a:	0159      	lsls	r1, r3, #5
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	4614      	mov	r4, r2
 8004f20:	1b5b      	subs	r3, r3, r5
 8004f22:	eb64 0406 	sbc.w	r4, r4, r6
 8004f26:	f04f 0100 	mov.w	r1, #0
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	00a2      	lsls	r2, r4, #2
 8004f30:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8004f34:	0099      	lsls	r1, r3, #2
 8004f36:	460b      	mov	r3, r1
 8004f38:	4614      	mov	r4, r2
 8004f3a:	195b      	adds	r3, r3, r5
 8004f3c:	eb44 0406 	adc.w	r4, r4, r6
 8004f40:	f04f 0100 	mov.w	r1, #0
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	00e2      	lsls	r2, r4, #3
 8004f4a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f4e:	00d9      	lsls	r1, r3, #3
 8004f50:	460b      	mov	r3, r1
 8004f52:	4614      	mov	r4, r2
 8004f54:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8004f58:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	4621      	mov	r1, r4
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004f68 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af02      	add	r7, sp, #8
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
 8004f74:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004f76:	2205      	movs	r2, #5
 8004f78:	492b      	ldr	r1, [pc, #172]	; (8005028 <SYSVIEW_AddTask+0xc0>)
 8004f7a:	68b8      	ldr	r0, [r7, #8]
 8004f7c:	f001 fc6c 	bl	8006858 <memcmp>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d04b      	beq.n	800501e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004f86:	4b29      	ldr	r3, [pc, #164]	; (800502c <SYSVIEW_AddTask+0xc4>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2b07      	cmp	r3, #7
 8004f8c:	d903      	bls.n	8004f96 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004f8e:	4828      	ldr	r0, [pc, #160]	; (8005030 <SYSVIEW_AddTask+0xc8>)
 8004f90:	f001 fbe2 	bl	8006758 <SEGGER_SYSVIEW_Warn>
    return;
 8004f94:	e044      	b.n	8005020 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004f96:	4b25      	ldr	r3, [pc, #148]	; (800502c <SYSVIEW_AddTask+0xc4>)
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	4926      	ldr	r1, [pc, #152]	; (8005034 <SYSVIEW_AddTask+0xcc>)
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004faa:	4b20      	ldr	r3, [pc, #128]	; (800502c <SYSVIEW_AddTask+0xc4>)
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	4921      	ldr	r1, [pc, #132]	; (8005034 <SYSVIEW_AddTask+0xcc>)
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	3304      	adds	r3, #4
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004fc0:	4b1a      	ldr	r3, [pc, #104]	; (800502c <SYSVIEW_AddTask+0xc4>)
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	491b      	ldr	r1, [pc, #108]	; (8005034 <SYSVIEW_AddTask+0xcc>)
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	440b      	add	r3, r1
 8004fd0:	3308      	adds	r3, #8
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004fd6:	4b15      	ldr	r3, [pc, #84]	; (800502c <SYSVIEW_AddTask+0xc4>)
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	4916      	ldr	r1, [pc, #88]	; (8005034 <SYSVIEW_AddTask+0xcc>)
 8004fdc:	4613      	mov	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	330c      	adds	r3, #12
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004fec:	4b0f      	ldr	r3, [pc, #60]	; (800502c <SYSVIEW_AddTask+0xc4>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	4910      	ldr	r1, [pc, #64]	; (8005034 <SYSVIEW_AddTask+0xcc>)
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	440b      	add	r3, r1
 8004ffc:	3310      	adds	r3, #16
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8005002:	4b0a      	ldr	r3, [pc, #40]	; (800502c <SYSVIEW_AddTask+0xc4>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	3301      	adds	r3, #1
 8005008:	4a08      	ldr	r2, [pc, #32]	; (800502c <SYSVIEW_AddTask+0xc4>)
 800500a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 f80e 	bl	8005038 <SYSVIEW_SendTaskInfo>
 800501c:	e000      	b.n	8005020 <SYSVIEW_AddTask+0xb8>
    return;
 800501e:	bf00      	nop

}
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	08006984 	.word	0x08006984
 800502c:	20012e38 	.word	0x20012e38
 8005030:	0800698c 	.word	0x0800698c
 8005034:	20012d98 	.word	0x20012d98

08005038 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005038:	b580      	push	{r7, lr}
 800503a:	b08a      	sub	sp, #40	; 0x28
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
 8005044:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005046:	f107 0314 	add.w	r3, r7, #20
 800504a:	2214      	movs	r2, #20
 800504c:	2100      	movs	r1, #0
 800504e:	4618      	mov	r0, r3
 8005050:	f001 fc1c 	bl	800688c <memset>
  TaskInfo.TaskID     = TaskID;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005066:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005068:	f107 0314 	add.w	r3, r7, #20
 800506c:	4618      	mov	r0, r3
 800506e:	f000 ff7f 	bl	8005f70 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005072:	bf00      	nop
 8005074:	3728      	adds	r7, #40	; 0x28
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
	...

0800507c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005082:	4b24      	ldr	r3, [pc, #144]	; (8005114 <_DoInit+0x98>)
 8005084:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2203      	movs	r2, #3
 800508a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2203      	movs	r2, #3
 8005090:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a20      	ldr	r2, [pc, #128]	; (8005118 <_DoInit+0x9c>)
 8005096:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a20      	ldr	r2, [pc, #128]	; (800511c <_DoInit+0xa0>)
 800509c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050a4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a17      	ldr	r2, [pc, #92]	; (8005118 <_DoInit+0x9c>)
 80050bc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a17      	ldr	r2, [pc, #92]	; (8005120 <_DoInit+0xa4>)
 80050c2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2210      	movs	r2, #16
 80050c8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	3307      	adds	r3, #7
 80050e0:	4a10      	ldr	r2, [pc, #64]	; (8005124 <_DoInit+0xa8>)
 80050e2:	6810      	ldr	r0, [r2, #0]
 80050e4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80050e6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a0e      	ldr	r2, [pc, #56]	; (8005128 <_DoInit+0xac>)
 80050ee:	6810      	ldr	r0, [r2, #0]
 80050f0:	6018      	str	r0, [r3, #0]
 80050f2:	8891      	ldrh	r1, [r2, #4]
 80050f4:	7992      	ldrb	r2, [r2, #6]
 80050f6:	8099      	strh	r1, [r3, #4]
 80050f8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80050fa:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2220      	movs	r2, #32
 8005102:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005104:	f3bf 8f5f 	dmb	sy
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	2001382c 	.word	0x2001382c
 8005118:	080069dc 	.word	0x080069dc
 800511c:	20012e3c 	.word	0x20012e3c
 8005120:	2001323c 	.word	0x2001323c
 8005124:	080069e8 	.word	0x080069e8
 8005128:	080069ec 	.word	0x080069ec

0800512c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800512c:	b580      	push	{r7, lr}
 800512e:	b08c      	sub	sp, #48	; 0x30
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005138:	4b3e      	ldr	r3, [pc, #248]	; (8005234 <SEGGER_RTT_ReadNoLock+0x108>)
 800513a:	623b      	str	r3, [r7, #32]
 800513c:	6a3b      	ldr	r3, [r7, #32]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <SEGGER_RTT_ReadNoLock+0x1e>
 8005146:	f7ff ff99 	bl	800507c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	4613      	mov	r3, r2
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	4413      	add	r3, r2
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	3360      	adds	r3, #96	; 0x60
 8005156:	4a37      	ldr	r2, [pc, #220]	; (8005234 <SEGGER_RTT_ReadNoLock+0x108>)
 8005158:	4413      	add	r3, r2
 800515a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800516c:	2300      	movs	r3, #0
 800516e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005170:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	429a      	cmp	r2, r3
 8005176:	d92b      	bls.n	80051d0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4293      	cmp	r3, r2
 8005188:	bf28      	it	cs
 800518a:	4613      	movcs	r3, r2
 800518c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	4413      	add	r3, r2
 8005196:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	6939      	ldr	r1, [r7, #16]
 800519c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800519e:	f001 fb6a 	bl	8006876 <memcpy>
    NumBytesRead += NumBytesRem;
 80051a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	4413      	add	r3, r2
 80051a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80051aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	4413      	add	r3, r2
 80051b0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80051ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	4413      	add	r3, r2
 80051c0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d101      	bne.n	80051d0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80051cc:	2300      	movs	r3, #0
 80051ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80051d8:	697a      	ldr	r2, [r7, #20]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4293      	cmp	r3, r2
 80051de:	bf28      	it	cs
 80051e0:	4613      	movcs	r3, r2
 80051e2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d019      	beq.n	800521e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f0:	4413      	add	r3, r2
 80051f2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	6939      	ldr	r1, [r7, #16]
 80051f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80051fa:	f001 fb3c 	bl	8006876 <memcpy>
    NumBytesRead += NumBytesRem;
 80051fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	4413      	add	r3, r2
 8005204:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	4413      	add	r3, r2
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005216:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	4413      	add	r3, r2
 800521c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800521e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005220:	2b00      	cmp	r3, #0
 8005222:	d002      	beq.n	800522a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005228:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800522a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800522c:	4618      	mov	r0, r3
 800522e:	3730      	adds	r7, #48	; 0x30
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	2001382c 	.word	0x2001382c

08005238 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005238:	b580      	push	{r7, lr}
 800523a:	b088      	sub	sp, #32
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
 8005244:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005246:	4b3d      	ldr	r3, [pc, #244]	; (800533c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005248:	61bb      	str	r3, [r7, #24]
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d101      	bne.n	8005258 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005254:	f7ff ff12 	bl	800507c <_DoInit>
  SEGGER_RTT_LOCK();
 8005258:	f3ef 8311 	mrs	r3, BASEPRI
 800525c:	f04f 0120 	mov.w	r1, #32
 8005260:	f381 8811 	msr	BASEPRI, r1
 8005264:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005266:	4b35      	ldr	r3, [pc, #212]	; (800533c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005268:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800526a:	2300      	movs	r3, #0
 800526c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800526e:	6939      	ldr	r1, [r7, #16]
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	4613      	mov	r3, r2
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	4413      	add	r3, r2
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	440b      	add	r3, r1
 800527e:	3304      	adds	r3, #4
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d008      	beq.n	8005298 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	3301      	adds	r3, #1
 800528a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	69fa      	ldr	r2, [r7, #28]
 8005292:	429a      	cmp	r2, r3
 8005294:	dbeb      	blt.n	800526e <SEGGER_RTT_AllocUpBuffer+0x36>
 8005296:	e000      	b.n	800529a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005298:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	69fa      	ldr	r2, [r7, #28]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	da3f      	bge.n	8005324 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80052a4:	6939      	ldr	r1, [r7, #16]
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	4613      	mov	r3, r2
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	4413      	add	r3, r2
 80052b0:	00db      	lsls	r3, r3, #3
 80052b2:	440b      	add	r3, r1
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80052b8:	6939      	ldr	r1, [r7, #16]
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	4613      	mov	r3, r2
 80052c0:	005b      	lsls	r3, r3, #1
 80052c2:	4413      	add	r3, r2
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	440b      	add	r3, r1
 80052c8:	3304      	adds	r3, #4
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80052ce:	6939      	ldr	r1, [r7, #16]
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	4613      	mov	r3, r2
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	4413      	add	r3, r2
 80052d8:	00db      	lsls	r3, r3, #3
 80052da:	440b      	add	r3, r1
 80052dc:	3320      	adds	r3, #32
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80052e2:	6939      	ldr	r1, [r7, #16]
 80052e4:	69fa      	ldr	r2, [r7, #28]
 80052e6:	4613      	mov	r3, r2
 80052e8:	005b      	lsls	r3, r3, #1
 80052ea:	4413      	add	r3, r2
 80052ec:	00db      	lsls	r3, r3, #3
 80052ee:	440b      	add	r3, r1
 80052f0:	3328      	adds	r3, #40	; 0x28
 80052f2:	2200      	movs	r2, #0
 80052f4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80052f6:	6939      	ldr	r1, [r7, #16]
 80052f8:	69fa      	ldr	r2, [r7, #28]
 80052fa:	4613      	mov	r3, r2
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	4413      	add	r3, r2
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	440b      	add	r3, r1
 8005304:	3324      	adds	r3, #36	; 0x24
 8005306:	2200      	movs	r2, #0
 8005308:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800530a:	6939      	ldr	r1, [r7, #16]
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	4613      	mov	r3, r2
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	4413      	add	r3, r2
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	440b      	add	r3, r1
 8005318:	332c      	adds	r3, #44	; 0x2c
 800531a:	683a      	ldr	r2, [r7, #0]
 800531c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800531e:	f3bf 8f5f 	dmb	sy
 8005322:	e002      	b.n	800532a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005324:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005328:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005330:	69fb      	ldr	r3, [r7, #28]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3720      	adds	r7, #32
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	2001382c 	.word	0x2001382c

08005340 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005340:	b580      	push	{r7, lr}
 8005342:	b088      	sub	sp, #32
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800534e:	4b33      	ldr	r3, [pc, #204]	; (800541c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005350:	61bb      	str	r3, [r7, #24]
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800535c:	f7ff fe8e 	bl	800507c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005360:	4b2e      	ldr	r3, [pc, #184]	; (800541c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005362:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	461a      	mov	r2, r3
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4293      	cmp	r3, r2
 800536e:	d24d      	bcs.n	800540c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005370:	f3ef 8311 	mrs	r3, BASEPRI
 8005374:	f04f 0120 	mov.w	r1, #32
 8005378:	f381 8811 	msr	BASEPRI, r1
 800537c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d031      	beq.n	80053e8 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005384:	6979      	ldr	r1, [r7, #20]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4613      	mov	r3, r2
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	4413      	add	r3, r2
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	440b      	add	r3, r1
 8005392:	3360      	adds	r3, #96	; 0x60
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005398:	6979      	ldr	r1, [r7, #20]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	4613      	mov	r3, r2
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	4413      	add	r3, r2
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	440b      	add	r3, r1
 80053a6:	3364      	adds	r3, #100	; 0x64
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80053ac:	6979      	ldr	r1, [r7, #20]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4613      	mov	r3, r2
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	4413      	add	r3, r2
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	440b      	add	r3, r1
 80053ba:	3368      	adds	r3, #104	; 0x68
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80053c0:	6979      	ldr	r1, [r7, #20]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	4613      	mov	r3, r2
 80053c6:	005b      	lsls	r3, r3, #1
 80053c8:	4413      	add	r3, r2
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	440b      	add	r3, r1
 80053ce:	3370      	adds	r3, #112	; 0x70
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80053d4:	6979      	ldr	r1, [r7, #20]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4613      	mov	r3, r2
 80053da:	005b      	lsls	r3, r3, #1
 80053dc:	4413      	add	r3, r2
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	440b      	add	r3, r1
 80053e2:	336c      	adds	r3, #108	; 0x6c
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80053e8:	6979      	ldr	r1, [r7, #20]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	4613      	mov	r3, r2
 80053ee:	005b      	lsls	r3, r3, #1
 80053f0:	4413      	add	r3, r2
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	440b      	add	r3, r1
 80053f6:	3374      	adds	r3, #116	; 0x74
 80053f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053fa:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80053fc:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005406:	2300      	movs	r3, #0
 8005408:	61fb      	str	r3, [r7, #28]
 800540a:	e002      	b.n	8005412 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 800540c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005410:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005412:	69fb      	ldr	r3, [r7, #28]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3720      	adds	r7, #32
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	2001382c 	.word	0x2001382c

08005420 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005420:	b480      	push	{r7}
 8005422:	b087      	sub	sp, #28
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800542c:	2300      	movs	r3, #0
 800542e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005430:	e002      	b.n	8005438 <_EncodeStr+0x18>
    Len++;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	3301      	adds	r3, #1
 8005436:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	4413      	add	r3, r2
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1f6      	bne.n	8005432 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	429a      	cmp	r2, r3
 800544a:	d901      	bls.n	8005450 <_EncodeStr+0x30>
    Len = Limit;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	2bfe      	cmp	r3, #254	; 0xfe
 8005454:	d806      	bhi.n	8005464 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	1c5a      	adds	r2, r3, #1
 800545a:	60fa      	str	r2, [r7, #12]
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	b2d2      	uxtb	r2, r2
 8005460:	701a      	strb	r2, [r3, #0]
 8005462:	e011      	b.n	8005488 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	60fa      	str	r2, [r7, #12]
 800546a:	22ff      	movs	r2, #255	; 0xff
 800546c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	1c5a      	adds	r2, r3, #1
 8005472:	60fa      	str	r2, [r7, #12]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	0a19      	lsrs	r1, r3, #8
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	60fa      	str	r2, [r7, #12]
 8005484:	b2ca      	uxtb	r2, r1
 8005486:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005488:	2300      	movs	r3, #0
 800548a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800548c:	e00a      	b.n	80054a4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	1c53      	adds	r3, r2, #1
 8005492:	60bb      	str	r3, [r7, #8]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	1c59      	adds	r1, r3, #1
 8005498:	60f9      	str	r1, [r7, #12]
 800549a:	7812      	ldrb	r2, [r2, #0]
 800549c:	701a      	strb	r2, [r3, #0]
    n++;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	3301      	adds	r3, #1
 80054a2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d3f0      	bcc.n	800548e <_EncodeStr+0x6e>
  }
  return pPayload;
 80054ac:	68fb      	ldr	r3, [r7, #12]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	371c      	adds	r7, #28
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	3304      	adds	r3, #4
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
	...

080054d4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80054da:	4b33      	ldr	r3, [pc, #204]	; (80055a8 <_HandleIncomingPacket+0xd4>)
 80054dc:	7e1b      	ldrb	r3, [r3, #24]
 80054de:	4618      	mov	r0, r3
 80054e0:	1cfb      	adds	r3, r7, #3
 80054e2:	2201      	movs	r2, #1
 80054e4:	4619      	mov	r1, r3
 80054e6:	f7ff fe21 	bl	800512c <SEGGER_RTT_ReadNoLock>
 80054ea:	4603      	mov	r3, r0
 80054ec:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	dd4d      	ble.n	8005590 <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 80054f4:	78fb      	ldrb	r3, [r7, #3]
 80054f6:	2b05      	cmp	r3, #5
 80054f8:	d022      	beq.n	8005540 <_HandleIncomingPacket+0x6c>
 80054fa:	2b05      	cmp	r3, #5
 80054fc:	dc0b      	bgt.n	8005516 <_HandleIncomingPacket+0x42>
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d015      	beq.n	800552e <_HandleIncomingPacket+0x5a>
 8005502:	2b02      	cmp	r3, #2
 8005504:	dc02      	bgt.n	800550c <_HandleIncomingPacket+0x38>
 8005506:	2b01      	cmp	r3, #1
 8005508:	d00e      	beq.n	8005528 <_HandleIncomingPacket+0x54>
 800550a:	e034      	b.n	8005576 <_HandleIncomingPacket+0xa2>
 800550c:	2b03      	cmp	r3, #3
 800550e:	d011      	beq.n	8005534 <_HandleIncomingPacket+0x60>
 8005510:	2b04      	cmp	r3, #4
 8005512:	d012      	beq.n	800553a <_HandleIncomingPacket+0x66>
 8005514:	e02f      	b.n	8005576 <_HandleIncomingPacket+0xa2>
 8005516:	2b07      	cmp	r3, #7
 8005518:	d018      	beq.n	800554c <_HandleIncomingPacket+0x78>
 800551a:	2b07      	cmp	r3, #7
 800551c:	db13      	blt.n	8005546 <_HandleIncomingPacket+0x72>
 800551e:	2b7f      	cmp	r3, #127	; 0x7f
 8005520:	d038      	beq.n	8005594 <_HandleIncomingPacket+0xc0>
 8005522:	2b80      	cmp	r3, #128	; 0x80
 8005524:	d015      	beq.n	8005552 <_HandleIncomingPacket+0x7e>
 8005526:	e026      	b.n	8005576 <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005528:	f000 fba8 	bl	8005c7c <SEGGER_SYSVIEW_Start>
      break;
 800552c:	e037      	b.n	800559e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800552e:	f000 fc5f 	bl	8005df0 <SEGGER_SYSVIEW_Stop>
      break;
 8005532:	e034      	b.n	800559e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005534:	f000 fe38 	bl	80061a8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005538:	e031      	b.n	800559e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800553a:	f000 fdfd 	bl	8006138 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800553e:	e02e      	b.n	800559e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005540:	f000 fc7c 	bl	8005e3c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005544:	e02b      	b.n	800559e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005546:	f001 f8c9 	bl	80066dc <SEGGER_SYSVIEW_SendNumModules>
      break;
 800554a:	e028      	b.n	800559e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800554c:	f001 f8a8 	bl	80066a0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005550:	e025      	b.n	800559e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005552:	4b15      	ldr	r3, [pc, #84]	; (80055a8 <_HandleIncomingPacket+0xd4>)
 8005554:	7e1b      	ldrb	r3, [r3, #24]
 8005556:	4618      	mov	r0, r3
 8005558:	1cfb      	adds	r3, r7, #3
 800555a:	2201      	movs	r2, #1
 800555c:	4619      	mov	r1, r3
 800555e:	f7ff fde5 	bl	800512c <SEGGER_RTT_ReadNoLock>
 8005562:	4603      	mov	r3, r0
 8005564:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	dd15      	ble.n	8005598 <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800556c:	78fb      	ldrb	r3, [r7, #3]
 800556e:	4618      	mov	r0, r3
 8005570:	f001 f816 	bl	80065a0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005574:	e010      	b.n	8005598 <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005576:	78fb      	ldrb	r3, [r7, #3]
 8005578:	b25b      	sxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	da0e      	bge.n	800559c <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800557e:	4b0a      	ldr	r3, [pc, #40]	; (80055a8 <_HandleIncomingPacket+0xd4>)
 8005580:	7e1b      	ldrb	r3, [r3, #24]
 8005582:	4618      	mov	r0, r3
 8005584:	1cfb      	adds	r3, r7, #3
 8005586:	2201      	movs	r2, #1
 8005588:	4619      	mov	r1, r3
 800558a:	f7ff fdcf 	bl	800512c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800558e:	e005      	b.n	800559c <_HandleIncomingPacket+0xc8>
    }
  }
 8005590:	bf00      	nop
 8005592:	e004      	b.n	800559e <_HandleIncomingPacket+0xca>
      break;
 8005594:	bf00      	nop
 8005596:	e002      	b.n	800559e <_HandleIncomingPacket+0xca>
      break;
 8005598:	bf00      	nop
 800559a:	e000      	b.n	800559e <_HandleIncomingPacket+0xca>
      break;
 800559c:	bf00      	nop
}
 800559e:	bf00      	nop
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20013654 	.word	0x20013654

080055ac <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b08c      	sub	sp, #48	; 0x30
 80055b0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80055b2:	2301      	movs	r3, #1
 80055b4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80055b6:	1d3b      	adds	r3, r7, #4
 80055b8:	3301      	adds	r3, #1
 80055ba:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055c0:	4b31      	ldr	r3, [pc, #196]	; (8005688 <_TrySendOverflowPacket+0xdc>)
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80055c6:	e00b      	b.n	80055e0 <_TrySendOverflowPacket+0x34>
 80055c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ce:	1c59      	adds	r1, r3, #1
 80055d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80055d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055d6:	b2d2      	uxtb	r2, r2
 80055d8:	701a      	strb	r2, [r3, #0]
 80055da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055dc:	09db      	lsrs	r3, r3, #7
 80055de:	62bb      	str	r3, [r7, #40]	; 0x28
 80055e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e2:	2b7f      	cmp	r3, #127	; 0x7f
 80055e4:	d8f0      	bhi.n	80055c8 <_TrySendOverflowPacket+0x1c>
 80055e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e8:	1c5a      	adds	r2, r3, #1
 80055ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055ee:	b2d2      	uxtb	r2, r2
 80055f0:	701a      	strb	r2, [r3, #0]
 80055f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80055f6:	4b25      	ldr	r3, [pc, #148]	; (800568c <_TrySendOverflowPacket+0xe0>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80055fc:	4b22      	ldr	r3, [pc, #136]	; (8005688 <_TrySendOverflowPacket+0xdc>)
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	627b      	str	r3, [r7, #36]	; 0x24
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	623b      	str	r3, [r7, #32]
 800560e:	e00b      	b.n	8005628 <_TrySendOverflowPacket+0x7c>
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	b2da      	uxtb	r2, r3
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	1c59      	adds	r1, r3, #1
 8005618:	6279      	str	r1, [r7, #36]	; 0x24
 800561a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800561e:	b2d2      	uxtb	r2, r2
 8005620:	701a      	strb	r2, [r3, #0]
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	09db      	lsrs	r3, r3, #7
 8005626:	623b      	str	r3, [r7, #32]
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	2b7f      	cmp	r3, #127	; 0x7f
 800562c:	d8f0      	bhi.n	8005610 <_TrySendOverflowPacket+0x64>
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	627a      	str	r2, [r7, #36]	; 0x24
 8005634:	6a3a      	ldr	r2, [r7, #32]
 8005636:	b2d2      	uxtb	r2, r2
 8005638:	701a      	strb	r2, [r3, #0]
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800563e:	4b12      	ldr	r3, [pc, #72]	; (8005688 <_TrySendOverflowPacket+0xdc>)
 8005640:	785b      	ldrb	r3, [r3, #1]
 8005642:	4618      	mov	r0, r3
 8005644:	69fa      	ldr	r2, [r7, #28]
 8005646:	1d3b      	adds	r3, r7, #4
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	461a      	mov	r2, r3
 800564c:	1d3b      	adds	r3, r7, #4
 800564e:	4619      	mov	r1, r3
 8005650:	f7fa fdc6 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005654:	4603      	mov	r3, r0
 8005656:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d009      	beq.n	8005672 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800565e:	4a0a      	ldr	r2, [pc, #40]	; (8005688 <_TrySendOverflowPacket+0xdc>)
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005664:	4b08      	ldr	r3, [pc, #32]	; (8005688 <_TrySendOverflowPacket+0xdc>)
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	3b01      	subs	r3, #1
 800566a:	b2da      	uxtb	r2, r3
 800566c:	4b06      	ldr	r3, [pc, #24]	; (8005688 <_TrySendOverflowPacket+0xdc>)
 800566e:	701a      	strb	r2, [r3, #0]
 8005670:	e004      	b.n	800567c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005672:	4b05      	ldr	r3, [pc, #20]	; (8005688 <_TrySendOverflowPacket+0xdc>)
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	3301      	adds	r3, #1
 8005678:	4a03      	ldr	r2, [pc, #12]	; (8005688 <_TrySendOverflowPacket+0xdc>)
 800567a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800567c:	693b      	ldr	r3, [r7, #16]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3730      	adds	r7, #48	; 0x30
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20013654 	.word	0x20013654
 800568c:	e0001004 	.word	0xe0001004

08005690 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005690:	b580      	push	{r7, lr}
 8005692:	b08a      	sub	sp, #40	; 0x28
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800569c:	4b6c      	ldr	r3, [pc, #432]	; (8005850 <_SendPacket+0x1c0>)
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d010      	beq.n	80056c6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80056a4:	4b6a      	ldr	r3, [pc, #424]	; (8005850 <_SendPacket+0x1c0>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 80a3 	beq.w	80057f4 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80056ae:	4b68      	ldr	r3, [pc, #416]	; (8005850 <_SendPacket+0x1c0>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d109      	bne.n	80056ca <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80056b6:	f7ff ff79 	bl	80055ac <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80056ba:	4b65      	ldr	r3, [pc, #404]	; (8005850 <_SendPacket+0x1c0>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	f040 809a 	bne.w	80057f8 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80056c4:	e001      	b.n	80056ca <_SendPacket+0x3a>
    goto Send;
 80056c6:	bf00      	nop
 80056c8:	e000      	b.n	80056cc <_SendPacket+0x3c>
Send:
 80056ca:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b1f      	cmp	r3, #31
 80056d0:	d809      	bhi.n	80056e6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80056d2:	4b5f      	ldr	r3, [pc, #380]	; (8005850 <_SendPacket+0x1c0>)
 80056d4:	69da      	ldr	r2, [r3, #28]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	fa22 f303 	lsr.w	r3, r2, r3
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f040 808b 	bne.w	80057fc <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b17      	cmp	r3, #23
 80056ea:	d807      	bhi.n	80056fc <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	60fb      	str	r3, [r7, #12]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	701a      	strb	r2, [r3, #0]
 80056fa:	e03d      	b.n	8005778 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	2b7f      	cmp	r3, #127	; 0x7f
 8005708:	d912      	bls.n	8005730 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	09da      	lsrs	r2, r3, #7
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3b01      	subs	r3, #1
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	b2d2      	uxtb	r2, r2
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	3a01      	subs	r2, #1
 8005722:	60fa      	str	r2, [r7, #12]
 8005724:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005728:	b2da      	uxtb	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	701a      	strb	r2, [r3, #0]
 800572e:	e006      	b.n	800573e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	3b01      	subs	r3, #1
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	b2da      	uxtb	r2, r3
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b7f      	cmp	r3, #127	; 0x7f
 8005742:	d912      	bls.n	800576a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	09da      	lsrs	r2, r3, #7
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	3b01      	subs	r3, #1
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	b2d2      	uxtb	r2, r2
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	b2db      	uxtb	r3, r3
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	3a01      	subs	r2, #1
 800575c:	60fa      	str	r2, [r7, #12]
 800575e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005762:	b2da      	uxtb	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	701a      	strb	r2, [r3, #0]
 8005768:	e006      	b.n	8005778 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	3b01      	subs	r3, #1
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	b2da      	uxtb	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005778:	4b36      	ldr	r3, [pc, #216]	; (8005854 <_SendPacket+0x1c4>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800577e:	4b34      	ldr	r3, [pc, #208]	; (8005850 <_SendPacket+0x1c0>)
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	623b      	str	r3, [r7, #32]
 8005790:	e00b      	b.n	80057aa <_SendPacket+0x11a>
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	b2da      	uxtb	r2, r3
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	1c59      	adds	r1, r3, #1
 800579a:	6279      	str	r1, [r7, #36]	; 0x24
 800579c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	701a      	strb	r2, [r3, #0]
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	09db      	lsrs	r3, r3, #7
 80057a8:	623b      	str	r3, [r7, #32]
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	2b7f      	cmp	r3, #127	; 0x7f
 80057ae:	d8f0      	bhi.n	8005792 <_SendPacket+0x102>
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	627a      	str	r2, [r7, #36]	; 0x24
 80057b6:	6a3a      	ldr	r2, [r7, #32]
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	701a      	strb	r2, [r3, #0]
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80057c0:	4b23      	ldr	r3, [pc, #140]	; (8005850 <_SendPacket+0x1c0>)
 80057c2:	785b      	ldrb	r3, [r3, #1]
 80057c4:	4618      	mov	r0, r3
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	461a      	mov	r2, r3
 80057ce:	68f9      	ldr	r1, [r7, #12]
 80057d0:	f7fa fd06 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80057d4:	4603      	mov	r3, r0
 80057d6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d003      	beq.n	80057e6 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80057de:	4a1c      	ldr	r2, [pc, #112]	; (8005850 <_SendPacket+0x1c0>)
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	60d3      	str	r3, [r2, #12]
 80057e4:	e00b      	b.n	80057fe <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80057e6:	4b1a      	ldr	r3, [pc, #104]	; (8005850 <_SendPacket+0x1c0>)
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	3301      	adds	r3, #1
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	4b18      	ldr	r3, [pc, #96]	; (8005850 <_SendPacket+0x1c0>)
 80057f0:	701a      	strb	r2, [r3, #0]
 80057f2:	e004      	b.n	80057fe <_SendPacket+0x16e>
    goto SendDone;
 80057f4:	bf00      	nop
 80057f6:	e002      	b.n	80057fe <_SendPacket+0x16e>
      goto SendDone;
 80057f8:	bf00      	nop
 80057fa:	e000      	b.n	80057fe <_SendPacket+0x16e>
      goto SendDone;
 80057fc:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80057fe:	4b14      	ldr	r3, [pc, #80]	; (8005850 <_SendPacket+0x1c0>)
 8005800:	7e1b      	ldrb	r3, [r3, #24]
 8005802:	4619      	mov	r1, r3
 8005804:	4a14      	ldr	r2, [pc, #80]	; (8005858 <_SendPacket+0x1c8>)
 8005806:	460b      	mov	r3, r1
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	440b      	add	r3, r1
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	4413      	add	r3, r2
 8005810:	336c      	adds	r3, #108	; 0x6c
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	4b0e      	ldr	r3, [pc, #56]	; (8005850 <_SendPacket+0x1c0>)
 8005816:	7e1b      	ldrb	r3, [r3, #24]
 8005818:	4618      	mov	r0, r3
 800581a:	490f      	ldr	r1, [pc, #60]	; (8005858 <_SendPacket+0x1c8>)
 800581c:	4603      	mov	r3, r0
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	4403      	add	r3, r0
 8005822:	00db      	lsls	r3, r3, #3
 8005824:	440b      	add	r3, r1
 8005826:	3370      	adds	r3, #112	; 0x70
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d00b      	beq.n	8005846 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800582e:	4b08      	ldr	r3, [pc, #32]	; (8005850 <_SendPacket+0x1c0>)
 8005830:	789b      	ldrb	r3, [r3, #2]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d107      	bne.n	8005846 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005836:	4b06      	ldr	r3, [pc, #24]	; (8005850 <_SendPacket+0x1c0>)
 8005838:	2201      	movs	r2, #1
 800583a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800583c:	f7ff fe4a 	bl	80054d4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005840:	4b03      	ldr	r3, [pc, #12]	; (8005850 <_SendPacket+0x1c0>)
 8005842:	2200      	movs	r2, #0
 8005844:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005846:	bf00      	nop
 8005848:	3728      	adds	r7, #40	; 0x28
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	20013654 	.word	0x20013654
 8005854:	e0001004 	.word	0xe0001004
 8005858:	2001382c 	.word	0x2001382c

0800585c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800585c:	b580      	push	{r7, lr}
 800585e:	b086      	sub	sp, #24
 8005860:	af02      	add	r7, sp, #8
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
 8005868:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800586a:	2300      	movs	r3, #0
 800586c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005870:	4917      	ldr	r1, [pc, #92]	; (80058d0 <SEGGER_SYSVIEW_Init+0x74>)
 8005872:	4818      	ldr	r0, [pc, #96]	; (80058d4 <SEGGER_SYSVIEW_Init+0x78>)
 8005874:	f7ff fce0 	bl	8005238 <SEGGER_RTT_AllocUpBuffer>
 8005878:	4603      	mov	r3, r0
 800587a:	b2da      	uxtb	r2, r3
 800587c:	4b16      	ldr	r3, [pc, #88]	; (80058d8 <SEGGER_SYSVIEW_Init+0x7c>)
 800587e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005880:	4b15      	ldr	r3, [pc, #84]	; (80058d8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005882:	785a      	ldrb	r2, [r3, #1]
 8005884:	4b14      	ldr	r3, [pc, #80]	; (80058d8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005886:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005888:	4b13      	ldr	r3, [pc, #76]	; (80058d8 <SEGGER_SYSVIEW_Init+0x7c>)
 800588a:	7e1b      	ldrb	r3, [r3, #24]
 800588c:	4618      	mov	r0, r3
 800588e:	2300      	movs	r3, #0
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	2308      	movs	r3, #8
 8005894:	4a11      	ldr	r2, [pc, #68]	; (80058dc <SEGGER_SYSVIEW_Init+0x80>)
 8005896:	490f      	ldr	r1, [pc, #60]	; (80058d4 <SEGGER_SYSVIEW_Init+0x78>)
 8005898:	f7ff fd52 	bl	8005340 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800589c:	4b0e      	ldr	r3, [pc, #56]	; (80058d8 <SEGGER_SYSVIEW_Init+0x7c>)
 800589e:	2200      	movs	r2, #0
 80058a0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80058a2:	4b0f      	ldr	r3, [pc, #60]	; (80058e0 <SEGGER_SYSVIEW_Init+0x84>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a0c      	ldr	r2, [pc, #48]	; (80058d8 <SEGGER_SYSVIEW_Init+0x7c>)
 80058a8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80058aa:	4a0b      	ldr	r2, [pc, #44]	; (80058d8 <SEGGER_SYSVIEW_Init+0x7c>)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80058b0:	4a09      	ldr	r2, [pc, #36]	; (80058d8 <SEGGER_SYSVIEW_Init+0x7c>)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80058b6:	4a08      	ldr	r2, [pc, #32]	; (80058d8 <SEGGER_SYSVIEW_Init+0x7c>)
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80058bc:	4a06      	ldr	r2, [pc, #24]	; (80058d8 <SEGGER_SYSVIEW_Init+0x7c>)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80058c2:	4b05      	ldr	r3, [pc, #20]	; (80058d8 <SEGGER_SYSVIEW_Init+0x7c>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80058c8:	bf00      	nop
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	2001324c 	.word	0x2001324c
 80058d4:	080069f4 	.word	0x080069f4
 80058d8:	20013654 	.word	0x20013654
 80058dc:	2001364c 	.word	0x2001364c
 80058e0:	e0001004 	.word	0xe0001004

080058e4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80058ec:	4a04      	ldr	r2, [pc, #16]	; (8005900 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6113      	str	r3, [r2, #16]
}
 80058f2:	bf00      	nop
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	20013654 	.word	0x20013654

08005904 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800590c:	f3ef 8311 	mrs	r3, BASEPRI
 8005910:	f04f 0120 	mov.w	r1, #32
 8005914:	f381 8811 	msr	BASEPRI, r1
 8005918:	60fb      	str	r3, [r7, #12]
 800591a:	4808      	ldr	r0, [pc, #32]	; (800593c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800591c:	f7ff fdcd 	bl	80054ba <_PreparePacket>
 8005920:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	68b9      	ldr	r1, [r7, #8]
 8005926:	68b8      	ldr	r0, [r7, #8]
 8005928:	f7ff feb2 	bl	8005690 <_SendPacket>
  RECORD_END();
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f383 8811 	msr	BASEPRI, r3
}
 8005932:	bf00      	nop
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	20013684 	.word	0x20013684

08005940 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005940:	b580      	push	{r7, lr}
 8005942:	b088      	sub	sp, #32
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800594a:	f3ef 8311 	mrs	r3, BASEPRI
 800594e:	f04f 0120 	mov.w	r1, #32
 8005952:	f381 8811 	msr	BASEPRI, r1
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	4816      	ldr	r0, [pc, #88]	; (80059b4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800595a:	f7ff fdae 	bl	80054ba <_PreparePacket>
 800595e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	61fb      	str	r3, [r7, #28]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	61bb      	str	r3, [r7, #24]
 800596c:	e00b      	b.n	8005986 <SEGGER_SYSVIEW_RecordU32+0x46>
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	b2da      	uxtb	r2, r3
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	1c59      	adds	r1, r3, #1
 8005976:	61f9      	str	r1, [r7, #28]
 8005978:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800597c:	b2d2      	uxtb	r2, r2
 800597e:	701a      	strb	r2, [r3, #0]
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	09db      	lsrs	r3, r3, #7
 8005984:	61bb      	str	r3, [r7, #24]
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	2b7f      	cmp	r3, #127	; 0x7f
 800598a:	d8f0      	bhi.n	800596e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	61fa      	str	r2, [r7, #28]
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	701a      	strb	r2, [r3, #0]
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	68f9      	ldr	r1, [r7, #12]
 80059a0:	6938      	ldr	r0, [r7, #16]
 80059a2:	f7ff fe75 	bl	8005690 <_SendPacket>
  RECORD_END();
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f383 8811 	msr	BASEPRI, r3
}
 80059ac:	bf00      	nop
 80059ae:	3720      	adds	r7, #32
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	20013684 	.word	0x20013684

080059b8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08c      	sub	sp, #48	; 0x30
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80059c4:	f3ef 8311 	mrs	r3, BASEPRI
 80059c8:	f04f 0120 	mov.w	r1, #32
 80059cc:	f381 8811 	msr	BASEPRI, r1
 80059d0:	61fb      	str	r3, [r7, #28]
 80059d2:	4825      	ldr	r0, [pc, #148]	; (8005a68 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80059d4:	f7ff fd71 	bl	80054ba <_PreparePacket>
 80059d8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80059e6:	e00b      	b.n	8005a00 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80059e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ea:	b2da      	uxtb	r2, r3
 80059ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ee:	1c59      	adds	r1, r3, #1
 80059f0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80059f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80059f6:	b2d2      	uxtb	r2, r2
 80059f8:	701a      	strb	r2, [r3, #0]
 80059fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fc:	09db      	lsrs	r3, r3, #7
 80059fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a02:	2b7f      	cmp	r3, #127	; 0x7f
 8005a04:	d8f0      	bhi.n	80059e8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a08:	1c5a      	adds	r2, r3, #1
 8005a0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a0e:	b2d2      	uxtb	r2, r2
 8005a10:	701a      	strb	r2, [r3, #0]
 8005a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a14:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	627b      	str	r3, [r7, #36]	; 0x24
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	623b      	str	r3, [r7, #32]
 8005a1e:	e00b      	b.n	8005a38 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	1c59      	adds	r1, r3, #1
 8005a28:	6279      	str	r1, [r7, #36]	; 0x24
 8005a2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a2e:	b2d2      	uxtb	r2, r2
 8005a30:	701a      	strb	r2, [r3, #0]
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	09db      	lsrs	r3, r3, #7
 8005a36:	623b      	str	r3, [r7, #32]
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	2b7f      	cmp	r3, #127	; 0x7f
 8005a3c:	d8f0      	bhi.n	8005a20 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	627a      	str	r2, [r7, #36]	; 0x24
 8005a44:	6a3a      	ldr	r2, [r7, #32]
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	701a      	strb	r2, [r3, #0]
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	6979      	ldr	r1, [r7, #20]
 8005a52:	69b8      	ldr	r0, [r7, #24]
 8005a54:	f7ff fe1c 	bl	8005690 <_SendPacket>
  RECORD_END();
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	f383 8811 	msr	BASEPRI, r3
}
 8005a5e:	bf00      	nop
 8005a60:	3730      	adds	r7, #48	; 0x30
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20013684 	.word	0x20013684

08005a6c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08e      	sub	sp, #56	; 0x38
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
 8005a78:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a7a:	f3ef 8311 	mrs	r3, BASEPRI
 8005a7e:	f04f 0120 	mov.w	r1, #32
 8005a82:	f381 8811 	msr	BASEPRI, r1
 8005a86:	61fb      	str	r3, [r7, #28]
 8005a88:	4832      	ldr	r0, [pc, #200]	; (8005b54 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005a8a:	f7ff fd16 	bl	80054ba <_PreparePacket>
 8005a8e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	637b      	str	r3, [r7, #52]	; 0x34
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	633b      	str	r3, [r7, #48]	; 0x30
 8005a9c:	e00b      	b.n	8005ab6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa0:	b2da      	uxtb	r2, r3
 8005aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aa4:	1c59      	adds	r1, r3, #1
 8005aa6:	6379      	str	r1, [r7, #52]	; 0x34
 8005aa8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aac:	b2d2      	uxtb	r2, r2
 8005aae:	701a      	strb	r2, [r3, #0]
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab2:	09db      	lsrs	r3, r3, #7
 8005ab4:	633b      	str	r3, [r7, #48]	; 0x30
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab8:	2b7f      	cmp	r3, #127	; 0x7f
 8005aba:	d8f0      	bhi.n	8005a9e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005abe:	1c5a      	adds	r2, r3, #1
 8005ac0:	637a      	str	r2, [r7, #52]	; 0x34
 8005ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac4:	b2d2      	uxtb	r2, r2
 8005ac6:	701a      	strb	r2, [r3, #0]
 8005ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ad4:	e00b      	b.n	8005aee <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005adc:	1c59      	adds	r1, r3, #1
 8005ade:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ae0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ae4:	b2d2      	uxtb	r2, r2
 8005ae6:	701a      	strb	r2, [r3, #0]
 8005ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aea:	09db      	lsrs	r3, r3, #7
 8005aec:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af0:	2b7f      	cmp	r3, #127	; 0x7f
 8005af2:	d8f0      	bhi.n	8005ad6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af6:	1c5a      	adds	r2, r3, #1
 8005af8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005afa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005afc:	b2d2      	uxtb	r2, r2
 8005afe:	701a      	strb	r2, [r3, #0]
 8005b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b02:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	627b      	str	r3, [r7, #36]	; 0x24
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	623b      	str	r3, [r7, #32]
 8005b0c:	e00b      	b.n	8005b26 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	1c59      	adds	r1, r3, #1
 8005b16:	6279      	str	r1, [r7, #36]	; 0x24
 8005b18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	701a      	strb	r2, [r3, #0]
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	09db      	lsrs	r3, r3, #7
 8005b24:	623b      	str	r3, [r7, #32]
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	2b7f      	cmp	r3, #127	; 0x7f
 8005b2a:	d8f0      	bhi.n	8005b0e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	1c5a      	adds	r2, r3, #1
 8005b30:	627a      	str	r2, [r7, #36]	; 0x24
 8005b32:	6a3a      	ldr	r2, [r7, #32]
 8005b34:	b2d2      	uxtb	r2, r2
 8005b36:	701a      	strb	r2, [r3, #0]
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	6979      	ldr	r1, [r7, #20]
 8005b40:	69b8      	ldr	r0, [r7, #24]
 8005b42:	f7ff fda5 	bl	8005690 <_SendPacket>
  RECORD_END();
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	f383 8811 	msr	BASEPRI, r3
}
 8005b4c:	bf00      	nop
 8005b4e:	3738      	adds	r7, #56	; 0x38
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	20013684 	.word	0x20013684

08005b58 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b090      	sub	sp, #64	; 0x40
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
 8005b64:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b66:	f3ef 8311 	mrs	r3, BASEPRI
 8005b6a:	f04f 0120 	mov.w	r1, #32
 8005b6e:	f381 8811 	msr	BASEPRI, r1
 8005b72:	61fb      	str	r3, [r7, #28]
 8005b74:	4840      	ldr	r0, [pc, #256]	; (8005c78 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005b76:	f7ff fca0 	bl	80054ba <_PreparePacket>
 8005b7a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b88:	e00b      	b.n	8005ba2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b90:	1c59      	adds	r1, r3, #1
 8005b92:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005b94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005b98:	b2d2      	uxtb	r2, r2
 8005b9a:	701a      	strb	r2, [r3, #0]
 8005b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9e:	09db      	lsrs	r3, r3, #7
 8005ba0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ba6:	d8f0      	bhi.n	8005b8a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005baa:	1c5a      	adds	r2, r3, #1
 8005bac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005bae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005bb0:	b2d2      	uxtb	r2, r2
 8005bb2:	701a      	strb	r2, [r3, #0]
 8005bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bb6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	637b      	str	r3, [r7, #52]	; 0x34
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	633b      	str	r3, [r7, #48]	; 0x30
 8005bc0:	e00b      	b.n	8005bda <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	b2da      	uxtb	r2, r3
 8005bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc8:	1c59      	adds	r1, r3, #1
 8005bca:	6379      	str	r1, [r7, #52]	; 0x34
 8005bcc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	701a      	strb	r2, [r3, #0]
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	09db      	lsrs	r3, r3, #7
 8005bd8:	633b      	str	r3, [r7, #48]	; 0x30
 8005bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bdc:	2b7f      	cmp	r3, #127	; 0x7f
 8005bde:	d8f0      	bhi.n	8005bc2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be2:	1c5a      	adds	r2, r3, #1
 8005be4:	637a      	str	r2, [r7, #52]	; 0x34
 8005be6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005be8:	b2d2      	uxtb	r2, r2
 8005bea:	701a      	strb	r2, [r3, #0]
 8005bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bf8:	e00b      	b.n	8005c12 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c00:	1c59      	adds	r1, r3, #1
 8005c02:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	701a      	strb	r2, [r3, #0]
 8005c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0e:	09db      	lsrs	r3, r3, #7
 8005c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c14:	2b7f      	cmp	r3, #127	; 0x7f
 8005c16:	d8f0      	bhi.n	8005bfa <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c20:	b2d2      	uxtb	r2, r2
 8005c22:	701a      	strb	r2, [r3, #0]
 8005c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c26:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c2e:	623b      	str	r3, [r7, #32]
 8005c30:	e00b      	b.n	8005c4a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005c32:	6a3b      	ldr	r3, [r7, #32]
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	1c59      	adds	r1, r3, #1
 8005c3a:	6279      	str	r1, [r7, #36]	; 0x24
 8005c3c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c40:	b2d2      	uxtb	r2, r2
 8005c42:	701a      	strb	r2, [r3, #0]
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	09db      	lsrs	r3, r3, #7
 8005c48:	623b      	str	r3, [r7, #32]
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c4e:	d8f0      	bhi.n	8005c32 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	627a      	str	r2, [r7, #36]	; 0x24
 8005c56:	6a3a      	ldr	r2, [r7, #32]
 8005c58:	b2d2      	uxtb	r2, r2
 8005c5a:	701a      	strb	r2, [r3, #0]
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	6979      	ldr	r1, [r7, #20]
 8005c64:	69b8      	ldr	r0, [r7, #24]
 8005c66:	f7ff fd13 	bl	8005690 <_SendPacket>
  RECORD_END();
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	f383 8811 	msr	BASEPRI, r3
}
 8005c70:	bf00      	nop
 8005c72:	3740      	adds	r7, #64	; 0x40
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	20013684 	.word	0x20013684

08005c7c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b08c      	sub	sp, #48	; 0x30
 8005c80:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005c82:	4b58      	ldr	r3, [pc, #352]	; (8005de4 <SEGGER_SYSVIEW_Start+0x168>)
 8005c84:	2201      	movs	r2, #1
 8005c86:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005c88:	f3ef 8311 	mrs	r3, BASEPRI
 8005c8c:	f04f 0120 	mov.w	r1, #32
 8005c90:	f381 8811 	msr	BASEPRI, r1
 8005c94:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005c96:	4b53      	ldr	r3, [pc, #332]	; (8005de4 <SEGGER_SYSVIEW_Start+0x168>)
 8005c98:	785b      	ldrb	r3, [r3, #1]
 8005c9a:	220a      	movs	r2, #10
 8005c9c:	4952      	ldr	r1, [pc, #328]	; (8005de8 <SEGGER_SYSVIEW_Start+0x16c>)
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fa fa9e 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005caa:	200a      	movs	r0, #10
 8005cac:	f7ff fe2a 	bl	8005904 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005cb0:	f3ef 8311 	mrs	r3, BASEPRI
 8005cb4:	f04f 0120 	mov.w	r1, #32
 8005cb8:	f381 8811 	msr	BASEPRI, r1
 8005cbc:	60bb      	str	r3, [r7, #8]
 8005cbe:	484b      	ldr	r0, [pc, #300]	; (8005dec <SEGGER_SYSVIEW_Start+0x170>)
 8005cc0:	f7ff fbfb 	bl	80054ba <_PreparePacket>
 8005cc4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cce:	4b45      	ldr	r3, [pc, #276]	; (8005de4 <SEGGER_SYSVIEW_Start+0x168>)
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cd4:	e00b      	b.n	8005cee <SEGGER_SYSVIEW_Start+0x72>
 8005cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cdc:	1c59      	adds	r1, r3, #1
 8005cde:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ce0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ce4:	b2d2      	uxtb	r2, r2
 8005ce6:	701a      	strb	r2, [r3, #0]
 8005ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cea:	09db      	lsrs	r3, r3, #7
 8005cec:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf0:	2b7f      	cmp	r3, #127	; 0x7f
 8005cf2:	d8f0      	bhi.n	8005cd6 <SEGGER_SYSVIEW_Start+0x5a>
 8005cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf6:	1c5a      	adds	r2, r3, #1
 8005cf8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cfc:	b2d2      	uxtb	r2, r2
 8005cfe:	701a      	strb	r2, [r3, #0]
 8005d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d02:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	627b      	str	r3, [r7, #36]	; 0x24
 8005d08:	4b36      	ldr	r3, [pc, #216]	; (8005de4 <SEGGER_SYSVIEW_Start+0x168>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	623b      	str	r3, [r7, #32]
 8005d0e:	e00b      	b.n	8005d28 <SEGGER_SYSVIEW_Start+0xac>
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	1c59      	adds	r1, r3, #1
 8005d18:	6279      	str	r1, [r7, #36]	; 0x24
 8005d1a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d1e:	b2d2      	uxtb	r2, r2
 8005d20:	701a      	strb	r2, [r3, #0]
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	09db      	lsrs	r3, r3, #7
 8005d26:	623b      	str	r3, [r7, #32]
 8005d28:	6a3b      	ldr	r3, [r7, #32]
 8005d2a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d2c:	d8f0      	bhi.n	8005d10 <SEGGER_SYSVIEW_Start+0x94>
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	1c5a      	adds	r2, r3, #1
 8005d32:	627a      	str	r2, [r7, #36]	; 0x24
 8005d34:	6a3a      	ldr	r2, [r7, #32]
 8005d36:	b2d2      	uxtb	r2, r2
 8005d38:	701a      	strb	r2, [r3, #0]
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	61fb      	str	r3, [r7, #28]
 8005d42:	4b28      	ldr	r3, [pc, #160]	; (8005de4 <SEGGER_SYSVIEW_Start+0x168>)
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	61bb      	str	r3, [r7, #24]
 8005d48:	e00b      	b.n	8005d62 <SEGGER_SYSVIEW_Start+0xe6>
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	1c59      	adds	r1, r3, #1
 8005d52:	61f9      	str	r1, [r7, #28]
 8005d54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d58:	b2d2      	uxtb	r2, r2
 8005d5a:	701a      	strb	r2, [r3, #0]
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	09db      	lsrs	r3, r3, #7
 8005d60:	61bb      	str	r3, [r7, #24]
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	2b7f      	cmp	r3, #127	; 0x7f
 8005d66:	d8f0      	bhi.n	8005d4a <SEGGER_SYSVIEW_Start+0xce>
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	61fa      	str	r2, [r7, #28]
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	701a      	strb	r2, [r3, #0]
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	617b      	str	r3, [r7, #20]
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	613b      	str	r3, [r7, #16]
 8005d80:	e00b      	b.n	8005d9a <SEGGER_SYSVIEW_Start+0x11e>
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	1c59      	adds	r1, r3, #1
 8005d8a:	6179      	str	r1, [r7, #20]
 8005d8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d90:	b2d2      	uxtb	r2, r2
 8005d92:	701a      	strb	r2, [r3, #0]
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	09db      	lsrs	r3, r3, #7
 8005d98:	613b      	str	r3, [r7, #16]
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8005d9e:	d8f0      	bhi.n	8005d82 <SEGGER_SYSVIEW_Start+0x106>
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	1c5a      	adds	r2, r3, #1
 8005da4:	617a      	str	r2, [r7, #20]
 8005da6:	693a      	ldr	r2, [r7, #16]
 8005da8:	b2d2      	uxtb	r2, r2
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005db0:	2218      	movs	r2, #24
 8005db2:	6839      	ldr	r1, [r7, #0]
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7ff fc6b 	bl	8005690 <_SendPacket>
      RECORD_END();
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005dc0:	4b08      	ldr	r3, [pc, #32]	; (8005de4 <SEGGER_SYSVIEW_Start+0x168>)
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d002      	beq.n	8005dce <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005dc8:	4b06      	ldr	r3, [pc, #24]	; (8005de4 <SEGGER_SYSVIEW_Start+0x168>)
 8005dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dcc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005dce:	f000 f9eb 	bl	80061a8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005dd2:	f000 f9b1 	bl	8006138 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005dd6:	f000 fc81 	bl	80066dc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005dda:	bf00      	nop
 8005ddc:	3730      	adds	r7, #48	; 0x30
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20013654 	.word	0x20013654
 8005de8:	08006a1c 	.word	0x08006a1c
 8005dec:	20013684 	.word	0x20013684

08005df0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005df6:	f3ef 8311 	mrs	r3, BASEPRI
 8005dfa:	f04f 0120 	mov.w	r1, #32
 8005dfe:	f381 8811 	msr	BASEPRI, r1
 8005e02:	607b      	str	r3, [r7, #4]
 8005e04:	480b      	ldr	r0, [pc, #44]	; (8005e34 <SEGGER_SYSVIEW_Stop+0x44>)
 8005e06:	f7ff fb58 	bl	80054ba <_PreparePacket>
 8005e0a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005e0c:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <SEGGER_SYSVIEW_Stop+0x48>)
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d007      	beq.n	8005e24 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005e14:	220b      	movs	r2, #11
 8005e16:	6839      	ldr	r1, [r7, #0]
 8005e18:	6838      	ldr	r0, [r7, #0]
 8005e1a:	f7ff fc39 	bl	8005690 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005e1e:	4b06      	ldr	r3, [pc, #24]	; (8005e38 <SEGGER_SYSVIEW_Stop+0x48>)
 8005e20:	2200      	movs	r2, #0
 8005e22:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f383 8811 	msr	BASEPRI, r3
}
 8005e2a:	bf00      	nop
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	20013684 	.word	0x20013684
 8005e38:	20013654 	.word	0x20013654

08005e3c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b08c      	sub	sp, #48	; 0x30
 8005e40:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e42:	f3ef 8311 	mrs	r3, BASEPRI
 8005e46:	f04f 0120 	mov.w	r1, #32
 8005e4a:	f381 8811 	msr	BASEPRI, r1
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	4845      	ldr	r0, [pc, #276]	; (8005f68 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005e52:	f7ff fb32 	bl	80054ba <_PreparePacket>
 8005e56:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e60:	4b42      	ldr	r3, [pc, #264]	; (8005f6c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e66:	e00b      	b.n	8005e80 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e6e:	1c59      	adds	r1, r3, #1
 8005e70:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005e72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	701a      	strb	r2, [r3, #0]
 8005e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7c:	09db      	lsrs	r3, r3, #7
 8005e7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e82:	2b7f      	cmp	r3, #127	; 0x7f
 8005e84:	d8f0      	bhi.n	8005e68 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e88:	1c5a      	adds	r2, r3, #1
 8005e8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	701a      	strb	r2, [r3, #0]
 8005e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e94:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	627b      	str	r3, [r7, #36]	; 0x24
 8005e9a:	4b34      	ldr	r3, [pc, #208]	; (8005f6c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	623b      	str	r3, [r7, #32]
 8005ea0:	e00b      	b.n	8005eba <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	b2da      	uxtb	r2, r3
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	1c59      	adds	r1, r3, #1
 8005eaa:	6279      	str	r1, [r7, #36]	; 0x24
 8005eac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eb0:	b2d2      	uxtb	r2, r2
 8005eb2:	701a      	strb	r2, [r3, #0]
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	09db      	lsrs	r3, r3, #7
 8005eb8:	623b      	str	r3, [r7, #32]
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	2b7f      	cmp	r3, #127	; 0x7f
 8005ebe:	d8f0      	bhi.n	8005ea2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	627a      	str	r2, [r7, #36]	; 0x24
 8005ec6:	6a3a      	ldr	r2, [r7, #32]
 8005ec8:	b2d2      	uxtb	r2, r2
 8005eca:	701a      	strb	r2, [r3, #0]
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	61fb      	str	r3, [r7, #28]
 8005ed4:	4b25      	ldr	r3, [pc, #148]	; (8005f6c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	61bb      	str	r3, [r7, #24]
 8005eda:	e00b      	b.n	8005ef4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	1c59      	adds	r1, r3, #1
 8005ee4:	61f9      	str	r1, [r7, #28]
 8005ee6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005eea:	b2d2      	uxtb	r2, r2
 8005eec:	701a      	strb	r2, [r3, #0]
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	09db      	lsrs	r3, r3, #7
 8005ef2:	61bb      	str	r3, [r7, #24]
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	2b7f      	cmp	r3, #127	; 0x7f
 8005ef8:	d8f0      	bhi.n	8005edc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	61fa      	str	r2, [r7, #28]
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	617b      	str	r3, [r7, #20]
 8005f0e:	2300      	movs	r3, #0
 8005f10:	613b      	str	r3, [r7, #16]
 8005f12:	e00b      	b.n	8005f2c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	1c59      	adds	r1, r3, #1
 8005f1c:	6179      	str	r1, [r7, #20]
 8005f1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f22:	b2d2      	uxtb	r2, r2
 8005f24:	701a      	strb	r2, [r3, #0]
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	09db      	lsrs	r3, r3, #7
 8005f2a:	613b      	str	r3, [r7, #16]
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	2b7f      	cmp	r3, #127	; 0x7f
 8005f30:	d8f0      	bhi.n	8005f14 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	617a      	str	r2, [r7, #20]
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	b2d2      	uxtb	r2, r2
 8005f3c:	701a      	strb	r2, [r3, #0]
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005f42:	2218      	movs	r2, #24
 8005f44:	6879      	ldr	r1, [r7, #4]
 8005f46:	68b8      	ldr	r0, [r7, #8]
 8005f48:	f7ff fba2 	bl	8005690 <_SendPacket>
  RECORD_END();
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005f52:	4b06      	ldr	r3, [pc, #24]	; (8005f6c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d002      	beq.n	8005f60 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005f5a:	4b04      	ldr	r3, [pc, #16]	; (8005f6c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5e:	4798      	blx	r3
  }
}
 8005f60:	bf00      	nop
 8005f62:	3730      	adds	r7, #48	; 0x30
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	20013684 	.word	0x20013684
 8005f6c:	20013654 	.word	0x20013654

08005f70 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b092      	sub	sp, #72	; 0x48
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005f78:	f3ef 8311 	mrs	r3, BASEPRI
 8005f7c:	f04f 0120 	mov.w	r1, #32
 8005f80:	f381 8811 	msr	BASEPRI, r1
 8005f84:	617b      	str	r3, [r7, #20]
 8005f86:	486a      	ldr	r0, [pc, #424]	; (8006130 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005f88:	f7ff fa97 	bl	80054ba <_PreparePacket>
 8005f8c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	647b      	str	r3, [r7, #68]	; 0x44
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	4b66      	ldr	r3, [pc, #408]	; (8006134 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	643b      	str	r3, [r7, #64]	; 0x40
 8005fa2:	e00b      	b.n	8005fbc <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa6:	b2da      	uxtb	r2, r3
 8005fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005faa:	1c59      	adds	r1, r3, #1
 8005fac:	6479      	str	r1, [r7, #68]	; 0x44
 8005fae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fb2:	b2d2      	uxtb	r2, r2
 8005fb4:	701a      	strb	r2, [r3, #0]
 8005fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fb8:	09db      	lsrs	r3, r3, #7
 8005fba:	643b      	str	r3, [r7, #64]	; 0x40
 8005fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fbe:	2b7f      	cmp	r3, #127	; 0x7f
 8005fc0:	d8f0      	bhi.n	8005fa4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fc4:	1c5a      	adds	r2, r3, #1
 8005fc6:	647a      	str	r2, [r7, #68]	; 0x44
 8005fc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fca:	b2d2      	uxtb	r2, r2
 8005fcc:	701a      	strb	r2, [r3, #0]
 8005fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fd0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fdc:	e00b      	b.n	8005ff6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fe4:	1c59      	adds	r1, r3, #1
 8005fe6:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005fe8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fec:	b2d2      	uxtb	r2, r2
 8005fee:	701a      	strb	r2, [r3, #0]
 8005ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff2:	09db      	lsrs	r3, r3, #7
 8005ff4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ff8:	2b7f      	cmp	r3, #127	; 0x7f
 8005ffa:	d8f0      	bhi.n	8005fde <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ffe:	1c5a      	adds	r2, r3, #1
 8006000:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006002:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006004:	b2d2      	uxtb	r2, r2
 8006006:	701a      	strb	r2, [r3, #0]
 8006008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800600a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	2220      	movs	r2, #32
 8006012:	4619      	mov	r1, r3
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f7ff fa03 	bl	8005420 <_EncodeStr>
 800601a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800601c:	2209      	movs	r2, #9
 800601e:	68f9      	ldr	r1, [r7, #12]
 8006020:	6938      	ldr	r0, [r7, #16]
 8006022:	f7ff fb35 	bl	8005690 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	637b      	str	r3, [r7, #52]	; 0x34
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	4b40      	ldr	r3, [pc, #256]	; (8006134 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	633b      	str	r3, [r7, #48]	; 0x30
 800603a:	e00b      	b.n	8006054 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800603c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603e:	b2da      	uxtb	r2, r3
 8006040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006042:	1c59      	adds	r1, r3, #1
 8006044:	6379      	str	r1, [r7, #52]	; 0x34
 8006046:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800604a:	b2d2      	uxtb	r2, r2
 800604c:	701a      	strb	r2, [r3, #0]
 800604e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006050:	09db      	lsrs	r3, r3, #7
 8006052:	633b      	str	r3, [r7, #48]	; 0x30
 8006054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006056:	2b7f      	cmp	r3, #127	; 0x7f
 8006058:	d8f0      	bhi.n	800603c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800605a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605c:	1c5a      	adds	r2, r3, #1
 800605e:	637a      	str	r2, [r7, #52]	; 0x34
 8006060:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006062:	b2d2      	uxtb	r2, r2
 8006064:	701a      	strb	r2, [r3, #0]
 8006066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006068:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	62bb      	str	r3, [r7, #40]	; 0x28
 8006074:	e00b      	b.n	800608e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006078:	b2da      	uxtb	r2, r3
 800607a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607c:	1c59      	adds	r1, r3, #1
 800607e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006080:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006084:	b2d2      	uxtb	r2, r2
 8006086:	701a      	strb	r2, [r3, #0]
 8006088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608a:	09db      	lsrs	r3, r3, #7
 800608c:	62bb      	str	r3, [r7, #40]	; 0x28
 800608e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006090:	2b7f      	cmp	r3, #127	; 0x7f
 8006092:	d8f0      	bhi.n	8006076 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006096:	1c5a      	adds	r2, r3, #1
 8006098:	62fa      	str	r2, [r7, #44]	; 0x2c
 800609a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800609c:	b2d2      	uxtb	r2, r2
 800609e:	701a      	strb	r2, [r3, #0]
 80060a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	627b      	str	r3, [r7, #36]	; 0x24
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	623b      	str	r3, [r7, #32]
 80060ae:	e00b      	b.n	80060c8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	b2da      	uxtb	r2, r3
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	1c59      	adds	r1, r3, #1
 80060b8:	6279      	str	r1, [r7, #36]	; 0x24
 80060ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060be:	b2d2      	uxtb	r2, r2
 80060c0:	701a      	strb	r2, [r3, #0]
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	09db      	lsrs	r3, r3, #7
 80060c6:	623b      	str	r3, [r7, #32]
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	2b7f      	cmp	r3, #127	; 0x7f
 80060cc:	d8f0      	bhi.n	80060b0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	627a      	str	r2, [r7, #36]	; 0x24
 80060d4:	6a3a      	ldr	r2, [r7, #32]
 80060d6:	b2d2      	uxtb	r2, r2
 80060d8:	701a      	strb	r2, [r3, #0]
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	61fb      	str	r3, [r7, #28]
 80060e2:	2300      	movs	r3, #0
 80060e4:	61bb      	str	r3, [r7, #24]
 80060e6:	e00b      	b.n	8006100 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	1c59      	adds	r1, r3, #1
 80060f0:	61f9      	str	r1, [r7, #28]
 80060f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060f6:	b2d2      	uxtb	r2, r2
 80060f8:	701a      	strb	r2, [r3, #0]
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	09db      	lsrs	r3, r3, #7
 80060fe:	61bb      	str	r3, [r7, #24]
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	2b7f      	cmp	r3, #127	; 0x7f
 8006104:	d8f0      	bhi.n	80060e8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	61fa      	str	r2, [r7, #28]
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	b2d2      	uxtb	r2, r2
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006116:	2215      	movs	r2, #21
 8006118:	68f9      	ldr	r1, [r7, #12]
 800611a:	6938      	ldr	r0, [r7, #16]
 800611c:	f7ff fab8 	bl	8005690 <_SendPacket>
  RECORD_END();
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f383 8811 	msr	BASEPRI, r3
}
 8006126:	bf00      	nop
 8006128:	3748      	adds	r7, #72	; 0x48
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	20013684 	.word	0x20013684
 8006134:	20013654 	.word	0x20013654

08006138 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006138:	b580      	push	{r7, lr}
 800613a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800613c:	4b07      	ldr	r3, [pc, #28]	; (800615c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d008      	beq.n	8006156 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006144:	4b05      	ldr	r3, [pc, #20]	; (800615c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d003      	beq.n	8006156 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800614e:	4b03      	ldr	r3, [pc, #12]	; (800615c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	4798      	blx	r3
  }
}
 8006156:	bf00      	nop
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	20013654 	.word	0x20013654

08006160 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006168:	f3ef 8311 	mrs	r3, BASEPRI
 800616c:	f04f 0120 	mov.w	r1, #32
 8006170:	f381 8811 	msr	BASEPRI, r1
 8006174:	617b      	str	r3, [r7, #20]
 8006176:	480b      	ldr	r0, [pc, #44]	; (80061a4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006178:	f7ff f99f 	bl	80054ba <_PreparePacket>
 800617c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800617e:	2280      	movs	r2, #128	; 0x80
 8006180:	6879      	ldr	r1, [r7, #4]
 8006182:	6938      	ldr	r0, [r7, #16]
 8006184:	f7ff f94c 	bl	8005420 <_EncodeStr>
 8006188:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800618a:	220e      	movs	r2, #14
 800618c:	68f9      	ldr	r1, [r7, #12]
 800618e:	6938      	ldr	r0, [r7, #16]
 8006190:	f7ff fa7e 	bl	8005690 <_SendPacket>
  RECORD_END();
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	f383 8811 	msr	BASEPRI, r3
}
 800619a:	bf00      	nop
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	20013684 	.word	0x20013684

080061a8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80061a8:	b590      	push	{r4, r7, lr}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80061ae:	4b14      	ldr	r3, [pc, #80]	; (8006200 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d019      	beq.n	80061ea <SEGGER_SYSVIEW_RecordSystime+0x42>
 80061b6:	4b12      	ldr	r3, [pc, #72]	; (8006200 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d014      	beq.n	80061ea <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80061c0:	4b0f      	ldr	r3, [pc, #60]	; (8006200 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4798      	blx	r3
 80061c8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80061cc:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80061ce:	e9d7 1200 	ldrd	r1, r2, [r7]
 80061d2:	f04f 0300 	mov.w	r3, #0
 80061d6:	f04f 0400 	mov.w	r4, #0
 80061da:	0013      	movs	r3, r2
 80061dc:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80061de:	461a      	mov	r2, r3
 80061e0:	4601      	mov	r1, r0
 80061e2:	200d      	movs	r0, #13
 80061e4:	f7ff fbe8 	bl	80059b8 <SEGGER_SYSVIEW_RecordU32x2>
 80061e8:	e005      	b.n	80061f6 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80061ea:	4b06      	ldr	r3, [pc, #24]	; (8006204 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4619      	mov	r1, r3
 80061f0:	200c      	movs	r0, #12
 80061f2:	f7ff fba5 	bl	8005940 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80061f6:	bf00      	nop
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd90      	pop	{r4, r7, pc}
 80061fe:	bf00      	nop
 8006200:	20013654 	.word	0x20013654
 8006204:	e0001004 	.word	0xe0001004

08006208 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800620e:	f3ef 8311 	mrs	r3, BASEPRI
 8006212:	f04f 0120 	mov.w	r1, #32
 8006216:	f381 8811 	msr	BASEPRI, r1
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	4819      	ldr	r0, [pc, #100]	; (8006284 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800621e:	f7ff f94c 	bl	80054ba <_PreparePacket>
 8006222:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006228:	4b17      	ldr	r3, [pc, #92]	; (8006288 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006230:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	617b      	str	r3, [r7, #20]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	613b      	str	r3, [r7, #16]
 800623a:	e00b      	b.n	8006254 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	b2da      	uxtb	r2, r3
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	1c59      	adds	r1, r3, #1
 8006244:	6179      	str	r1, [r7, #20]
 8006246:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800624a:	b2d2      	uxtb	r2, r2
 800624c:	701a      	strb	r2, [r3, #0]
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	09db      	lsrs	r3, r3, #7
 8006252:	613b      	str	r3, [r7, #16]
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	2b7f      	cmp	r3, #127	; 0x7f
 8006258:	d8f0      	bhi.n	800623c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	1c5a      	adds	r2, r3, #1
 800625e:	617a      	str	r2, [r7, #20]
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	b2d2      	uxtb	r2, r2
 8006264:	701a      	strb	r2, [r3, #0]
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800626a:	2202      	movs	r2, #2
 800626c:	6879      	ldr	r1, [r7, #4]
 800626e:	68b8      	ldr	r0, [r7, #8]
 8006270:	f7ff fa0e 	bl	8005690 <_SendPacket>
  RECORD_END();
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f383 8811 	msr	BASEPRI, r3
}
 800627a:	bf00      	nop
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	20013684 	.word	0x20013684
 8006288:	e000ed04 	.word	0xe000ed04

0800628c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006292:	f3ef 8311 	mrs	r3, BASEPRI
 8006296:	f04f 0120 	mov.w	r1, #32
 800629a:	f381 8811 	msr	BASEPRI, r1
 800629e:	607b      	str	r3, [r7, #4]
 80062a0:	4807      	ldr	r0, [pc, #28]	; (80062c0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80062a2:	f7ff f90a 	bl	80054ba <_PreparePacket>
 80062a6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80062a8:	2203      	movs	r2, #3
 80062aa:	6839      	ldr	r1, [r7, #0]
 80062ac:	6838      	ldr	r0, [r7, #0]
 80062ae:	f7ff f9ef 	bl	8005690 <_SendPacket>
  RECORD_END();
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f383 8811 	msr	BASEPRI, r3
}
 80062b8:	bf00      	nop
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	20013684 	.word	0x20013684

080062c4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80062ca:	f3ef 8311 	mrs	r3, BASEPRI
 80062ce:	f04f 0120 	mov.w	r1, #32
 80062d2:	f381 8811 	msr	BASEPRI, r1
 80062d6:	607b      	str	r3, [r7, #4]
 80062d8:	4807      	ldr	r0, [pc, #28]	; (80062f8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80062da:	f7ff f8ee 	bl	80054ba <_PreparePacket>
 80062de:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80062e0:	2212      	movs	r2, #18
 80062e2:	6839      	ldr	r1, [r7, #0]
 80062e4:	6838      	ldr	r0, [r7, #0]
 80062e6:	f7ff f9d3 	bl	8005690 <_SendPacket>
  RECORD_END();
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f383 8811 	msr	BASEPRI, r3
}
 80062f0:	bf00      	nop
 80062f2:	3708      	adds	r7, #8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	20013684 	.word	0x20013684

080062fc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006302:	f3ef 8311 	mrs	r3, BASEPRI
 8006306:	f04f 0120 	mov.w	r1, #32
 800630a:	f381 8811 	msr	BASEPRI, r1
 800630e:	607b      	str	r3, [r7, #4]
 8006310:	4807      	ldr	r0, [pc, #28]	; (8006330 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006312:	f7ff f8d2 	bl	80054ba <_PreparePacket>
 8006316:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006318:	2211      	movs	r2, #17
 800631a:	6839      	ldr	r1, [r7, #0]
 800631c:	6838      	ldr	r0, [r7, #0]
 800631e:	f7ff f9b7 	bl	8005690 <_SendPacket>
  RECORD_END();
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f383 8811 	msr	BASEPRI, r3
}
 8006328:	bf00      	nop
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	20013684 	.word	0x20013684

08006334 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006334:	b580      	push	{r7, lr}
 8006336:	b088      	sub	sp, #32
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800633c:	f3ef 8311 	mrs	r3, BASEPRI
 8006340:	f04f 0120 	mov.w	r1, #32
 8006344:	f381 8811 	msr	BASEPRI, r1
 8006348:	617b      	str	r3, [r7, #20]
 800634a:	4819      	ldr	r0, [pc, #100]	; (80063b0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800634c:	f7ff f8b5 	bl	80054ba <_PreparePacket>
 8006350:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006356:	4b17      	ldr	r3, [pc, #92]	; (80063b4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	61fb      	str	r3, [r7, #28]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	61bb      	str	r3, [r7, #24]
 8006368:	e00b      	b.n	8006382 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	b2da      	uxtb	r2, r3
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	1c59      	adds	r1, r3, #1
 8006372:	61f9      	str	r1, [r7, #28]
 8006374:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006378:	b2d2      	uxtb	r2, r2
 800637a:	701a      	strb	r2, [r3, #0]
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	09db      	lsrs	r3, r3, #7
 8006380:	61bb      	str	r3, [r7, #24]
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	2b7f      	cmp	r3, #127	; 0x7f
 8006386:	d8f0      	bhi.n	800636a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	61fa      	str	r2, [r7, #28]
 800638e:	69ba      	ldr	r2, [r7, #24]
 8006390:	b2d2      	uxtb	r2, r2
 8006392:	701a      	strb	r2, [r3, #0]
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006398:	2208      	movs	r2, #8
 800639a:	68f9      	ldr	r1, [r7, #12]
 800639c:	6938      	ldr	r0, [r7, #16]
 800639e:	f7ff f977 	bl	8005690 <_SendPacket>
  RECORD_END();
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f383 8811 	msr	BASEPRI, r3
}
 80063a8:	bf00      	nop
 80063aa:	3720      	adds	r7, #32
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	20013684 	.word	0x20013684
 80063b4:	20013654 	.word	0x20013654

080063b8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b088      	sub	sp, #32
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80063c0:	f3ef 8311 	mrs	r3, BASEPRI
 80063c4:	f04f 0120 	mov.w	r1, #32
 80063c8:	f381 8811 	msr	BASEPRI, r1
 80063cc:	617b      	str	r3, [r7, #20]
 80063ce:	4819      	ldr	r0, [pc, #100]	; (8006434 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80063d0:	f7ff f873 	bl	80054ba <_PreparePacket>
 80063d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80063da:	4b17      	ldr	r3, [pc, #92]	; (8006438 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	61fb      	str	r3, [r7, #28]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	61bb      	str	r3, [r7, #24]
 80063ec:	e00b      	b.n	8006406 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	1c59      	adds	r1, r3, #1
 80063f6:	61f9      	str	r1, [r7, #28]
 80063f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063fc:	b2d2      	uxtb	r2, r2
 80063fe:	701a      	strb	r2, [r3, #0]
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	09db      	lsrs	r3, r3, #7
 8006404:	61bb      	str	r3, [r7, #24]
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	2b7f      	cmp	r3, #127	; 0x7f
 800640a:	d8f0      	bhi.n	80063ee <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	61fa      	str	r2, [r7, #28]
 8006412:	69ba      	ldr	r2, [r7, #24]
 8006414:	b2d2      	uxtb	r2, r2
 8006416:	701a      	strb	r2, [r3, #0]
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800641c:	2204      	movs	r2, #4
 800641e:	68f9      	ldr	r1, [r7, #12]
 8006420:	6938      	ldr	r0, [r7, #16]
 8006422:	f7ff f935 	bl	8005690 <_SendPacket>
  RECORD_END();
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	f383 8811 	msr	BASEPRI, r3
}
 800642c:	bf00      	nop
 800642e:	3720      	adds	r7, #32
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	20013684 	.word	0x20013684
 8006438:	20013654 	.word	0x20013654

0800643c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800643c:	b580      	push	{r7, lr}
 800643e:	b088      	sub	sp, #32
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006444:	f3ef 8311 	mrs	r3, BASEPRI
 8006448:	f04f 0120 	mov.w	r1, #32
 800644c:	f381 8811 	msr	BASEPRI, r1
 8006450:	617b      	str	r3, [r7, #20]
 8006452:	4819      	ldr	r0, [pc, #100]	; (80064b8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006454:	f7ff f831 	bl	80054ba <_PreparePacket>
 8006458:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800645e:	4b17      	ldr	r3, [pc, #92]	; (80064bc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	1ad3      	subs	r3, r2, r3
 8006466:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	61fb      	str	r3, [r7, #28]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	61bb      	str	r3, [r7, #24]
 8006470:	e00b      	b.n	800648a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	b2da      	uxtb	r2, r3
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	1c59      	adds	r1, r3, #1
 800647a:	61f9      	str	r1, [r7, #28]
 800647c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006480:	b2d2      	uxtb	r2, r2
 8006482:	701a      	strb	r2, [r3, #0]
 8006484:	69bb      	ldr	r3, [r7, #24]
 8006486:	09db      	lsrs	r3, r3, #7
 8006488:	61bb      	str	r3, [r7, #24]
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	2b7f      	cmp	r3, #127	; 0x7f
 800648e:	d8f0      	bhi.n	8006472 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	61fa      	str	r2, [r7, #28]
 8006496:	69ba      	ldr	r2, [r7, #24]
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	701a      	strb	r2, [r3, #0]
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80064a0:	2206      	movs	r2, #6
 80064a2:	68f9      	ldr	r1, [r7, #12]
 80064a4:	6938      	ldr	r0, [r7, #16]
 80064a6:	f7ff f8f3 	bl	8005690 <_SendPacket>
  RECORD_END();
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f383 8811 	msr	BASEPRI, r3
}
 80064b0:	bf00      	nop
 80064b2:	3720      	adds	r7, #32
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	20013684 	.word	0x20013684
 80064bc:	20013654 	.word	0x20013654

080064c0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b08a      	sub	sp, #40	; 0x28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80064ca:	f3ef 8311 	mrs	r3, BASEPRI
 80064ce:	f04f 0120 	mov.w	r1, #32
 80064d2:	f381 8811 	msr	BASEPRI, r1
 80064d6:	617b      	str	r3, [r7, #20]
 80064d8:	4827      	ldr	r0, [pc, #156]	; (8006578 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80064da:	f7fe ffee 	bl	80054ba <_PreparePacket>
 80064de:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80064e4:	4b25      	ldr	r3, [pc, #148]	; (800657c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	627b      	str	r3, [r7, #36]	; 0x24
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	623b      	str	r3, [r7, #32]
 80064f6:	e00b      	b.n	8006510 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80064f8:	6a3b      	ldr	r3, [r7, #32]
 80064fa:	b2da      	uxtb	r2, r3
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	1c59      	adds	r1, r3, #1
 8006500:	6279      	str	r1, [r7, #36]	; 0x24
 8006502:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006506:	b2d2      	uxtb	r2, r2
 8006508:	701a      	strb	r2, [r3, #0]
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	09db      	lsrs	r3, r3, #7
 800650e:	623b      	str	r3, [r7, #32]
 8006510:	6a3b      	ldr	r3, [r7, #32]
 8006512:	2b7f      	cmp	r3, #127	; 0x7f
 8006514:	d8f0      	bhi.n	80064f8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006518:	1c5a      	adds	r2, r3, #1
 800651a:	627a      	str	r2, [r7, #36]	; 0x24
 800651c:	6a3a      	ldr	r2, [r7, #32]
 800651e:	b2d2      	uxtb	r2, r2
 8006520:	701a      	strb	r2, [r3, #0]
 8006522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006524:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	61fb      	str	r3, [r7, #28]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	61bb      	str	r3, [r7, #24]
 800652e:	e00b      	b.n	8006548 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	b2da      	uxtb	r2, r3
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	1c59      	adds	r1, r3, #1
 8006538:	61f9      	str	r1, [r7, #28]
 800653a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800653e:	b2d2      	uxtb	r2, r2
 8006540:	701a      	strb	r2, [r3, #0]
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	09db      	lsrs	r3, r3, #7
 8006546:	61bb      	str	r3, [r7, #24]
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	2b7f      	cmp	r3, #127	; 0x7f
 800654c:	d8f0      	bhi.n	8006530 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	1c5a      	adds	r2, r3, #1
 8006552:	61fa      	str	r2, [r7, #28]
 8006554:	69ba      	ldr	r2, [r7, #24]
 8006556:	b2d2      	uxtb	r2, r2
 8006558:	701a      	strb	r2, [r3, #0]
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800655e:	2207      	movs	r2, #7
 8006560:	68f9      	ldr	r1, [r7, #12]
 8006562:	6938      	ldr	r0, [r7, #16]
 8006564:	f7ff f894 	bl	8005690 <_SendPacket>
  RECORD_END();
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f383 8811 	msr	BASEPRI, r3
}
 800656e:	bf00      	nop
 8006570:	3728      	adds	r7, #40	; 0x28
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	20013684 	.word	0x20013684
 800657c:	20013654 	.word	0x20013654

08006580 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006588:	4b04      	ldr	r3, [pc, #16]	; (800659c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	1ad3      	subs	r3, r2, r3
}
 8006590:	4618      	mov	r0, r3
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	20013654 	.word	0x20013654

080065a0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08c      	sub	sp, #48	; 0x30
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	4603      	mov	r3, r0
 80065a8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80065aa:	4b3b      	ldr	r3, [pc, #236]	; (8006698 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d06d      	beq.n	800668e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80065b2:	4b39      	ldr	r3, [pc, #228]	; (8006698 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80065b8:	2300      	movs	r3, #0
 80065ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80065bc:	e008      	b.n	80065d0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80065be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80065c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d007      	beq.n	80065da <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80065ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065cc:	3301      	adds	r3, #1
 80065ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80065d0:	79fb      	ldrb	r3, [r7, #7]
 80065d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d3f2      	bcc.n	80065be <SEGGER_SYSVIEW_SendModule+0x1e>
 80065d8:	e000      	b.n	80065dc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80065da:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80065dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d055      	beq.n	800668e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065e2:	f3ef 8311 	mrs	r3, BASEPRI
 80065e6:	f04f 0120 	mov.w	r1, #32
 80065ea:	f381 8811 	msr	BASEPRI, r1
 80065ee:	617b      	str	r3, [r7, #20]
 80065f0:	482a      	ldr	r0, [pc, #168]	; (800669c <SEGGER_SYSVIEW_SendModule+0xfc>)
 80065f2:	f7fe ff62 	bl	80054ba <_PreparePacket>
 80065f6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006600:	79fb      	ldrb	r3, [r7, #7]
 8006602:	623b      	str	r3, [r7, #32]
 8006604:	e00b      	b.n	800661e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	b2da      	uxtb	r2, r3
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	1c59      	adds	r1, r3, #1
 800660e:	6279      	str	r1, [r7, #36]	; 0x24
 8006610:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006614:	b2d2      	uxtb	r2, r2
 8006616:	701a      	strb	r2, [r3, #0]
 8006618:	6a3b      	ldr	r3, [r7, #32]
 800661a:	09db      	lsrs	r3, r3, #7
 800661c:	623b      	str	r3, [r7, #32]
 800661e:	6a3b      	ldr	r3, [r7, #32]
 8006620:	2b7f      	cmp	r3, #127	; 0x7f
 8006622:	d8f0      	bhi.n	8006606 <SEGGER_SYSVIEW_SendModule+0x66>
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	1c5a      	adds	r2, r3, #1
 8006628:	627a      	str	r2, [r7, #36]	; 0x24
 800662a:	6a3a      	ldr	r2, [r7, #32]
 800662c:	b2d2      	uxtb	r2, r2
 800662e:	701a      	strb	r2, [r3, #0]
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	61fb      	str	r3, [r7, #28]
 8006638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	61bb      	str	r3, [r7, #24]
 800663e:	e00b      	b.n	8006658 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	b2da      	uxtb	r2, r3
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	1c59      	adds	r1, r3, #1
 8006648:	61f9      	str	r1, [r7, #28]
 800664a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800664e:	b2d2      	uxtb	r2, r2
 8006650:	701a      	strb	r2, [r3, #0]
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	09db      	lsrs	r3, r3, #7
 8006656:	61bb      	str	r3, [r7, #24]
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	2b7f      	cmp	r3, #127	; 0x7f
 800665c:	d8f0      	bhi.n	8006640 <SEGGER_SYSVIEW_SendModule+0xa0>
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	1c5a      	adds	r2, r3, #1
 8006662:	61fa      	str	r2, [r7, #28]
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	b2d2      	uxtb	r2, r2
 8006668:	701a      	strb	r2, [r3, #0]
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800666e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2280      	movs	r2, #128	; 0x80
 8006674:	4619      	mov	r1, r3
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f7fe fed2 	bl	8005420 <_EncodeStr>
 800667c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800667e:	2216      	movs	r2, #22
 8006680:	68f9      	ldr	r1, [r7, #12]
 8006682:	6938      	ldr	r0, [r7, #16]
 8006684:	f7ff f804 	bl	8005690 <_SendPacket>
      RECORD_END();
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800668e:	bf00      	nop
 8006690:	3730      	adds	r7, #48	; 0x30
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	2001367c 	.word	0x2001367c
 800669c:	20013684 	.word	0x20013684

080066a0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80066a6:	4b0c      	ldr	r3, [pc, #48]	; (80066d8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00f      	beq.n	80066ce <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80066ae:	4b0a      	ldr	r3, [pc, #40]	; (80066d8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d002      	beq.n	80066c2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1f2      	bne.n	80066b4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80066ce:	bf00      	nop
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	2001367c 	.word	0x2001367c

080066dc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80066dc:	b580      	push	{r7, lr}
 80066de:	b086      	sub	sp, #24
 80066e0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80066e2:	f3ef 8311 	mrs	r3, BASEPRI
 80066e6:	f04f 0120 	mov.w	r1, #32
 80066ea:	f381 8811 	msr	BASEPRI, r1
 80066ee:	60fb      	str	r3, [r7, #12]
 80066f0:	4817      	ldr	r0, [pc, #92]	; (8006750 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80066f2:	f7fe fee2 	bl	80054ba <_PreparePacket>
 80066f6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	617b      	str	r3, [r7, #20]
 8006700:	4b14      	ldr	r3, [pc, #80]	; (8006754 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	613b      	str	r3, [r7, #16]
 8006706:	e00b      	b.n	8006720 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	b2da      	uxtb	r2, r3
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	1c59      	adds	r1, r3, #1
 8006710:	6179      	str	r1, [r7, #20]
 8006712:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006716:	b2d2      	uxtb	r2, r2
 8006718:	701a      	strb	r2, [r3, #0]
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	09db      	lsrs	r3, r3, #7
 800671e:	613b      	str	r3, [r7, #16]
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	2b7f      	cmp	r3, #127	; 0x7f
 8006724:	d8f0      	bhi.n	8006708 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	1c5a      	adds	r2, r3, #1
 800672a:	617a      	str	r2, [r7, #20]
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	b2d2      	uxtb	r2, r2
 8006730:	701a      	strb	r2, [r3, #0]
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006736:	221b      	movs	r2, #27
 8006738:	6879      	ldr	r1, [r7, #4]
 800673a:	68b8      	ldr	r0, [r7, #8]
 800673c:	f7fe ffa8 	bl	8005690 <_SendPacket>
  RECORD_END();
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f383 8811 	msr	BASEPRI, r3
}
 8006746:	bf00      	nop
 8006748:	3718      	adds	r7, #24
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	20013684 	.word	0x20013684
 8006754:	20013680 	.word	0x20013680

08006758 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006758:	b580      	push	{r7, lr}
 800675a:	b08a      	sub	sp, #40	; 0x28
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006760:	f3ef 8311 	mrs	r3, BASEPRI
 8006764:	f04f 0120 	mov.w	r1, #32
 8006768:	f381 8811 	msr	BASEPRI, r1
 800676c:	617b      	str	r3, [r7, #20]
 800676e:	4827      	ldr	r0, [pc, #156]	; (800680c <SEGGER_SYSVIEW_Warn+0xb4>)
 8006770:	f7fe fea3 	bl	80054ba <_PreparePacket>
 8006774:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006776:	2280      	movs	r2, #128	; 0x80
 8006778:	6879      	ldr	r1, [r7, #4]
 800677a:	6938      	ldr	r0, [r7, #16]
 800677c:	f7fe fe50 	bl	8005420 <_EncodeStr>
 8006780:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	627b      	str	r3, [r7, #36]	; 0x24
 8006786:	2301      	movs	r3, #1
 8006788:	623b      	str	r3, [r7, #32]
 800678a:	e00b      	b.n	80067a4 <SEGGER_SYSVIEW_Warn+0x4c>
 800678c:	6a3b      	ldr	r3, [r7, #32]
 800678e:	b2da      	uxtb	r2, r3
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	1c59      	adds	r1, r3, #1
 8006794:	6279      	str	r1, [r7, #36]	; 0x24
 8006796:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800679a:	b2d2      	uxtb	r2, r2
 800679c:	701a      	strb	r2, [r3, #0]
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	09db      	lsrs	r3, r3, #7
 80067a2:	623b      	str	r3, [r7, #32]
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	2b7f      	cmp	r3, #127	; 0x7f
 80067a8:	d8f0      	bhi.n	800678c <SEGGER_SYSVIEW_Warn+0x34>
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	627a      	str	r2, [r7, #36]	; 0x24
 80067b0:	6a3a      	ldr	r2, [r7, #32]
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	61fb      	str	r3, [r7, #28]
 80067be:	2300      	movs	r3, #0
 80067c0:	61bb      	str	r3, [r7, #24]
 80067c2:	e00b      	b.n	80067dc <SEGGER_SYSVIEW_Warn+0x84>
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	1c59      	adds	r1, r3, #1
 80067cc:	61f9      	str	r1, [r7, #28]
 80067ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067d2:	b2d2      	uxtb	r2, r2
 80067d4:	701a      	strb	r2, [r3, #0]
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	09db      	lsrs	r3, r3, #7
 80067da:	61bb      	str	r3, [r7, #24]
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	2b7f      	cmp	r3, #127	; 0x7f
 80067e0:	d8f0      	bhi.n	80067c4 <SEGGER_SYSVIEW_Warn+0x6c>
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	1c5a      	adds	r2, r3, #1
 80067e6:	61fa      	str	r2, [r7, #28]
 80067e8:	69ba      	ldr	r2, [r7, #24]
 80067ea:	b2d2      	uxtb	r2, r2
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80067f2:	221a      	movs	r2, #26
 80067f4:	68f9      	ldr	r1, [r7, #12]
 80067f6:	6938      	ldr	r0, [r7, #16]
 80067f8:	f7fe ff4a 	bl	8005690 <_SendPacket>
  RECORD_END();
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f383 8811 	msr	BASEPRI, r3
}
 8006802:	bf00      	nop
 8006804:	3728      	adds	r7, #40	; 0x28
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	20013684 	.word	0x20013684

08006810 <__libc_init_array>:
 8006810:	b570      	push	{r4, r5, r6, lr}
 8006812:	4e0d      	ldr	r6, [pc, #52]	; (8006848 <__libc_init_array+0x38>)
 8006814:	4c0d      	ldr	r4, [pc, #52]	; (800684c <__libc_init_array+0x3c>)
 8006816:	1ba4      	subs	r4, r4, r6
 8006818:	10a4      	asrs	r4, r4, #2
 800681a:	2500      	movs	r5, #0
 800681c:	42a5      	cmp	r5, r4
 800681e:	d109      	bne.n	8006834 <__libc_init_array+0x24>
 8006820:	4e0b      	ldr	r6, [pc, #44]	; (8006850 <__libc_init_array+0x40>)
 8006822:	4c0c      	ldr	r4, [pc, #48]	; (8006854 <__libc_init_array+0x44>)
 8006824:	f000 f83a 	bl	800689c <_init>
 8006828:	1ba4      	subs	r4, r4, r6
 800682a:	10a4      	asrs	r4, r4, #2
 800682c:	2500      	movs	r5, #0
 800682e:	42a5      	cmp	r5, r4
 8006830:	d105      	bne.n	800683e <__libc_init_array+0x2e>
 8006832:	bd70      	pop	{r4, r5, r6, pc}
 8006834:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006838:	4798      	blx	r3
 800683a:	3501      	adds	r5, #1
 800683c:	e7ee      	b.n	800681c <__libc_init_array+0xc>
 800683e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006842:	4798      	blx	r3
 8006844:	3501      	adds	r5, #1
 8006846:	e7f2      	b.n	800682e <__libc_init_array+0x1e>
 8006848:	08006a30 	.word	0x08006a30
 800684c:	08006a30 	.word	0x08006a30
 8006850:	08006a30 	.word	0x08006a30
 8006854:	08006a34 	.word	0x08006a34

08006858 <memcmp>:
 8006858:	b530      	push	{r4, r5, lr}
 800685a:	2400      	movs	r4, #0
 800685c:	42a2      	cmp	r2, r4
 800685e:	d101      	bne.n	8006864 <memcmp+0xc>
 8006860:	2000      	movs	r0, #0
 8006862:	e007      	b.n	8006874 <memcmp+0x1c>
 8006864:	5d03      	ldrb	r3, [r0, r4]
 8006866:	3401      	adds	r4, #1
 8006868:	190d      	adds	r5, r1, r4
 800686a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800686e:	42ab      	cmp	r3, r5
 8006870:	d0f4      	beq.n	800685c <memcmp+0x4>
 8006872:	1b58      	subs	r0, r3, r5
 8006874:	bd30      	pop	{r4, r5, pc}

08006876 <memcpy>:
 8006876:	b510      	push	{r4, lr}
 8006878:	1e43      	subs	r3, r0, #1
 800687a:	440a      	add	r2, r1
 800687c:	4291      	cmp	r1, r2
 800687e:	d100      	bne.n	8006882 <memcpy+0xc>
 8006880:	bd10      	pop	{r4, pc}
 8006882:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006886:	f803 4f01 	strb.w	r4, [r3, #1]!
 800688a:	e7f7      	b.n	800687c <memcpy+0x6>

0800688c <memset>:
 800688c:	4402      	add	r2, r0
 800688e:	4603      	mov	r3, r0
 8006890:	4293      	cmp	r3, r2
 8006892:	d100      	bne.n	8006896 <memset+0xa>
 8006894:	4770      	bx	lr
 8006896:	f803 1b01 	strb.w	r1, [r3], #1
 800689a:	e7f9      	b.n	8006890 <memset+0x4>

0800689c <_init>:
 800689c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689e:	bf00      	nop
 80068a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068a2:	bc08      	pop	{r3}
 80068a4:	469e      	mov	lr, r3
 80068a6:	4770      	bx	lr

080068a8 <_fini>:
 80068a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068aa:	bf00      	nop
 80068ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ae:	bc08      	pop	{r3}
 80068b0:	469e      	mov	lr, r3
 80068b2:	4770      	bx	lr
