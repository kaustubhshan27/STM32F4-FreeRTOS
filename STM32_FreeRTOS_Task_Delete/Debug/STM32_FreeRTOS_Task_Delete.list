
STM32_FreeRTOS_Task_Delete.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004194  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004334  08004334  00014334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004374  08004374  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004374  08004374  00014374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800437c  0800437c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800437c  0800437c  0001437c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004380  08004380  00014380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e0c  20000010  08004394  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012e1c  08004394  00022e1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010537  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024fe  00000000  00000000  00030577  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e40  00000000  00000000  00032a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d28  00000000  00000000  000338b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017211  00000000  00000000  000345e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b36f  00000000  00000000  0004b7f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009190e  00000000  00000000  00056b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e846e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003aac  00000000  00000000  000e84ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800431c 	.word	0x0800431c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	0800431c 	.word	0x0800431c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e6:	f000 fa39 	bl	800095c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ea:	f000 f827 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ee:	f000 f883 	bl	80005f8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  xTaskCreate((pdTASK_CODE) vTask1_handler, "Task1", 500, NULL, 1,
 80004f2:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <main+0x44>)
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2301      	movs	r3, #1
 80004f8:	9300      	str	r3, [sp, #0]
 80004fa:	2300      	movs	r3, #0
 80004fc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000500:	4909      	ldr	r1, [pc, #36]	; (8000528 <main+0x48>)
 8000502:	480a      	ldr	r0, [pc, #40]	; (800052c <main+0x4c>)
 8000504:	f002 f8e2 	bl	80026cc <xTaskCreate>
  			&xTaskHandle_task1);
  xTaskCreate((pdTASK_CODE) vTask2_handler, "Task2", 500, NULL, 2,
 8000508:	4b09      	ldr	r3, [pc, #36]	; (8000530 <main+0x50>)
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	2302      	movs	r3, #2
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	2300      	movs	r3, #0
 8000512:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000516:	4907      	ldr	r1, [pc, #28]	; (8000534 <main+0x54>)
 8000518:	4807      	ldr	r0, [pc, #28]	; (8000538 <main+0x58>)
 800051a:	f002 f8d7 	bl	80026cc <xTaskCreate>
  			&xTaskHandle_task2);

  vTaskStartScheduler();
 800051e:	f002 fad9 	bl	8002ad4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000522:	e7fe      	b.n	8000522 <main+0x42>
 8000524:	2000002c 	.word	0x2000002c
 8000528:	08004334 	.word	0x08004334
 800052c:	080006b1 	.word	0x080006b1
 8000530:	20000030 	.word	0x20000030
 8000534:	0800433c 	.word	0x0800433c
 8000538:	080006c5 	.word	0x080006c5

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b094      	sub	sp, #80	; 0x50
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0320 	add.w	r3, r7, #32
 8000546:	2230      	movs	r2, #48	; 0x30
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f003 fedd 	bl	800430a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
 800055e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000560:	2300      	movs	r3, #0
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <SystemClock_Config+0xb4>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	4a21      	ldr	r2, [pc, #132]	; (80005f0 <SystemClock_Config+0xb4>)
 800056a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056e:	6413      	str	r3, [r2, #64]	; 0x40
 8000570:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <SystemClock_Config+0xb4>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000578:	60bb      	str	r3, [r7, #8]
 800057a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <SystemClock_Config+0xb8>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a1b      	ldr	r2, [pc, #108]	; (80005f4 <SystemClock_Config+0xb8>)
 8000586:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b19      	ldr	r3, [pc, #100]	; (80005f4 <SystemClock_Config+0xb8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000598:	2302      	movs	r3, #2
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059c:	2301      	movs	r3, #1
 800059e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a0:	2310      	movs	r3, #16
 80005a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a4:	2300      	movs	r3, #0
 80005a6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0320 	add.w	r3, r7, #32
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 fcc5 	bl	8000f3c <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005b8:	f000 f8dd 	bl	8000776 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 ff20 	bl	800141c <HAL_RCC_ClockConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005e2:	f000 f8c8 	bl	8000776 <Error_Handler>
  }
}
 80005e6:	bf00      	nop
 80005e8:	3750      	adds	r7, #80	; 0x50
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40023800 	.word	0x40023800
 80005f4:	40007000 	.word	0x40007000

080005f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	4b23      	ldr	r3, [pc, #140]	; (80006a0 <MX_GPIO_Init+0xa8>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a22      	ldr	r2, [pc, #136]	; (80006a0 <MX_GPIO_Init+0xa8>)
 8000618:	f043 0304 	orr.w	r3, r3, #4
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <MX_GPIO_Init+0xa8>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0304 	and.w	r3, r3, #4
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <MX_GPIO_Init+0xa8>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a1b      	ldr	r2, [pc, #108]	; (80006a0 <MX_GPIO_Init+0xa8>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <MX_GPIO_Init+0xa8>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0301 	and.w	r3, r3, #1
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2120      	movs	r1, #32
 800064a:	4816      	ldr	r0, [pc, #88]	; (80006a4 <MX_GPIO_Init+0xac>)
 800064c:	f000 fc44 	bl	8000ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000654:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <MX_GPIO_Init+0xb0>)
 8000658:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	4619      	mov	r1, r3
 8000664:	4811      	ldr	r0, [pc, #68]	; (80006ac <MX_GPIO_Init+0xb4>)
 8000666:	f000 fa9d 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800066a:	2320      	movs	r3, #32
 800066c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	4619      	mov	r1, r3
 8000680:	4808      	ldr	r0, [pc, #32]	; (80006a4 <MX_GPIO_Init+0xac>)
 8000682:	f000 fa8f 	bl	8000ba4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2100      	movs	r1, #0
 800068a:	2028      	movs	r0, #40	; 0x28
 800068c:	f000 fa60 	bl	8000b50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000690:	2028      	movs	r0, #40	; 0x28
 8000692:	f000 fa79 	bl	8000b88 <HAL_NVIC_EnableIRQ>

}
 8000696:	bf00      	nop
 8000698:	3720      	adds	r7, #32
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020000 	.word	0x40020000
 80006a8:	10210000 	.word	0x10210000
 80006ac:	40020800 	.word	0x40020800

080006b0 <vTask1_handler>:

/* USER CODE BEGIN 4 */
void vTask1_handler(void) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	while (1) {
			toggle_LED();
 80006b4:	f000 f824 	bl	8000700 <toggle_LED>
			vTaskDelay(2000); //2000ms period for LED toggling
 80006b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006bc:	f002 f9d6 	bl	8002a6c <vTaskDelay>
			toggle_LED();
 80006c0:	e7f8      	b.n	80006b4 <vTask1_handler+0x4>
	...

080006c4 <vTask2_handler>:
		}
}

void vTask2_handler(void) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	while (1) {
		if(button_status == NOT_PRESSED)
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <vTask2_handler+0x38>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	f083 0301 	eor.w	r3, r3, #1
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d006      	beq.n	80006e4 <vTask2_handler+0x20>
		{
			toggle_LED();
 80006d6:	f000 f813 	bl	8000700 <toggle_LED>
			vTaskDelay(500); //500ms period for LED toggling
 80006da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006de:	f002 f9c5 	bl	8002a6c <vTaskDelay>
 80006e2:	e7f1      	b.n	80006c8 <vTask2_handler+0x4>
		}
		else if(button_status == PRESSED)
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <vTask2_handler+0x38>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d0ed      	beq.n	80006c8 <vTask2_handler+0x4>
		{
			vTaskDelete(NULL);
 80006ec:	2000      	movs	r0, #0
 80006ee:	f002 f92f 	bl	8002950 <vTaskDelete>
			button_status = NOT_PRESSED;
 80006f2:	4b02      	ldr	r3, [pc, #8]	; (80006fc <vTask2_handler+0x38>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
		if(button_status == NOT_PRESSED)
 80006f8:	e7e6      	b.n	80006c8 <vTask2_handler+0x4>
 80006fa:	bf00      	nop
 80006fc:	20000034 	.word	0x20000034

08000700 <toggle_LED>:
		}
	}
}

void toggle_LED(void) {
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5))
 8000704:	2120      	movs	r1, #32
 8000706:	4809      	ldr	r0, [pc, #36]	; (800072c <toggle_LED+0x2c>)
 8000708:	f000 fbce 	bl	8000ea8 <HAL_GPIO_ReadPin>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d105      	bne.n	800071e <toggle_LED+0x1e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	2120      	movs	r1, #32
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <toggle_LED+0x2c>)
 8000718:	f000 fbde 	bl	8000ed8 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
}
 800071c:	e004      	b.n	8000728 <toggle_LED+0x28>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	2120      	movs	r1, #32
 8000722:	4802      	ldr	r0, [pc, #8]	; (800072c <toggle_LED+0x2c>)
 8000724:	f000 fbd8 	bl	8000ed8 <HAL_GPIO_WritePin>
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40020000 	.word	0x40020000

08000730 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 800073a:	88fb      	ldrh	r3, [r7, #6]
 800073c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000740:	d102      	bne.n	8000748 <HAL_GPIO_EXTI_Callback+0x18>
	{
		button_status = PRESSED;
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <HAL_GPIO_EXTI_Callback+0x24>)
 8000744:	2201      	movs	r2, #1
 8000746:	701a      	strb	r2, [r3, #0]
	}
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	20000034 	.word	0x20000034

08000758 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000768:	d101      	bne.n	800076e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800076a:	f000 f919 	bl	80009a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <HAL_MspInit+0x4c>)
 8000790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000792:	4a0f      	ldr	r2, [pc, #60]	; (80007d0 <HAL_MspInit+0x4c>)
 8000794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000798:	6453      	str	r3, [r2, #68]	; 0x44
 800079a:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <HAL_MspInit+0x4c>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800079e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <HAL_MspInit+0x4c>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ae:	4a08      	ldr	r2, [pc, #32]	; (80007d0 <HAL_MspInit+0x4c>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b4:	6413      	str	r3, [r2, #64]	; 0x40
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <HAL_MspInit+0x4c>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40023800 	.word	0x40023800

080007d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08c      	sub	sp, #48	; 0x30
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 80007e4:	2200      	movs	r2, #0
 80007e6:	6879      	ldr	r1, [r7, #4]
 80007e8:	201c      	movs	r0, #28
 80007ea:	f000 f9b1 	bl	8000b50 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 80007ee:	201c      	movs	r0, #28
 80007f0:	f000 f9ca 	bl	8000b88 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <HAL_InitTick+0xa4>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	4a1e      	ldr	r2, [pc, #120]	; (8000878 <HAL_InitTick+0xa4>)
 80007fe:	f043 0301 	orr.w	r3, r3, #1
 8000802:	6413      	str	r3, [r2, #64]	; 0x40
 8000804:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <HAL_InitTick+0xa4>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	f003 0301 	and.w	r3, r3, #1
 800080c:	60fb      	str	r3, [r7, #12]
 800080e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000810:	f107 0210 	add.w	r2, r7, #16
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4611      	mov	r1, r2
 800081a:	4618      	mov	r0, r3
 800081c:	f000 ffb6 	bl	800178c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000820:	f000 ffa0 	bl	8001764 <HAL_RCC_GetPCLK1Freq>
 8000824:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000828:	4a14      	ldr	r2, [pc, #80]	; (800087c <HAL_InitTick+0xa8>)
 800082a:	fba2 2303 	umull	r2, r3, r2, r3
 800082e:	0c9b      	lsrs	r3, r3, #18
 8000830:	3b01      	subs	r3, #1
 8000832:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_InitTick+0xac>)
 8000836:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800083a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 800083c:	4b10      	ldr	r3, [pc, #64]	; (8000880 <HAL_InitTick+0xac>)
 800083e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000842:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000844:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <HAL_InitTick+0xac>)
 8000846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000848:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <HAL_InitTick+0xac>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <HAL_InitTick+0xac>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000856:	480a      	ldr	r0, [pc, #40]	; (8000880 <HAL_InitTick+0xac>)
 8000858:	f000 ffca 	bl	80017f0 <HAL_TIM_Base_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d104      	bne.n	800086c <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000862:	4807      	ldr	r0, [pc, #28]	; (8000880 <HAL_InitTick+0xac>)
 8000864:	f000 fff9 	bl	800185a <HAL_TIM_Base_Start_IT>
 8000868:	4603      	mov	r3, r0
 800086a:	e000      	b.n	800086e <HAL_InitTick+0x9a>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800086c:	2301      	movs	r3, #1
}
 800086e:	4618      	mov	r0, r3
 8000870:	3730      	adds	r7, #48	; 0x30
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	431bde83 	.word	0x431bde83
 8000880:	20012d98 	.word	0x20012d98

08000884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <HardFault_Handler+0x4>

08000898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <MemManage_Handler+0x4>

0800089e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008a2:	e7fe      	b.n	80008a2 <BusFault_Handler+0x4>

080008a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <UsageFault_Handler+0x4>

080008aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <TIM2_IRQHandler+0x10>)
 80008be:	f000 fff0 	bl	80018a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20012d98 	.word	0x20012d98

080008cc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80008d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80008d4:	f000 fb1a 	bl	8000f0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}

080008dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <SystemInit+0x28>)
 80008e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008e6:	4a07      	ldr	r2, [pc, #28]	; (8000904 <SystemInit+0x28>)
 80008e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008f0:	4b04      	ldr	r3, [pc, #16]	; (8000904 <SystemInit+0x28>)
 80008f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008f6:	609a      	str	r2, [r3, #8]
#endif
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000908:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000940 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800090c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800090e:	e003      	b.n	8000918 <LoopCopyDataInit>

08000910 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000912:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000914:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000916:	3104      	adds	r1, #4

08000918 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000918:	480b      	ldr	r0, [pc, #44]	; (8000948 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800091c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800091e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000920:	d3f6      	bcc.n	8000910 <CopyDataInit>
  ldr  r2, =_sbss
 8000922:	4a0b      	ldr	r2, [pc, #44]	; (8000950 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000924:	e002      	b.n	800092c <LoopFillZerobss>

08000926 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000926:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000928:	f842 3b04 	str.w	r3, [r2], #4

0800092c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800092e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000930:	d3f9      	bcc.n	8000926 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000932:	f7ff ffd3 	bl	80008dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000936:	f003 fcb9 	bl	80042ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800093a:	f7ff fdd1 	bl	80004e0 <main>
  bx  lr    
 800093e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000940:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000944:	08004384 	.word	0x08004384
  ldr  r0, =_sdata
 8000948:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800094c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000950:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000954:	20012e1c 	.word	0x20012e1c

08000958 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000958:	e7fe      	b.n	8000958 <ADC_IRQHandler>
	...

0800095c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000960:	4b0e      	ldr	r3, [pc, #56]	; (800099c <HAL_Init+0x40>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0d      	ldr	r2, [pc, #52]	; (800099c <HAL_Init+0x40>)
 8000966:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800096a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800096c:	4b0b      	ldr	r3, [pc, #44]	; (800099c <HAL_Init+0x40>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a0a      	ldr	r2, [pc, #40]	; (800099c <HAL_Init+0x40>)
 8000972:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000976:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <HAL_Init+0x40>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a07      	ldr	r2, [pc, #28]	; (800099c <HAL_Init+0x40>)
 800097e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000982:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000984:	2003      	movs	r0, #3
 8000986:	f000 f8d8 	bl	8000b3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800098a:	2000      	movs	r0, #0
 800098c:	f7ff ff22 	bl	80007d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000990:	f7ff fef8 	bl	8000784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023c00 	.word	0x40023c00

080009a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_IncTick+0x20>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_IncTick+0x24>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4413      	add	r3, r2
 80009b0:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <HAL_IncTick+0x24>)
 80009b2:	6013      	str	r3, [r2, #0]
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	20000008 	.word	0x20000008
 80009c4:	20012dd8 	.word	0x20012dd8

080009c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return uwTick;
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <HAL_GetTick+0x14>)
 80009ce:	681b      	ldr	r3, [r3, #0]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20012dd8 	.word	0x20012dd8

080009e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009fc:	4013      	ands	r3, r2
 80009fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a12:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	60d3      	str	r3, [r2, #12]
}
 8000a18:	bf00      	nop
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <__NVIC_GetPriorityGrouping+0x18>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	0a1b      	lsrs	r3, r3, #8
 8000a32:	f003 0307 	and.w	r3, r3, #7
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	db0b      	blt.n	8000a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	f003 021f 	and.w	r2, r3, #31
 8000a5c:	4907      	ldr	r1, [pc, #28]	; (8000a7c <__NVIC_EnableIRQ+0x38>)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	095b      	lsrs	r3, r3, #5
 8000a64:	2001      	movs	r0, #1
 8000a66:	fa00 f202 	lsl.w	r2, r0, r2
 8000a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000e100 	.word	0xe000e100

08000a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	6039      	str	r1, [r7, #0]
 8000a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	db0a      	blt.n	8000aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	490c      	ldr	r1, [pc, #48]	; (8000acc <__NVIC_SetPriority+0x4c>)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	0112      	lsls	r2, r2, #4
 8000aa0:	b2d2      	uxtb	r2, r2
 8000aa2:	440b      	add	r3, r1
 8000aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa8:	e00a      	b.n	8000ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4908      	ldr	r1, [pc, #32]	; (8000ad0 <__NVIC_SetPriority+0x50>)
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	f003 030f 	and.w	r3, r3, #15
 8000ab6:	3b04      	subs	r3, #4
 8000ab8:	0112      	lsls	r2, r2, #4
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	440b      	add	r3, r1
 8000abe:	761a      	strb	r2, [r3, #24]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000e100 	.word	0xe000e100
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b089      	sub	sp, #36	; 0x24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	f1c3 0307 	rsb	r3, r3, #7
 8000aee:	2b04      	cmp	r3, #4
 8000af0:	bf28      	it	cs
 8000af2:	2304      	movcs	r3, #4
 8000af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3304      	adds	r3, #4
 8000afa:	2b06      	cmp	r3, #6
 8000afc:	d902      	bls.n	8000b04 <NVIC_EncodePriority+0x30>
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3b03      	subs	r3, #3
 8000b02:	e000      	b.n	8000b06 <NVIC_EncodePriority+0x32>
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43da      	mvns	r2, r3
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	401a      	ands	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	43d9      	mvns	r1, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	4313      	orrs	r3, r2
         );
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3724      	adds	r7, #36	; 0x24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b082      	sub	sp, #8
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f7ff ff4c 	bl	80009e0 <__NVIC_SetPriorityGrouping>
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
 8000b5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b62:	f7ff ff61 	bl	8000a28 <__NVIC_GetPriorityGrouping>
 8000b66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	68b9      	ldr	r1, [r7, #8]
 8000b6c:	6978      	ldr	r0, [r7, #20]
 8000b6e:	f7ff ffb1 	bl	8000ad4 <NVIC_EncodePriority>
 8000b72:	4602      	mov	r2, r0
 8000b74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b78:	4611      	mov	r1, r2
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff ff80 	bl	8000a80 <__NVIC_SetPriority>
}
 8000b80:	bf00      	nop
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	4603      	mov	r3, r0
 8000b90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff ff54 	bl	8000a44 <__NVIC_EnableIRQ>
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b089      	sub	sp, #36	; 0x24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
 8000bbe:	e159      	b.n	8000e74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	697a      	ldr	r2, [r7, #20]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	f040 8148 	bne.w	8000e6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d00b      	beq.n	8000bfe <HAL_GPIO_Init+0x5a>
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d007      	beq.n	8000bfe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bf2:	2b11      	cmp	r3, #17
 8000bf4:	d003      	beq.n	8000bfe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	2b12      	cmp	r3, #18
 8000bfc:	d130      	bne.n	8000c60 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	2203      	movs	r2, #3
 8000c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	4013      	ands	r3, r2
 8000c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	68da      	ldr	r2, [r3, #12]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c34:	2201      	movs	r2, #1
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	091b      	lsrs	r3, r3, #4
 8000c4a:	f003 0201 	and.w	r2, r3, #1
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4013      	ands	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	689a      	ldr	r2, [r3, #8]
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d003      	beq.n	8000ca0 <HAL_GPIO_Init+0xfc>
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	2b12      	cmp	r3, #18
 8000c9e:	d123      	bne.n	8000ce8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	08da      	lsrs	r2, r3, #3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3208      	adds	r2, #8
 8000ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	f003 0307 	and.w	r3, r3, #7
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	220f      	movs	r2, #15
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	691a      	ldr	r2, [r3, #16]
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	08da      	lsrs	r2, r3, #3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	3208      	adds	r2, #8
 8000ce2:	69b9      	ldr	r1, [r7, #24]
 8000ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 0203 	and.w	r2, r3, #3
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	f000 80a2 	beq.w	8000e6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	4b56      	ldr	r3, [pc, #344]	; (8000e88 <HAL_GPIO_Init+0x2e4>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	4a55      	ldr	r2, [pc, #340]	; (8000e88 <HAL_GPIO_Init+0x2e4>)
 8000d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d38:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3a:	4b53      	ldr	r3, [pc, #332]	; (8000e88 <HAL_GPIO_Init+0x2e4>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d46:	4a51      	ldr	r2, [pc, #324]	; (8000e8c <HAL_GPIO_Init+0x2e8>)
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	089b      	lsrs	r3, r3, #2
 8000d4c:	3302      	adds	r3, #2
 8000d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	f003 0303 	and.w	r3, r3, #3
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	220f      	movs	r2, #15
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4013      	ands	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a48      	ldr	r2, [pc, #288]	; (8000e90 <HAL_GPIO_Init+0x2ec>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d019      	beq.n	8000da6 <HAL_GPIO_Init+0x202>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a47      	ldr	r2, [pc, #284]	; (8000e94 <HAL_GPIO_Init+0x2f0>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d013      	beq.n	8000da2 <HAL_GPIO_Init+0x1fe>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a46      	ldr	r2, [pc, #280]	; (8000e98 <HAL_GPIO_Init+0x2f4>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d00d      	beq.n	8000d9e <HAL_GPIO_Init+0x1fa>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a45      	ldr	r2, [pc, #276]	; (8000e9c <HAL_GPIO_Init+0x2f8>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d007      	beq.n	8000d9a <HAL_GPIO_Init+0x1f6>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a44      	ldr	r2, [pc, #272]	; (8000ea0 <HAL_GPIO_Init+0x2fc>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d101      	bne.n	8000d96 <HAL_GPIO_Init+0x1f2>
 8000d92:	2304      	movs	r3, #4
 8000d94:	e008      	b.n	8000da8 <HAL_GPIO_Init+0x204>
 8000d96:	2307      	movs	r3, #7
 8000d98:	e006      	b.n	8000da8 <HAL_GPIO_Init+0x204>
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	e004      	b.n	8000da8 <HAL_GPIO_Init+0x204>
 8000d9e:	2302      	movs	r3, #2
 8000da0:	e002      	b.n	8000da8 <HAL_GPIO_Init+0x204>
 8000da2:	2301      	movs	r3, #1
 8000da4:	e000      	b.n	8000da8 <HAL_GPIO_Init+0x204>
 8000da6:	2300      	movs	r3, #0
 8000da8:	69fa      	ldr	r2, [r7, #28]
 8000daa:	f002 0203 	and.w	r2, r2, #3
 8000dae:	0092      	lsls	r2, r2, #2
 8000db0:	4093      	lsls	r3, r2
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000db8:	4934      	ldr	r1, [pc, #208]	; (8000e8c <HAL_GPIO_Init+0x2e8>)
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	089b      	lsrs	r3, r3, #2
 8000dbe:	3302      	adds	r3, #2
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dc6:	4b37      	ldr	r3, [pc, #220]	; (8000ea4 <HAL_GPIO_Init+0x300>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d003      	beq.n	8000dea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dea:	4a2e      	ldr	r2, [pc, #184]	; (8000ea4 <HAL_GPIO_Init+0x300>)
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000df0:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <HAL_GPIO_Init+0x300>)
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d003      	beq.n	8000e14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e14:	4a23      	ldr	r2, [pc, #140]	; (8000ea4 <HAL_GPIO_Init+0x300>)
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e1a:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <HAL_GPIO_Init+0x300>)
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	43db      	mvns	r3, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4013      	ands	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d003      	beq.n	8000e3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e3e:	4a19      	ldr	r2, [pc, #100]	; (8000ea4 <HAL_GPIO_Init+0x300>)
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e44:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <HAL_GPIO_Init+0x300>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d003      	beq.n	8000e68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e68:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <HAL_GPIO_Init+0x300>)
 8000e6a:	69bb      	ldr	r3, [r7, #24]
 8000e6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3301      	adds	r3, #1
 8000e72:	61fb      	str	r3, [r7, #28]
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	2b0f      	cmp	r3, #15
 8000e78:	f67f aea2 	bls.w	8000bc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	3724      	adds	r7, #36	; 0x24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40013800 	.word	0x40013800
 8000e90:	40020000 	.word	0x40020000
 8000e94:	40020400 	.word	0x40020400
 8000e98:	40020800 	.word	0x40020800
 8000e9c:	40020c00 	.word	0x40020c00
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	40013c00 	.word	0x40013c00

08000ea8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	691a      	ldr	r2, [r3, #16]
 8000eb8:	887b      	ldrh	r3, [r7, #2]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d002      	beq.n	8000ec6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	73fb      	strb	r3, [r7, #15]
 8000ec4:	e001      	b.n	8000eca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	807b      	strh	r3, [r7, #2]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ee8:	787b      	ldrb	r3, [r7, #1]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eee:	887a      	ldrh	r2, [r7, #2]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ef4:	e003      	b.n	8000efe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ef6:	887b      	ldrh	r3, [r7, #2]
 8000ef8:	041a      	lsls	r2, r3, #16
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	619a      	str	r2, [r3, #24]
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
	...

08000f0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f18:	695a      	ldr	r2, [r3, #20]
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d006      	beq.n	8000f30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f22:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f24:	88fb      	ldrh	r3, [r7, #6]
 8000f26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f7ff fc00 	bl	8000730 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40013c00 	.word	0x40013c00

08000f3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e25b      	b.n	8001406 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d075      	beq.n	8001046 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f5a:	4ba3      	ldr	r3, [pc, #652]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f003 030c 	and.w	r3, r3, #12
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	d00c      	beq.n	8000f80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f66:	4ba0      	ldr	r3, [pc, #640]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f6e:	2b08      	cmp	r3, #8
 8000f70:	d112      	bne.n	8000f98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f72:	4b9d      	ldr	r3, [pc, #628]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f7e:	d10b      	bne.n	8000f98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f80:	4b99      	ldr	r3, [pc, #612]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d05b      	beq.n	8001044 <HAL_RCC_OscConfig+0x108>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d157      	bne.n	8001044 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e236      	b.n	8001406 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fa0:	d106      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x74>
 8000fa2:	4b91      	ldr	r3, [pc, #580]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a90      	ldr	r2, [pc, #576]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8000fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	e01d      	b.n	8000fec <HAL_RCC_OscConfig+0xb0>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fb8:	d10c      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x98>
 8000fba:	4b8b      	ldr	r3, [pc, #556]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a8a      	ldr	r2, [pc, #552]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8000fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	4b88      	ldr	r3, [pc, #544]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a87      	ldr	r2, [pc, #540]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8000fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	e00b      	b.n	8000fec <HAL_RCC_OscConfig+0xb0>
 8000fd4:	4b84      	ldr	r3, [pc, #528]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a83      	ldr	r2, [pc, #524]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8000fda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	4b81      	ldr	r3, [pc, #516]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a80      	ldr	r2, [pc, #512]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8000fe6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d013      	beq.n	800101c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fce8 	bl	80009c8 <HAL_GetTick>
 8000ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffa:	e008      	b.n	800100e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ffc:	f7ff fce4 	bl	80009c8 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b64      	cmp	r3, #100	; 0x64
 8001008:	d901      	bls.n	800100e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e1fb      	b.n	8001406 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100e:	4b76      	ldr	r3, [pc, #472]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f0      	beq.n	8000ffc <HAL_RCC_OscConfig+0xc0>
 800101a:	e014      	b.n	8001046 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101c:	f7ff fcd4 	bl	80009c8 <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001024:	f7ff fcd0 	bl	80009c8 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b64      	cmp	r3, #100	; 0x64
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e1e7      	b.n	8001406 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001036:	4b6c      	ldr	r3, [pc, #432]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f0      	bne.n	8001024 <HAL_RCC_OscConfig+0xe8>
 8001042:	e000      	b.n	8001046 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d063      	beq.n	800111a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001052:	4b65      	ldr	r3, [pc, #404]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 030c 	and.w	r3, r3, #12
 800105a:	2b00      	cmp	r3, #0
 800105c:	d00b      	beq.n	8001076 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800105e:	4b62      	ldr	r3, [pc, #392]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001066:	2b08      	cmp	r3, #8
 8001068:	d11c      	bne.n	80010a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800106a:	4b5f      	ldr	r3, [pc, #380]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d116      	bne.n	80010a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001076:	4b5c      	ldr	r3, [pc, #368]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d005      	beq.n	800108e <HAL_RCC_OscConfig+0x152>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d001      	beq.n	800108e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e1bb      	b.n	8001406 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108e:	4b56      	ldr	r3, [pc, #344]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	4952      	ldr	r1, [pc, #328]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 800109e:	4313      	orrs	r3, r2
 80010a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a2:	e03a      	b.n	800111a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d020      	beq.n	80010ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010ac:	4b4f      	ldr	r3, [pc, #316]	; (80011ec <HAL_RCC_OscConfig+0x2b0>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b2:	f7ff fc89 	bl	80009c8 <HAL_GetTick>
 80010b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b8:	e008      	b.n	80010cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ba:	f7ff fc85 	bl	80009c8 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e19c      	b.n	8001406 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010cc:	4b46      	ldr	r3, [pc, #280]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0f0      	beq.n	80010ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d8:	4b43      	ldr	r3, [pc, #268]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	4940      	ldr	r1, [pc, #256]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	600b      	str	r3, [r1, #0]
 80010ec:	e015      	b.n	800111a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ee:	4b3f      	ldr	r3, [pc, #252]	; (80011ec <HAL_RCC_OscConfig+0x2b0>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f4:	f7ff fc68 	bl	80009c8 <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010fc:	f7ff fc64 	bl	80009c8 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e17b      	b.n	8001406 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110e:	4b36      	ldr	r3, [pc, #216]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f0      	bne.n	80010fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	2b00      	cmp	r3, #0
 8001124:	d030      	beq.n	8001188 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d016      	beq.n	800115c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800112e:	4b30      	ldr	r3, [pc, #192]	; (80011f0 <HAL_RCC_OscConfig+0x2b4>)
 8001130:	2201      	movs	r2, #1
 8001132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001134:	f7ff fc48 	bl	80009c8 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800113c:	f7ff fc44 	bl	80009c8 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e15b      	b.n	8001406 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800114e:	4b26      	ldr	r3, [pc, #152]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 8001150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0f0      	beq.n	800113c <HAL_RCC_OscConfig+0x200>
 800115a:	e015      	b.n	8001188 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800115c:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <HAL_RCC_OscConfig+0x2b4>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001162:	f7ff fc31 	bl	80009c8 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800116a:	f7ff fc2d 	bl	80009c8 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e144      	b.n	8001406 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 800117e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d1f0      	bne.n	800116a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 80a0 	beq.w	80012d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001196:	2300      	movs	r3, #0
 8001198:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d10f      	bne.n	80011c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b4:	6413      	str	r3, [r2, #64]	; 0x40
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <HAL_RCC_OscConfig+0x2ac>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011c2:	2301      	movs	r3, #1
 80011c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <HAL_RCC_OscConfig+0x2b8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d121      	bne.n	8001216 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <HAL_RCC_OscConfig+0x2b8>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a07      	ldr	r2, [pc, #28]	; (80011f4 <HAL_RCC_OscConfig+0x2b8>)
 80011d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011de:	f7ff fbf3 	bl	80009c8 <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e4:	e011      	b.n	800120a <HAL_RCC_OscConfig+0x2ce>
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800
 80011ec:	42470000 	.word	0x42470000
 80011f0:	42470e80 	.word	0x42470e80
 80011f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f8:	f7ff fbe6 	bl	80009c8 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e0fd      	b.n	8001406 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800120a:	4b81      	ldr	r3, [pc, #516]	; (8001410 <HAL_RCC_OscConfig+0x4d4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0f0      	beq.n	80011f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d106      	bne.n	800122c <HAL_RCC_OscConfig+0x2f0>
 800121e:	4b7d      	ldr	r3, [pc, #500]	; (8001414 <HAL_RCC_OscConfig+0x4d8>)
 8001220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001222:	4a7c      	ldr	r2, [pc, #496]	; (8001414 <HAL_RCC_OscConfig+0x4d8>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6713      	str	r3, [r2, #112]	; 0x70
 800122a:	e01c      	b.n	8001266 <HAL_RCC_OscConfig+0x32a>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	2b05      	cmp	r3, #5
 8001232:	d10c      	bne.n	800124e <HAL_RCC_OscConfig+0x312>
 8001234:	4b77      	ldr	r3, [pc, #476]	; (8001414 <HAL_RCC_OscConfig+0x4d8>)
 8001236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001238:	4a76      	ldr	r2, [pc, #472]	; (8001414 <HAL_RCC_OscConfig+0x4d8>)
 800123a:	f043 0304 	orr.w	r3, r3, #4
 800123e:	6713      	str	r3, [r2, #112]	; 0x70
 8001240:	4b74      	ldr	r3, [pc, #464]	; (8001414 <HAL_RCC_OscConfig+0x4d8>)
 8001242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001244:	4a73      	ldr	r2, [pc, #460]	; (8001414 <HAL_RCC_OscConfig+0x4d8>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6713      	str	r3, [r2, #112]	; 0x70
 800124c:	e00b      	b.n	8001266 <HAL_RCC_OscConfig+0x32a>
 800124e:	4b71      	ldr	r3, [pc, #452]	; (8001414 <HAL_RCC_OscConfig+0x4d8>)
 8001250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001252:	4a70      	ldr	r2, [pc, #448]	; (8001414 <HAL_RCC_OscConfig+0x4d8>)
 8001254:	f023 0301 	bic.w	r3, r3, #1
 8001258:	6713      	str	r3, [r2, #112]	; 0x70
 800125a:	4b6e      	ldr	r3, [pc, #440]	; (8001414 <HAL_RCC_OscConfig+0x4d8>)
 800125c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125e:	4a6d      	ldr	r2, [pc, #436]	; (8001414 <HAL_RCC_OscConfig+0x4d8>)
 8001260:	f023 0304 	bic.w	r3, r3, #4
 8001264:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d015      	beq.n	800129a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800126e:	f7ff fbab 	bl	80009c8 <HAL_GetTick>
 8001272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001274:	e00a      	b.n	800128c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001276:	f7ff fba7 	bl	80009c8 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	f241 3288 	movw	r2, #5000	; 0x1388
 8001284:	4293      	cmp	r3, r2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e0bc      	b.n	8001406 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800128c:	4b61      	ldr	r3, [pc, #388]	; (8001414 <HAL_RCC_OscConfig+0x4d8>)
 800128e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d0ee      	beq.n	8001276 <HAL_RCC_OscConfig+0x33a>
 8001298:	e014      	b.n	80012c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129a:	f7ff fb95 	bl	80009c8 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a0:	e00a      	b.n	80012b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012a2:	f7ff fb91 	bl	80009c8 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e0a6      	b.n	8001406 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b8:	4b56      	ldr	r3, [pc, #344]	; (8001414 <HAL_RCC_OscConfig+0x4d8>)
 80012ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1ee      	bne.n	80012a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d105      	bne.n	80012d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ca:	4b52      	ldr	r3, [pc, #328]	; (8001414 <HAL_RCC_OscConfig+0x4d8>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	4a51      	ldr	r2, [pc, #324]	; (8001414 <HAL_RCC_OscConfig+0x4d8>)
 80012d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 8092 	beq.w	8001404 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012e0:	4b4c      	ldr	r3, [pc, #304]	; (8001414 <HAL_RCC_OscConfig+0x4d8>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 030c 	and.w	r3, r3, #12
 80012e8:	2b08      	cmp	r3, #8
 80012ea:	d05c      	beq.n	80013a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d141      	bne.n	8001378 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f4:	4b48      	ldr	r3, [pc, #288]	; (8001418 <HAL_RCC_OscConfig+0x4dc>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fa:	f7ff fb65 	bl	80009c8 <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001300:	e008      	b.n	8001314 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001302:	f7ff fb61 	bl	80009c8 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d901      	bls.n	8001314 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001310:	2303      	movs	r3, #3
 8001312:	e078      	b.n	8001406 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001314:	4b3f      	ldr	r3, [pc, #252]	; (8001414 <HAL_RCC_OscConfig+0x4d8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1f0      	bne.n	8001302 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69da      	ldr	r2, [r3, #28]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	431a      	orrs	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	019b      	lsls	r3, r3, #6
 8001330:	431a      	orrs	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001336:	085b      	lsrs	r3, r3, #1
 8001338:	3b01      	subs	r3, #1
 800133a:	041b      	lsls	r3, r3, #16
 800133c:	431a      	orrs	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001342:	061b      	lsls	r3, r3, #24
 8001344:	4933      	ldr	r1, [pc, #204]	; (8001414 <HAL_RCC_OscConfig+0x4d8>)
 8001346:	4313      	orrs	r3, r2
 8001348:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800134a:	4b33      	ldr	r3, [pc, #204]	; (8001418 <HAL_RCC_OscConfig+0x4dc>)
 800134c:	2201      	movs	r2, #1
 800134e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fb3a 	bl	80009c8 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001358:	f7ff fb36 	bl	80009c8 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e04d      	b.n	8001406 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800136a:	4b2a      	ldr	r3, [pc, #168]	; (8001414 <HAL_RCC_OscConfig+0x4d8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0x41c>
 8001376:	e045      	b.n	8001404 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001378:	4b27      	ldr	r3, [pc, #156]	; (8001418 <HAL_RCC_OscConfig+0x4dc>)
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137e:	f7ff fb23 	bl	80009c8 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001386:	f7ff fb1f 	bl	80009c8 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e036      	b.n	8001406 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001398:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <HAL_RCC_OscConfig+0x4d8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1f0      	bne.n	8001386 <HAL_RCC_OscConfig+0x44a>
 80013a4:	e02e      	b.n	8001404 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d101      	bne.n	80013b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e029      	b.n	8001406 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013b2:	4b18      	ldr	r3, [pc, #96]	; (8001414 <HAL_RCC_OscConfig+0x4d8>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d11c      	bne.n	8001400 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d115      	bne.n	8001400 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80013da:	4013      	ands	r3, r2
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d10d      	bne.n	8001400 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d106      	bne.n	8001400 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d001      	beq.n	8001404 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e000      	b.n	8001406 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40007000 	.word	0x40007000
 8001414:	40023800 	.word	0x40023800
 8001418:	42470060 	.word	0x42470060

0800141c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e0cc      	b.n	80015ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001430:	4b68      	ldr	r3, [pc, #416]	; (80015d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 030f 	and.w	r3, r3, #15
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d90c      	bls.n	8001458 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143e:	4b65      	ldr	r3, [pc, #404]	; (80015d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001446:	4b63      	ldr	r3, [pc, #396]	; (80015d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	429a      	cmp	r2, r3
 8001452:	d001      	beq.n	8001458 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e0b8      	b.n	80015ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d020      	beq.n	80014a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001470:	4b59      	ldr	r3, [pc, #356]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	4a58      	ldr	r2, [pc, #352]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001476:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800147a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	2b00      	cmp	r3, #0
 8001486:	d005      	beq.n	8001494 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001488:	4b53      	ldr	r3, [pc, #332]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	4a52      	ldr	r2, [pc, #328]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 800148e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001492:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001494:	4b50      	ldr	r3, [pc, #320]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	494d      	ldr	r1, [pc, #308]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d044      	beq.n	800153c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d107      	bne.n	80014ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ba:	4b47      	ldr	r3, [pc, #284]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d119      	bne.n	80014fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e07f      	b.n	80015ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d003      	beq.n	80014da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	d107      	bne.n	80014ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014da:	4b3f      	ldr	r3, [pc, #252]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d109      	bne.n	80014fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e06f      	b.n	80015ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ea:	4b3b      	ldr	r3, [pc, #236]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e067      	b.n	80015ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014fa:	4b37      	ldr	r3, [pc, #220]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f023 0203 	bic.w	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4934      	ldr	r1, [pc, #208]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001508:	4313      	orrs	r3, r2
 800150a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800150c:	f7ff fa5c 	bl	80009c8 <HAL_GetTick>
 8001510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001512:	e00a      	b.n	800152a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001514:	f7ff fa58 	bl	80009c8 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001522:	4293      	cmp	r3, r2
 8001524:	d901      	bls.n	800152a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e04f      	b.n	80015ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800152a:	4b2b      	ldr	r3, [pc, #172]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 020c 	and.w	r2, r3, #12
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	429a      	cmp	r2, r3
 800153a:	d1eb      	bne.n	8001514 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800153c:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <HAL_RCC_ClockConfig+0x1b8>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 030f 	and.w	r3, r3, #15
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	429a      	cmp	r2, r3
 8001548:	d20c      	bcs.n	8001564 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800154a:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <HAL_RCC_ClockConfig+0x1b8>)
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001552:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	429a      	cmp	r2, r3
 800155e:	d001      	beq.n	8001564 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e032      	b.n	80015ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	d008      	beq.n	8001582 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001570:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	4916      	ldr	r1, [pc, #88]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 800157e:	4313      	orrs	r3, r2
 8001580:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	2b00      	cmp	r3, #0
 800158c:	d009      	beq.n	80015a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800158e:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	490e      	ldr	r1, [pc, #56]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015a2:	f000 f821 	bl	80015e8 <HAL_RCC_GetSysClockFreq>
 80015a6:	4601      	mov	r1, r0
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	091b      	lsrs	r3, r3, #4
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <HAL_RCC_ClockConfig+0x1c0>)
 80015b4:	5cd3      	ldrb	r3, [r2, r3]
 80015b6:	fa21 f303 	lsr.w	r3, r1, r3
 80015ba:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <HAL_RCC_ClockConfig+0x1c4>)
 80015bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_RCC_ClockConfig+0x1c8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff f906 	bl	80007d4 <HAL_InitTick>

  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023c00 	.word	0x40023c00
 80015d8:	40023800 	.word	0x40023800
 80015dc:	0800435c 	.word	0x0800435c
 80015e0:	20000000 	.word	0x20000000
 80015e4:	20000004 	.word	0x20000004

080015e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	2300      	movs	r3, #0
 80015f8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015fe:	4b50      	ldr	r3, [pc, #320]	; (8001740 <HAL_RCC_GetSysClockFreq+0x158>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b04      	cmp	r3, #4
 8001608:	d007      	beq.n	800161a <HAL_RCC_GetSysClockFreq+0x32>
 800160a:	2b08      	cmp	r3, #8
 800160c:	d008      	beq.n	8001620 <HAL_RCC_GetSysClockFreq+0x38>
 800160e:	2b00      	cmp	r3, #0
 8001610:	f040 808d 	bne.w	800172e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001614:	4b4b      	ldr	r3, [pc, #300]	; (8001744 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001616:	60bb      	str	r3, [r7, #8]
       break;
 8001618:	e08c      	b.n	8001734 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800161a:	4b4b      	ldr	r3, [pc, #300]	; (8001748 <HAL_RCC_GetSysClockFreq+0x160>)
 800161c:	60bb      	str	r3, [r7, #8]
      break;
 800161e:	e089      	b.n	8001734 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001620:	4b47      	ldr	r3, [pc, #284]	; (8001740 <HAL_RCC_GetSysClockFreq+0x158>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001628:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800162a:	4b45      	ldr	r3, [pc, #276]	; (8001740 <HAL_RCC_GetSysClockFreq+0x158>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d023      	beq.n	800167e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001636:	4b42      	ldr	r3, [pc, #264]	; (8001740 <HAL_RCC_GetSysClockFreq+0x158>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	099b      	lsrs	r3, r3, #6
 800163c:	f04f 0400 	mov.w	r4, #0
 8001640:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	ea03 0501 	and.w	r5, r3, r1
 800164c:	ea04 0602 	and.w	r6, r4, r2
 8001650:	4a3d      	ldr	r2, [pc, #244]	; (8001748 <HAL_RCC_GetSysClockFreq+0x160>)
 8001652:	fb02 f106 	mul.w	r1, r2, r6
 8001656:	2200      	movs	r2, #0
 8001658:	fb02 f205 	mul.w	r2, r2, r5
 800165c:	440a      	add	r2, r1
 800165e:	493a      	ldr	r1, [pc, #232]	; (8001748 <HAL_RCC_GetSysClockFreq+0x160>)
 8001660:	fba5 0101 	umull	r0, r1, r5, r1
 8001664:	1853      	adds	r3, r2, r1
 8001666:	4619      	mov	r1, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f04f 0400 	mov.w	r4, #0
 800166e:	461a      	mov	r2, r3
 8001670:	4623      	mov	r3, r4
 8001672:	f7fe fdb5 	bl	80001e0 <__aeabi_uldivmod>
 8001676:	4603      	mov	r3, r0
 8001678:	460c      	mov	r4, r1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	e049      	b.n	8001712 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800167e:	4b30      	ldr	r3, [pc, #192]	; (8001740 <HAL_RCC_GetSysClockFreq+0x158>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	099b      	lsrs	r3, r3, #6
 8001684:	f04f 0400 	mov.w	r4, #0
 8001688:	f240 11ff 	movw	r1, #511	; 0x1ff
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	ea03 0501 	and.w	r5, r3, r1
 8001694:	ea04 0602 	and.w	r6, r4, r2
 8001698:	4629      	mov	r1, r5
 800169a:	4632      	mov	r2, r6
 800169c:	f04f 0300 	mov.w	r3, #0
 80016a0:	f04f 0400 	mov.w	r4, #0
 80016a4:	0154      	lsls	r4, r2, #5
 80016a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016aa:	014b      	lsls	r3, r1, #5
 80016ac:	4619      	mov	r1, r3
 80016ae:	4622      	mov	r2, r4
 80016b0:	1b49      	subs	r1, r1, r5
 80016b2:	eb62 0206 	sbc.w	r2, r2, r6
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	f04f 0400 	mov.w	r4, #0
 80016be:	0194      	lsls	r4, r2, #6
 80016c0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016c4:	018b      	lsls	r3, r1, #6
 80016c6:	1a5b      	subs	r3, r3, r1
 80016c8:	eb64 0402 	sbc.w	r4, r4, r2
 80016cc:	f04f 0100 	mov.w	r1, #0
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	00e2      	lsls	r2, r4, #3
 80016d6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016da:	00d9      	lsls	r1, r3, #3
 80016dc:	460b      	mov	r3, r1
 80016de:	4614      	mov	r4, r2
 80016e0:	195b      	adds	r3, r3, r5
 80016e2:	eb44 0406 	adc.w	r4, r4, r6
 80016e6:	f04f 0100 	mov.w	r1, #0
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	02a2      	lsls	r2, r4, #10
 80016f0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80016f4:	0299      	lsls	r1, r3, #10
 80016f6:	460b      	mov	r3, r1
 80016f8:	4614      	mov	r4, r2
 80016fa:	4618      	mov	r0, r3
 80016fc:	4621      	mov	r1, r4
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f04f 0400 	mov.w	r4, #0
 8001704:	461a      	mov	r2, r3
 8001706:	4623      	mov	r3, r4
 8001708:	f7fe fd6a 	bl	80001e0 <__aeabi_uldivmod>
 800170c:	4603      	mov	r3, r0
 800170e:	460c      	mov	r4, r1
 8001710:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_RCC_GetSysClockFreq+0x158>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	0c1b      	lsrs	r3, r3, #16
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	3301      	adds	r3, #1
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	fbb2 f3f3 	udiv	r3, r2, r3
 800172a:	60bb      	str	r3, [r7, #8]
      break;
 800172c:	e002      	b.n	8001734 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800172e:	4b05      	ldr	r3, [pc, #20]	; (8001744 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001730:	60bb      	str	r3, [r7, #8]
      break;
 8001732:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001734:	68bb      	ldr	r3, [r7, #8]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800
 8001744:	00f42400 	.word	0x00f42400
 8001748:	017d7840 	.word	0x017d7840

0800174c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <HAL_RCC_GetHCLKFreq+0x14>)
 8001752:	681b      	ldr	r3, [r3, #0]
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000000 	.word	0x20000000

08001764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001768:	f7ff fff0 	bl	800174c <HAL_RCC_GetHCLKFreq>
 800176c:	4601      	mov	r1, r0
 800176e:	4b05      	ldr	r3, [pc, #20]	; (8001784 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	0a9b      	lsrs	r3, r3, #10
 8001774:	f003 0307 	and.w	r3, r3, #7
 8001778:	4a03      	ldr	r2, [pc, #12]	; (8001788 <HAL_RCC_GetPCLK1Freq+0x24>)
 800177a:	5cd3      	ldrb	r3, [r2, r3]
 800177c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001780:	4618      	mov	r0, r3
 8001782:	bd80      	pop	{r7, pc}
 8001784:	40023800 	.word	0x40023800
 8001788:	0800436c 	.word	0x0800436c

0800178c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	220f      	movs	r2, #15
 800179a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_RCC_GetClockConfig+0x5c>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 0203 	and.w	r2, r3, #3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <HAL_RCC_GetClockConfig+0x5c>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <HAL_RCC_GetClockConfig+0x5c>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80017c0:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <HAL_RCC_GetClockConfig+0x5c>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	08db      	lsrs	r3, r3, #3
 80017c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017ce:	4b07      	ldr	r3, [pc, #28]	; (80017ec <HAL_RCC_GetClockConfig+0x60>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 020f 	and.w	r2, r3, #15
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	601a      	str	r2, [r3, #0]
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40023c00 	.word	0x40023c00

080017f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e01d      	b.n	800183e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d106      	bne.n	800181c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f815 	bl	8001846 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2202      	movs	r2, #2
 8001820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3304      	adds	r3, #4
 800182c:	4619      	mov	r1, r3
 800182e:	4610      	mov	r0, r2
 8001830:	f000 f968 	bl	8001b04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800185a:	b480      	push	{r7}
 800185c:	b085      	sub	sp, #20
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68da      	ldr	r2, [r3, #12]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f042 0201 	orr.w	r2, r2, #1
 8001870:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2b06      	cmp	r3, #6
 8001882:	d007      	beq.n	8001894 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0201 	orr.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d122      	bne.n	80018fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d11b      	bne.n	80018fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f06f 0202 	mvn.w	r2, #2
 80018ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 f8ee 	bl	8001ac6 <HAL_TIM_IC_CaptureCallback>
 80018ea:	e005      	b.n	80018f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 f8e0 	bl	8001ab2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f8f1 	bl	8001ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	f003 0304 	and.w	r3, r3, #4
 8001908:	2b04      	cmp	r3, #4
 800190a:	d122      	bne.n	8001952 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	2b04      	cmp	r3, #4
 8001918:	d11b      	bne.n	8001952 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f06f 0204 	mvn.w	r2, #4
 8001922:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2202      	movs	r2, #2
 8001928:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 f8c4 	bl	8001ac6 <HAL_TIM_IC_CaptureCallback>
 800193e:	e005      	b.n	800194c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f8b6 	bl	8001ab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 f8c7 	bl	8001ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	2b08      	cmp	r3, #8
 800195e:	d122      	bne.n	80019a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	2b08      	cmp	r3, #8
 800196c:	d11b      	bne.n	80019a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f06f 0208 	mvn.w	r2, #8
 8001976:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2204      	movs	r2, #4
 800197c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 f89a 	bl	8001ac6 <HAL_TIM_IC_CaptureCallback>
 8001992:	e005      	b.n	80019a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 f88c 	bl	8001ab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 f89d 	bl	8001ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	f003 0310 	and.w	r3, r3, #16
 80019b0:	2b10      	cmp	r3, #16
 80019b2:	d122      	bne.n	80019fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f003 0310 	and.w	r3, r3, #16
 80019be:	2b10      	cmp	r3, #16
 80019c0:	d11b      	bne.n	80019fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f06f 0210 	mvn.w	r2, #16
 80019ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2208      	movs	r2, #8
 80019d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 f870 	bl	8001ac6 <HAL_TIM_IC_CaptureCallback>
 80019e6:	e005      	b.n	80019f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f862 	bl	8001ab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 f873 	bl	8001ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d10e      	bne.n	8001a26 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d107      	bne.n	8001a26 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f06f 0201 	mvn.w	r2, #1
 8001a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7fe fe99 	bl	8000758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a30:	2b80      	cmp	r3, #128	; 0x80
 8001a32:	d10e      	bne.n	8001a52 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3e:	2b80      	cmp	r3, #128	; 0x80
 8001a40:	d107      	bne.n	8001a52 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f8e3 	bl	8001c18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a5c:	2b40      	cmp	r3, #64	; 0x40
 8001a5e:	d10e      	bne.n	8001a7e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a6a:	2b40      	cmp	r3, #64	; 0x40
 8001a6c:	d107      	bne.n	8001a7e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f838 	bl	8001aee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	f003 0320 	and.w	r3, r3, #32
 8001a88:	2b20      	cmp	r3, #32
 8001a8a:	d10e      	bne.n	8001aaa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	f003 0320 	and.w	r3, r3, #32
 8001a96:	2b20      	cmp	r3, #32
 8001a98:	d107      	bne.n	8001aaa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f06f 0220 	mvn.w	r2, #32
 8001aa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f8ad 	bl	8001c04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a34      	ldr	r2, [pc, #208]	; (8001be8 <TIM_Base_SetConfig+0xe4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d00f      	beq.n	8001b3c <TIM_Base_SetConfig+0x38>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b22:	d00b      	beq.n	8001b3c <TIM_Base_SetConfig+0x38>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a31      	ldr	r2, [pc, #196]	; (8001bec <TIM_Base_SetConfig+0xe8>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d007      	beq.n	8001b3c <TIM_Base_SetConfig+0x38>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a30      	ldr	r2, [pc, #192]	; (8001bf0 <TIM_Base_SetConfig+0xec>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d003      	beq.n	8001b3c <TIM_Base_SetConfig+0x38>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a2f      	ldr	r2, [pc, #188]	; (8001bf4 <TIM_Base_SetConfig+0xf0>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d108      	bne.n	8001b4e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a25      	ldr	r2, [pc, #148]	; (8001be8 <TIM_Base_SetConfig+0xe4>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d01b      	beq.n	8001b8e <TIM_Base_SetConfig+0x8a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b5c:	d017      	beq.n	8001b8e <TIM_Base_SetConfig+0x8a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a22      	ldr	r2, [pc, #136]	; (8001bec <TIM_Base_SetConfig+0xe8>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d013      	beq.n	8001b8e <TIM_Base_SetConfig+0x8a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a21      	ldr	r2, [pc, #132]	; (8001bf0 <TIM_Base_SetConfig+0xec>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d00f      	beq.n	8001b8e <TIM_Base_SetConfig+0x8a>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a20      	ldr	r2, [pc, #128]	; (8001bf4 <TIM_Base_SetConfig+0xf0>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00b      	beq.n	8001b8e <TIM_Base_SetConfig+0x8a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a1f      	ldr	r2, [pc, #124]	; (8001bf8 <TIM_Base_SetConfig+0xf4>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d007      	beq.n	8001b8e <TIM_Base_SetConfig+0x8a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a1e      	ldr	r2, [pc, #120]	; (8001bfc <TIM_Base_SetConfig+0xf8>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d003      	beq.n	8001b8e <TIM_Base_SetConfig+0x8a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a1d      	ldr	r2, [pc, #116]	; (8001c00 <TIM_Base_SetConfig+0xfc>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d108      	bne.n	8001ba0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a08      	ldr	r2, [pc, #32]	; (8001be8 <TIM_Base_SetConfig+0xe4>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d103      	bne.n	8001bd4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	691a      	ldr	r2, [r3, #16]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	615a      	str	r2, [r3, #20]
}
 8001bda:	bf00      	nop
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40010000 	.word	0x40010000
 8001bec:	40000400 	.word	0x40000400
 8001bf0:	40000800 	.word	0x40000800
 8001bf4:	40000c00 	.word	0x40000c00
 8001bf8:	40014000 	.word	0x40014000
 8001bfc:	40014400 	.word	0x40014400
 8001c00:	40014800 	.word	0x40014800

08001c04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f103 0208 	add.w	r2, r3, #8
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f103 0208 	add.w	r2, r3, #8
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f103 0208 	add.w	r2, r3, #8
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c86:	b480      	push	{r7}
 8001c88:	b085      	sub	sp, #20
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	601a      	str	r2, [r3, #0]
}
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b085      	sub	sp, #20
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ce4:	d103      	bne.n	8001cee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	e00c      	b.n	8001d08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3308      	adds	r3, #8
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	e002      	b.n	8001cfc <vListInsert+0x2e>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d2f6      	bcs.n	8001cf6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	1c5a      	adds	r2, r3, #1
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	601a      	str	r2, [r3, #0]
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6892      	ldr	r2, [r2, #8]
 8001d56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6852      	ldr	r2, [r2, #4]
 8001d60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d103      	bne.n	8001d74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	1e5a      	subs	r2, r3, #1
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d109      	bne.n	8001dbc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dac:	f383 8811 	msr	BASEPRI, r3
 8001db0:	f3bf 8f6f 	isb	sy
 8001db4:	f3bf 8f4f 	dsb	sy
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	e7fe      	b.n	8001dba <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001dbc:	f001 ff86 	bl	8003ccc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc8:	68f9      	ldr	r1, [r7, #12]
 8001dca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001dcc:	fb01 f303 	mul.w	r3, r1, r3
 8001dd0:	441a      	add	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dec:	3b01      	subs	r3, #1
 8001dee:	68f9      	ldr	r1, [r7, #12]
 8001df0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001df2:	fb01 f303 	mul.w	r3, r1, r3
 8001df6:	441a      	add	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	22ff      	movs	r2, #255	; 0xff
 8001e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	22ff      	movs	r2, #255	; 0xff
 8001e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d114      	bne.n	8001e3c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d01a      	beq.n	8001e50 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	3310      	adds	r3, #16
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f001 f8be 	bl	8002fa0 <xTaskRemoveFromEventList>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d012      	beq.n	8001e50 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001e2a:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <xQueueGenericReset+0xcc>)
 8001e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	f3bf 8f4f 	dsb	sy
 8001e36:	f3bf 8f6f 	isb	sy
 8001e3a:	e009      	b.n	8001e50 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	3310      	adds	r3, #16
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fef3 	bl	8001c2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	3324      	adds	r3, #36	; 0x24
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff feee 	bl	8001c2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001e50:	f001 ff6a 	bl	8003d28 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001e54:	2301      	movs	r3, #1
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	e000ed04 	.word	0xe000ed04

08001e64 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af02      	add	r7, sp, #8
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d109      	bne.n	8001e8c <xQueueGenericCreate+0x28>
 8001e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e7c:	f383 8811 	msr	BASEPRI, r3
 8001e80:	f3bf 8f6f 	isb	sy
 8001e84:	f3bf 8f4f 	dsb	sy
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	e7fe      	b.n	8001e8a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d102      	bne.n	8001e98 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
 8001e96:	e004      	b.n	8001ea2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ea0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3350      	adds	r3, #80	; 0x50
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f002 f82a 	bl	8003f00 <pvPortMalloc>
 8001eac:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00d      	beq.n	8001ed0 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	3350      	adds	r3, #80	; 0x50
 8001ebc:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001ebe:	79fa      	ldrb	r2, [r7, #7]
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 f805 	bl	8001eda <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001ed0:	69bb      	ldr	r3, [r7, #24]
	}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3720      	adds	r7, #32
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b084      	sub	sp, #16
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d103      	bne.n	8001ef6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	e002      	b.n	8001efc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001f08:	2101      	movs	r1, #1
 8001f0a:	69b8      	ldr	r0, [r7, #24]
 8001f0c:	f7ff ff42 	bl	8001d94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	78fa      	ldrb	r2, [r7, #3]
 8001f14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001f18:	bf00      	nop
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08e      	sub	sp, #56	; 0x38
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d109      	bne.n	8001f50 <xQueueGenericSend+0x30>
 8001f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f40:	f383 8811 	msr	BASEPRI, r3
 8001f44:	f3bf 8f6f 	isb	sy
 8001f48:	f3bf 8f4f 	dsb	sy
 8001f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f4e:	e7fe      	b.n	8001f4e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d103      	bne.n	8001f5e <xQueueGenericSend+0x3e>
 8001f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <xQueueGenericSend+0x42>
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e000      	b.n	8001f64 <xQueueGenericSend+0x44>
 8001f62:	2300      	movs	r3, #0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d109      	bne.n	8001f7c <xQueueGenericSend+0x5c>
 8001f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f6c:	f383 8811 	msr	BASEPRI, r3
 8001f70:	f3bf 8f6f 	isb	sy
 8001f74:	f3bf 8f4f 	dsb	sy
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7a:	e7fe      	b.n	8001f7a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d103      	bne.n	8001f8a <xQueueGenericSend+0x6a>
 8001f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d101      	bne.n	8001f8e <xQueueGenericSend+0x6e>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <xQueueGenericSend+0x70>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d109      	bne.n	8001fa8 <xQueueGenericSend+0x88>
 8001f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f98:	f383 8811 	msr	BASEPRI, r3
 8001f9c:	f3bf 8f6f 	isb	sy
 8001fa0:	f3bf 8f4f 	dsb	sy
 8001fa4:	623b      	str	r3, [r7, #32]
 8001fa6:	e7fe      	b.n	8001fa6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001fa8:	f001 f992 	bl	80032d0 <xTaskGetSchedulerState>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d102      	bne.n	8001fb8 <xQueueGenericSend+0x98>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <xQueueGenericSend+0x9c>
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e000      	b.n	8001fbe <xQueueGenericSend+0x9e>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d109      	bne.n	8001fd6 <xQueueGenericSend+0xb6>
 8001fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc6:	f383 8811 	msr	BASEPRI, r3
 8001fca:	f3bf 8f6f 	isb	sy
 8001fce:	f3bf 8f4f 	dsb	sy
 8001fd2:	61fb      	str	r3, [r7, #28]
 8001fd4:	e7fe      	b.n	8001fd4 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001fd6:	f001 fe79 	bl	8003ccc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d302      	bcc.n	8001fec <xQueueGenericSend+0xcc>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d129      	bne.n	8002040 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	68b9      	ldr	r1, [r7, #8]
 8001ff0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ff2:	f000 f9ff 	bl	80023f4 <prvCopyDataToQueue>
 8001ff6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d010      	beq.n	8002022 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002002:	3324      	adds	r3, #36	; 0x24
 8002004:	4618      	mov	r0, r3
 8002006:	f000 ffcb 	bl	8002fa0 <xTaskRemoveFromEventList>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d013      	beq.n	8002038 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002010:	4b3f      	ldr	r3, [pc, #252]	; (8002110 <xQueueGenericSend+0x1f0>)
 8002012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	f3bf 8f4f 	dsb	sy
 800201c:	f3bf 8f6f 	isb	sy
 8002020:	e00a      	b.n	8002038 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002024:	2b00      	cmp	r3, #0
 8002026:	d007      	beq.n	8002038 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002028:	4b39      	ldr	r3, [pc, #228]	; (8002110 <xQueueGenericSend+0x1f0>)
 800202a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	f3bf 8f4f 	dsb	sy
 8002034:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002038:	f001 fe76 	bl	8003d28 <vPortExitCritical>
				return pdPASS;
 800203c:	2301      	movs	r3, #1
 800203e:	e063      	b.n	8002108 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d103      	bne.n	800204e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002046:	f001 fe6f 	bl	8003d28 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800204a:	2300      	movs	r3, #0
 800204c:	e05c      	b.n	8002108 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800204e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002050:	2b00      	cmp	r3, #0
 8002052:	d106      	bne.n	8002062 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	4618      	mov	r0, r3
 800205a:	f001 f803 	bl	8003064 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800205e:	2301      	movs	r3, #1
 8002060:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002062:	f001 fe61 	bl	8003d28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002066:	f000 fd81 	bl	8002b6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800206a:	f001 fe2f 	bl	8003ccc <vPortEnterCritical>
 800206e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002070:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002074:	b25b      	sxtb	r3, r3
 8002076:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800207a:	d103      	bne.n	8002084 <xQueueGenericSend+0x164>
 800207c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002086:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800208a:	b25b      	sxtb	r3, r3
 800208c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002090:	d103      	bne.n	800209a <xQueueGenericSend+0x17a>
 8002092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800209a:	f001 fe45 	bl	8003d28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800209e:	1d3a      	adds	r2, r7, #4
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	4611      	mov	r1, r2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 fff2 	bl	8003090 <xTaskCheckForTimeOut>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d124      	bne.n	80020fc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80020b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020b4:	f000 fa96 	bl	80025e4 <prvIsQueueFull>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d018      	beq.n	80020f0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80020be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c0:	3310      	adds	r3, #16
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	4611      	mov	r1, r2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 ff1c 	bl	8002f04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80020cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020ce:	f000 fa21 	bl	8002514 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80020d2:	f000 fd59 	bl	8002b88 <xTaskResumeAll>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f47f af7c 	bne.w	8001fd6 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80020de:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <xQueueGenericSend+0x1f0>)
 80020e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	f3bf 8f4f 	dsb	sy
 80020ea:	f3bf 8f6f 	isb	sy
 80020ee:	e772      	b.n	8001fd6 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80020f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020f2:	f000 fa0f 	bl	8002514 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80020f6:	f000 fd47 	bl	8002b88 <xTaskResumeAll>
 80020fa:	e76c      	b.n	8001fd6 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80020fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020fe:	f000 fa09 	bl	8002514 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002102:	f000 fd41 	bl	8002b88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002106:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002108:	4618      	mov	r0, r3
 800210a:	3738      	adds	r7, #56	; 0x38
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	e000ed04 	.word	0xe000ed04

08002114 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08e      	sub	sp, #56	; 0x38
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	60b9      	str	r1, [r7, #8]
 800211e:	607a      	str	r2, [r7, #4]
 8002120:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002128:	2b00      	cmp	r3, #0
 800212a:	d109      	bne.n	8002140 <xQueueGenericSendFromISR+0x2c>
 800212c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002130:	f383 8811 	msr	BASEPRI, r3
 8002134:	f3bf 8f6f 	isb	sy
 8002138:	f3bf 8f4f 	dsb	sy
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
 800213e:	e7fe      	b.n	800213e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d103      	bne.n	800214e <xQueueGenericSendFromISR+0x3a>
 8002146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <xQueueGenericSendFromISR+0x3e>
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <xQueueGenericSendFromISR+0x40>
 8002152:	2300      	movs	r3, #0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d109      	bne.n	800216c <xQueueGenericSendFromISR+0x58>
 8002158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800215c:	f383 8811 	msr	BASEPRI, r3
 8002160:	f3bf 8f6f 	isb	sy
 8002164:	f3bf 8f4f 	dsb	sy
 8002168:	623b      	str	r3, [r7, #32]
 800216a:	e7fe      	b.n	800216a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d103      	bne.n	800217a <xQueueGenericSendFromISR+0x66>
 8002172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <xQueueGenericSendFromISR+0x6a>
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <xQueueGenericSendFromISR+0x6c>
 800217e:	2300      	movs	r3, #0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d109      	bne.n	8002198 <xQueueGenericSendFromISR+0x84>
 8002184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002188:	f383 8811 	msr	BASEPRI, r3
 800218c:	f3bf 8f6f 	isb	sy
 8002190:	f3bf 8f4f 	dsb	sy
 8002194:	61fb      	str	r3, [r7, #28]
 8002196:	e7fe      	b.n	8002196 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002198:	f001 fe74 	bl	8003e84 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800219c:	f3ef 8211 	mrs	r2, BASEPRI
 80021a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a4:	f383 8811 	msr	BASEPRI, r3
 80021a8:	f3bf 8f6f 	isb	sy
 80021ac:	f3bf 8f4f 	dsb	sy
 80021b0:	61ba      	str	r2, [r7, #24]
 80021b2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80021b4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80021b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d302      	bcc.n	80021ca <xQueueGenericSendFromISR+0xb6>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d12c      	bne.n	8002224 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80021ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	68b9      	ldr	r1, [r7, #8]
 80021d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021da:	f000 f90b 	bl	80023f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80021de:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80021e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021e6:	d112      	bne.n	800220e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d016      	beq.n	800221e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f2:	3324      	adds	r3, #36	; 0x24
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 fed3 	bl	8002fa0 <xTaskRemoveFromEventList>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00e      	beq.n	800221e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00b      	beq.n	800221e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	e007      	b.n	800221e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800220e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002212:	3301      	adds	r3, #1
 8002214:	b2db      	uxtb	r3, r3
 8002216:	b25a      	sxtb	r2, r3
 8002218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800221e:	2301      	movs	r3, #1
 8002220:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002222:	e001      	b.n	8002228 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002224:	2300      	movs	r3, #0
 8002226:	637b      	str	r3, [r7, #52]	; 0x34
 8002228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002234:	4618      	mov	r0, r3
 8002236:	3738      	adds	r7, #56	; 0x38
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08c      	sub	sp, #48	; 0x30
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002248:	2300      	movs	r3, #0
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002252:	2b00      	cmp	r3, #0
 8002254:	d109      	bne.n	800226a <xQueueReceive+0x2e>
	__asm volatile
 8002256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800225a:	f383 8811 	msr	BASEPRI, r3
 800225e:	f3bf 8f6f 	isb	sy
 8002262:	f3bf 8f4f 	dsb	sy
 8002266:	623b      	str	r3, [r7, #32]
 8002268:	e7fe      	b.n	8002268 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d103      	bne.n	8002278 <xQueueReceive+0x3c>
 8002270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <xQueueReceive+0x40>
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <xQueueReceive+0x42>
 800227c:	2300      	movs	r3, #0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <xQueueReceive+0x5a>
 8002282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002286:	f383 8811 	msr	BASEPRI, r3
 800228a:	f3bf 8f6f 	isb	sy
 800228e:	f3bf 8f4f 	dsb	sy
 8002292:	61fb      	str	r3, [r7, #28]
 8002294:	e7fe      	b.n	8002294 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002296:	f001 f81b 	bl	80032d0 <xTaskGetSchedulerState>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d102      	bne.n	80022a6 <xQueueReceive+0x6a>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <xQueueReceive+0x6e>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <xQueueReceive+0x70>
 80022aa:	2300      	movs	r3, #0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d109      	bne.n	80022c4 <xQueueReceive+0x88>
 80022b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b4:	f383 8811 	msr	BASEPRI, r3
 80022b8:	f3bf 8f6f 	isb	sy
 80022bc:	f3bf 8f4f 	dsb	sy
 80022c0:	61bb      	str	r3, [r7, #24]
 80022c2:	e7fe      	b.n	80022c2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80022c4:	f001 fd02 	bl	8003ccc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d01f      	beq.n	8002314 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022d8:	f000 f8f6 	bl	80024c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	1e5a      	subs	r2, r3, #1
 80022e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00f      	beq.n	800230c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ee:	3310      	adds	r3, #16
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 fe55 	bl	8002fa0 <xTaskRemoveFromEventList>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d007      	beq.n	800230c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80022fc:	4b3c      	ldr	r3, [pc, #240]	; (80023f0 <xQueueReceive+0x1b4>)
 80022fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	f3bf 8f4f 	dsb	sy
 8002308:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800230c:	f001 fd0c 	bl	8003d28 <vPortExitCritical>
				return pdPASS;
 8002310:	2301      	movs	r3, #1
 8002312:	e069      	b.n	80023e8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d103      	bne.n	8002322 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800231a:	f001 fd05 	bl	8003d28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800231e:	2300      	movs	r3, #0
 8002320:	e062      	b.n	80023e8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002324:	2b00      	cmp	r3, #0
 8002326:	d106      	bne.n	8002336 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002328:	f107 0310 	add.w	r3, r7, #16
 800232c:	4618      	mov	r0, r3
 800232e:	f000 fe99 	bl	8003064 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002332:	2301      	movs	r3, #1
 8002334:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002336:	f001 fcf7 	bl	8003d28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800233a:	f000 fc17 	bl	8002b6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800233e:	f001 fcc5 	bl	8003ccc <vPortEnterCritical>
 8002342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002344:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002348:	b25b      	sxtb	r3, r3
 800234a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800234e:	d103      	bne.n	8002358 <xQueueReceive+0x11c>
 8002350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800235e:	b25b      	sxtb	r3, r3
 8002360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002364:	d103      	bne.n	800236e <xQueueReceive+0x132>
 8002366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800236e:	f001 fcdb 	bl	8003d28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002372:	1d3a      	adds	r2, r7, #4
 8002374:	f107 0310 	add.w	r3, r7, #16
 8002378:	4611      	mov	r1, r2
 800237a:	4618      	mov	r0, r3
 800237c:	f000 fe88 	bl	8003090 <xTaskCheckForTimeOut>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d123      	bne.n	80023ce <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002386:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002388:	f000 f916 	bl	80025b8 <prvIsQueueEmpty>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d017      	beq.n	80023c2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002394:	3324      	adds	r3, #36	; 0x24
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	4611      	mov	r1, r2
 800239a:	4618      	mov	r0, r3
 800239c:	f000 fdb2 	bl	8002f04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80023a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023a2:	f000 f8b7 	bl	8002514 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80023a6:	f000 fbef 	bl	8002b88 <xTaskResumeAll>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d189      	bne.n	80022c4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80023b0:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <xQueueReceive+0x1b4>)
 80023b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	f3bf 8f4f 	dsb	sy
 80023bc:	f3bf 8f6f 	isb	sy
 80023c0:	e780      	b.n	80022c4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80023c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023c4:	f000 f8a6 	bl	8002514 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80023c8:	f000 fbde 	bl	8002b88 <xTaskResumeAll>
 80023cc:	e77a      	b.n	80022c4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80023ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023d0:	f000 f8a0 	bl	8002514 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80023d4:	f000 fbd8 	bl	8002b88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023da:	f000 f8ed 	bl	80025b8 <prvIsQueueEmpty>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f43f af6f 	beq.w	80022c4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80023e6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3730      	adds	r7, #48	; 0x30
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	e000ed04 	.word	0xe000ed04

080023f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002408:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10d      	bne.n	800242e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d14d      	bne.n	80024b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	4618      	mov	r0, r3
 8002420:	f000 ff74 	bl	800330c <xTaskPriorityDisinherit>
 8002424:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	e043      	b.n	80024b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d119      	bne.n	8002468 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6858      	ldr	r0, [r3, #4]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	461a      	mov	r2, r3
 800243e:	68b9      	ldr	r1, [r7, #8]
 8002440:	f001 ff58 	bl	80042f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	441a      	add	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	429a      	cmp	r2, r3
 800245c:	d32b      	bcc.n	80024b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	e026      	b.n	80024b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	68d8      	ldr	r0, [r3, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	461a      	mov	r2, r3
 8002472:	68b9      	ldr	r1, [r7, #8]
 8002474:	f001 ff3e 	bl	80042f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	425b      	negs	r3, r3
 8002482:	441a      	add	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d207      	bcs.n	80024a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	425b      	negs	r3, r3
 800249e:	441a      	add	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d105      	bne.n	80024b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d002      	beq.n	80024b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80024be:	697b      	ldr	r3, [r7, #20]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d018      	beq.n	800250c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	441a      	add	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d303      	bcc.n	80024fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	68d9      	ldr	r1, [r3, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	461a      	mov	r2, r3
 8002506:	6838      	ldr	r0, [r7, #0]
 8002508:	f001 fef4 	bl	80042f4 <memcpy>
	}
}
 800250c:	bf00      	nop
 800250e:	3708      	adds	r7, #8
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800251c:	f001 fbd6 	bl	8003ccc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002526:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002528:	e011      	b.n	800254e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	2b00      	cmp	r3, #0
 8002530:	d012      	beq.n	8002558 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3324      	adds	r3, #36	; 0x24
 8002536:	4618      	mov	r0, r3
 8002538:	f000 fd32 	bl	8002fa0 <xTaskRemoveFromEventList>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002542:	f000 fe05 	bl	8003150 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	3b01      	subs	r3, #1
 800254a:	b2db      	uxtb	r3, r3
 800254c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800254e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002552:	2b00      	cmp	r3, #0
 8002554:	dce9      	bgt.n	800252a <prvUnlockQueue+0x16>
 8002556:	e000      	b.n	800255a <prvUnlockQueue+0x46>
					break;
 8002558:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	22ff      	movs	r2, #255	; 0xff
 800255e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002562:	f001 fbe1 	bl	8003d28 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002566:	f001 fbb1 	bl	8003ccc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002570:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002572:	e011      	b.n	8002598 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d012      	beq.n	80025a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3310      	adds	r3, #16
 8002580:	4618      	mov	r0, r3
 8002582:	f000 fd0d 	bl	8002fa0 <xTaskRemoveFromEventList>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800258c:	f000 fde0 	bl	8003150 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002590:	7bbb      	ldrb	r3, [r7, #14]
 8002592:	3b01      	subs	r3, #1
 8002594:	b2db      	uxtb	r3, r3
 8002596:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002598:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800259c:	2b00      	cmp	r3, #0
 800259e:	dce9      	bgt.n	8002574 <prvUnlockQueue+0x60>
 80025a0:	e000      	b.n	80025a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80025a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	22ff      	movs	r2, #255	; 0xff
 80025a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80025ac:	f001 fbbc 	bl	8003d28 <vPortExitCritical>
}
 80025b0:	bf00      	nop
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80025c0:	f001 fb84 	bl	8003ccc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d102      	bne.n	80025d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80025cc:	2301      	movs	r3, #1
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	e001      	b.n	80025d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80025d6:	f001 fba7 	bl	8003d28 <vPortExitCritical>

	return xReturn;
 80025da:	68fb      	ldr	r3, [r7, #12]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80025ec:	f001 fb6e 	bl	8003ccc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d102      	bne.n	8002602 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80025fc:	2301      	movs	r3, #1
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	e001      	b.n	8002606 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002606:	f001 fb8f 	bl	8003d28 <vPortExitCritical>

	return xReturn;
 800260a:	68fb      	ldr	r3, [r7, #12]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	e014      	b.n	800264e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002624:	4a0e      	ldr	r2, [pc, #56]	; (8002660 <vQueueAddToRegistry+0x4c>)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10b      	bne.n	8002648 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002630:	490b      	ldr	r1, [pc, #44]	; (8002660 <vQueueAddToRegistry+0x4c>)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800263a:	4a09      	ldr	r2, [pc, #36]	; (8002660 <vQueueAddToRegistry+0x4c>)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002646:	e005      	b.n	8002654 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	3301      	adds	r3, #1
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b07      	cmp	r3, #7
 8002652:	d9e7      	bls.n	8002624 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002654:	bf00      	nop
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	20012ddc 	.word	0x20012ddc

08002664 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002674:	f001 fb2a 	bl	8003ccc <vPortEnterCritical>
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800267e:	b25b      	sxtb	r3, r3
 8002680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002684:	d103      	bne.n	800268e <vQueueWaitForMessageRestricted+0x2a>
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002694:	b25b      	sxtb	r3, r3
 8002696:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800269a:	d103      	bne.n	80026a4 <vQueueWaitForMessageRestricted+0x40>
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026a4:	f001 fb40 	bl	8003d28 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d106      	bne.n	80026be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3324      	adds	r3, #36	; 0x24
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	68b9      	ldr	r1, [r7, #8]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 fc47 	bl	8002f4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80026be:	6978      	ldr	r0, [r7, #20]
 80026c0:	f7ff ff28 	bl	8002514 <prvUnlockQueue>
	}
 80026c4:	bf00      	nop
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08c      	sub	sp, #48	; 0x30
 80026d0:	af04      	add	r7, sp, #16
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	4613      	mov	r3, r2
 80026da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80026dc:	88fb      	ldrh	r3, [r7, #6]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f001 fc0d 	bl	8003f00 <pvPortMalloc>
 80026e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00e      	beq.n	800270c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80026ee:	2058      	movs	r0, #88	; 0x58
 80026f0:	f001 fc06 	bl	8003f00 <pvPortMalloc>
 80026f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	631a      	str	r2, [r3, #48]	; 0x30
 8002702:	e005      	b.n	8002710 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002704:	6978      	ldr	r0, [r7, #20]
 8002706:	f001 fcbd 	bl	8004084 <vPortFree>
 800270a:	e001      	b.n	8002710 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800270c:	2300      	movs	r3, #0
 800270e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d013      	beq.n	800273e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002716:	88fa      	ldrh	r2, [r7, #6]
 8002718:	2300      	movs	r3, #0
 800271a:	9303      	str	r3, [sp, #12]
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	9302      	str	r3, [sp, #8]
 8002720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002722:	9301      	str	r3, [sp, #4]
 8002724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	68b9      	ldr	r1, [r7, #8]
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f000 f80e 	bl	800274e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002732:	69f8      	ldr	r0, [r7, #28]
 8002734:	f000 f89e 	bl	8002874 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002738:	2301      	movs	r3, #1
 800273a:	61bb      	str	r3, [r7, #24]
 800273c:	e002      	b.n	8002744 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800273e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002742:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002744:	69bb      	ldr	r3, [r7, #24]
	}
 8002746:	4618      	mov	r0, r3
 8002748:	3720      	adds	r7, #32
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b088      	sub	sp, #32
 8002752:	af00      	add	r7, sp, #0
 8002754:	60f8      	str	r0, [r7, #12]
 8002756:	60b9      	str	r1, [r7, #8]
 8002758:	607a      	str	r2, [r7, #4]
 800275a:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d109      	bne.n	8002776 <prvInitialiseNewTask+0x28>
 8002762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002766:	f383 8811 	msr	BASEPRI, r3
 800276a:	f3bf 8f6f 	isb	sy
 800276e:	f3bf 8f4f 	dsb	sy
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	e7fe      	b.n	8002774 <prvInitialiseNewTask+0x26>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002778:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	461a      	mov	r2, r3
 8002780:	21a5      	movs	r1, #165	; 0xa5
 8002782:	f001 fdc2 	bl	800430a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002790:	3b01      	subs	r3, #1
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	f023 0307 	bic.w	r3, r3, #7
 800279e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d009      	beq.n	80027be <prvInitialiseNewTask+0x70>
 80027aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ae:	f383 8811 	msr	BASEPRI, r3
 80027b2:	f3bf 8f6f 	isb	sy
 80027b6:	f3bf 8f4f 	dsb	sy
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	e7fe      	b.n	80027bc <prvInitialiseNewTask+0x6e>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	e012      	b.n	80027ea <prvInitialiseNewTask+0x9c>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	4413      	add	r3, r2
 80027ca:	7819      	ldrb	r1, [r3, #0]
 80027cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	4413      	add	r3, r2
 80027d2:	3334      	adds	r3, #52	; 0x34
 80027d4:	460a      	mov	r2, r1
 80027d6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	4413      	add	r3, r2
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d006      	beq.n	80027f2 <prvInitialiseNewTask+0xa4>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	3301      	adds	r3, #1
 80027e8:	61fb      	str	r3, [r7, #28]
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	2b09      	cmp	r3, #9
 80027ee:	d9e9      	bls.n	80027c4 <prvInitialiseNewTask+0x76>
 80027f0:	e000      	b.n	80027f4 <prvInitialiseNewTask+0xa6>
		{
			break;
 80027f2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80027f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80027fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d901      	bls.n	8002806 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002802:	2304      	movs	r3, #4
 8002804:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800280a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800280c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002810:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8002812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002814:	2200      	movs	r2, #0
 8002816:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281a:	3304      	adds	r3, #4
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff fa25 	bl	8001c6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002824:	3318      	adds	r3, #24
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff fa20 	bl	8001c6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800282c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002830:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002834:	f1c3 0205 	rsb	r2, r3, #5
 8002838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800283c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002840:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002844:	2200      	movs	r2, #0
 8002846:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284a:	2200      	movs	r2, #0
 800284c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	68f9      	ldr	r1, [r7, #12]
 8002854:	69b8      	ldr	r0, [r7, #24]
 8002856:	f001 f90f 	bl	8003a78 <pxPortInitialiseStack>
 800285a:	4602      	mov	r2, r0
 800285c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800286a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800286c:	bf00      	nop
 800286e:	3720      	adds	r7, #32
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800287c:	f001 fa26 	bl	8003ccc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002880:	4b2c      	ldr	r3, [pc, #176]	; (8002934 <prvAddNewTaskToReadyList+0xc0>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	3301      	adds	r3, #1
 8002886:	4a2b      	ldr	r2, [pc, #172]	; (8002934 <prvAddNewTaskToReadyList+0xc0>)
 8002888:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800288a:	4b2b      	ldr	r3, [pc, #172]	; (8002938 <prvAddNewTaskToReadyList+0xc4>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d109      	bne.n	80028a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002892:	4a29      	ldr	r2, [pc, #164]	; (8002938 <prvAddNewTaskToReadyList+0xc4>)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002898:	4b26      	ldr	r3, [pc, #152]	; (8002934 <prvAddNewTaskToReadyList+0xc0>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d110      	bne.n	80028c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80028a0:	f000 fc7a 	bl	8003198 <prvInitialiseTaskLists>
 80028a4:	e00d      	b.n	80028c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80028a6:	4b25      	ldr	r3, [pc, #148]	; (800293c <prvAddNewTaskToReadyList+0xc8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d109      	bne.n	80028c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80028ae:	4b22      	ldr	r3, [pc, #136]	; (8002938 <prvAddNewTaskToReadyList+0xc4>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d802      	bhi.n	80028c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80028bc:	4a1e      	ldr	r2, [pc, #120]	; (8002938 <prvAddNewTaskToReadyList+0xc4>)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80028c2:	4b1f      	ldr	r3, [pc, #124]	; (8002940 <prvAddNewTaskToReadyList+0xcc>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	3301      	adds	r3, #1
 80028c8:	4a1d      	ldr	r2, [pc, #116]	; (8002940 <prvAddNewTaskToReadyList+0xcc>)
 80028ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80028cc:	4b1c      	ldr	r3, [pc, #112]	; (8002940 <prvAddNewTaskToReadyList+0xcc>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d8:	2201      	movs	r2, #1
 80028da:	409a      	lsls	r2, r3
 80028dc:	4b19      	ldr	r3, [pc, #100]	; (8002944 <prvAddNewTaskToReadyList+0xd0>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	4a18      	ldr	r2, [pc, #96]	; (8002944 <prvAddNewTaskToReadyList+0xd0>)
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4a15      	ldr	r2, [pc, #84]	; (8002948 <prvAddNewTaskToReadyList+0xd4>)
 80028f4:	441a      	add	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3304      	adds	r3, #4
 80028fa:	4619      	mov	r1, r3
 80028fc:	4610      	mov	r0, r2
 80028fe:	f7ff f9c2 	bl	8001c86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002902:	f001 fa11 	bl	8003d28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002906:	4b0d      	ldr	r3, [pc, #52]	; (800293c <prvAddNewTaskToReadyList+0xc8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00e      	beq.n	800292c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800290e:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <prvAddNewTaskToReadyList+0xc4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002918:	429a      	cmp	r2, r3
 800291a:	d207      	bcs.n	800292c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <prvAddNewTaskToReadyList+0xd8>)
 800291e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	f3bf 8f4f 	dsb	sy
 8002928:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	20000110 	.word	0x20000110
 8002938:	20000038 	.word	0x20000038
 800293c:	2000011c 	.word	0x2000011c
 8002940:	2000012c 	.word	0x2000012c
 8002944:	20000118 	.word	0x20000118
 8002948:	2000003c 	.word	0x2000003c
 800294c:	e000ed04 	.word	0xe000ed04

08002950 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002958:	f001 f9b8 	bl	8003ccc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d102      	bne.n	8002968 <vTaskDelete+0x18>
 8002962:	4b38      	ldr	r3, [pc, #224]	; (8002a44 <vTaskDelete+0xf4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	e000      	b.n	800296a <vTaskDelete+0x1a>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	3304      	adds	r3, #4
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff f9e5 	bl	8001d40 <uxListRemove>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d115      	bne.n	80029a8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002980:	4931      	ldr	r1, [pc, #196]	; (8002a48 <vTaskDelete+0xf8>)
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	440b      	add	r3, r1
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10a      	bne.n	80029a8 <vTaskDelete+0x58>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002996:	2201      	movs	r2, #1
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43da      	mvns	r2, r3
 800299e:	4b2b      	ldr	r3, [pc, #172]	; (8002a4c <vTaskDelete+0xfc>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4013      	ands	r3, r2
 80029a4:	4a29      	ldr	r2, [pc, #164]	; (8002a4c <vTaskDelete+0xfc>)
 80029a6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d004      	beq.n	80029ba <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	3318      	adds	r3, #24
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff f9c3 	bl	8001d40 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80029ba:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <vTaskDelete+0x100>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	3301      	adds	r3, #1
 80029c0:	4a23      	ldr	r2, [pc, #140]	; (8002a50 <vTaskDelete+0x100>)
 80029c2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80029c4:	4b1f      	ldr	r3, [pc, #124]	; (8002a44 <vTaskDelete+0xf4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d10b      	bne.n	80029e6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	3304      	adds	r3, #4
 80029d2:	4619      	mov	r1, r3
 80029d4:	481f      	ldr	r0, [pc, #124]	; (8002a54 <vTaskDelete+0x104>)
 80029d6:	f7ff f956 	bl	8001c86 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80029da:	4b1f      	ldr	r3, [pc, #124]	; (8002a58 <vTaskDelete+0x108>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	3301      	adds	r3, #1
 80029e0:	4a1d      	ldr	r2, [pc, #116]	; (8002a58 <vTaskDelete+0x108>)
 80029e2:	6013      	str	r3, [r2, #0]
 80029e4:	e009      	b.n	80029fa <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80029e6:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <vTaskDelete+0x10c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	4a1b      	ldr	r2, [pc, #108]	; (8002a5c <vTaskDelete+0x10c>)
 80029ee:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 fc3d 	bl	8003270 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80029f6:	f000 fc4b 	bl	8003290 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80029fa:	f001 f995 	bl	8003d28 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80029fe:	4b18      	ldr	r3, [pc, #96]	; (8002a60 <vTaskDelete+0x110>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d01a      	beq.n	8002a3c <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 8002a06:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <vTaskDelete+0xf4>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d115      	bne.n	8002a3c <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8002a10:	4b14      	ldr	r3, [pc, #80]	; (8002a64 <vTaskDelete+0x114>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d009      	beq.n	8002a2c <vTaskDelete+0xdc>
 8002a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1c:	f383 8811 	msr	BASEPRI, r3
 8002a20:	f3bf 8f6f 	isb	sy
 8002a24:	f3bf 8f4f 	dsb	sy
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	e7fe      	b.n	8002a2a <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8002a2c:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <vTaskDelete+0x118>)
 8002a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	f3bf 8f4f 	dsb	sy
 8002a38:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002a3c:	bf00      	nop
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20000038 	.word	0x20000038
 8002a48:	2000003c 	.word	0x2000003c
 8002a4c:	20000118 	.word	0x20000118
 8002a50:	2000012c 	.word	0x2000012c
 8002a54:	200000e4 	.word	0x200000e4
 8002a58:	200000f8 	.word	0x200000f8
 8002a5c:	20000110 	.word	0x20000110
 8002a60:	2000011c 	.word	0x2000011c
 8002a64:	20000138 	.word	0x20000138
 8002a68:	e000ed04 	.word	0xe000ed04

08002a6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d016      	beq.n	8002aac <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002a7e:	4b13      	ldr	r3, [pc, #76]	; (8002acc <vTaskDelay+0x60>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d009      	beq.n	8002a9a <vTaskDelay+0x2e>
 8002a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8a:	f383 8811 	msr	BASEPRI, r3
 8002a8e:	f3bf 8f6f 	isb	sy
 8002a92:	f3bf 8f4f 	dsb	sy
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	e7fe      	b.n	8002a98 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002a9a:	f000 f867 	bl	8002b6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fcb7 	bl	8003414 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002aa6:	f000 f86f 	bl	8002b88 <xTaskResumeAll>
 8002aaa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d107      	bne.n	8002ac2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002ab2:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <vTaskDelay+0x64>)
 8002ab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	f3bf 8f4f 	dsb	sy
 8002abe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000138 	.word	0x20000138
 8002ad0:	e000ed04 	.word	0xe000ed04

08002ad4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8002ada:	4b1e      	ldr	r3, [pc, #120]	; (8002b54 <vTaskStartScheduler+0x80>)
 8002adc:	9301      	str	r3, [sp, #4]
 8002ade:	2300      	movs	r3, #0
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	2282      	movs	r2, #130	; 0x82
 8002ae6:	491c      	ldr	r1, [pc, #112]	; (8002b58 <vTaskStartScheduler+0x84>)
 8002ae8:	481c      	ldr	r0, [pc, #112]	; (8002b5c <vTaskStartScheduler+0x88>)
 8002aea:	f7ff fdef 	bl	80026cc <xTaskCreate>
 8002aee:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d102      	bne.n	8002afc <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8002af6:	f000 fcf3 	bl	80034e0 <xTimerCreateTimerTask>
 8002afa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d115      	bne.n	8002b2e <vTaskStartScheduler+0x5a>
 8002b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b06:	f383 8811 	msr	BASEPRI, r3
 8002b0a:	f3bf 8f6f 	isb	sy
 8002b0e:	f3bf 8f4f 	dsb	sy
 8002b12:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b14:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <vTaskStartScheduler+0x8c>)
 8002b16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b1c:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <vTaskStartScheduler+0x90>)
 8002b1e:	2201      	movs	r2, #1
 8002b20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b22:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <vTaskStartScheduler+0x94>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b28:	f001 f832 	bl	8003b90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b2c:	e00d      	b.n	8002b4a <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b34:	d109      	bne.n	8002b4a <vTaskStartScheduler+0x76>
 8002b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3a:	f383 8811 	msr	BASEPRI, r3
 8002b3e:	f3bf 8f6f 	isb	sy
 8002b42:	f3bf 8f4f 	dsb	sy
 8002b46:	607b      	str	r3, [r7, #4]
 8002b48:	e7fe      	b.n	8002b48 <vTaskStartScheduler+0x74>
}
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000134 	.word	0x20000134
 8002b58:	08004344 	.word	0x08004344
 8002b5c:	08003169 	.word	0x08003169
 8002b60:	20000130 	.word	0x20000130
 8002b64:	2000011c 	.word	0x2000011c
 8002b68:	20000114 	.word	0x20000114

08002b6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002b70:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <vTaskSuspendAll+0x18>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3301      	adds	r3, #1
 8002b76:	4a03      	ldr	r2, [pc, #12]	; (8002b84 <vTaskSuspendAll+0x18>)
 8002b78:	6013      	str	r3, [r2, #0]
}
 8002b7a:	bf00      	nop
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	20000138 	.word	0x20000138

08002b88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002b92:	2300      	movs	r3, #0
 8002b94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002b96:	4b41      	ldr	r3, [pc, #260]	; (8002c9c <xTaskResumeAll+0x114>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d109      	bne.n	8002bb2 <xTaskResumeAll+0x2a>
 8002b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba2:	f383 8811 	msr	BASEPRI, r3
 8002ba6:	f3bf 8f6f 	isb	sy
 8002baa:	f3bf 8f4f 	dsb	sy
 8002bae:	603b      	str	r3, [r7, #0]
 8002bb0:	e7fe      	b.n	8002bb0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002bb2:	f001 f88b 	bl	8003ccc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002bb6:	4b39      	ldr	r3, [pc, #228]	; (8002c9c <xTaskResumeAll+0x114>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	4a37      	ldr	r2, [pc, #220]	; (8002c9c <xTaskResumeAll+0x114>)
 8002bbe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bc0:	4b36      	ldr	r3, [pc, #216]	; (8002c9c <xTaskResumeAll+0x114>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d161      	bne.n	8002c8c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002bc8:	4b35      	ldr	r3, [pc, #212]	; (8002ca0 <xTaskResumeAll+0x118>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d05d      	beq.n	8002c8c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bd0:	e02e      	b.n	8002c30 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bd2:	4b34      	ldr	r3, [pc, #208]	; (8002ca4 <xTaskResumeAll+0x11c>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	3318      	adds	r3, #24
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff f8ae 	bl	8001d40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	3304      	adds	r3, #4
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff f8a9 	bl	8001d40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	4b2c      	ldr	r3, [pc, #176]	; (8002ca8 <xTaskResumeAll+0x120>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	4a2a      	ldr	r2, [pc, #168]	; (8002ca8 <xTaskResumeAll+0x120>)
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4a27      	ldr	r2, [pc, #156]	; (8002cac <xTaskResumeAll+0x124>)
 8002c0e:	441a      	add	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	3304      	adds	r3, #4
 8002c14:	4619      	mov	r1, r3
 8002c16:	4610      	mov	r0, r2
 8002c18:	f7ff f835 	bl	8001c86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c20:	4b23      	ldr	r3, [pc, #140]	; (8002cb0 <xTaskResumeAll+0x128>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d302      	bcc.n	8002c30 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002c2a:	4b22      	ldr	r3, [pc, #136]	; (8002cb4 <xTaskResumeAll+0x12c>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c30:	4b1c      	ldr	r3, [pc, #112]	; (8002ca4 <xTaskResumeAll+0x11c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1cc      	bne.n	8002bd2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c3e:	f000 fb27 	bl	8003290 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002c42:	4b1d      	ldr	r3, [pc, #116]	; (8002cb8 <xTaskResumeAll+0x130>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d010      	beq.n	8002c70 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002c4e:	f000 f847 	bl	8002ce0 <xTaskIncrementTick>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d002      	beq.n	8002c5e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002c58:	4b16      	ldr	r3, [pc, #88]	; (8002cb4 <xTaskResumeAll+0x12c>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f1      	bne.n	8002c4e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002c6a:	4b13      	ldr	r3, [pc, #76]	; (8002cb8 <xTaskResumeAll+0x130>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002c70:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <xTaskResumeAll+0x12c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d009      	beq.n	8002c8c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002c7c:	4b0f      	ldr	r3, [pc, #60]	; (8002cbc <xTaskResumeAll+0x134>)
 8002c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	f3bf 8f4f 	dsb	sy
 8002c88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002c8c:	f001 f84c 	bl	8003d28 <vPortExitCritical>

	return xAlreadyYielded;
 8002c90:	68bb      	ldr	r3, [r7, #8]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000138 	.word	0x20000138
 8002ca0:	20000110 	.word	0x20000110
 8002ca4:	200000d0 	.word	0x200000d0
 8002ca8:	20000118 	.word	0x20000118
 8002cac:	2000003c 	.word	0x2000003c
 8002cb0:	20000038 	.word	0x20000038
 8002cb4:	20000124 	.word	0x20000124
 8002cb8:	20000120 	.word	0x20000120
 8002cbc:	e000ed04 	.word	0xe000ed04

08002cc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002cc6:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <xTaskGetTickCount+0x1c>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002ccc:	687b      	ldr	r3, [r7, #4]
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	20000114 	.word	0x20000114

08002ce0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cea:	4b4e      	ldr	r3, [pc, #312]	; (8002e24 <xTaskIncrementTick+0x144>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f040 8087 	bne.w	8002e02 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002cf4:	4b4c      	ldr	r3, [pc, #304]	; (8002e28 <xTaskIncrementTick+0x148>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002cfc:	4a4a      	ldr	r2, [pc, #296]	; (8002e28 <xTaskIncrementTick+0x148>)
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d11f      	bne.n	8002d48 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d08:	4b48      	ldr	r3, [pc, #288]	; (8002e2c <xTaskIncrementTick+0x14c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d009      	beq.n	8002d26 <xTaskIncrementTick+0x46>
 8002d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d16:	f383 8811 	msr	BASEPRI, r3
 8002d1a:	f3bf 8f6f 	isb	sy
 8002d1e:	f3bf 8f4f 	dsb	sy
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	e7fe      	b.n	8002d24 <xTaskIncrementTick+0x44>
 8002d26:	4b41      	ldr	r3, [pc, #260]	; (8002e2c <xTaskIncrementTick+0x14c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	4b40      	ldr	r3, [pc, #256]	; (8002e30 <xTaskIncrementTick+0x150>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a3e      	ldr	r2, [pc, #248]	; (8002e2c <xTaskIncrementTick+0x14c>)
 8002d32:	6013      	str	r3, [r2, #0]
 8002d34:	4a3e      	ldr	r2, [pc, #248]	; (8002e30 <xTaskIncrementTick+0x150>)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	4b3e      	ldr	r3, [pc, #248]	; (8002e34 <xTaskIncrementTick+0x154>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	4a3c      	ldr	r2, [pc, #240]	; (8002e34 <xTaskIncrementTick+0x154>)
 8002d42:	6013      	str	r3, [r2, #0]
 8002d44:	f000 faa4 	bl	8003290 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d48:	4b3b      	ldr	r3, [pc, #236]	; (8002e38 <xTaskIncrementTick+0x158>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d348      	bcc.n	8002de4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d52:	4b36      	ldr	r3, [pc, #216]	; (8002e2c <xTaskIncrementTick+0x14c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d104      	bne.n	8002d66 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d5c:	4b36      	ldr	r3, [pc, #216]	; (8002e38 <xTaskIncrementTick+0x158>)
 8002d5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d62:	601a      	str	r2, [r3, #0]
					break;
 8002d64:	e03e      	b.n	8002de4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d66:	4b31      	ldr	r3, [pc, #196]	; (8002e2c <xTaskIncrementTick+0x14c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d203      	bcs.n	8002d86 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002d7e:	4a2e      	ldr	r2, [pc, #184]	; (8002e38 <xTaskIncrementTick+0x158>)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002d84:	e02e      	b.n	8002de4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	3304      	adds	r3, #4
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fe ffd8 	bl	8001d40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d004      	beq.n	8002da2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	3318      	adds	r3, #24
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fe ffcf 	bl	8001d40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da6:	2201      	movs	r2, #1
 8002da8:	409a      	lsls	r2, r3
 8002daa:	4b24      	ldr	r3, [pc, #144]	; (8002e3c <xTaskIncrementTick+0x15c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	4a22      	ldr	r2, [pc, #136]	; (8002e3c <xTaskIncrementTick+0x15c>)
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4a1f      	ldr	r2, [pc, #124]	; (8002e40 <xTaskIncrementTick+0x160>)
 8002dc2:	441a      	add	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4610      	mov	r0, r2
 8002dcc:	f7fe ff5b 	bl	8001c86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd4:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <xTaskIncrementTick+0x164>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d3b9      	bcc.n	8002d52 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002dde:	2301      	movs	r3, #1
 8002de0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002de2:	e7b6      	b.n	8002d52 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002de4:	4b17      	ldr	r3, [pc, #92]	; (8002e44 <xTaskIncrementTick+0x164>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dea:	4915      	ldr	r1, [pc, #84]	; (8002e40 <xTaskIncrementTick+0x160>)
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d907      	bls.n	8002e0c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	e004      	b.n	8002e0c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002e02:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <xTaskIncrementTick+0x168>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	3301      	adds	r3, #1
 8002e08:	4a0f      	ldr	r2, [pc, #60]	; (8002e48 <xTaskIncrementTick+0x168>)
 8002e0a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002e0c:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <xTaskIncrementTick+0x16c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8002e14:	2301      	movs	r3, #1
 8002e16:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002e18:	697b      	ldr	r3, [r7, #20]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000138 	.word	0x20000138
 8002e28:	20000114 	.word	0x20000114
 8002e2c:	200000c8 	.word	0x200000c8
 8002e30:	200000cc 	.word	0x200000cc
 8002e34:	20000128 	.word	0x20000128
 8002e38:	20000130 	.word	0x20000130
 8002e3c:	20000118 	.word	0x20000118
 8002e40:	2000003c 	.word	0x2000003c
 8002e44:	20000038 	.word	0x20000038
 8002e48:	20000120 	.word	0x20000120
 8002e4c:	20000124 	.word	0x20000124

08002e50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e56:	4b26      	ldr	r3, [pc, #152]	; (8002ef0 <vTaskSwitchContext+0xa0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e5e:	4b25      	ldr	r3, [pc, #148]	; (8002ef4 <vTaskSwitchContext+0xa4>)
 8002e60:	2201      	movs	r2, #1
 8002e62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e64:	e03e      	b.n	8002ee4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002e66:	4b23      	ldr	r3, [pc, #140]	; (8002ef4 <vTaskSwitchContext+0xa4>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e6c:	4b22      	ldr	r3, [pc, #136]	; (8002ef8 <vTaskSwitchContext+0xa8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	fab3 f383 	clz	r3, r3
 8002e78:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002e7a:	7afb      	ldrb	r3, [r7, #11]
 8002e7c:	f1c3 031f 	rsb	r3, r3, #31
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	491e      	ldr	r1, [pc, #120]	; (8002efc <vTaskSwitchContext+0xac>)
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	4613      	mov	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	440b      	add	r3, r1
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d109      	bne.n	8002eaa <vTaskSwitchContext+0x5a>
	__asm volatile
 8002e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e9a:	f383 8811 	msr	BASEPRI, r3
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	f3bf 8f4f 	dsb	sy
 8002ea6:	607b      	str	r3, [r7, #4]
 8002ea8:	e7fe      	b.n	8002ea8 <vTaskSwitchContext+0x58>
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4a11      	ldr	r2, [pc, #68]	; (8002efc <vTaskSwitchContext+0xac>)
 8002eb6:	4413      	add	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	605a      	str	r2, [r3, #4]
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	3308      	adds	r3, #8
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d104      	bne.n	8002eda <vTaskSwitchContext+0x8a>
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	4a07      	ldr	r2, [pc, #28]	; (8002f00 <vTaskSwitchContext+0xb0>)
 8002ee2:	6013      	str	r3, [r2, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	371c      	adds	r7, #28
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	20000138 	.word	0x20000138
 8002ef4:	20000124 	.word	0x20000124
 8002ef8:	20000118 	.word	0x20000118
 8002efc:	2000003c 	.word	0x2000003c
 8002f00:	20000038 	.word	0x20000038

08002f04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d109      	bne.n	8002f28 <vTaskPlaceOnEventList+0x24>
 8002f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f18:	f383 8811 	msr	BASEPRI, r3
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	60fb      	str	r3, [r7, #12]
 8002f26:	e7fe      	b.n	8002f26 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f28:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <vTaskPlaceOnEventList+0x44>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	3318      	adds	r3, #24
 8002f2e:	4619      	mov	r1, r3
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7fe fecc 	bl	8001cce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002f36:	2101      	movs	r1, #1
 8002f38:	6838      	ldr	r0, [r7, #0]
 8002f3a:	f000 fa6b 	bl	8003414 <prvAddCurrentTaskToDelayedList>
}
 8002f3e:	bf00      	nop
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000038 	.word	0x20000038

08002f4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d109      	bne.n	8002f72 <vTaskPlaceOnEventListRestricted+0x26>
 8002f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f62:	f383 8811 	msr	BASEPRI, r3
 8002f66:	f3bf 8f6f 	isb	sy
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	e7fe      	b.n	8002f70 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f72:	4b0a      	ldr	r3, [pc, #40]	; (8002f9c <vTaskPlaceOnEventListRestricted+0x50>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	3318      	adds	r3, #24
 8002f78:	4619      	mov	r1, r3
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f7fe fe83 	bl	8001c86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8002f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f8a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	68b8      	ldr	r0, [r7, #8]
 8002f90:	f000 fa40 	bl	8003414 <prvAddCurrentTaskToDelayedList>
	}
 8002f94:	bf00      	nop
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	20000038 	.word	0x20000038

08002fa0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d109      	bne.n	8002fca <xTaskRemoveFromEventList+0x2a>
 8002fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fba:	f383 8811 	msr	BASEPRI, r3
 8002fbe:	f3bf 8f6f 	isb	sy
 8002fc2:	f3bf 8f4f 	dsb	sy
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	e7fe      	b.n	8002fc8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	3318      	adds	r3, #24
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe feb6 	bl	8001d40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fd4:	4b1d      	ldr	r3, [pc, #116]	; (800304c <xTaskRemoveFromEventList+0xac>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d11c      	bne.n	8003016 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	3304      	adds	r3, #4
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fe fead 	bl	8001d40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fea:	2201      	movs	r2, #1
 8002fec:	409a      	lsls	r2, r3
 8002fee:	4b18      	ldr	r3, [pc, #96]	; (8003050 <xTaskRemoveFromEventList+0xb0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	4a16      	ldr	r2, [pc, #88]	; (8003050 <xTaskRemoveFromEventList+0xb0>)
 8002ff6:	6013      	str	r3, [r2, #0]
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4a13      	ldr	r2, [pc, #76]	; (8003054 <xTaskRemoveFromEventList+0xb4>)
 8003006:	441a      	add	r2, r3
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	3304      	adds	r3, #4
 800300c:	4619      	mov	r1, r3
 800300e:	4610      	mov	r0, r2
 8003010:	f7fe fe39 	bl	8001c86 <vListInsertEnd>
 8003014:	e005      	b.n	8003022 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	3318      	adds	r3, #24
 800301a:	4619      	mov	r1, r3
 800301c:	480e      	ldr	r0, [pc, #56]	; (8003058 <xTaskRemoveFromEventList+0xb8>)
 800301e:	f7fe fe32 	bl	8001c86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003026:	4b0d      	ldr	r3, [pc, #52]	; (800305c <xTaskRemoveFromEventList+0xbc>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	429a      	cmp	r2, r3
 800302e:	d905      	bls.n	800303c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003030:	2301      	movs	r3, #1
 8003032:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003034:	4b0a      	ldr	r3, [pc, #40]	; (8003060 <xTaskRemoveFromEventList+0xc0>)
 8003036:	2201      	movs	r2, #1
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	e001      	b.n	8003040 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003040:	697b      	ldr	r3, [r7, #20]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000138 	.word	0x20000138
 8003050:	20000118 	.word	0x20000118
 8003054:	2000003c 	.word	0x2000003c
 8003058:	200000d0 	.word	0x200000d0
 800305c:	20000038 	.word	0x20000038
 8003060:	20000124 	.word	0x20000124

08003064 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800306c:	4b06      	ldr	r3, [pc, #24]	; (8003088 <vTaskInternalSetTimeOutState+0x24>)
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003074:	4b05      	ldr	r3, [pc, #20]	; (800308c <vTaskInternalSetTimeOutState+0x28>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	605a      	str	r2, [r3, #4]
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	20000128 	.word	0x20000128
 800308c:	20000114 	.word	0x20000114

08003090 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d109      	bne.n	80030b4 <xTaskCheckForTimeOut+0x24>
 80030a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a4:	f383 8811 	msr	BASEPRI, r3
 80030a8:	f3bf 8f6f 	isb	sy
 80030ac:	f3bf 8f4f 	dsb	sy
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	e7fe      	b.n	80030b2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d109      	bne.n	80030ce <xTaskCheckForTimeOut+0x3e>
 80030ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	e7fe      	b.n	80030cc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80030ce:	f000 fdfd 	bl	8003ccc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80030d2:	4b1d      	ldr	r3, [pc, #116]	; (8003148 <xTaskCheckForTimeOut+0xb8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030ea:	d102      	bne.n	80030f2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80030ec:	2300      	movs	r3, #0
 80030ee:	61fb      	str	r3, [r7, #28]
 80030f0:	e023      	b.n	800313a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	4b15      	ldr	r3, [pc, #84]	; (800314c <xTaskCheckForTimeOut+0xbc>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d007      	beq.n	800310e <xTaskCheckForTimeOut+0x7e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	429a      	cmp	r2, r3
 8003106:	d302      	bcc.n	800310e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003108:	2301      	movs	r3, #1
 800310a:	61fb      	str	r3, [r7, #28]
 800310c:	e015      	b.n	800313a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	429a      	cmp	r2, r3
 8003116:	d20b      	bcs.n	8003130 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	1ad2      	subs	r2, r2, r3
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff ff9d 	bl	8003064 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
 800312e:	e004      	b.n	800313a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003136:	2301      	movs	r3, #1
 8003138:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800313a:	f000 fdf5 	bl	8003d28 <vPortExitCritical>

	return xReturn;
 800313e:	69fb      	ldr	r3, [r7, #28]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3720      	adds	r7, #32
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	20000114 	.word	0x20000114
 800314c:	20000128 	.word	0x20000128

08003150 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003154:	4b03      	ldr	r3, [pc, #12]	; (8003164 <vTaskMissedYield+0x14>)
 8003156:	2201      	movs	r2, #1
 8003158:	601a      	str	r2, [r3, #0]
}
 800315a:	bf00      	nop
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr
 8003164:	20000124 	.word	0x20000124

08003168 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003170:	f000 f852 	bl	8003218 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003174:	4b06      	ldr	r3, [pc, #24]	; (8003190 <prvIdleTask+0x28>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d9f9      	bls.n	8003170 <prvIdleTask+0x8>
			{
				taskYIELD();
 800317c:	4b05      	ldr	r3, [pc, #20]	; (8003194 <prvIdleTask+0x2c>)
 800317e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800318c:	e7f0      	b.n	8003170 <prvIdleTask+0x8>
 800318e:	bf00      	nop
 8003190:	2000003c 	.word	0x2000003c
 8003194:	e000ed04 	.word	0xe000ed04

08003198 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800319e:	2300      	movs	r3, #0
 80031a0:	607b      	str	r3, [r7, #4]
 80031a2:	e00c      	b.n	80031be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4a12      	ldr	r2, [pc, #72]	; (80031f8 <prvInitialiseTaskLists+0x60>)
 80031b0:	4413      	add	r3, r2
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fe fd3a 	bl	8001c2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3301      	adds	r3, #1
 80031bc:	607b      	str	r3, [r7, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d9ef      	bls.n	80031a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80031c4:	480d      	ldr	r0, [pc, #52]	; (80031fc <prvInitialiseTaskLists+0x64>)
 80031c6:	f7fe fd31 	bl	8001c2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80031ca:	480d      	ldr	r0, [pc, #52]	; (8003200 <prvInitialiseTaskLists+0x68>)
 80031cc:	f7fe fd2e 	bl	8001c2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80031d0:	480c      	ldr	r0, [pc, #48]	; (8003204 <prvInitialiseTaskLists+0x6c>)
 80031d2:	f7fe fd2b 	bl	8001c2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80031d6:	480c      	ldr	r0, [pc, #48]	; (8003208 <prvInitialiseTaskLists+0x70>)
 80031d8:	f7fe fd28 	bl	8001c2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80031dc:	480b      	ldr	r0, [pc, #44]	; (800320c <prvInitialiseTaskLists+0x74>)
 80031de:	f7fe fd25 	bl	8001c2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <prvInitialiseTaskLists+0x78>)
 80031e4:	4a05      	ldr	r2, [pc, #20]	; (80031fc <prvInitialiseTaskLists+0x64>)
 80031e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80031e8:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <prvInitialiseTaskLists+0x7c>)
 80031ea:	4a05      	ldr	r2, [pc, #20]	; (8003200 <prvInitialiseTaskLists+0x68>)
 80031ec:	601a      	str	r2, [r3, #0]
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	2000003c 	.word	0x2000003c
 80031fc:	200000a0 	.word	0x200000a0
 8003200:	200000b4 	.word	0x200000b4
 8003204:	200000d0 	.word	0x200000d0
 8003208:	200000e4 	.word	0x200000e4
 800320c:	200000fc 	.word	0x200000fc
 8003210:	200000c8 	.word	0x200000c8
 8003214:	200000cc 	.word	0x200000cc

08003218 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800321e:	e019      	b.n	8003254 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003220:	f000 fd54 	bl	8003ccc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003224:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <prvCheckTasksWaitingTermination+0x4c>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3304      	adds	r3, #4
 8003230:	4618      	mov	r0, r3
 8003232:	f7fe fd85 	bl	8001d40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003236:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <prvCheckTasksWaitingTermination+0x50>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	3b01      	subs	r3, #1
 800323c:	4a0a      	ldr	r2, [pc, #40]	; (8003268 <prvCheckTasksWaitingTermination+0x50>)
 800323e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003240:	4b0a      	ldr	r3, [pc, #40]	; (800326c <prvCheckTasksWaitingTermination+0x54>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	3b01      	subs	r3, #1
 8003246:	4a09      	ldr	r2, [pc, #36]	; (800326c <prvCheckTasksWaitingTermination+0x54>)
 8003248:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800324a:	f000 fd6d 	bl	8003d28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 f80e 	bl	8003270 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003254:	4b05      	ldr	r3, [pc, #20]	; (800326c <prvCheckTasksWaitingTermination+0x54>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1e1      	bne.n	8003220 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800325c:	bf00      	nop
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	200000e4 	.word	0x200000e4
 8003268:	20000110 	.word	0x20000110
 800326c:	200000f8 	.word	0x200000f8

08003270 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	4618      	mov	r0, r3
 800327e:	f000 ff01 	bl	8004084 <vPortFree>
			vPortFree( pxTCB );
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 fefe 	bl	8004084 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003288:	bf00      	nop
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003296:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <prvResetNextTaskUnblockTime+0x38>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d104      	bne.n	80032aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80032a0:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <prvResetNextTaskUnblockTime+0x3c>)
 80032a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80032a8:	e008      	b.n	80032bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032aa:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <prvResetNextTaskUnblockTime+0x38>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	4a04      	ldr	r2, [pc, #16]	; (80032cc <prvResetNextTaskUnblockTime+0x3c>)
 80032ba:	6013      	str	r3, [r2, #0]
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	200000c8 	.word	0x200000c8
 80032cc:	20000130 	.word	0x20000130

080032d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80032d6:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <xTaskGetSchedulerState+0x34>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d102      	bne.n	80032e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80032de:	2301      	movs	r3, #1
 80032e0:	607b      	str	r3, [r7, #4]
 80032e2:	e008      	b.n	80032f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032e4:	4b08      	ldr	r3, [pc, #32]	; (8003308 <xTaskGetSchedulerState+0x38>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d102      	bne.n	80032f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80032ec:	2302      	movs	r3, #2
 80032ee:	607b      	str	r3, [r7, #4]
 80032f0:	e001      	b.n	80032f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80032f2:	2300      	movs	r3, #0
 80032f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80032f6:	687b      	ldr	r3, [r7, #4]
	}
 80032f8:	4618      	mov	r0, r3
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	2000011c 	.word	0x2000011c
 8003308:	20000138 	.word	0x20000138

0800330c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d06c      	beq.n	80033fc <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003322:	4b39      	ldr	r3, [pc, #228]	; (8003408 <xTaskPriorityDisinherit+0xfc>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	429a      	cmp	r2, r3
 800332a:	d009      	beq.n	8003340 <xTaskPriorityDisinherit+0x34>
 800332c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003330:	f383 8811 	msr	BASEPRI, r3
 8003334:	f3bf 8f6f 	isb	sy
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	e7fe      	b.n	800333e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003344:	2b00      	cmp	r3, #0
 8003346:	d109      	bne.n	800335c <xTaskPriorityDisinherit+0x50>
 8003348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334c:	f383 8811 	msr	BASEPRI, r3
 8003350:	f3bf 8f6f 	isb	sy
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	e7fe      	b.n	800335a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003360:	1e5a      	subs	r2, r3, #1
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800336e:	429a      	cmp	r2, r3
 8003370:	d044      	beq.n	80033fc <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003376:	2b00      	cmp	r3, #0
 8003378:	d140      	bne.n	80033fc <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	3304      	adds	r3, #4
 800337e:	4618      	mov	r0, r3
 8003380:	f7fe fcde 	bl	8001d40 <uxListRemove>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d115      	bne.n	80033b6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800338e:	491f      	ldr	r1, [pc, #124]	; (800340c <xTaskPriorityDisinherit+0x100>)
 8003390:	4613      	mov	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10a      	bne.n	80033b6 <xTaskPriorityDisinherit+0xaa>
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	2201      	movs	r2, #1
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43da      	mvns	r2, r3
 80033ac:	4b18      	ldr	r3, [pc, #96]	; (8003410 <xTaskPriorityDisinherit+0x104>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4013      	ands	r3, r2
 80033b2:	4a17      	ldr	r2, [pc, #92]	; (8003410 <xTaskPriorityDisinherit+0x104>)
 80033b4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	f1c3 0205 	rsb	r2, r3, #5
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	2201      	movs	r2, #1
 80033d0:	409a      	lsls	r2, r3
 80033d2:	4b0f      	ldr	r3, [pc, #60]	; (8003410 <xTaskPriorityDisinherit+0x104>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	4a0d      	ldr	r2, [pc, #52]	; (8003410 <xTaskPriorityDisinherit+0x104>)
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4a08      	ldr	r2, [pc, #32]	; (800340c <xTaskPriorityDisinherit+0x100>)
 80033ea:	441a      	add	r2, r3
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	3304      	adds	r3, #4
 80033f0:	4619      	mov	r1, r3
 80033f2:	4610      	mov	r0, r2
 80033f4:	f7fe fc47 	bl	8001c86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80033f8:	2301      	movs	r3, #1
 80033fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80033fc:	697b      	ldr	r3, [r7, #20]
	}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20000038 	.word	0x20000038
 800340c:	2000003c 	.word	0x2000003c
 8003410:	20000118 	.word	0x20000118

08003414 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800341e:	4b29      	ldr	r3, [pc, #164]	; (80034c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003424:	4b28      	ldr	r3, [pc, #160]	; (80034c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	3304      	adds	r3, #4
 800342a:	4618      	mov	r0, r3
 800342c:	f7fe fc88 	bl	8001d40 <uxListRemove>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10b      	bne.n	800344e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003436:	4b24      	ldr	r3, [pc, #144]	; (80034c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343c:	2201      	movs	r2, #1
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43da      	mvns	r2, r3
 8003444:	4b21      	ldr	r3, [pc, #132]	; (80034cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4013      	ands	r3, r2
 800344a:	4a20      	ldr	r2, [pc, #128]	; (80034cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800344c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003454:	d10a      	bne.n	800346c <prvAddCurrentTaskToDelayedList+0x58>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d007      	beq.n	800346c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800345c:	4b1a      	ldr	r3, [pc, #104]	; (80034c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3304      	adds	r3, #4
 8003462:	4619      	mov	r1, r3
 8003464:	481a      	ldr	r0, [pc, #104]	; (80034d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003466:	f7fe fc0e 	bl	8001c86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800346a:	e026      	b.n	80034ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4413      	add	r3, r2
 8003472:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003474:	4b14      	ldr	r3, [pc, #80]	; (80034c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	429a      	cmp	r2, r3
 8003482:	d209      	bcs.n	8003498 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003484:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	4b0f      	ldr	r3, [pc, #60]	; (80034c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	3304      	adds	r3, #4
 800348e:	4619      	mov	r1, r3
 8003490:	4610      	mov	r0, r2
 8003492:	f7fe fc1c 	bl	8001cce <vListInsert>
}
 8003496:	e010      	b.n	80034ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003498:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3304      	adds	r3, #4
 80034a2:	4619      	mov	r1, r3
 80034a4:	4610      	mov	r0, r2
 80034a6:	f7fe fc12 	bl	8001cce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80034aa:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d202      	bcs.n	80034ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80034b4:	4a09      	ldr	r2, [pc, #36]	; (80034dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	6013      	str	r3, [r2, #0]
}
 80034ba:	bf00      	nop
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	20000114 	.word	0x20000114
 80034c8:	20000038 	.word	0x20000038
 80034cc:	20000118 	.word	0x20000118
 80034d0:	200000fc 	.word	0x200000fc
 80034d4:	200000cc 	.word	0x200000cc
 80034d8:	200000c8 	.word	0x200000c8
 80034dc:	20000130 	.word	0x20000130

080034e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80034e6:	2300      	movs	r3, #0
 80034e8:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80034ea:	f000 fa8f 	bl	8003a0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80034ee:	4b11      	ldr	r3, [pc, #68]	; (8003534 <xTimerCreateTimerTask+0x54>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00b      	beq.n	800350e <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 80034f6:	4b10      	ldr	r3, [pc, #64]	; (8003538 <xTimerCreateTimerTask+0x58>)
 80034f8:	9301      	str	r3, [sp, #4]
 80034fa:	2302      	movs	r3, #2
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	2300      	movs	r3, #0
 8003500:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003504:	490d      	ldr	r1, [pc, #52]	; (800353c <xTimerCreateTimerTask+0x5c>)
 8003506:	480e      	ldr	r0, [pc, #56]	; (8003540 <xTimerCreateTimerTask+0x60>)
 8003508:	f7ff f8e0 	bl	80026cc <xTaskCreate>
 800350c:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d109      	bne.n	8003528 <xTimerCreateTimerTask+0x48>
 8003514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003518:	f383 8811 	msr	BASEPRI, r3
 800351c:	f3bf 8f6f 	isb	sy
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	603b      	str	r3, [r7, #0]
 8003526:	e7fe      	b.n	8003526 <xTimerCreateTimerTask+0x46>
	return xReturn;
 8003528:	687b      	ldr	r3, [r7, #4]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	2000016c 	.word	0x2000016c
 8003538:	20000170 	.word	0x20000170
 800353c:	0800434c 	.word	0x0800434c
 8003540:	0800365d 	.word	0x0800365d

08003544 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08a      	sub	sp, #40	; 0x28
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
 8003550:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003552:	2300      	movs	r3, #0
 8003554:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d109      	bne.n	8003570 <xTimerGenericCommand+0x2c>
 800355c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003560:	f383 8811 	msr	BASEPRI, r3
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	623b      	str	r3, [r7, #32]
 800356e:	e7fe      	b.n	800356e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003570:	4b19      	ldr	r3, [pc, #100]	; (80035d8 <xTimerGenericCommand+0x94>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d02a      	beq.n	80035ce <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2b05      	cmp	r3, #5
 8003588:	dc18      	bgt.n	80035bc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800358a:	f7ff fea1 	bl	80032d0 <xTaskGetSchedulerState>
 800358e:	4603      	mov	r3, r0
 8003590:	2b02      	cmp	r3, #2
 8003592:	d109      	bne.n	80035a8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003594:	4b10      	ldr	r3, [pc, #64]	; (80035d8 <xTimerGenericCommand+0x94>)
 8003596:	6818      	ldr	r0, [r3, #0]
 8003598:	f107 0114 	add.w	r1, r7, #20
 800359c:	2300      	movs	r3, #0
 800359e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035a0:	f7fe fcbe 	bl	8001f20 <xQueueGenericSend>
 80035a4:	6278      	str	r0, [r7, #36]	; 0x24
 80035a6:	e012      	b.n	80035ce <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80035a8:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <xTimerGenericCommand+0x94>)
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	f107 0114 	add.w	r1, r7, #20
 80035b0:	2300      	movs	r3, #0
 80035b2:	2200      	movs	r2, #0
 80035b4:	f7fe fcb4 	bl	8001f20 <xQueueGenericSend>
 80035b8:	6278      	str	r0, [r7, #36]	; 0x24
 80035ba:	e008      	b.n	80035ce <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80035bc:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <xTimerGenericCommand+0x94>)
 80035be:	6818      	ldr	r0, [r3, #0]
 80035c0:	f107 0114 	add.w	r1, r7, #20
 80035c4:	2300      	movs	r3, #0
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	f7fe fda4 	bl	8002114 <xQueueGenericSendFromISR>
 80035cc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3728      	adds	r7, #40	; 0x28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	2000016c 	.word	0x2000016c

080035dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035e6:	4b1c      	ldr	r3, [pc, #112]	; (8003658 <prvProcessExpiredTimer+0x7c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	3304      	adds	r3, #4
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fe fba3 	bl	8001d40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d121      	bne.n	8003646 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	18d1      	adds	r1, r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	6978      	ldr	r0, [r7, #20]
 8003610:	f000 f8c8 	bl	80037a4 <prvInsertTimerInActiveList>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d015      	beq.n	8003646 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800361a:	2300      	movs	r3, #0
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	2300      	movs	r3, #0
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	2100      	movs	r1, #0
 8003624:	6978      	ldr	r0, [r7, #20]
 8003626:	f7ff ff8d 	bl	8003544 <xTimerGenericCommand>
 800362a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d109      	bne.n	8003646 <prvProcessExpiredTimer+0x6a>
 8003632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003636:	f383 8811 	msr	BASEPRI, r3
 800363a:	f3bf 8f6f 	isb	sy
 800363e:	f3bf 8f4f 	dsb	sy
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	e7fe      	b.n	8003644 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	6978      	ldr	r0, [r7, #20]
 800364c:	4798      	blx	r3
}
 800364e:	bf00      	nop
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20000164 	.word	0x20000164

0800365c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003664:	f107 0308 	add.w	r3, r7, #8
 8003668:	4618      	mov	r0, r3
 800366a:	f000 f857 	bl	800371c <prvGetNextExpireTime>
 800366e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4619      	mov	r1, r3
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 f803 	bl	8003680 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800367a:	f000 f8d5 	bl	8003828 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800367e:	e7f1      	b.n	8003664 <prvTimerTask+0x8>

08003680 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800368a:	f7ff fa6f 	bl	8002b6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800368e:	f107 0308 	add.w	r3, r7, #8
 8003692:	4618      	mov	r0, r3
 8003694:	f000 f866 	bl	8003764 <prvSampleTimeNow>
 8003698:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d130      	bne.n	8003702 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10a      	bne.n	80036bc <prvProcessTimerOrBlockTask+0x3c>
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d806      	bhi.n	80036bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80036ae:	f7ff fa6b 	bl	8002b88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80036b2:	68f9      	ldr	r1, [r7, #12]
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7ff ff91 	bl	80035dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80036ba:	e024      	b.n	8003706 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d008      	beq.n	80036d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80036c2:	4b13      	ldr	r3, [pc, #76]	; (8003710 <prvProcessTimerOrBlockTask+0x90>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <prvProcessTimerOrBlockTask+0x50>
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <prvProcessTimerOrBlockTask+0x52>
 80036d0:	2300      	movs	r3, #0
 80036d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80036d4:	4b0f      	ldr	r3, [pc, #60]	; (8003714 <prvProcessTimerOrBlockTask+0x94>)
 80036d6:	6818      	ldr	r0, [r3, #0]
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	4619      	mov	r1, r3
 80036e2:	f7fe ffbf 	bl	8002664 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80036e6:	f7ff fa4f 	bl	8002b88 <xTaskResumeAll>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10a      	bne.n	8003706 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80036f0:	4b09      	ldr	r3, [pc, #36]	; (8003718 <prvProcessTimerOrBlockTask+0x98>)
 80036f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	f3bf 8f6f 	isb	sy
}
 8003700:	e001      	b.n	8003706 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003702:	f7ff fa41 	bl	8002b88 <xTaskResumeAll>
}
 8003706:	bf00      	nop
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20000168 	.word	0x20000168
 8003714:	2000016c 	.word	0x2000016c
 8003718:	e000ed04 	.word	0xe000ed04

0800371c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003724:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <prvGetNextExpireTime+0x44>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <prvGetNextExpireTime+0x16>
 800372e:	2201      	movs	r2, #1
 8003730:	e000      	b.n	8003734 <prvGetNextExpireTime+0x18>
 8003732:	2200      	movs	r2, #0
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d105      	bne.n	800374c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003740:	4b07      	ldr	r3, [pc, #28]	; (8003760 <prvGetNextExpireTime+0x44>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	e001      	b.n	8003750 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003750:	68fb      	ldr	r3, [r7, #12]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	20000164 	.word	0x20000164

08003764 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800376c:	f7ff faa8 	bl	8002cc0 <xTaskGetTickCount>
 8003770:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003772:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <prvSampleTimeNow+0x3c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	429a      	cmp	r2, r3
 800377a:	d205      	bcs.n	8003788 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800377c:	f000 f8e6 	bl	800394c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	e002      	b.n	800378e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800378e:	4a04      	ldr	r2, [pc, #16]	; (80037a0 <prvSampleTimeNow+0x3c>)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003794:	68fb      	ldr	r3, [r7, #12]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000174 	.word	0x20000174

080037a4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
 80037b0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80037b2:	2300      	movs	r3, #0
 80037b4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d812      	bhi.n	80037f0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	1ad2      	subs	r2, r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d302      	bcc.n	80037de <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80037d8:	2301      	movs	r3, #1
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	e01b      	b.n	8003816 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80037de:	4b10      	ldr	r3, [pc, #64]	; (8003820 <prvInsertTimerInActiveList+0x7c>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	3304      	adds	r3, #4
 80037e6:	4619      	mov	r1, r3
 80037e8:	4610      	mov	r0, r2
 80037ea:	f7fe fa70 	bl	8001cce <vListInsert>
 80037ee:	e012      	b.n	8003816 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d206      	bcs.n	8003806 <prvInsertTimerInActiveList+0x62>
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d302      	bcc.n	8003806 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003800:	2301      	movs	r3, #1
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	e007      	b.n	8003816 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003806:	4b07      	ldr	r3, [pc, #28]	; (8003824 <prvInsertTimerInActiveList+0x80>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	3304      	adds	r3, #4
 800380e:	4619      	mov	r1, r3
 8003810:	4610      	mov	r0, r2
 8003812:	f7fe fa5c 	bl	8001cce <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003816:	697b      	ldr	r3, [r7, #20]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	20000168 	.word	0x20000168
 8003824:	20000164 	.word	0x20000164

08003828 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08c      	sub	sp, #48	; 0x30
 800382c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800382e:	e07a      	b.n	8003926 <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	db76      	blt.n	8003924 <prvProcessReceivedCommands+0xfc>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d004      	beq.n	800384c <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	3304      	adds	r3, #4
 8003846:	4618      	mov	r0, r3
 8003848:	f7fe fa7a 	bl	8001d40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800384c:	1d3b      	adds	r3, r7, #4
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff ff88 	bl	8003764 <prvSampleTimeNow>
 8003854:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b09      	cmp	r3, #9
 800385a:	d864      	bhi.n	8003926 <prvProcessReceivedCommands+0xfe>
 800385c:	a201      	add	r2, pc, #4	; (adr r2, 8003864 <prvProcessReceivedCommands+0x3c>)
 800385e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003862:	bf00      	nop
 8003864:	0800388d 	.word	0x0800388d
 8003868:	0800388d 	.word	0x0800388d
 800386c:	0800388d 	.word	0x0800388d
 8003870:	08003927 	.word	0x08003927
 8003874:	080038e7 	.word	0x080038e7
 8003878:	0800391d 	.word	0x0800391d
 800387c:	0800388d 	.word	0x0800388d
 8003880:	0800388d 	.word	0x0800388d
 8003884:	08003927 	.word	0x08003927
 8003888:	080038e7 	.word	0x080038e7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	18d1      	adds	r1, r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a3a      	ldr	r2, [r7, #32]
 8003898:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800389a:	f7ff ff83 	bl	80037a4 <prvInsertTimerInActiveList>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d040      	beq.n	8003926 <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038aa:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80038ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d138      	bne.n	8003926 <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	441a      	add	r2, r3
 80038bc:	2300      	movs	r3, #0
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	2300      	movs	r3, #0
 80038c2:	2100      	movs	r1, #0
 80038c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80038c6:	f7ff fe3d 	bl	8003544 <xTimerGenericCommand>
 80038ca:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d129      	bne.n	8003926 <prvProcessReceivedCommands+0xfe>
 80038d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d6:	f383 8811 	msr	BASEPRI, r3
 80038da:	f3bf 8f6f 	isb	sy
 80038de:	f3bf 8f4f 	dsb	sy
 80038e2:	61bb      	str	r3, [r7, #24]
 80038e4:	e7fe      	b.n	80038e4 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d109      	bne.n	8003908 <prvProcessReceivedCommands+0xe0>
 80038f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f8:	f383 8811 	msr	BASEPRI, r3
 80038fc:	f3bf 8f6f 	isb	sy
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	e7fe      	b.n	8003906 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	699a      	ldr	r2, [r3, #24]
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	18d1      	adds	r1, r2, r3
 8003910:	6a3b      	ldr	r3, [r7, #32]
 8003912:	6a3a      	ldr	r2, [r7, #32]
 8003914:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003916:	f7ff ff45 	bl	80037a4 <prvInsertTimerInActiveList>
					break;
 800391a:	e004      	b.n	8003926 <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 800391c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800391e:	f000 fbb1 	bl	8004084 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003922:	e000      	b.n	8003926 <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003924:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003926:	4b08      	ldr	r3, [pc, #32]	; (8003948 <prvProcessReceivedCommands+0x120>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f107 0108 	add.w	r1, r7, #8
 800392e:	2200      	movs	r2, #0
 8003930:	4618      	mov	r0, r3
 8003932:	f7fe fc83 	bl	800223c <xQueueReceive>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	f47f af79 	bne.w	8003830 <prvProcessReceivedCommands+0x8>
	}
}
 800393e:	bf00      	nop
 8003940:	3728      	adds	r7, #40	; 0x28
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	2000016c 	.word	0x2000016c

0800394c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003952:	e044      	b.n	80039de <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003954:	4b2b      	ldr	r3, [pc, #172]	; (8003a04 <prvSwitchTimerLists+0xb8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800395e:	4b29      	ldr	r3, [pc, #164]	; (8003a04 <prvSwitchTimerLists+0xb8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	3304      	adds	r3, #4
 800396c:	4618      	mov	r0, r3
 800396e:	f7fe f9e7 	bl	8001d40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d12d      	bne.n	80039de <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	4413      	add	r3, r2
 800398a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	429a      	cmp	r2, r3
 8003992:	d90e      	bls.n	80039b2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80039a0:	4b18      	ldr	r3, [pc, #96]	; (8003a04 <prvSwitchTimerLists+0xb8>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	3304      	adds	r3, #4
 80039a8:	4619      	mov	r1, r3
 80039aa:	4610      	mov	r0, r2
 80039ac:	f7fe f98f 	bl	8001cce <vListInsert>
 80039b0:	e015      	b.n	80039de <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80039b2:	2300      	movs	r3, #0
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	2300      	movs	r3, #0
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	2100      	movs	r1, #0
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f7ff fdc1 	bl	8003544 <xTimerGenericCommand>
 80039c2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d109      	bne.n	80039de <prvSwitchTimerLists+0x92>
 80039ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ce:	f383 8811 	msr	BASEPRI, r3
 80039d2:	f3bf 8f6f 	isb	sy
 80039d6:	f3bf 8f4f 	dsb	sy
 80039da:	603b      	str	r3, [r7, #0]
 80039dc:	e7fe      	b.n	80039dc <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80039de:	4b09      	ldr	r3, [pc, #36]	; (8003a04 <prvSwitchTimerLists+0xb8>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1b5      	bne.n	8003954 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80039e8:	4b06      	ldr	r3, [pc, #24]	; (8003a04 <prvSwitchTimerLists+0xb8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80039ee:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <prvSwitchTimerLists+0xbc>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a04      	ldr	r2, [pc, #16]	; (8003a04 <prvSwitchTimerLists+0xb8>)
 80039f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80039f6:	4a04      	ldr	r2, [pc, #16]	; (8003a08 <prvSwitchTimerLists+0xbc>)
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	6013      	str	r3, [r2, #0]
}
 80039fc:	bf00      	nop
 80039fe:	3718      	adds	r7, #24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20000164 	.word	0x20000164
 8003a08:	20000168 	.word	0x20000168

08003a0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003a10:	f000 f95c 	bl	8003ccc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003a14:	4b12      	ldr	r3, [pc, #72]	; (8003a60 <prvCheckForValidListAndQueue+0x54>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d11d      	bne.n	8003a58 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8003a1c:	4811      	ldr	r0, [pc, #68]	; (8003a64 <prvCheckForValidListAndQueue+0x58>)
 8003a1e:	f7fe f905 	bl	8001c2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003a22:	4811      	ldr	r0, [pc, #68]	; (8003a68 <prvCheckForValidListAndQueue+0x5c>)
 8003a24:	f7fe f902 	bl	8001c2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003a28:	4b10      	ldr	r3, [pc, #64]	; (8003a6c <prvCheckForValidListAndQueue+0x60>)
 8003a2a:	4a0e      	ldr	r2, [pc, #56]	; (8003a64 <prvCheckForValidListAndQueue+0x58>)
 8003a2c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003a2e:	4b10      	ldr	r3, [pc, #64]	; (8003a70 <prvCheckForValidListAndQueue+0x64>)
 8003a30:	4a0d      	ldr	r2, [pc, #52]	; (8003a68 <prvCheckForValidListAndQueue+0x5c>)
 8003a32:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003a34:	2200      	movs	r2, #0
 8003a36:	210c      	movs	r1, #12
 8003a38:	200a      	movs	r0, #10
 8003a3a:	f7fe fa13 	bl	8001e64 <xQueueGenericCreate>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	4b07      	ldr	r3, [pc, #28]	; (8003a60 <prvCheckForValidListAndQueue+0x54>)
 8003a42:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003a44:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <prvCheckForValidListAndQueue+0x54>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003a4c:	4b04      	ldr	r3, [pc, #16]	; (8003a60 <prvCheckForValidListAndQueue+0x54>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4908      	ldr	r1, [pc, #32]	; (8003a74 <prvCheckForValidListAndQueue+0x68>)
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7fe fdde 	bl	8002614 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a58:	f000 f966 	bl	8003d28 <vPortExitCritical>
}
 8003a5c:	bf00      	nop
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	2000016c 	.word	0x2000016c
 8003a64:	2000013c 	.word	0x2000013c
 8003a68:	20000150 	.word	0x20000150
 8003a6c:	20000164 	.word	0x20000164
 8003a70:	20000168 	.word	0x20000168
 8003a74:	08004354 	.word	0x08004354

08003a78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t* pxPortInitialiseStack(StackType_t *pxTopOfStack,
		TaskFunction_t pxCode, void *pvParameters) {
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	 interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	 of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	3b04      	subs	r3, #4
 8003a88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003a90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3b04      	subs	r3, #4
 8003a96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ((StackType_t) pxCode) & portSTART_ADDRESS_MASK; /* PC */
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f023 0201 	bic.w	r2, r3, #1
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	3b04      	subs	r3, #4
 8003aa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (StackType_t) portTASK_RETURN_ADDRESS; /* LR */
 8003aa8:	4a0c      	ldr	r2, [pc, #48]	; (8003adc <pxPortInitialiseStack+0x64>)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5; /* R12, R3, R2 and R1. */
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	3b14      	subs	r3, #20
 8003ab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (StackType_t) pvParameters; /* R0 */
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	 own exec return value. */
	pxTopOfStack--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	3b04      	subs	r3, #4
 8003abe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f06f 0202 	mvn.w	r2, #2
 8003ac6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	3b20      	subs	r3, #32
 8003acc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003ace:	68fb      	ldr	r3, [r7, #12]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	08003ae1 	.word	0x08003ae1

08003ae0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError(void) {
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
	volatile uint32_t ulDummy = 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	607b      	str	r3, [r7, #4]
	 its caller as there is nothing to return to.  If a task wants to exit it
	 should instead call vTaskDelete( NULL ).

	 Artificially force an assert() to be triggered if configASSERT() is
	 defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
 8003aea:	4b11      	ldr	r3, [pc, #68]	; (8003b30 <prvTaskExitError+0x50>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003af2:	d009      	beq.n	8003b08 <prvTaskExitError+0x28>
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	f383 8811 	msr	BASEPRI, r3
 8003afc:	f3bf 8f6f 	isb	sy
 8003b00:	f3bf 8f4f 	dsb	sy
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	e7fe      	b.n	8003b06 <prvTaskExitError+0x26>
 8003b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0c:	f383 8811 	msr	BASEPRI, r3
 8003b10:	f3bf 8f6f 	isb	sy
 8003b14:	f3bf 8f4f 	dsb	sy
 8003b18:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while (ulDummy == 0) {
 8003b1a:	bf00      	nop
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d0fc      	beq.n	8003b1c <prvTaskExitError+0x3c>
		 about code appearing after this function is called - making ulDummy
		 volatile makes the compiler think the function could return and
		 therefore not output an 'unreachable code' warning for code that appears
		 after it. */
	}
}
 8003b22:	bf00      	nop
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	2000000c 	.word	0x2000000c
	...

08003b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler(void) {
	__asm volatile (
 8003b40:	4b07      	ldr	r3, [pc, #28]	; (8003b60 <pxCurrentTCBConst2>)
 8003b42:	6819      	ldr	r1, [r3, #0]
 8003b44:	6808      	ldr	r0, [r1, #0]
 8003b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b4a:	f380 8809 	msr	PSP, r0
 8003b4e:	f3bf 8f6f 	isb	sy
 8003b52:	f04f 0000 	mov.w	r0, #0
 8003b56:	f380 8811 	msr	BASEPRI, r0
 8003b5a:	4770      	bx	lr
 8003b5c:	f3af 8000 	nop.w

08003b60 <pxCurrentTCBConst2>:
 8003b60:	20000038 	.word	0x20000038
			"	bx r14							\n"
			"									\n"
			"	.align 4						\n"
			"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
	);
}
 8003b64:	bf00      	nop
 8003b66:	bf00      	nop

08003b68 <prvPortStartFirstTask>:
static void prvPortStartFirstTask(void) {
	/* Start the first task.  This also clears the bit that indicates the FPU is
	 in use in case the FPU was used before the scheduler was started - which
	 would otherwise result in the unnecessary leaving of space in the SVC stack
	 for lazy saving of FPU registers. */
	__asm volatile(
 8003b68:	4808      	ldr	r0, [pc, #32]	; (8003b8c <prvPortStartFirstTask+0x24>)
 8003b6a:	6800      	ldr	r0, [r0, #0]
 8003b6c:	6800      	ldr	r0, [r0, #0]
 8003b6e:	f380 8808 	msr	MSP, r0
 8003b72:	f04f 0000 	mov.w	r0, #0
 8003b76:	f380 8814 	msr	CONTROL, r0
 8003b7a:	b662      	cpsie	i
 8003b7c:	b661      	cpsie	f
 8003b7e:	f3bf 8f4f 	dsb	sy
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	df00      	svc	0
 8003b88:	bf00      	nop
			" dsb					\n"
			" isb					\n"
			" svc 0					\n" /* System call to start first task. */
			" nop					\n"
	);
}
 8003b8a:	bf00      	nop
 8003b8c:	e000ed08 	.word	0xe000ed08

08003b90 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler(void) {
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
	configASSERT(configMAX_SYSCALL_INTERRUPT_PRIORITY);

	/* This port can be used on all revisions of the Cortex-M7 core other than
	 the r0p1 parts.  r0p1 parts should use the port from the
	 /source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
 8003b96:	4b44      	ldr	r3, [pc, #272]	; (8003ca8 <xPortStartScheduler+0x118>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a44      	ldr	r2, [pc, #272]	; (8003cac <xPortStartScheduler+0x11c>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d109      	bne.n	8003bb4 <xPortStartScheduler+0x24>
 8003ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba4:	f383 8811 	msr	BASEPRI, r3
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	e7fe      	b.n	8003bb2 <xPortStartScheduler+0x22>
	configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
 8003bb4:	4b3c      	ldr	r3, [pc, #240]	; (8003ca8 <xPortStartScheduler+0x118>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a3d      	ldr	r2, [pc, #244]	; (8003cb0 <xPortStartScheduler+0x120>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d109      	bne.n	8003bd2 <xPortStartScheduler+0x42>
 8003bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	e7fe      	b.n	8003bd0 <xPortStartScheduler+0x40>

#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t *const pucFirstUserPriorityRegister =
 8003bd2:	4b38      	ldr	r3, [pc, #224]	; (8003cb4 <xPortStartScheduler+0x124>)
 8003bd4:	617b      	str	r3, [r7, #20]
		 functions can be called.  ISR safe functions are those that end in
		 "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		 ensure interrupt entry is as fast and simple as possible.

		 Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		 possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	22ff      	movs	r2, #255	; 0xff
 8003be2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY
				& ucMaxPriorityValue;
 8003bec:	78fb      	ldrb	r3, [r7, #3]
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003bf4:	b2da      	uxtb	r2, r3
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY
 8003bf6:	4b30      	ldr	r3, [pc, #192]	; (8003cb8 <xPortStartScheduler+0x128>)
 8003bf8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		 of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003bfa:	4b30      	ldr	r3, [pc, #192]	; (8003cbc <xPortStartScheduler+0x12c>)
 8003bfc:	2207      	movs	r2, #7
 8003bfe:	601a      	str	r2, [r3, #0]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 8003c00:	e009      	b.n	8003c16 <xPortStartScheduler+0x86>
			ulMaxPRIGROUPValue--;
 8003c02:	4b2e      	ldr	r3, [pc, #184]	; (8003cbc <xPortStartScheduler+0x12c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	4a2c      	ldr	r2, [pc, #176]	; (8003cbc <xPortStartScheduler+0x12c>)
 8003c0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= (uint8_t) 0x01;
 8003c0c:	78fb      	ldrb	r3, [r7, #3]
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	70fb      	strb	r3, [r7, #3]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 8003c16:	78fb      	ldrb	r3, [r7, #3]
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1e:	2b80      	cmp	r3, #128	; 0x80
 8003c20:	d0ef      	beq.n	8003c02 <xPortStartScheduler+0x72>
#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			 priority bits matches the number of priority bits actually queried
			 from the hardware. */
			configASSERT(
 8003c22:	4b26      	ldr	r3, [pc, #152]	; (8003cbc <xPortStartScheduler+0x12c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f1c3 0307 	rsb	r3, r3, #7
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d009      	beq.n	8003c42 <xPortStartScheduler+0xb2>
 8003c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c32:	f383 8811 	msr	BASEPRI, r3
 8003c36:	f3bf 8f6f 	isb	sy
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	60bb      	str	r3, [r7, #8]
 8003c40:	e7fe      	b.n	8003c40 <xPortStartScheduler+0xb0>
		}
#endif

		/* Shift the priority group value back to its position within the AIRCR
		 register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c42:	4b1e      	ldr	r3, [pc, #120]	; (8003cbc <xPortStartScheduler+0x12c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	021b      	lsls	r3, r3, #8
 8003c48:	4a1c      	ldr	r2, [pc, #112]	; (8003cbc <xPortStartScheduler+0x12c>)
 8003c4a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c4c:	4b1b      	ldr	r3, [pc, #108]	; (8003cbc <xPortStartScheduler+0x12c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003c54:	4a19      	ldr	r2, [pc, #100]	; (8003cbc <xPortStartScheduler+0x12c>)
 8003c56:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		 value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	701a      	strb	r2, [r3, #0]
	}
#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003c60:	4b17      	ldr	r3, [pc, #92]	; (8003cc0 <xPortStartScheduler+0x130>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a16      	ldr	r2, [pc, #88]	; (8003cc0 <xPortStartScheduler+0x130>)
 8003c66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003c6c:	4b14      	ldr	r3, [pc, #80]	; (8003cc0 <xPortStartScheduler+0x130>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a13      	ldr	r2, [pc, #76]	; (8003cc0 <xPortStartScheduler+0x130>)
 8003c72:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003c76:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	 here already. */
	vPortSetupTimerInterrupt();
 8003c78:	f000 f8d6 	bl	8003e28 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003c7c:	4b11      	ldr	r3, [pc, #68]	; (8003cc4 <xPortStartScheduler+0x134>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003c82:	f000 f8f5 	bl	8003e70 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR) |= portASPEN_AND_LSPEN_BITS;
 8003c86:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <xPortStartScheduler+0x138>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a0f      	ldr	r2, [pc, #60]	; (8003cc8 <xPortStartScheduler+0x138>)
 8003c8c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003c90:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003c92:	f7ff ff69 	bl	8003b68 <prvPortStartFirstTask>
	 exit error function to prevent compiler warnings about a static function
	 not being called in the case that the application writer overrides this
	 functionality by defining configTASK_RETURN_ADDRESS.  Call
	 vTaskSwitchContext() so link time optimisation does not remove the
	 symbol. */
	vTaskSwitchContext();
 8003c96:	f7ff f8db 	bl	8002e50 <vTaskSwitchContext>
	prvTaskExitError();
 8003c9a:	f7ff ff21 	bl	8003ae0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	e000ed00 	.word	0xe000ed00
 8003cac:	410fc271 	.word	0x410fc271
 8003cb0:	410fc270 	.word	0x410fc270
 8003cb4:	e000e400 	.word	0xe000e400
 8003cb8:	20000178 	.word	0x20000178
 8003cbc:	2000017c 	.word	0x2000017c
 8003cc0:	e000ed20 	.word	0xe000ed20
 8003cc4:	2000000c 	.word	0x2000000c
 8003cc8:	e000ef34 	.word	0xe000ef34

08003ccc <vPortEnterCritical>:
	 Artificially force an assert. */
	configASSERT(uxCriticalNesting == 1000UL);
}
/*-----------------------------------------------------------*/

void vPortEnterCritical(void) {
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003ce4:	4b0e      	ldr	r3, [pc, #56]	; (8003d20 <vPortEnterCritical+0x54>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	4a0d      	ldr	r2, [pc, #52]	; (8003d20 <vPortEnterCritical+0x54>)
 8003cec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	 assert() if it is being called from an interrupt context.  Only API
	 functions that end in "FromISR" can be used in an interrupt.  Only assert if
	 the critical nesting count is 1 to protect against recursive calls if the
	 assert function also uses a critical section. */
	if (uxCriticalNesting == 1) {
 8003cee:	4b0c      	ldr	r3, [pc, #48]	; (8003d20 <vPortEnterCritical+0x54>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d10e      	bne.n	8003d14 <vPortEnterCritical+0x48>
		configASSERT(( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0);
 8003cf6:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <vPortEnterCritical+0x58>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d009      	beq.n	8003d14 <vPortEnterCritical+0x48>
 8003d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	603b      	str	r3, [r7, #0]
 8003d12:	e7fe      	b.n	8003d12 <vPortEnterCritical+0x46>
	}
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	2000000c 	.word	0x2000000c
 8003d24:	e000ed04 	.word	0xe000ed04

08003d28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical(void) {
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
	configASSERT(uxCriticalNesting);
 8003d2e:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <vPortExitCritical+0x4c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d109      	bne.n	8003d4a <vPortExitCritical+0x22>
 8003d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3a:	f383 8811 	msr	BASEPRI, r3
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	607b      	str	r3, [r7, #4]
 8003d48:	e7fe      	b.n	8003d48 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003d4a:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <vPortExitCritical+0x4c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	4a08      	ldr	r2, [pc, #32]	; (8003d74 <vPortExitCritical+0x4c>)
 8003d52:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
 8003d54:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <vPortExitCritical+0x4c>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d104      	bne.n	8003d66 <vPortExitCritical+0x3e>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	f383 8811 	msr	BASEPRI, r3
		portENABLE_INTERRUPTS();
	}
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	2000000c 	.word	0x2000000c
	...

08003d80 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void xPortPendSVHandler(void) {
	/* This is a naked function. */

	__asm volatile
 8003d80:	f3ef 8009 	mrs	r0, PSP
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	4b15      	ldr	r3, [pc, #84]	; (8003de0 <pxCurrentTCBConst>)
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	f01e 0f10 	tst.w	lr, #16
 8003d90:	bf08      	it	eq
 8003d92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003d96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d9a:	6010      	str	r0, [r2, #0]
 8003d9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003da0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003da4:	f380 8811 	msr	BASEPRI, r0
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f7ff f84e 	bl	8002e50 <vTaskSwitchContext>
 8003db4:	f04f 0000 	mov.w	r0, #0
 8003db8:	f380 8811 	msr	BASEPRI, r0
 8003dbc:	bc09      	pop	{r0, r3}
 8003dbe:	6819      	ldr	r1, [r3, #0]
 8003dc0:	6808      	ldr	r0, [r1, #0]
 8003dc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc6:	f01e 0f10 	tst.w	lr, #16
 8003dca:	bf08      	it	eq
 8003dcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003dd0:	f380 8809 	msr	PSP, r0
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	f3af 8000 	nop.w

08003de0 <pxCurrentTCBConst>:
 8003de0:	20000038 	.word	0x20000038
			"										\n"
			"	.align 4							\n"
			"pxCurrentTCBConst: .word pxCurrentTCB	\n"
			::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop

08003de8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler(void) {
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
	__asm volatile
 8003dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	607b      	str	r3, [r7, #4]
	 known. */
	portDISABLE_INTERRUPTS();
	traceISR_ENTER();
	{
		/* Increment the RTOS tick. */
		if (xTaskIncrementTick() != pdFALSE) {
 8003e00:	f7fe ff6e 	bl	8002ce0 <xTaskIncrementTick>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <SysTick_Handler+0x2a>
			traceISR_EXIT_TO_SCHEDULER();
			/* A context switch is required.  Context switching is performed in
			 the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e0a:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <SysTick_Handler+0x3c>)
 8003e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	2300      	movs	r3, #0
 8003e14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	f383 8811 	msr	BASEPRI, r3
		} else {
			traceISR_EXIT();
		}
	}
	portENABLE_INTERRUPTS();
}
 8003e1c:	bf00      	nop
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	e000ed04 	.word	0xe000ed04

08003e28 <vPortSetupTimerInterrupt>:

/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt(void) {
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <vPortSetupTimerInterrupt+0x34>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e32:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <vPortSetupTimerInterrupt+0x38>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ)
 8003e38:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <vPortSetupTimerInterrupt+0x3c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a0a      	ldr	r2, [pc, #40]	; (8003e68 <vPortSetupTimerInterrupt+0x40>)
 8003e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e42:	099b      	lsrs	r3, r3, #6
 8003e44:	4a09      	ldr	r2, [pc, #36]	; (8003e6c <vPortSetupTimerInterrupt+0x44>)
			- 1UL;
 8003e46:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ)
 8003e48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT
 8003e4a:	4b04      	ldr	r3, [pc, #16]	; (8003e5c <vPortSetupTimerInterrupt+0x34>)
 8003e4c:	2207      	movs	r2, #7
 8003e4e:	601a      	str	r2, [r3, #0]
			| portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
}
 8003e50:	bf00      	nop
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	e000e010 	.word	0xe000e010
 8003e60:	e000e018 	.word	0xe000e018
 8003e64:	20000000 	.word	0x20000000
 8003e68:	10624dd3 	.word	0x10624dd3
 8003e6c:	e000e014 	.word	0xe000e014

08003e70 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void) {
	__asm volatile
 8003e70:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003e80 <vPortEnableVFP+0x10>
 8003e74:	6801      	ldr	r1, [r0, #0]
 8003e76:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003e7a:	6001      	str	r1, [r0, #0]
 8003e7c:	4770      	bx	lr
			"								\n"
			"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
			"	str r1, [r0]				\n"
			"	bx r14						"
	);
}
 8003e7e:	bf00      	nop
 8003e80:	e000ed88 	.word	0xe000ed88

08003e84 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

void vPortValidateInterruptPriority(void) {
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003e8a:	f3ef 8305 	mrs	r3, IPSR
 8003e8e:	60fb      	str	r3, [r7, #12]

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b0f      	cmp	r3, #15
 8003e94:	d913      	bls.n	8003ebe <vPortValidateInterruptPriority+0x3a>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
 8003e96:	4a16      	ldr	r2, [pc, #88]	; (8003ef0 <vPortValidateInterruptPriority+0x6c>)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	72fb      	strb	r3, [r7, #11]
		 interrupt entry is as fast and simple as possible.

		 The following links provide detailed information:
		 http://www.freertos.org/RTOS-Cortex-M3-M4.html
		 http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
 8003ea0:	4b14      	ldr	r3, [pc, #80]	; (8003ef4 <vPortValidateInterruptPriority+0x70>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	7afa      	ldrb	r2, [r7, #11]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d209      	bcs.n	8003ebe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8003eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eae:	f383 8811 	msr	BASEPRI, r3
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	607b      	str	r3, [r7, #4]
 8003ebc:	e7fe      	b.n	8003ebc <vPortValidateInterruptPriority+0x38>
	 configuration then the correct setting can be achieved on all Cortex-M
	 devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	 scheduler.  Note however that some vendor specific peripheral libraries
	 assume a non-zero priority group setting, in which cases using a value
	 of zero will result in unpredictable behaviour. */
	configASSERT(
 8003ebe:	4b0e      	ldr	r3, [pc, #56]	; (8003ef8 <vPortValidateInterruptPriority+0x74>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ec6:	4b0d      	ldr	r3, [pc, #52]	; (8003efc <vPortValidateInterruptPriority+0x78>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d909      	bls.n	8003ee2 <vPortValidateInterruptPriority+0x5e>
 8003ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	e7fe      	b.n	8003ee0 <vPortValidateInterruptPriority+0x5c>
			( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue);
}
 8003ee2:	bf00      	nop
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	e000e3f0 	.word	0xe000e3f0
 8003ef4:	20000178 	.word	0x20000178
 8003ef8:	e000ed0c 	.word	0xe000ed0c
 8003efc:	2000017c 	.word	0x2000017c

08003f00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08a      	sub	sp, #40	; 0x28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003f0c:	f7fe fe2e 	bl	8002b6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003f10:	4b57      	ldr	r3, [pc, #348]	; (8004070 <pvPortMalloc+0x170>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d101      	bne.n	8003f1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003f18:	f000 f90c 	bl	8004134 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003f1c:	4b55      	ldr	r3, [pc, #340]	; (8004074 <pvPortMalloc+0x174>)
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f040 808c 	bne.w	8004042 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01c      	beq.n	8003f6a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003f30:	2208      	movs	r2, #8
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4413      	add	r3, r2
 8003f36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d013      	beq.n	8003f6a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f023 0307 	bic.w	r3, r3, #7
 8003f48:	3308      	adds	r3, #8
 8003f4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d009      	beq.n	8003f6a <pvPortMalloc+0x6a>
 8003f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5a:	f383 8811 	msr	BASEPRI, r3
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f3bf 8f4f 	dsb	sy
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	e7fe      	b.n	8003f68 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d068      	beq.n	8004042 <pvPortMalloc+0x142>
 8003f70:	4b41      	ldr	r3, [pc, #260]	; (8004078 <pvPortMalloc+0x178>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d863      	bhi.n	8004042 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003f7a:	4b40      	ldr	r3, [pc, #256]	; (800407c <pvPortMalloc+0x17c>)
 8003f7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003f7e:	4b3f      	ldr	r3, [pc, #252]	; (800407c <pvPortMalloc+0x17c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f84:	e004      	b.n	8003f90 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d903      	bls.n	8003fa2 <pvPortMalloc+0xa2>
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f1      	bne.n	8003f86 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003fa2:	4b33      	ldr	r3, [pc, #204]	; (8004070 <pvPortMalloc+0x170>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d04a      	beq.n	8004042 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2208      	movs	r2, #8
 8003fb2:	4413      	add	r3, r2
 8003fb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	1ad2      	subs	r2, r2, r3
 8003fc6:	2308      	movs	r3, #8
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d91e      	bls.n	800400c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d009      	beq.n	8003ff4 <pvPortMalloc+0xf4>
 8003fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	613b      	str	r3, [r7, #16]
 8003ff2:	e7fe      	b.n	8003ff2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	1ad2      	subs	r2, r2, r3
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004006:	69b8      	ldr	r0, [r7, #24]
 8004008:	f000 f8f6 	bl	80041f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800400c:	4b1a      	ldr	r3, [pc, #104]	; (8004078 <pvPortMalloc+0x178>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	4a18      	ldr	r2, [pc, #96]	; (8004078 <pvPortMalloc+0x178>)
 8004018:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800401a:	4b17      	ldr	r3, [pc, #92]	; (8004078 <pvPortMalloc+0x178>)
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	4b18      	ldr	r3, [pc, #96]	; (8004080 <pvPortMalloc+0x180>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	429a      	cmp	r2, r3
 8004024:	d203      	bcs.n	800402e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004026:	4b14      	ldr	r3, [pc, #80]	; (8004078 <pvPortMalloc+0x178>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a15      	ldr	r2, [pc, #84]	; (8004080 <pvPortMalloc+0x180>)
 800402c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	4b10      	ldr	r3, [pc, #64]	; (8004074 <pvPortMalloc+0x174>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	431a      	orrs	r2, r3
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004042:	f7fe fda1 	bl	8002b88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	2b00      	cmp	r3, #0
 800404e:	d009      	beq.n	8004064 <pvPortMalloc+0x164>
 8004050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004054:	f383 8811 	msr	BASEPRI, r3
 8004058:	f3bf 8f6f 	isb	sy
 800405c:	f3bf 8f4f 	dsb	sy
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	e7fe      	b.n	8004062 <pvPortMalloc+0x162>
	return pvReturn;
 8004064:	69fb      	ldr	r3, [r7, #28]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3728      	adds	r7, #40	; 0x28
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	20012d88 	.word	0x20012d88
 8004074:	20012d94 	.word	0x20012d94
 8004078:	20012d8c 	.word	0x20012d8c
 800407c:	20012d80 	.word	0x20012d80
 8004080:	20012d90 	.word	0x20012d90

08004084 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d046      	beq.n	8004124 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004096:	2308      	movs	r3, #8
 8004098:	425b      	negs	r3, r3
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	4413      	add	r3, r2
 800409e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	4b20      	ldr	r3, [pc, #128]	; (800412c <vPortFree+0xa8>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4013      	ands	r3, r2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d109      	bne.n	80040c6 <vPortFree+0x42>
 80040b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b6:	f383 8811 	msr	BASEPRI, r3
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	60fb      	str	r3, [r7, #12]
 80040c4:	e7fe      	b.n	80040c4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d009      	beq.n	80040e2 <vPortFree+0x5e>
 80040ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	60bb      	str	r3, [r7, #8]
 80040e0:	e7fe      	b.n	80040e0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	4b11      	ldr	r3, [pc, #68]	; (800412c <vPortFree+0xa8>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4013      	ands	r3, r2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d019      	beq.n	8004124 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d115      	bne.n	8004124 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	4b0b      	ldr	r3, [pc, #44]	; (800412c <vPortFree+0xa8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	43db      	mvns	r3, r3
 8004102:	401a      	ands	r2, r3
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004108:	f7fe fd30 	bl	8002b6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	4b07      	ldr	r3, [pc, #28]	; (8004130 <vPortFree+0xac>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4413      	add	r3, r2
 8004116:	4a06      	ldr	r2, [pc, #24]	; (8004130 <vPortFree+0xac>)
 8004118:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800411a:	6938      	ldr	r0, [r7, #16]
 800411c:	f000 f86c 	bl	80041f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004120:	f7fe fd32 	bl	8002b88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004124:	bf00      	nop
 8004126:	3718      	adds	r7, #24
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	20012d94 	.word	0x20012d94
 8004130:	20012d8c 	.word	0x20012d8c

08004134 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800413a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800413e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004140:	4b27      	ldr	r3, [pc, #156]	; (80041e0 <prvHeapInit+0xac>)
 8004142:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00c      	beq.n	8004168 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	3307      	adds	r3, #7
 8004152:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 0307 	bic.w	r3, r3, #7
 800415a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	4a1f      	ldr	r2, [pc, #124]	; (80041e0 <prvHeapInit+0xac>)
 8004164:	4413      	add	r3, r2
 8004166:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800416c:	4a1d      	ldr	r2, [pc, #116]	; (80041e4 <prvHeapInit+0xb0>)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004172:	4b1c      	ldr	r3, [pc, #112]	; (80041e4 <prvHeapInit+0xb0>)
 8004174:	2200      	movs	r2, #0
 8004176:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	4413      	add	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004180:	2208      	movs	r2, #8
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1a9b      	subs	r3, r3, r2
 8004186:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0307 	bic.w	r3, r3, #7
 800418e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4a15      	ldr	r2, [pc, #84]	; (80041e8 <prvHeapInit+0xb4>)
 8004194:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004196:	4b14      	ldr	r3, [pc, #80]	; (80041e8 <prvHeapInit+0xb4>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2200      	movs	r2, #0
 800419c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800419e:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <prvHeapInit+0xb4>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	1ad2      	subs	r2, r2, r3
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80041b4:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <prvHeapInit+0xb4>)
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	4a0a      	ldr	r2, [pc, #40]	; (80041ec <prvHeapInit+0xb8>)
 80041c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	4a09      	ldr	r2, [pc, #36]	; (80041f0 <prvHeapInit+0xbc>)
 80041ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80041cc:	4b09      	ldr	r3, [pc, #36]	; (80041f4 <prvHeapInit+0xc0>)
 80041ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80041d2:	601a      	str	r2, [r3, #0]
}
 80041d4:	bf00      	nop
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	20000180 	.word	0x20000180
 80041e4:	20012d80 	.word	0x20012d80
 80041e8:	20012d88 	.word	0x20012d88
 80041ec:	20012d90 	.word	0x20012d90
 80041f0:	20012d8c 	.word	0x20012d8c
 80041f4:	20012d94 	.word	0x20012d94

080041f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004200:	4b28      	ldr	r3, [pc, #160]	; (80042a4 <prvInsertBlockIntoFreeList+0xac>)
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	e002      	b.n	800420c <prvInsertBlockIntoFreeList+0x14>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	429a      	cmp	r2, r3
 8004214:	d8f7      	bhi.n	8004206 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	4413      	add	r3, r2
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	429a      	cmp	r2, r3
 8004226:	d108      	bne.n	800423a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	441a      	add	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	441a      	add	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d118      	bne.n	8004280 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	4b15      	ldr	r3, [pc, #84]	; (80042a8 <prvInsertBlockIntoFreeList+0xb0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d00d      	beq.n	8004276 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	441a      	add	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	e008      	b.n	8004288 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004276:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <prvInsertBlockIntoFreeList+0xb0>)
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	e003      	b.n	8004288 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	429a      	cmp	r2, r3
 800428e:	d002      	beq.n	8004296 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004296:	bf00      	nop
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	20012d80 	.word	0x20012d80
 80042a8:	20012d88 	.word	0x20012d88

080042ac <__libc_init_array>:
 80042ac:	b570      	push	{r4, r5, r6, lr}
 80042ae:	4e0d      	ldr	r6, [pc, #52]	; (80042e4 <__libc_init_array+0x38>)
 80042b0:	4c0d      	ldr	r4, [pc, #52]	; (80042e8 <__libc_init_array+0x3c>)
 80042b2:	1ba4      	subs	r4, r4, r6
 80042b4:	10a4      	asrs	r4, r4, #2
 80042b6:	2500      	movs	r5, #0
 80042b8:	42a5      	cmp	r5, r4
 80042ba:	d109      	bne.n	80042d0 <__libc_init_array+0x24>
 80042bc:	4e0b      	ldr	r6, [pc, #44]	; (80042ec <__libc_init_array+0x40>)
 80042be:	4c0c      	ldr	r4, [pc, #48]	; (80042f0 <__libc_init_array+0x44>)
 80042c0:	f000 f82c 	bl	800431c <_init>
 80042c4:	1ba4      	subs	r4, r4, r6
 80042c6:	10a4      	asrs	r4, r4, #2
 80042c8:	2500      	movs	r5, #0
 80042ca:	42a5      	cmp	r5, r4
 80042cc:	d105      	bne.n	80042da <__libc_init_array+0x2e>
 80042ce:	bd70      	pop	{r4, r5, r6, pc}
 80042d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042d4:	4798      	blx	r3
 80042d6:	3501      	adds	r5, #1
 80042d8:	e7ee      	b.n	80042b8 <__libc_init_array+0xc>
 80042da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042de:	4798      	blx	r3
 80042e0:	3501      	adds	r5, #1
 80042e2:	e7f2      	b.n	80042ca <__libc_init_array+0x1e>
 80042e4:	0800437c 	.word	0x0800437c
 80042e8:	0800437c 	.word	0x0800437c
 80042ec:	0800437c 	.word	0x0800437c
 80042f0:	08004380 	.word	0x08004380

080042f4 <memcpy>:
 80042f4:	b510      	push	{r4, lr}
 80042f6:	1e43      	subs	r3, r0, #1
 80042f8:	440a      	add	r2, r1
 80042fa:	4291      	cmp	r1, r2
 80042fc:	d100      	bne.n	8004300 <memcpy+0xc>
 80042fe:	bd10      	pop	{r4, pc}
 8004300:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004304:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004308:	e7f7      	b.n	80042fa <memcpy+0x6>

0800430a <memset>:
 800430a:	4402      	add	r2, r0
 800430c:	4603      	mov	r3, r0
 800430e:	4293      	cmp	r3, r2
 8004310:	d100      	bne.n	8004314 <memset+0xa>
 8004312:	4770      	bx	lr
 8004314:	f803 1b01 	strb.w	r1, [r3], #1
 8004318:	e7f9      	b.n	800430e <memset+0x4>
	...

0800431c <_init>:
 800431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800431e:	bf00      	nop
 8004320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004322:	bc08      	pop	{r3}
 8004324:	469e      	mov	lr, r3
 8004326:	4770      	bx	lr

08004328 <_fini>:
 8004328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432a:	bf00      	nop
 800432c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800432e:	bc08      	pop	{r3}
 8004330:	469e      	mov	lr, r3
 8004332:	4770      	bx	lr
