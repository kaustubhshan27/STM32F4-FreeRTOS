
STM32_FreeRTOS_Tasks_Sync.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001988  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001b28  08001b28  00011b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b40  08001b40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001b40  08001b40  00011b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001b48  08001b48  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b48  08001b48  00011b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b4c  08001b4c  00011b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08001b5c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08001b5c  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b251  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019ed  00000000  00000000  0002b28d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b70  00000000  00000000  0002cc80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  0002d7f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001537e  00000000  00000000  0002e288  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008346  00000000  00000000  00043606  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008eec3  00000000  00000000  0004b94c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000da80f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f00  00000000  00000000  000da88c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000000c 	.word	0x2000000c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001b10 	.word	0x08001b10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000010 	.word	0x20000010
 80001dc:	08001b10 	.word	0x08001b10

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 f95c 	bl	80007a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f802 	bl	80004f0 <SystemClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <main+0xc>
	...

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b094      	sub	sp, #80	; 0x50
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0320 	add.w	r3, r7, #32
 80004fa:	2230      	movs	r2, #48	; 0x30
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f001 fafe 	bl	8001b00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000514:	2300      	movs	r3, #0
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	4b22      	ldr	r3, [pc, #136]	; (80005a4 <SystemClock_Config+0xb4>)
 800051a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051c:	4a21      	ldr	r2, [pc, #132]	; (80005a4 <SystemClock_Config+0xb4>)
 800051e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000522:	6413      	str	r3, [r2, #64]	; 0x40
 8000524:	4b1f      	ldr	r3, [pc, #124]	; (80005a4 <SystemClock_Config+0xb4>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000530:	2300      	movs	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <SystemClock_Config+0xb8>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a1b      	ldr	r2, [pc, #108]	; (80005a8 <SystemClock_Config+0xb8>)
 800053a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <SystemClock_Config+0xb8>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800054c:	2302      	movs	r3, #2
 800054e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000550:	2301      	movs	r3, #1
 8000552:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000554:	2310      	movs	r3, #16
 8000556:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000558:	2300      	movs	r3, #0
 800055a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055c:	f107 0320 	add.w	r3, r7, #32
 8000560:	4618      	mov	r0, r3
 8000562:	f000 fa41 	bl	80009e8 <HAL_RCC_OscConfig>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800056c:	f000 f82d 	bl	80005ca <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000570:	230f      	movs	r3, #15
 8000572:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000574:	2300      	movs	r3, #0
 8000576:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f000 fc9c 	bl	8000ec8 <HAL_RCC_ClockConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000596:	f000 f818 	bl	80005ca <Error_Handler>
  }
}
 800059a:	bf00      	nop
 800059c:	3750      	adds	r7, #80	; 0x50
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	40023800 	.word	0x40023800
 80005a8:	40007000 	.word	0x40007000

080005ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005bc:	d101      	bne.n	80005c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005be:	f000 f911 	bl	80007e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005c2:	bf00      	nop
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005ca:	b480      	push	{r7}
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <HAL_MspInit+0x4c>)
 80005e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e6:	4a0f      	ldr	r2, [pc, #60]	; (8000624 <HAL_MspInit+0x4c>)
 80005e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ec:	6453      	str	r3, [r2, #68]	; 0x44
 80005ee:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <HAL_MspInit+0x4c>)
 80005f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <HAL_MspInit+0x4c>)
 8000600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000602:	4a08      	ldr	r2, [pc, #32]	; (8000624 <HAL_MspInit+0x4c>)
 8000604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000608:	6413      	str	r3, [r2, #64]	; 0x40
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <HAL_MspInit+0x4c>)
 800060c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800

08000628 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08c      	sub	sp, #48	; 0x30
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8000638:	2200      	movs	r2, #0
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	201c      	movs	r0, #28
 800063e:	f000 f9a9 	bl	8000994 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8000642:	201c      	movs	r0, #28
 8000644:	f000 f9c2 	bl	80009cc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <HAL_InitTick+0xa4>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	4a1e      	ldr	r2, [pc, #120]	; (80006cc <HAL_InitTick+0xa4>)
 8000652:	f043 0301 	orr.w	r3, r3, #1
 8000656:	6413      	str	r3, [r2, #64]	; 0x40
 8000658:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <HAL_InitTick+0xa4>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	f003 0301 	and.w	r3, r3, #1
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000664:	f107 0210 	add.w	r2, r7, #16
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	4611      	mov	r1, r2
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fde2 	bl	8001238 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000674:	f000 fdcc 	bl	8001210 <HAL_RCC_GetPCLK1Freq>
 8000678:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800067a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800067c:	4a14      	ldr	r2, [pc, #80]	; (80006d0 <HAL_InitTick+0xa8>)
 800067e:	fba2 2303 	umull	r2, r3, r2, r3
 8000682:	0c9b      	lsrs	r3, r3, #18
 8000684:	3b01      	subs	r3, #1
 8000686:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <HAL_InitTick+0xac>)
 800068a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800068e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8000690:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <HAL_InitTick+0xac>)
 8000692:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000696:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000698:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <HAL_InitTick+0xac>)
 800069a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800069c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800069e:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <HAL_InitTick+0xac>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a4:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <HAL_InitTick+0xac>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80006aa:	480a      	ldr	r0, [pc, #40]	; (80006d4 <HAL_InitTick+0xac>)
 80006ac:	f000 fdf6 	bl	800129c <HAL_TIM_Base_Init>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d104      	bne.n	80006c0 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80006b6:	4807      	ldr	r0, [pc, #28]	; (80006d4 <HAL_InitTick+0xac>)
 80006b8:	f000 fe25 	bl	8001306 <HAL_TIM_Base_Start_IT>
 80006bc:	4603      	mov	r3, r0
 80006be:	e000      	b.n	80006c2 <HAL_InitTick+0x9a>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80006c0:	2301      	movs	r3, #1
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3730      	adds	r7, #48	; 0x30
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	431bde83 	.word	0x431bde83
 80006d4:	200000b4 	.word	0x200000b4

080006d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <HardFault_Handler+0x4>

080006ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <MemManage_Handler+0x4>

080006f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <BusFault_Handler+0x4>

080006f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <UsageFault_Handler+0x4>

080006fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000710:	4802      	ldr	r0, [pc, #8]	; (800071c <TIM2_IRQHandler+0x10>)
 8000712:	f000 fe1c 	bl	800134e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200000b4 	.word	0x200000b4

08000720 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <SystemInit+0x28>)
 8000726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800072a:	4a07      	ldr	r2, [pc, #28]	; (8000748 <SystemInit+0x28>)
 800072c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000730:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <SystemInit+0x28>)
 8000736:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800073a:	609a      	str	r2, [r3, #8]
#endif
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000ed00 	.word	0xe000ed00

0800074c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800074c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000784 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000750:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000752:	e003      	b.n	800075c <LoopCopyDataInit>

08000754 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000756:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000758:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800075a:	3104      	adds	r1, #4

0800075c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800075c:	480b      	ldr	r0, [pc, #44]	; (800078c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000760:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000762:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000764:	d3f6      	bcc.n	8000754 <CopyDataInit>
  ldr  r2, =_sbss
 8000766:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000768:	e002      	b.n	8000770 <LoopFillZerobss>

0800076a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800076a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800076c:	f842 3b04 	str.w	r3, [r2], #4

08000770 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000772:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000774:	d3f9      	bcc.n	800076a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000776:	f7ff ffd3 	bl	8000720 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800077a:	f001 f99d 	bl	8001ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800077e:	f7ff feaf 	bl	80004e0 <main>
  bx  lr    
 8000782:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000784:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000788:	08001b50 	.word	0x08001b50
  ldr  r0, =_sdata
 800078c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000790:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000794:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000798:	200000f8 	.word	0x200000f8

0800079c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800079c:	e7fe      	b.n	800079c <ADC_IRQHandler>
	...

080007a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007a4:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <HAL_Init+0x40>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a0d      	ldr	r2, [pc, #52]	; (80007e0 <HAL_Init+0x40>)
 80007aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007b0:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <HAL_Init+0x40>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <HAL_Init+0x40>)
 80007b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007bc:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <HAL_Init+0x40>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a07      	ldr	r2, [pc, #28]	; (80007e0 <HAL_Init+0x40>)
 80007c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c8:	2003      	movs	r0, #3
 80007ca:	f000 f8d8 	bl	800097e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f7ff ff2a 	bl	8000628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007d4:	f7ff ff00 	bl	80005d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007d8:	2300      	movs	r3, #0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023c00 	.word	0x40023c00

080007e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_IncTick+0x20>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_IncTick+0x24>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4413      	add	r3, r2
 80007f4:	4a04      	ldr	r2, [pc, #16]	; (8000808 <HAL_IncTick+0x24>)
 80007f6:	6013      	str	r3, [r2, #0]
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	20000008 	.word	0x20000008
 8000808:	200000f4 	.word	0x200000f4

0800080c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return uwTick;
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <HAL_GetTick+0x14>)
 8000812:	681b      	ldr	r3, [r3, #0]
}
 8000814:	4618      	mov	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	200000f4 	.word	0x200000f4

08000824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000824:	b480      	push	{r7}
 8000826:	b085      	sub	sp, #20
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f003 0307 	and.w	r3, r3, #7
 8000832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <__NVIC_SetPriorityGrouping+0x44>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000840:	4013      	ands	r3, r2
 8000842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800084c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000856:	4a04      	ldr	r2, [pc, #16]	; (8000868 <__NVIC_SetPriorityGrouping+0x44>)
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	60d3      	str	r3, [r2, #12]
}
 800085c:	bf00      	nop
 800085e:	3714      	adds	r7, #20
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000870:	4b04      	ldr	r3, [pc, #16]	; (8000884 <__NVIC_GetPriorityGrouping+0x18>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	0a1b      	lsrs	r3, r3, #8
 8000876:	f003 0307 	and.w	r3, r3, #7
}
 800087a:	4618      	mov	r0, r3
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000896:	2b00      	cmp	r3, #0
 8000898:	db0b      	blt.n	80008b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	f003 021f 	and.w	r2, r3, #31
 80008a0:	4907      	ldr	r1, [pc, #28]	; (80008c0 <__NVIC_EnableIRQ+0x38>)
 80008a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a6:	095b      	lsrs	r3, r3, #5
 80008a8:	2001      	movs	r0, #1
 80008aa:	fa00 f202 	lsl.w	r2, r0, r2
 80008ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000e100 	.word	0xe000e100

080008c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	6039      	str	r1, [r7, #0]
 80008ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db0a      	blt.n	80008ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	490c      	ldr	r1, [pc, #48]	; (8000910 <__NVIC_SetPriority+0x4c>)
 80008de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e2:	0112      	lsls	r2, r2, #4
 80008e4:	b2d2      	uxtb	r2, r2
 80008e6:	440b      	add	r3, r1
 80008e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008ec:	e00a      	b.n	8000904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4908      	ldr	r1, [pc, #32]	; (8000914 <__NVIC_SetPriority+0x50>)
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	f003 030f 	and.w	r3, r3, #15
 80008fa:	3b04      	subs	r3, #4
 80008fc:	0112      	lsls	r2, r2, #4
 80008fe:	b2d2      	uxtb	r2, r2
 8000900:	440b      	add	r3, r1
 8000902:	761a      	strb	r2, [r3, #24]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000e100 	.word	0xe000e100
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000918:	b480      	push	{r7}
 800091a:	b089      	sub	sp, #36	; 0x24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	f003 0307 	and.w	r3, r3, #7
 800092a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	f1c3 0307 	rsb	r3, r3, #7
 8000932:	2b04      	cmp	r3, #4
 8000934:	bf28      	it	cs
 8000936:	2304      	movcs	r3, #4
 8000938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3304      	adds	r3, #4
 800093e:	2b06      	cmp	r3, #6
 8000940:	d902      	bls.n	8000948 <NVIC_EncodePriority+0x30>
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	3b03      	subs	r3, #3
 8000946:	e000      	b.n	800094a <NVIC_EncodePriority+0x32>
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800094c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	43da      	mvns	r2, r3
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	401a      	ands	r2, r3
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000960:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	fa01 f303 	lsl.w	r3, r1, r3
 800096a:	43d9      	mvns	r1, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000970:	4313      	orrs	r3, r2
         );
}
 8000972:	4618      	mov	r0, r3
 8000974:	3724      	adds	r7, #36	; 0x24
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b082      	sub	sp, #8
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f7ff ff4c 	bl	8000824 <__NVIC_SetPriorityGrouping>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
 80009a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009a6:	f7ff ff61 	bl	800086c <__NVIC_GetPriorityGrouping>
 80009aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ac:	687a      	ldr	r2, [r7, #4]
 80009ae:	68b9      	ldr	r1, [r7, #8]
 80009b0:	6978      	ldr	r0, [r7, #20]
 80009b2:	f7ff ffb1 	bl	8000918 <NVIC_EncodePriority>
 80009b6:	4602      	mov	r2, r0
 80009b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009bc:	4611      	mov	r1, r2
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff ff80 	bl	80008c4 <__NVIC_SetPriority>
}
 80009c4:	bf00      	nop
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff ff54 	bl	8000888 <__NVIC_EnableIRQ>
}
 80009e0:	bf00      	nop
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d101      	bne.n	80009fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e25b      	b.n	8000eb2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d075      	beq.n	8000af2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a06:	4ba3      	ldr	r3, [pc, #652]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000a08:	689b      	ldr	r3, [r3, #8]
 8000a0a:	f003 030c 	and.w	r3, r3, #12
 8000a0e:	2b04      	cmp	r3, #4
 8000a10:	d00c      	beq.n	8000a2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a12:	4ba0      	ldr	r3, [pc, #640]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000a1a:	2b08      	cmp	r3, #8
 8000a1c:	d112      	bne.n	8000a44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000a1e:	4b9d      	ldr	r3, [pc, #628]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000a2a:	d10b      	bne.n	8000a44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a2c:	4b99      	ldr	r3, [pc, #612]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d05b      	beq.n	8000af0 <HAL_RCC_OscConfig+0x108>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d157      	bne.n	8000af0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000a40:	2301      	movs	r3, #1
 8000a42:	e236      	b.n	8000eb2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a4c:	d106      	bne.n	8000a5c <HAL_RCC_OscConfig+0x74>
 8000a4e:	4b91      	ldr	r3, [pc, #580]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a90      	ldr	r2, [pc, #576]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a58:	6013      	str	r3, [r2, #0]
 8000a5a:	e01d      	b.n	8000a98 <HAL_RCC_OscConfig+0xb0>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a64:	d10c      	bne.n	8000a80 <HAL_RCC_OscConfig+0x98>
 8000a66:	4b8b      	ldr	r3, [pc, #556]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a8a      	ldr	r2, [pc, #552]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a70:	6013      	str	r3, [r2, #0]
 8000a72:	4b88      	ldr	r3, [pc, #544]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a87      	ldr	r2, [pc, #540]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a7c:	6013      	str	r3, [r2, #0]
 8000a7e:	e00b      	b.n	8000a98 <HAL_RCC_OscConfig+0xb0>
 8000a80:	4b84      	ldr	r3, [pc, #528]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a83      	ldr	r2, [pc, #524]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	4b81      	ldr	r3, [pc, #516]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a80      	ldr	r2, [pc, #512]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d013      	beq.n	8000ac8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000aa0:	f7ff feb4 	bl	800080c <HAL_GetTick>
 8000aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aa6:	e008      	b.n	8000aba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000aa8:	f7ff feb0 	bl	800080c <HAL_GetTick>
 8000aac:	4602      	mov	r2, r0
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	1ad3      	subs	r3, r2, r3
 8000ab2:	2b64      	cmp	r3, #100	; 0x64
 8000ab4:	d901      	bls.n	8000aba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	e1fb      	b.n	8000eb2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000aba:	4b76      	ldr	r3, [pc, #472]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d0f0      	beq.n	8000aa8 <HAL_RCC_OscConfig+0xc0>
 8000ac6:	e014      	b.n	8000af2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ac8:	f7ff fea0 	bl	800080c <HAL_GetTick>
 8000acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ace:	e008      	b.n	8000ae2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ad0:	f7ff fe9c 	bl	800080c <HAL_GetTick>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	2b64      	cmp	r3, #100	; 0x64
 8000adc:	d901      	bls.n	8000ae2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	e1e7      	b.n	8000eb2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ae2:	4b6c      	ldr	r3, [pc, #432]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d1f0      	bne.n	8000ad0 <HAL_RCC_OscConfig+0xe8>
 8000aee:	e000      	b.n	8000af2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d063      	beq.n	8000bc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000afe:	4b65      	ldr	r3, [pc, #404]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	f003 030c 	and.w	r3, r3, #12
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d00b      	beq.n	8000b22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b0a:	4b62      	ldr	r3, [pc, #392]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000b12:	2b08      	cmp	r3, #8
 8000b14:	d11c      	bne.n	8000b50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000b16:	4b5f      	ldr	r3, [pc, #380]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d116      	bne.n	8000b50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b22:	4b5c      	ldr	r3, [pc, #368]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d005      	beq.n	8000b3a <HAL_RCC_OscConfig+0x152>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d001      	beq.n	8000b3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e1bb      	b.n	8000eb2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b3a:	4b56      	ldr	r3, [pc, #344]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	691b      	ldr	r3, [r3, #16]
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	4952      	ldr	r1, [pc, #328]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b4e:	e03a      	b.n	8000bc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d020      	beq.n	8000b9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b58:	4b4f      	ldr	r3, [pc, #316]	; (8000c98 <HAL_RCC_OscConfig+0x2b0>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b5e:	f7ff fe55 	bl	800080c <HAL_GetTick>
 8000b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b64:	e008      	b.n	8000b78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b66:	f7ff fe51 	bl	800080c <HAL_GetTick>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d901      	bls.n	8000b78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000b74:	2303      	movs	r3, #3
 8000b76:	e19c      	b.n	8000eb2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b78:	4b46      	ldr	r3, [pc, #280]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f003 0302 	and.w	r3, r3, #2
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d0f0      	beq.n	8000b66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b84:	4b43      	ldr	r3, [pc, #268]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	691b      	ldr	r3, [r3, #16]
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	4940      	ldr	r1, [pc, #256]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000b94:	4313      	orrs	r3, r2
 8000b96:	600b      	str	r3, [r1, #0]
 8000b98:	e015      	b.n	8000bc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b9a:	4b3f      	ldr	r3, [pc, #252]	; (8000c98 <HAL_RCC_OscConfig+0x2b0>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ba0:	f7ff fe34 	bl	800080c <HAL_GetTick>
 8000ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ba6:	e008      	b.n	8000bba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ba8:	f7ff fe30 	bl	800080c <HAL_GetTick>
 8000bac:	4602      	mov	r2, r0
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d901      	bls.n	8000bba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	e17b      	b.n	8000eb2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bba:	4b36      	ldr	r3, [pc, #216]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d1f0      	bne.n	8000ba8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f003 0308 	and.w	r3, r3, #8
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d030      	beq.n	8000c34 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d016      	beq.n	8000c08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000bda:	4b30      	ldr	r3, [pc, #192]	; (8000c9c <HAL_RCC_OscConfig+0x2b4>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000be0:	f7ff fe14 	bl	800080c <HAL_GetTick>
 8000be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000be6:	e008      	b.n	8000bfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000be8:	f7ff fe10 	bl	800080c <HAL_GetTick>
 8000bec:	4602      	mov	r2, r0
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d901      	bls.n	8000bfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	e15b      	b.n	8000eb2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bfa:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d0f0      	beq.n	8000be8 <HAL_RCC_OscConfig+0x200>
 8000c06:	e015      	b.n	8000c34 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c08:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <HAL_RCC_OscConfig+0x2b4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c0e:	f7ff fdfd 	bl	800080c <HAL_GetTick>
 8000c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c14:	e008      	b.n	8000c28 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c16:	f7ff fdf9 	bl	800080c <HAL_GetTick>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d901      	bls.n	8000c28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000c24:	2303      	movs	r3, #3
 8000c26:	e144      	b.n	8000eb2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c28:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d1f0      	bne.n	8000c16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f003 0304 	and.w	r3, r3, #4
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	f000 80a0 	beq.w	8000d82 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c42:	2300      	movs	r3, #0
 8000c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d10f      	bne.n	8000c72 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <HAL_RCC_OscConfig+0x2ac>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <HAL_RCC_OscConfig+0x2b8>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d121      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <HAL_RCC_OscConfig+0x2b8>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <HAL_RCC_OscConfig+0x2b8>)
 8000c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c8a:	f7ff fdbf 	bl	800080c <HAL_GetTick>
 8000c8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c90:	e011      	b.n	8000cb6 <HAL_RCC_OscConfig+0x2ce>
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800
 8000c98:	42470000 	.word	0x42470000
 8000c9c:	42470e80 	.word	0x42470e80
 8000ca0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ca4:	f7ff fdb2 	bl	800080c <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d901      	bls.n	8000cb6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e0fd      	b.n	8000eb2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cb6:	4b81      	ldr	r3, [pc, #516]	; (8000ebc <HAL_RCC_OscConfig+0x4d4>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d0f0      	beq.n	8000ca4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d106      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x2f0>
 8000cca:	4b7d      	ldr	r3, [pc, #500]	; (8000ec0 <HAL_RCC_OscConfig+0x4d8>)
 8000ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cce:	4a7c      	ldr	r2, [pc, #496]	; (8000ec0 <HAL_RCC_OscConfig+0x4d8>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6713      	str	r3, [r2, #112]	; 0x70
 8000cd6:	e01c      	b.n	8000d12 <HAL_RCC_OscConfig+0x32a>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	2b05      	cmp	r3, #5
 8000cde:	d10c      	bne.n	8000cfa <HAL_RCC_OscConfig+0x312>
 8000ce0:	4b77      	ldr	r3, [pc, #476]	; (8000ec0 <HAL_RCC_OscConfig+0x4d8>)
 8000ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ce4:	4a76      	ldr	r2, [pc, #472]	; (8000ec0 <HAL_RCC_OscConfig+0x4d8>)
 8000ce6:	f043 0304 	orr.w	r3, r3, #4
 8000cea:	6713      	str	r3, [r2, #112]	; 0x70
 8000cec:	4b74      	ldr	r3, [pc, #464]	; (8000ec0 <HAL_RCC_OscConfig+0x4d8>)
 8000cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cf0:	4a73      	ldr	r2, [pc, #460]	; (8000ec0 <HAL_RCC_OscConfig+0x4d8>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8000cf8:	e00b      	b.n	8000d12 <HAL_RCC_OscConfig+0x32a>
 8000cfa:	4b71      	ldr	r3, [pc, #452]	; (8000ec0 <HAL_RCC_OscConfig+0x4d8>)
 8000cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cfe:	4a70      	ldr	r2, [pc, #448]	; (8000ec0 <HAL_RCC_OscConfig+0x4d8>)
 8000d00:	f023 0301 	bic.w	r3, r3, #1
 8000d04:	6713      	str	r3, [r2, #112]	; 0x70
 8000d06:	4b6e      	ldr	r3, [pc, #440]	; (8000ec0 <HAL_RCC_OscConfig+0x4d8>)
 8000d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d0a:	4a6d      	ldr	r2, [pc, #436]	; (8000ec0 <HAL_RCC_OscConfig+0x4d8>)
 8000d0c:	f023 0304 	bic.w	r3, r3, #4
 8000d10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d015      	beq.n	8000d46 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d1a:	f7ff fd77 	bl	800080c <HAL_GetTick>
 8000d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d20:	e00a      	b.n	8000d38 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d22:	f7ff fd73 	bl	800080c <HAL_GetTick>
 8000d26:	4602      	mov	r2, r0
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d901      	bls.n	8000d38 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000d34:	2303      	movs	r3, #3
 8000d36:	e0bc      	b.n	8000eb2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d38:	4b61      	ldr	r3, [pc, #388]	; (8000ec0 <HAL_RCC_OscConfig+0x4d8>)
 8000d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d3c:	f003 0302 	and.w	r3, r3, #2
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d0ee      	beq.n	8000d22 <HAL_RCC_OscConfig+0x33a>
 8000d44:	e014      	b.n	8000d70 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d46:	f7ff fd61 	bl	800080c <HAL_GetTick>
 8000d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d4c:	e00a      	b.n	8000d64 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d4e:	f7ff fd5d 	bl	800080c <HAL_GetTick>
 8000d52:	4602      	mov	r2, r0
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d901      	bls.n	8000d64 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000d60:	2303      	movs	r3, #3
 8000d62:	e0a6      	b.n	8000eb2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d64:	4b56      	ldr	r3, [pc, #344]	; (8000ec0 <HAL_RCC_OscConfig+0x4d8>)
 8000d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1ee      	bne.n	8000d4e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000d70:	7dfb      	ldrb	r3, [r7, #23]
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d105      	bne.n	8000d82 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d76:	4b52      	ldr	r3, [pc, #328]	; (8000ec0 <HAL_RCC_OscConfig+0x4d8>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	4a51      	ldr	r2, [pc, #324]	; (8000ec0 <HAL_RCC_OscConfig+0x4d8>)
 8000d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 8092 	beq.w	8000eb0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000d8c:	4b4c      	ldr	r3, [pc, #304]	; (8000ec0 <HAL_RCC_OscConfig+0x4d8>)
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	f003 030c 	and.w	r3, r3, #12
 8000d94:	2b08      	cmp	r3, #8
 8000d96:	d05c      	beq.n	8000e52 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d141      	bne.n	8000e24 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000da0:	4b48      	ldr	r3, [pc, #288]	; (8000ec4 <HAL_RCC_OscConfig+0x4dc>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da6:	f7ff fd31 	bl	800080c <HAL_GetTick>
 8000daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000dac:	e008      	b.n	8000dc0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dae:	f7ff fd2d 	bl	800080c <HAL_GetTick>
 8000db2:	4602      	mov	r2, r0
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	1ad3      	subs	r3, r2, r3
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d901      	bls.n	8000dc0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	e078      	b.n	8000eb2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000dc0:	4b3f      	ldr	r3, [pc, #252]	; (8000ec0 <HAL_RCC_OscConfig+0x4d8>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d1f0      	bne.n	8000dae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	69da      	ldr	r2, [r3, #28]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6a1b      	ldr	r3, [r3, #32]
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dda:	019b      	lsls	r3, r3, #6
 8000ddc:	431a      	orrs	r2, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de2:	085b      	lsrs	r3, r3, #1
 8000de4:	3b01      	subs	r3, #1
 8000de6:	041b      	lsls	r3, r3, #16
 8000de8:	431a      	orrs	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dee:	061b      	lsls	r3, r3, #24
 8000df0:	4933      	ldr	r1, [pc, #204]	; (8000ec0 <HAL_RCC_OscConfig+0x4d8>)
 8000df2:	4313      	orrs	r3, r2
 8000df4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000df6:	4b33      	ldr	r3, [pc, #204]	; (8000ec4 <HAL_RCC_OscConfig+0x4dc>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dfc:	f7ff fd06 	bl	800080c <HAL_GetTick>
 8000e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e02:	e008      	b.n	8000e16 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e04:	f7ff fd02 	bl	800080c <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d901      	bls.n	8000e16 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e04d      	b.n	8000eb2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e16:	4b2a      	ldr	r3, [pc, #168]	; (8000ec0 <HAL_RCC_OscConfig+0x4d8>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d0f0      	beq.n	8000e04 <HAL_RCC_OscConfig+0x41c>
 8000e22:	e045      	b.n	8000eb0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e24:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <HAL_RCC_OscConfig+0x4dc>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e2a:	f7ff fcef 	bl	800080c <HAL_GetTick>
 8000e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e30:	e008      	b.n	8000e44 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e32:	f7ff fceb 	bl	800080c <HAL_GetTick>
 8000e36:	4602      	mov	r2, r0
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d901      	bls.n	8000e44 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000e40:	2303      	movs	r3, #3
 8000e42:	e036      	b.n	8000eb2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e44:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <HAL_RCC_OscConfig+0x4d8>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d1f0      	bne.n	8000e32 <HAL_RCC_OscConfig+0x44a>
 8000e50:	e02e      	b.n	8000eb0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d101      	bne.n	8000e5e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e029      	b.n	8000eb2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_RCC_OscConfig+0x4d8>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d11c      	bne.n	8000eac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d115      	bne.n	8000eac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000e86:	4013      	ands	r3, r2
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d10d      	bne.n	8000eac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d106      	bne.n	8000eac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d001      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e000      	b.n	8000eb2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40007000 	.word	0x40007000
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	42470060 	.word	0x42470060

08000ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d101      	bne.n	8000edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e0cc      	b.n	8001076 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000edc:	4b68      	ldr	r3, [pc, #416]	; (8001080 <HAL_RCC_ClockConfig+0x1b8>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f003 030f 	and.w	r3, r3, #15
 8000ee4:	683a      	ldr	r2, [r7, #0]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d90c      	bls.n	8000f04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000eea:	4b65      	ldr	r3, [pc, #404]	; (8001080 <HAL_RCC_ClockConfig+0x1b8>)
 8000eec:	683a      	ldr	r2, [r7, #0]
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ef2:	4b63      	ldr	r3, [pc, #396]	; (8001080 <HAL_RCC_ClockConfig+0x1b8>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	683a      	ldr	r2, [r7, #0]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d001      	beq.n	8000f04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e0b8      	b.n	8001076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d020      	beq.n	8000f52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d005      	beq.n	8000f28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f1c:	4b59      	ldr	r3, [pc, #356]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	4a58      	ldr	r2, [pc, #352]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 8000f22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0308 	and.w	r3, r3, #8
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d005      	beq.n	8000f40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f34:	4b53      	ldr	r3, [pc, #332]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	4a52      	ldr	r2, [pc, #328]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 8000f3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000f3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f40:	4b50      	ldr	r3, [pc, #320]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	494d      	ldr	r1, [pc, #308]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d044      	beq.n	8000fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d107      	bne.n	8000f76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f66:	4b47      	ldr	r3, [pc, #284]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d119      	bne.n	8000fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e07f      	b.n	8001076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d003      	beq.n	8000f86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f82:	2b03      	cmp	r3, #3
 8000f84:	d107      	bne.n	8000f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f86:	4b3f      	ldr	r3, [pc, #252]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d109      	bne.n	8000fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e06f      	b.n	8001076 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f96:	4b3b      	ldr	r3, [pc, #236]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e067      	b.n	8001076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fa6:	4b37      	ldr	r3, [pc, #220]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f023 0203 	bic.w	r2, r3, #3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	4934      	ldr	r1, [pc, #208]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000fb8:	f7ff fc28 	bl	800080c <HAL_GetTick>
 8000fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fbe:	e00a      	b.n	8000fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fc0:	f7ff fc24 	bl	800080c <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e04f      	b.n	8001076 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fd6:	4b2b      	ldr	r3, [pc, #172]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	f003 020c 	and.w	r2, r3, #12
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d1eb      	bne.n	8000fc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000fe8:	4b25      	ldr	r3, [pc, #148]	; (8001080 <HAL_RCC_ClockConfig+0x1b8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 030f 	and.w	r3, r3, #15
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d20c      	bcs.n	8001010 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ff6:	4b22      	ldr	r3, [pc, #136]	; (8001080 <HAL_RCC_ClockConfig+0x1b8>)
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ffe:	4b20      	ldr	r3, [pc, #128]	; (8001080 <HAL_RCC_ClockConfig+0x1b8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	683a      	ldr	r2, [r7, #0]
 8001008:	429a      	cmp	r2, r3
 800100a:	d001      	beq.n	8001010 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e032      	b.n	8001076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f003 0304 	and.w	r3, r3, #4
 8001018:	2b00      	cmp	r3, #0
 800101a:	d008      	beq.n	800102e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800101c:	4b19      	ldr	r3, [pc, #100]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	4916      	ldr	r1, [pc, #88]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 800102a:	4313      	orrs	r3, r2
 800102c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	2b00      	cmp	r3, #0
 8001038:	d009      	beq.n	800104e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800103a:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	490e      	ldr	r1, [pc, #56]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 800104a:	4313      	orrs	r3, r2
 800104c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800104e:	f000 f821 	bl	8001094 <HAL_RCC_GetSysClockFreq>
 8001052:	4601      	mov	r1, r0
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <HAL_RCC_ClockConfig+0x1bc>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	091b      	lsrs	r3, r3, #4
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <HAL_RCC_ClockConfig+0x1c0>)
 8001060:	5cd3      	ldrb	r3, [r2, r3]
 8001062:	fa21 f303 	lsr.w	r3, r1, r3
 8001066:	4a09      	ldr	r2, [pc, #36]	; (800108c <HAL_RCC_ClockConfig+0x1c4>)
 8001068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_RCC_ClockConfig+0x1c8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fada 	bl	8000628 <HAL_InitTick>

  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023c00 	.word	0x40023c00
 8001084:	40023800 	.word	0x40023800
 8001088:	08001b28 	.word	0x08001b28
 800108c:	20000000 	.word	0x20000000
 8001090:	20000004 	.word	0x20000004

08001094 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	2300      	movs	r3, #0
 80010a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80010aa:	4b50      	ldr	r3, [pc, #320]	; (80011ec <HAL_RCC_GetSysClockFreq+0x158>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 030c 	and.w	r3, r3, #12
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	d007      	beq.n	80010c6 <HAL_RCC_GetSysClockFreq+0x32>
 80010b6:	2b08      	cmp	r3, #8
 80010b8:	d008      	beq.n	80010cc <HAL_RCC_GetSysClockFreq+0x38>
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f040 808d 	bne.w	80011da <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80010c0:	4b4b      	ldr	r3, [pc, #300]	; (80011f0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80010c2:	60bb      	str	r3, [r7, #8]
       break;
 80010c4:	e08c      	b.n	80011e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80010c6:	4b4b      	ldr	r3, [pc, #300]	; (80011f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80010c8:	60bb      	str	r3, [r7, #8]
      break;
 80010ca:	e089      	b.n	80011e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010cc:	4b47      	ldr	r3, [pc, #284]	; (80011ec <HAL_RCC_GetSysClockFreq+0x158>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010d6:	4b45      	ldr	r3, [pc, #276]	; (80011ec <HAL_RCC_GetSysClockFreq+0x158>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d023      	beq.n	800112a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010e2:	4b42      	ldr	r3, [pc, #264]	; (80011ec <HAL_RCC_GetSysClockFreq+0x158>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	099b      	lsrs	r3, r3, #6
 80010e8:	f04f 0400 	mov.w	r4, #0
 80010ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	ea03 0501 	and.w	r5, r3, r1
 80010f8:	ea04 0602 	and.w	r6, r4, r2
 80010fc:	4a3d      	ldr	r2, [pc, #244]	; (80011f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80010fe:	fb02 f106 	mul.w	r1, r2, r6
 8001102:	2200      	movs	r2, #0
 8001104:	fb02 f205 	mul.w	r2, r2, r5
 8001108:	440a      	add	r2, r1
 800110a:	493a      	ldr	r1, [pc, #232]	; (80011f4 <HAL_RCC_GetSysClockFreq+0x160>)
 800110c:	fba5 0101 	umull	r0, r1, r5, r1
 8001110:	1853      	adds	r3, r2, r1
 8001112:	4619      	mov	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f04f 0400 	mov.w	r4, #0
 800111a:	461a      	mov	r2, r3
 800111c:	4623      	mov	r3, r4
 800111e:	f7ff f85f 	bl	80001e0 <__aeabi_uldivmod>
 8001122:	4603      	mov	r3, r0
 8001124:	460c      	mov	r4, r1
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	e049      	b.n	80011be <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800112a:	4b30      	ldr	r3, [pc, #192]	; (80011ec <HAL_RCC_GetSysClockFreq+0x158>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	099b      	lsrs	r3, r3, #6
 8001130:	f04f 0400 	mov.w	r4, #0
 8001134:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001138:	f04f 0200 	mov.w	r2, #0
 800113c:	ea03 0501 	and.w	r5, r3, r1
 8001140:	ea04 0602 	and.w	r6, r4, r2
 8001144:	4629      	mov	r1, r5
 8001146:	4632      	mov	r2, r6
 8001148:	f04f 0300 	mov.w	r3, #0
 800114c:	f04f 0400 	mov.w	r4, #0
 8001150:	0154      	lsls	r4, r2, #5
 8001152:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001156:	014b      	lsls	r3, r1, #5
 8001158:	4619      	mov	r1, r3
 800115a:	4622      	mov	r2, r4
 800115c:	1b49      	subs	r1, r1, r5
 800115e:	eb62 0206 	sbc.w	r2, r2, r6
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	f04f 0400 	mov.w	r4, #0
 800116a:	0194      	lsls	r4, r2, #6
 800116c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001170:	018b      	lsls	r3, r1, #6
 8001172:	1a5b      	subs	r3, r3, r1
 8001174:	eb64 0402 	sbc.w	r4, r4, r2
 8001178:	f04f 0100 	mov.w	r1, #0
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	00e2      	lsls	r2, r4, #3
 8001182:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001186:	00d9      	lsls	r1, r3, #3
 8001188:	460b      	mov	r3, r1
 800118a:	4614      	mov	r4, r2
 800118c:	195b      	adds	r3, r3, r5
 800118e:	eb44 0406 	adc.w	r4, r4, r6
 8001192:	f04f 0100 	mov.w	r1, #0
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	02a2      	lsls	r2, r4, #10
 800119c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80011a0:	0299      	lsls	r1, r3, #10
 80011a2:	460b      	mov	r3, r1
 80011a4:	4614      	mov	r4, r2
 80011a6:	4618      	mov	r0, r3
 80011a8:	4621      	mov	r1, r4
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f04f 0400 	mov.w	r4, #0
 80011b0:	461a      	mov	r2, r3
 80011b2:	4623      	mov	r3, r4
 80011b4:	f7ff f814 	bl	80001e0 <__aeabi_uldivmod>
 80011b8:	4603      	mov	r3, r0
 80011ba:	460c      	mov	r4, r1
 80011bc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <HAL_RCC_GetSysClockFreq+0x158>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	0c1b      	lsrs	r3, r3, #16
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	3301      	adds	r3, #1
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d6:	60bb      	str	r3, [r7, #8]
      break;
 80011d8:	e002      	b.n	80011e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80011dc:	60bb      	str	r3, [r7, #8]
      break;
 80011de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80011e0:	68bb      	ldr	r3, [r7, #8]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800
 80011f0:	00f42400 	.word	0x00f42400
 80011f4:	017d7840 	.word	0x017d7840

080011f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <HAL_RCC_GetHCLKFreq+0x14>)
 80011fe:	681b      	ldr	r3, [r3, #0]
}
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000000 	.word	0x20000000

08001210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001214:	f7ff fff0 	bl	80011f8 <HAL_RCC_GetHCLKFreq>
 8001218:	4601      	mov	r1, r0
 800121a:	4b05      	ldr	r3, [pc, #20]	; (8001230 <HAL_RCC_GetPCLK1Freq+0x20>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	0a9b      	lsrs	r3, r3, #10
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	4a03      	ldr	r2, [pc, #12]	; (8001234 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001226:	5cd3      	ldrb	r3, [r2, r3]
 8001228:	fa21 f303 	lsr.w	r3, r1, r3
}
 800122c:	4618      	mov	r0, r3
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40023800 	.word	0x40023800
 8001234:	08001b38 	.word	0x08001b38

08001238 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	220f      	movs	r2, #15
 8001246:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_RCC_GetClockConfig+0x5c>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 0203 	and.w	r2, r3, #3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <HAL_RCC_GetClockConfig+0x5c>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <HAL_RCC_GetClockConfig+0x5c>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <HAL_RCC_GetClockConfig+0x5c>)
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	08db      	lsrs	r3, r3, #3
 8001272:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800127a:	4b07      	ldr	r3, [pc, #28]	; (8001298 <HAL_RCC_GetClockConfig+0x60>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 020f 	and.w	r2, r3, #15
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	601a      	str	r2, [r3, #0]
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800
 8001298:	40023c00 	.word	0x40023c00

0800129c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e01d      	b.n	80012ea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d106      	bne.n	80012c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 f815 	bl	80012f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2202      	movs	r2, #2
 80012cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3304      	adds	r3, #4
 80012d8:	4619      	mov	r1, r3
 80012da:	4610      	mov	r0, r2
 80012dc:	f000 f968 	bl	80015b0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001306:	b480      	push	{r7}
 8001308:	b085      	sub	sp, #20
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68da      	ldr	r2, [r3, #12]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f042 0201 	orr.w	r2, r2, #1
 800131c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2b06      	cmp	r3, #6
 800132e:	d007      	beq.n	8001340 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f042 0201 	orr.w	r2, r2, #1
 800133e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b02      	cmp	r3, #2
 8001362:	d122      	bne.n	80013aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b02      	cmp	r3, #2
 8001370:	d11b      	bne.n	80013aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f06f 0202 	mvn.w	r2, #2
 800137a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2201      	movs	r2, #1
 8001380:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 f8ee 	bl	8001572 <HAL_TIM_IC_CaptureCallback>
 8001396:	e005      	b.n	80013a4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f000 f8e0 	bl	800155e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 f8f1 	bl	8001586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	691b      	ldr	r3, [r3, #16]
 80013b0:	f003 0304 	and.w	r3, r3, #4
 80013b4:	2b04      	cmp	r3, #4
 80013b6:	d122      	bne.n	80013fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	d11b      	bne.n	80013fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f06f 0204 	mvn.w	r2, #4
 80013ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2202      	movs	r2, #2
 80013d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 f8c4 	bl	8001572 <HAL_TIM_IC_CaptureCallback>
 80013ea:	e005      	b.n	80013f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 f8b6 	bl	800155e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 f8c7 	bl	8001586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	f003 0308 	and.w	r3, r3, #8
 8001408:	2b08      	cmp	r3, #8
 800140a:	d122      	bne.n	8001452 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	2b08      	cmp	r3, #8
 8001418:	d11b      	bne.n	8001452 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f06f 0208 	mvn.w	r2, #8
 8001422:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2204      	movs	r2, #4
 8001428:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	f003 0303 	and.w	r3, r3, #3
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 f89a 	bl	8001572 <HAL_TIM_IC_CaptureCallback>
 800143e:	e005      	b.n	800144c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 f88c 	bl	800155e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 f89d 	bl	8001586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	691b      	ldr	r3, [r3, #16]
 8001458:	f003 0310 	and.w	r3, r3, #16
 800145c:	2b10      	cmp	r3, #16
 800145e:	d122      	bne.n	80014a6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	f003 0310 	and.w	r3, r3, #16
 800146a:	2b10      	cmp	r3, #16
 800146c:	d11b      	bne.n	80014a6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f06f 0210 	mvn.w	r2, #16
 8001476:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2208      	movs	r2, #8
 800147c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 f870 	bl	8001572 <HAL_TIM_IC_CaptureCallback>
 8001492:	e005      	b.n	80014a0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 f862 	bl	800155e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 f873 	bl	8001586 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d10e      	bne.n	80014d2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d107      	bne.n	80014d2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f06f 0201 	mvn.w	r2, #1
 80014ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff f86d 	bl	80005ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014dc:	2b80      	cmp	r3, #128	; 0x80
 80014de:	d10e      	bne.n	80014fe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ea:	2b80      	cmp	r3, #128	; 0x80
 80014ec:	d107      	bne.n	80014fe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80014f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f000 f8e3 	bl	80016c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001508:	2b40      	cmp	r3, #64	; 0x40
 800150a:	d10e      	bne.n	800152a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001516:	2b40      	cmp	r3, #64	; 0x40
 8001518:	d107      	bne.n	800152a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 f838 	bl	800159a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	f003 0320 	and.w	r3, r3, #32
 8001534:	2b20      	cmp	r3, #32
 8001536:	d10e      	bne.n	8001556 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	f003 0320 	and.w	r3, r3, #32
 8001542:	2b20      	cmp	r3, #32
 8001544:	d107      	bne.n	8001556 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f06f 0220 	mvn.w	r2, #32
 800154e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 f8ad 	bl	80016b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001586:	b480      	push	{r7}
 8001588:	b083      	sub	sp, #12
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a34      	ldr	r2, [pc, #208]	; (8001694 <TIM_Base_SetConfig+0xe4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d00f      	beq.n	80015e8 <TIM_Base_SetConfig+0x38>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ce:	d00b      	beq.n	80015e8 <TIM_Base_SetConfig+0x38>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a31      	ldr	r2, [pc, #196]	; (8001698 <TIM_Base_SetConfig+0xe8>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d007      	beq.n	80015e8 <TIM_Base_SetConfig+0x38>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a30      	ldr	r2, [pc, #192]	; (800169c <TIM_Base_SetConfig+0xec>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d003      	beq.n	80015e8 <TIM_Base_SetConfig+0x38>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a2f      	ldr	r2, [pc, #188]	; (80016a0 <TIM_Base_SetConfig+0xf0>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d108      	bne.n	80015fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a25      	ldr	r2, [pc, #148]	; (8001694 <TIM_Base_SetConfig+0xe4>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d01b      	beq.n	800163a <TIM_Base_SetConfig+0x8a>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001608:	d017      	beq.n	800163a <TIM_Base_SetConfig+0x8a>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a22      	ldr	r2, [pc, #136]	; (8001698 <TIM_Base_SetConfig+0xe8>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d013      	beq.n	800163a <TIM_Base_SetConfig+0x8a>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a21      	ldr	r2, [pc, #132]	; (800169c <TIM_Base_SetConfig+0xec>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d00f      	beq.n	800163a <TIM_Base_SetConfig+0x8a>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a20      	ldr	r2, [pc, #128]	; (80016a0 <TIM_Base_SetConfig+0xf0>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d00b      	beq.n	800163a <TIM_Base_SetConfig+0x8a>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a1f      	ldr	r2, [pc, #124]	; (80016a4 <TIM_Base_SetConfig+0xf4>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d007      	beq.n	800163a <TIM_Base_SetConfig+0x8a>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a1e      	ldr	r2, [pc, #120]	; (80016a8 <TIM_Base_SetConfig+0xf8>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d003      	beq.n	800163a <TIM_Base_SetConfig+0x8a>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a1d      	ldr	r2, [pc, #116]	; (80016ac <TIM_Base_SetConfig+0xfc>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d108      	bne.n	800164c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	4313      	orrs	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	4313      	orrs	r3, r2
 8001658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a08      	ldr	r2, [pc, #32]	; (8001694 <TIM_Base_SetConfig+0xe4>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d103      	bne.n	8001680 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	691a      	ldr	r2, [r3, #16]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	615a      	str	r2, [r3, #20]
}
 8001686:	bf00      	nop
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40010000 	.word	0x40010000
 8001698:	40000400 	.word	0x40000400
 800169c:	40000800 	.word	0x40000800
 80016a0:	40000c00 	.word	0x40000c00
 80016a4:	40014000 	.word	0x40014000
 80016a8:	40014400 	.word	0x40014400
 80016ac:	40014800 	.word	0x40014800

080016b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	601a      	str	r2, [r3, #0]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6892      	ldr	r2, [r2, #8]
 8001736:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6852      	ldr	r2, [r2, #4]
 8001740:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	429a      	cmp	r2, r3
 800174a:	d103      	bne.n	8001754 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689a      	ldr	r2, [r3, #8]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	1e5a      	subs	r2, r3, #1
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800177e:	4b4e      	ldr	r3, [pc, #312]	; (80018b8 <xTaskIncrementTick+0x144>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	f040 8087 	bne.w	8001896 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001788:	4b4c      	ldr	r3, [pc, #304]	; (80018bc <xTaskIncrementTick+0x148>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	3301      	adds	r3, #1
 800178e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001790:	4a4a      	ldr	r2, [pc, #296]	; (80018bc <xTaskIncrementTick+0x148>)
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d11f      	bne.n	80017dc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800179c:	4b48      	ldr	r3, [pc, #288]	; (80018c0 <xTaskIncrementTick+0x14c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d009      	beq.n	80017ba <xTaskIncrementTick+0x46>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80017a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017aa:	f383 8811 	msr	BASEPRI, r3
 80017ae:	f3bf 8f6f 	isb	sy
 80017b2:	f3bf 8f4f 	dsb	sy
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	e7fe      	b.n	80017b8 <xTaskIncrementTick+0x44>
 80017ba:	4b41      	ldr	r3, [pc, #260]	; (80018c0 <xTaskIncrementTick+0x14c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	4b40      	ldr	r3, [pc, #256]	; (80018c4 <xTaskIncrementTick+0x150>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a3e      	ldr	r2, [pc, #248]	; (80018c0 <xTaskIncrementTick+0x14c>)
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	4a3e      	ldr	r2, [pc, #248]	; (80018c4 <xTaskIncrementTick+0x150>)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	4b3e      	ldr	r3, [pc, #248]	; (80018c8 <xTaskIncrementTick+0x154>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	3301      	adds	r3, #1
 80017d4:	4a3c      	ldr	r2, [pc, #240]	; (80018c8 <xTaskIncrementTick+0x154>)
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	f000 f8de 	bl	8001998 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80017dc:	4b3b      	ldr	r3, [pc, #236]	; (80018cc <xTaskIncrementTick+0x158>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d348      	bcc.n	8001878 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017e6:	4b36      	ldr	r3, [pc, #216]	; (80018c0 <xTaskIncrementTick+0x14c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d104      	bne.n	80017fa <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017f0:	4b36      	ldr	r3, [pc, #216]	; (80018cc <xTaskIncrementTick+0x158>)
 80017f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017f6:	601a      	str	r2, [r3, #0]
					break;
 80017f8:	e03e      	b.n	8001878 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80017fa:	4b31      	ldr	r3, [pc, #196]	; (80018c0 <xTaskIncrementTick+0x14c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	429a      	cmp	r2, r3
 8001810:	d203      	bcs.n	800181a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001812:	4a2e      	ldr	r2, [pc, #184]	; (80018cc <xTaskIncrementTick+0x158>)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001818:	e02e      	b.n	8001878 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	3304      	adds	r3, #4
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ff7e 	bl	8001720 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	2b00      	cmp	r3, #0
 800182a:	d004      	beq.n	8001836 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	3318      	adds	r3, #24
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff ff75 	bl	8001720 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183a:	2201      	movs	r2, #1
 800183c:	409a      	lsls	r2, r3
 800183e:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <xTaskIncrementTick+0x15c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4313      	orrs	r3, r2
 8001844:	4a22      	ldr	r2, [pc, #136]	; (80018d0 <xTaskIncrementTick+0x15c>)
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800184c:	4613      	mov	r3, r2
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	4413      	add	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4a1f      	ldr	r2, [pc, #124]	; (80018d4 <xTaskIncrementTick+0x160>)
 8001856:	441a      	add	r2, r3
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	3304      	adds	r3, #4
 800185c:	4619      	mov	r1, r3
 800185e:	4610      	mov	r0, r2
 8001860:	f7ff ff3a 	bl	80016d8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001868:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <xTaskIncrementTick+0x164>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186e:	429a      	cmp	r2, r3
 8001870:	d3b9      	bcc.n	80017e6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001872:	2301      	movs	r3, #1
 8001874:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001876:	e7b6      	b.n	80017e6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001878:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <xTaskIncrementTick+0x164>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800187e:	4915      	ldr	r1, [pc, #84]	; (80018d4 <xTaskIncrementTick+0x160>)
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d907      	bls.n	80018a0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8001890:	2301      	movs	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	e004      	b.n	80018a0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <xTaskIncrementTick+0x168>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	3301      	adds	r3, #1
 800189c:	4a0f      	ldr	r2, [pc, #60]	; (80018dc <xTaskIncrementTick+0x168>)
 800189e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <xTaskIncrementTick+0x16c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80018a8:	2301      	movs	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80018ac:	697b      	ldr	r3, [r7, #20]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200000b0 	.word	0x200000b0
 80018bc:	20000098 	.word	0x20000098
 80018c0:	20000090 	.word	0x20000090
 80018c4:	20000094 	.word	0x20000094
 80018c8:	200000a8 	.word	0x200000a8
 80018cc:	200000ac 	.word	0x200000ac
 80018d0:	2000009c 	.word	0x2000009c
 80018d4:	2000002c 	.word	0x2000002c
 80018d8:	20000028 	.word	0x20000028
 80018dc:	200000a0 	.word	0x200000a0
 80018e0:	200000a4 	.word	0x200000a4

080018e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80018e4:	b480      	push	{r7}
 80018e6:	b087      	sub	sp, #28
 80018e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80018ea:	4b26      	ldr	r3, [pc, #152]	; (8001984 <vTaskSwitchContext+0xa0>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80018f2:	4b25      	ldr	r3, [pc, #148]	; (8001988 <vTaskSwitchContext+0xa4>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80018f8:	e03e      	b.n	8001978 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80018fa:	4b23      	ldr	r3, [pc, #140]	; (8001988 <vTaskSwitchContext+0xa4>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001900:	4b22      	ldr	r3, [pc, #136]	; (800198c <vTaskSwitchContext+0xa8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	fab3 f383 	clz	r3, r3
 800190c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800190e:	7afb      	ldrb	r3, [r7, #11]
 8001910:	f1c3 031f 	rsb	r3, r3, #31
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	491e      	ldr	r1, [pc, #120]	; (8001990 <vTaskSwitchContext+0xac>)
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	440b      	add	r3, r1
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d109      	bne.n	800193e <vTaskSwitchContext+0x5a>
	__asm volatile
 800192a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800192e:	f383 8811 	msr	BASEPRI, r3
 8001932:	f3bf 8f6f 	isb	sy
 8001936:	f3bf 8f4f 	dsb	sy
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	e7fe      	b.n	800193c <vTaskSwitchContext+0x58>
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4a11      	ldr	r2, [pc, #68]	; (8001990 <vTaskSwitchContext+0xac>)
 800194a:	4413      	add	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	3308      	adds	r3, #8
 8001960:	429a      	cmp	r2, r3
 8001962:	d104      	bne.n	800196e <vTaskSwitchContext+0x8a>
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	4a07      	ldr	r2, [pc, #28]	; (8001994 <vTaskSwitchContext+0xb0>)
 8001976:	6013      	str	r3, [r2, #0]
}
 8001978:	bf00      	nop
 800197a:	371c      	adds	r7, #28
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	200000b0 	.word	0x200000b0
 8001988:	200000a4 	.word	0x200000a4
 800198c:	2000009c 	.word	0x2000009c
 8001990:	2000002c 	.word	0x2000002c
 8001994:	20000028 	.word	0x20000028

08001998 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <prvResetNextTaskUnblockTime+0x38>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d104      	bne.n	80019b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80019a8:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <prvResetNextTaskUnblockTime+0x3c>)
 80019aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80019b0:	e008      	b.n	80019c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019b2:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <prvResetNextTaskUnblockTime+0x38>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <prvResetNextTaskUnblockTime+0x3c>)
 80019c2:	6013      	str	r3, [r2, #0]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	20000090 	.word	0x20000090
 80019d4:	200000ac 	.word	0x200000ac
	...

080019e0 <SVC_Handler>:
	}
}
/*-----------------------------------------------------------*/

void vPortSVCHandler(void) {
	__asm volatile (
 80019e0:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <pxCurrentTCBConst2>)
 80019e2:	6819      	ldr	r1, [r3, #0]
 80019e4:	6808      	ldr	r0, [r1, #0]
 80019e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019ea:	f380 8809 	msr	PSP, r0
 80019ee:	f3bf 8f6f 	isb	sy
 80019f2:	f04f 0000 	mov.w	r0, #0
 80019f6:	f380 8811 	msr	BASEPRI, r0
 80019fa:	4770      	bx	lr
 80019fc:	f3af 8000 	nop.w

08001a00 <pxCurrentTCBConst2>:
 8001a00:	20000028 	.word	0x20000028
			"	bx r14							\n"
			"									\n"
			"	.align 4						\n"
			"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
	);
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
	...

08001a10 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void xPortPendSVHandler(void) {
	/* This is a naked function. */

	__asm volatile
 8001a10:	f3ef 8009 	mrs	r0, PSP
 8001a14:	f3bf 8f6f 	isb	sy
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <pxCurrentTCBConst>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	f01e 0f10 	tst.w	lr, #16
 8001a20:	bf08      	it	eq
 8001a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a2a:	6010      	str	r0, [r2, #0]
 8001a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001a30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001a34:	f380 8811 	msr	BASEPRI, r0
 8001a38:	f3bf 8f4f 	dsb	sy
 8001a3c:	f3bf 8f6f 	isb	sy
 8001a40:	f7ff ff50 	bl	80018e4 <vTaskSwitchContext>
 8001a44:	f04f 0000 	mov.w	r0, #0
 8001a48:	f380 8811 	msr	BASEPRI, r0
 8001a4c:	bc09      	pop	{r0, r3}
 8001a4e:	6819      	ldr	r1, [r3, #0]
 8001a50:	6808      	ldr	r0, [r1, #0]
 8001a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a56:	f01e 0f10 	tst.w	lr, #16
 8001a5a:	bf08      	it	eq
 8001a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001a60:	f380 8809 	msr	PSP, r0
 8001a64:	f3bf 8f6f 	isb	sy
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	f3af 8000 	nop.w

08001a70 <pxCurrentTCBConst>:
 8001a70:	20000028 	.word	0x20000028
			"										\n"
			"	.align 4							\n"
			"pxCurrentTCBConst: .word pxCurrentTCB	\n"
			::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop

08001a78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler(void) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a82:	f383 8811 	msr	BASEPRI, r3
 8001a86:	f3bf 8f6f 	isb	sy
 8001a8a:	f3bf 8f4f 	dsb	sy
 8001a8e:	607b      	str	r3, [r7, #4]
	 known. */
	portDISABLE_INTERRUPTS();
	traceISR_ENTER();
	{
		/* Increment the RTOS tick. */
		if (xTaskIncrementTick() != pdFALSE) {
 8001a90:	f7ff fe70 	bl	8001774 <xTaskIncrementTick>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <SysTick_Handler+0x2a>
			traceISR_EXIT_TO_SCHEDULER();
			/* A context switch is required.  Context switching is performed in
			 the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <SysTick_Handler+0x3c>)
 8001a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	f383 8811 	msr	BASEPRI, r3
		} else {
			traceISR_EXIT();
		}
	}
	portENABLE_INTERRUPTS();
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	e000ed04 	.word	0xe000ed04

08001ab8 <__libc_init_array>:
 8001ab8:	b570      	push	{r4, r5, r6, lr}
 8001aba:	4e0d      	ldr	r6, [pc, #52]	; (8001af0 <__libc_init_array+0x38>)
 8001abc:	4c0d      	ldr	r4, [pc, #52]	; (8001af4 <__libc_init_array+0x3c>)
 8001abe:	1ba4      	subs	r4, r4, r6
 8001ac0:	10a4      	asrs	r4, r4, #2
 8001ac2:	2500      	movs	r5, #0
 8001ac4:	42a5      	cmp	r5, r4
 8001ac6:	d109      	bne.n	8001adc <__libc_init_array+0x24>
 8001ac8:	4e0b      	ldr	r6, [pc, #44]	; (8001af8 <__libc_init_array+0x40>)
 8001aca:	4c0c      	ldr	r4, [pc, #48]	; (8001afc <__libc_init_array+0x44>)
 8001acc:	f000 f820 	bl	8001b10 <_init>
 8001ad0:	1ba4      	subs	r4, r4, r6
 8001ad2:	10a4      	asrs	r4, r4, #2
 8001ad4:	2500      	movs	r5, #0
 8001ad6:	42a5      	cmp	r5, r4
 8001ad8:	d105      	bne.n	8001ae6 <__libc_init_array+0x2e>
 8001ada:	bd70      	pop	{r4, r5, r6, pc}
 8001adc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ae0:	4798      	blx	r3
 8001ae2:	3501      	adds	r5, #1
 8001ae4:	e7ee      	b.n	8001ac4 <__libc_init_array+0xc>
 8001ae6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001aea:	4798      	blx	r3
 8001aec:	3501      	adds	r5, #1
 8001aee:	e7f2      	b.n	8001ad6 <__libc_init_array+0x1e>
 8001af0:	08001b48 	.word	0x08001b48
 8001af4:	08001b48 	.word	0x08001b48
 8001af8:	08001b48 	.word	0x08001b48
 8001afc:	08001b4c 	.word	0x08001b4c

08001b00 <memset>:
 8001b00:	4402      	add	r2, r0
 8001b02:	4603      	mov	r3, r0
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d100      	bne.n	8001b0a <memset+0xa>
 8001b08:	4770      	bx	lr
 8001b0a:	f803 1b01 	strb.w	r1, [r3], #1
 8001b0e:	e7f9      	b.n	8001b04 <memset+0x4>

08001b10 <_init>:
 8001b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b12:	bf00      	nop
 8001b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b16:	bc08      	pop	{r3}
 8001b18:	469e      	mov	lr, r3
 8001b1a:	4770      	bx	lr

08001b1c <_fini>:
 8001b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b1e:	bf00      	nop
 8001b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b22:	bc08      	pop	{r3}
 8001b24:	469e      	mov	lr, r3
 8001b26:	4770      	bx	lr
