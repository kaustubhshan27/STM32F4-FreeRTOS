
STM32_FreeRTOS_Tasks_Sync.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004230  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080043d0  080043d0  000143d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004420  08004420  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004420  08004420  00014420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004428  08004428  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004428  08004428  00014428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800442c  0800442c  0001442c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e20  20000074  080044a4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012e94  080044a4  00022e94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103ad  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000249d  00000000  00000000  00030451  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000de8  00000000  00000000  000328f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd0  00000000  00000000  000336d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000174f1  00000000  00000000  000343a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b010  00000000  00000000  0004b899  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092166  00000000  00000000  000568a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e8a0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a94  00000000  00000000  000e8a8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080043b8 	.word	0x080043b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080043b8 	.word	0x080043b8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004e6:	f000 fa1f 	bl	8000928 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004ea:	f000 f84d 	bl	8000588 <SystemClock_Config>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	/* USER CODE BEGIN 2 */
	vSemaphoreCreateBinary(xWork);
 80004ee:	2203      	movs	r2, #3
 80004f0:	2100      	movs	r1, #0
 80004f2:	2001      	movs	r0, #1
 80004f4:	f001 fad0 	bl	8001a98 <xQueueGenericCreate>
 80004f8:	4602      	mov	r2, r0
 80004fa:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <main+0x88>)
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	4b1a      	ldr	r3, [pc, #104]	; (8000568 <main+0x88>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d006      	beq.n	8000514 <main+0x34>
 8000506:	4b18      	ldr	r3, [pc, #96]	; (8000568 <main+0x88>)
 8000508:	6818      	ldr	r0, [r3, #0]
 800050a:	2300      	movs	r3, #0
 800050c:	2200      	movs	r2, #0
 800050e:	2100      	movs	r1, #0
 8000510:	f001 fb20 	bl	8001b54 <xQueueGenericSend>
	xWorkQueue = xQueueCreate(1, sizeof(int));
 8000514:	2200      	movs	r2, #0
 8000516:	2104      	movs	r1, #4
 8000518:	2001      	movs	r0, #1
 800051a:	f001 fabd 	bl	8001a98 <xQueueGenericCreate>
 800051e:	4602      	mov	r2, r0
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <main+0x8c>)
 8000522:	601a      	str	r2, [r3, #0]
	if (xWork != NULL && xWorkQueue != NULL) {
 8000524:	4b10      	ldr	r3, [pc, #64]	; (8000568 <main+0x88>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d01b      	beq.n	8000564 <main+0x84>
 800052c:	4b0f      	ldr	r3, [pc, #60]	; (800056c <main+0x8c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d017      	beq.n	8000564 <main+0x84>
		xTaskCreate((pdTASK_CODE) vManagerTask_handler, "Manager Task", 500, NULL,
 8000534:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <main+0x90>)
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	2302      	movs	r3, #2
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	2300      	movs	r3, #0
 800053e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000542:	490c      	ldr	r1, [pc, #48]	; (8000574 <main+0x94>)
 8000544:	480c      	ldr	r0, [pc, #48]	; (8000578 <main+0x98>)
 8000546:	f001 fffb 	bl	8002540 <xTaskCreate>
				2, &xManagerTaskHandle);
		xTaskCreate((pdTASK_CODE) vEmployeeTask_handler, "Employee Task", 500, NULL, 1,
 800054a:	4b0c      	ldr	r3, [pc, #48]	; (800057c <main+0x9c>)
 800054c:	9301      	str	r3, [sp, #4]
 800054e:	2301      	movs	r3, #1
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	2300      	movs	r3, #0
 8000554:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000558:	4909      	ldr	r1, [pc, #36]	; (8000580 <main+0xa0>)
 800055a:	480a      	ldr	r0, [pc, #40]	; (8000584 <main+0xa4>)
 800055c:	f001 fff0 	bl	8002540 <xTaskCreate>
				&xEmployeeTaskHandle);
		vTaskStartScheduler();
 8000560:	f002 f930 	bl	80027c4 <vTaskStartScheduler>
	}
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000564:	e7fe      	b.n	8000564 <main+0x84>
 8000566:	bf00      	nop
 8000568:	20000090 	.word	0x20000090
 800056c:	20000094 	.word	0x20000094
 8000570:	20000098 	.word	0x20000098
 8000574:	080043d0 	.word	0x080043d0
 8000578:	08000675 	.word	0x08000675
 800057c:	2000009c 	.word	0x2000009c
 8000580:	080043e0 	.word	0x080043e0
 8000584:	08000645 	.word	0x08000645

08000588 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2230      	movs	r2, #48	; 0x30
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f003 fe5d 	bl	8004256 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	4b22      	ldr	r3, [pc, #136]	; (800063c <SystemClock_Config+0xb4>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a21      	ldr	r2, [pc, #132]	; (800063c <SystemClock_Config+0xb4>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b1f      	ldr	r3, [pc, #124]	; (800063c <SystemClock_Config+0xb4>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <SystemClock_Config+0xb8>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a1b      	ldr	r2, [pc, #108]	; (8000640 <SystemClock_Config+0xb8>)
 80005d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b19      	ldr	r3, [pc, #100]	; (8000640 <SystemClock_Config+0xb8>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	2302      	movs	r3, #2
 80005e6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	2301      	movs	r3, #1
 80005ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ec:	2310      	movs	r3, #16
 80005ee:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80005f4:	f107 0320 	add.w	r3, r7, #32
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 fab9 	bl	8000b70 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x80>
		Error_Handler();
 8000604:	f000 f879 	bl	80006fa <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800060c:	2300      	movs	r3, #0
 800060e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fd14 	bl	8001050 <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xaa>
		Error_Handler();
 800062e:	f000 f864 	bl	80006fa <Error_Handler>
	}
}
 8000632:	bf00      	nop
 8000634:	3750      	adds	r7, #80	; 0x50
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <vEmployeeTask_handler>:

/* USER CODE BEGIN 4 */
void vEmployeeTask_handler(void *pvParameters)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	unsigned int ticket_ID;
	while(1)
	{
		xSemaphoreTake(xWork, 0);
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <vEmployeeTask_handler+0x28>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f001 fce8 	bl	8002028 <xQueueSemaphoreTake>
		if(xQueueReceive(xWorkQueue, &ticket_ID, 0) != pdTRUE)
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <vEmployeeTask_handler+0x2c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f107 010c 	add.w	r1, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f001 fc04 	bl	8001e70 <xQueueReceive>
		xSemaphoreTake(xWork, 0);
 8000668:	e7f0      	b.n	800064c <vEmployeeTask_handler+0x8>
 800066a:	bf00      	nop
 800066c:	20000090 	.word	0x20000090
 8000670:	20000094 	.word	0x20000094

08000674 <vManagerTask_handler>:
		}
	}
}

void vManagerTask_handler(void *pvParameters)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	unsigned int ticket_ID;

	//Semaphore is initialized in the empty state. Increment the binary semaphore value before it can be taken
	xSemaphoreGive(xWork);
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <vManagerTask_handler+0x5c>)
 800067e:	6818      	ldr	r0, [r3, #0]
 8000680:	2300      	movs	r3, #0
 8000682:	2200      	movs	r2, #0
 8000684:	2100      	movs	r1, #0
 8000686:	f001 fa65 	bl	8001b54 <xQueueGenericSend>

	while(1)
	{
		ticket_ID = rand() & 0x1FF;
 800068a:	f003 fded 	bl	8004268 <rand>
 800068e:	4603      	mov	r3, r0
 8000690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000694:	60fb      	str	r3, [r7, #12]

		if(xQueueSend(xWorkQueue, &ticket_ID, portMAX_DELAY) != pdTRUE)
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <vManagerTask_handler+0x60>)
 8000698:	6818      	ldr	r0, [r3, #0]
 800069a:	f107 010c 	add.w	r1, r7, #12
 800069e:	2300      	movs	r3, #0
 80006a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006a4:	f001 fa56 	bl	8001b54 <xQueueGenericSend>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d1ed      	bne.n	800068a <vManagerTask_handler+0x16>

		}
		else
		{
			//manager task notifying the employee task by "giving" the token
			xSemaphoreGive(xWork);
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <vManagerTask_handler+0x5c>)
 80006b0:	6818      	ldr	r0, [r3, #0]
 80006b2:	2300      	movs	r3, #0
 80006b4:	2200      	movs	r2, #0
 80006b6:	2100      	movs	r1, #0
 80006b8:	f001 fa4c 	bl	8001b54 <xQueueGenericSend>
			taskYIELD(); //nothing else to do, yield to employee task
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <vManagerTask_handler+0x64>)
 80006be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	f3bf 8f4f 	dsb	sy
 80006c8:	f3bf 8f6f 	isb	sy
		ticket_ID = rand() & 0x1FF;
 80006cc:	e7dd      	b.n	800068a <vManagerTask_handler+0x16>
 80006ce:	bf00      	nop
 80006d0:	20000090 	.word	0x20000090
 80006d4:	20000094 	.word	0x20000094
 80006d8:	e000ed04 	.word	0xe000ed04

080006dc <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM2) {
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006ec:	d101      	bne.n	80006f2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80006ee:	f000 f93d 	bl	800096c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	4b10      	ldr	r3, [pc, #64]	; (8000754 <HAL_MspInit+0x4c>)
 8000714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000716:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <HAL_MspInit+0x4c>)
 8000718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800071c:	6453      	str	r3, [r2, #68]	; 0x44
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <HAL_MspInit+0x4c>)
 8000720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <HAL_MspInit+0x4c>)
 8000730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000732:	4a08      	ldr	r2, [pc, #32]	; (8000754 <HAL_MspInit+0x4c>)
 8000734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000738:	6413      	str	r3, [r2, #64]	; 0x40
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <HAL_MspInit+0x4c>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800

08000758 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08c      	sub	sp, #48	; 0x30
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8000768:	2200      	movs	r2, #0
 800076a:	6879      	ldr	r1, [r7, #4]
 800076c:	201c      	movs	r0, #28
 800076e:	f000 f9d5 	bl	8000b1c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8000772:	201c      	movs	r0, #28
 8000774:	f000 f9ee 	bl	8000b54 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	4b1f      	ldr	r3, [pc, #124]	; (80007fc <HAL_InitTick+0xa4>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	4a1e      	ldr	r2, [pc, #120]	; (80007fc <HAL_InitTick+0xa4>)
 8000782:	f043 0301 	orr.w	r3, r3, #1
 8000786:	6413      	str	r3, [r2, #64]	; 0x40
 8000788:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <HAL_InitTick+0xa4>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	f003 0301 	and.w	r3, r3, #1
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000794:	f107 0210 	add.w	r2, r7, #16
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4611      	mov	r1, r2
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 fe0e 	bl	80013c0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007a4:	f000 fdf8 	bl	8001398 <HAL_RCC_GetPCLK1Freq>
 80007a8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80007aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ac:	4a14      	ldr	r2, [pc, #80]	; (8000800 <HAL_InitTick+0xa8>)
 80007ae:	fba2 2303 	umull	r2, r3, r2, r3
 80007b2:	0c9b      	lsrs	r3, r3, #18
 80007b4:	3b01      	subs	r3, #1
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_InitTick+0xac>)
 80007ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 80007c0:	4b10      	ldr	r3, [pc, #64]	; (8000804 <HAL_InitTick+0xac>)
 80007c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007c6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80007c8:	4a0e      	ldr	r2, [pc, #56]	; (8000804 <HAL_InitTick+0xac>)
 80007ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007cc:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80007ce:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <HAL_InitTick+0xac>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d4:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <HAL_InitTick+0xac>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80007da:	480a      	ldr	r0, [pc, #40]	; (8000804 <HAL_InitTick+0xac>)
 80007dc:	f000 fe22 	bl	8001424 <HAL_TIM_Base_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d104      	bne.n	80007f0 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80007e6:	4807      	ldr	r0, [pc, #28]	; (8000804 <HAL_InitTick+0xac>)
 80007e8:	f000 fe51 	bl	800148e <HAL_TIM_Base_Start_IT>
 80007ec:	4603      	mov	r3, r0
 80007ee:	e000      	b.n	80007f2 <HAL_InitTick+0x9a>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80007f0:	2301      	movs	r3, #1
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	3730      	adds	r7, #48	; 0x30
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800
 8000800:	431bde83 	.word	0x431bde83
 8000804:	20012e0c 	.word	0x20012e0c

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081a:	e7fe      	b.n	800081a <HardFault_Handler+0x4>

0800081c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <MemManage_Handler+0x4>

08000822 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <BusFault_Handler+0x4>

08000828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <UsageFault_Handler+0x4>

0800082e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000840:	4802      	ldr	r0, [pc, #8]	; (800084c <TIM2_IRQHandler+0x10>)
 8000842:	f000 fe48 	bl	80014d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20012e0c 	.word	0x20012e0c

08000850 <_sbrk>:
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <_sbrk+0x50>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d102      	bne.n	8000866 <_sbrk+0x16>
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <_sbrk+0x50>)
 8000862:	4a10      	ldr	r2, [pc, #64]	; (80008a4 <_sbrk+0x54>)
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <_sbrk+0x50>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <_sbrk+0x50>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4413      	add	r3, r2
 8000874:	466a      	mov	r2, sp
 8000876:	4293      	cmp	r3, r2
 8000878:	d907      	bls.n	800088a <_sbrk+0x3a>
 800087a:	f003 fcb7 	bl	80041ec <__errno>
 800087e:	4602      	mov	r2, r0
 8000880:	230c      	movs	r3, #12
 8000882:	6013      	str	r3, [r2, #0]
 8000884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000888:	e006      	b.n	8000898 <_sbrk+0x48>
 800088a:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <_sbrk+0x50>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4413      	add	r3, r2
 8000892:	4a03      	ldr	r2, [pc, #12]	; (80008a0 <_sbrk+0x50>)
 8000894:	6013      	str	r3, [r2, #0]
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	4618      	mov	r0, r3
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000a0 	.word	0x200000a0
 80008a4:	20012e98 	.word	0x20012e98

080008a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <SystemInit+0x28>)
 80008ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b2:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <SystemInit+0x28>)
 80008b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <SystemInit+0x28>)
 80008be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008c2:	609a      	str	r2, [r3, #8]
#endif
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	e000ed00 	.word	0xe000ed00

080008d4 <Reset_Handler>:
 80008d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800090c <LoopFillZerobss+0x14>
 80008d8:	2100      	movs	r1, #0
 80008da:	e003      	b.n	80008e4 <LoopCopyDataInit>

080008dc <CopyDataInit>:
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <LoopFillZerobss+0x18>)
 80008de:	585b      	ldr	r3, [r3, r1]
 80008e0:	5043      	str	r3, [r0, r1]
 80008e2:	3104      	adds	r1, #4

080008e4 <LoopCopyDataInit>:
 80008e4:	480b      	ldr	r0, [pc, #44]	; (8000914 <LoopFillZerobss+0x1c>)
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <LoopFillZerobss+0x20>)
 80008e8:	1842      	adds	r2, r0, r1
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d3f6      	bcc.n	80008dc <CopyDataInit>
 80008ee:	4a0b      	ldr	r2, [pc, #44]	; (800091c <LoopFillZerobss+0x24>)
 80008f0:	e002      	b.n	80008f8 <LoopFillZerobss>

080008f2 <FillZerobss>:
 80008f2:	2300      	movs	r3, #0
 80008f4:	f842 3b04 	str.w	r3, [r2], #4

080008f8 <LoopFillZerobss>:
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <LoopFillZerobss+0x28>)
 80008fa:	429a      	cmp	r2, r3
 80008fc:	d3f9      	bcc.n	80008f2 <FillZerobss>
 80008fe:	f7ff ffd3 	bl	80008a8 <SystemInit>
 8000902:	f003 fc79 	bl	80041f8 <__libc_init_array>
 8000906:	f7ff fdeb 	bl	80004e0 <main>
 800090a:	4770      	bx	lr
 800090c:	20020000 	.word	0x20020000
 8000910:	08004430 	.word	0x08004430
 8000914:	20000000 	.word	0x20000000
 8000918:	20000074 	.word	0x20000074
 800091c:	20000074 	.word	0x20000074
 8000920:	20012e94 	.word	0x20012e94

08000924 <ADC_IRQHandler>:
 8000924:	e7fe      	b.n	8000924 <ADC_IRQHandler>
	...

08000928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <HAL_Init+0x40>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <HAL_Init+0x40>)
 8000932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000936:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <HAL_Init+0x40>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <HAL_Init+0x40>)
 800093e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000942:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <HAL_Init+0x40>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a07      	ldr	r2, [pc, #28]	; (8000968 <HAL_Init+0x40>)
 800094a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800094e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000950:	2003      	movs	r0, #3
 8000952:	f000 f8d8 	bl	8000b06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000956:	2000      	movs	r0, #0
 8000958:	f7ff fefe 	bl	8000758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800095c:	f7ff fed4 	bl	8000708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023c00 	.word	0x40023c00

0800096c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_IncTick+0x20>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_IncTick+0x24>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4413      	add	r3, r2
 800097c:	4a04      	ldr	r2, [pc, #16]	; (8000990 <HAL_IncTick+0x24>)
 800097e:	6013      	str	r3, [r2, #0]
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20000008 	.word	0x20000008
 8000990:	20012e4c 	.word	0x20012e4c

08000994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return uwTick;
 8000998:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <HAL_GetTick+0x14>)
 800099a:	681b      	ldr	r3, [r3, #0]
}
 800099c:	4618      	mov	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20012e4c 	.word	0x20012e4c

080009ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c8:	4013      	ands	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009de:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <__NVIC_SetPriorityGrouping+0x44>)
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	60d3      	str	r3, [r2, #12]
}
 80009e4:	bf00      	nop
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <__NVIC_GetPriorityGrouping+0x18>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	f003 0307 	and.w	r3, r3, #7
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	db0b      	blt.n	8000a3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	f003 021f 	and.w	r2, r3, #31
 8000a28:	4907      	ldr	r1, [pc, #28]	; (8000a48 <__NVIC_EnableIRQ+0x38>)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	095b      	lsrs	r3, r3, #5
 8000a30:	2001      	movs	r0, #1
 8000a32:	fa00 f202 	lsl.w	r2, r0, r2
 8000a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000e100 	.word	0xe000e100

08000a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db0a      	blt.n	8000a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	490c      	ldr	r1, [pc, #48]	; (8000a98 <__NVIC_SetPriority+0x4c>)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	0112      	lsls	r2, r2, #4
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	440b      	add	r3, r1
 8000a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a74:	e00a      	b.n	8000a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4908      	ldr	r1, [pc, #32]	; (8000a9c <__NVIC_SetPriority+0x50>)
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	f003 030f 	and.w	r3, r3, #15
 8000a82:	3b04      	subs	r3, #4
 8000a84:	0112      	lsls	r2, r2, #4
 8000a86:	b2d2      	uxtb	r2, r2
 8000a88:	440b      	add	r3, r1
 8000a8a:	761a      	strb	r2, [r3, #24]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000e100 	.word	0xe000e100
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b089      	sub	sp, #36	; 0x24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	f1c3 0307 	rsb	r3, r3, #7
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	bf28      	it	cs
 8000abe:	2304      	movcs	r3, #4
 8000ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	2b06      	cmp	r3, #6
 8000ac8:	d902      	bls.n	8000ad0 <NVIC_EncodePriority+0x30>
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3b03      	subs	r3, #3
 8000ace:	e000      	b.n	8000ad2 <NVIC_EncodePriority+0x32>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43da      	mvns	r2, r3
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	fa01 f303 	lsl.w	r3, r1, r3
 8000af2:	43d9      	mvns	r1, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	4313      	orrs	r3, r2
         );
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3724      	adds	r7, #36	; 0x24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff ff4c 	bl	80009ac <__NVIC_SetPriorityGrouping>
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
 8000b28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b2e:	f7ff ff61 	bl	80009f4 <__NVIC_GetPriorityGrouping>
 8000b32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	68b9      	ldr	r1, [r7, #8]
 8000b38:	6978      	ldr	r0, [r7, #20]
 8000b3a:	f7ff ffb1 	bl	8000aa0 <NVIC_EncodePriority>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b44:	4611      	mov	r1, r2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff ff80 	bl	8000a4c <__NVIC_SetPriority>
}
 8000b4c:	bf00      	nop
 8000b4e:	3718      	adds	r7, #24
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ff54 	bl	8000a10 <__NVIC_EnableIRQ>
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d101      	bne.n	8000b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e25b      	b.n	800103a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d075      	beq.n	8000c7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b8e:	4ba3      	ldr	r3, [pc, #652]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	f003 030c 	and.w	r3, r3, #12
 8000b96:	2b04      	cmp	r3, #4
 8000b98:	d00c      	beq.n	8000bb4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b9a:	4ba0      	ldr	r3, [pc, #640]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ba2:	2b08      	cmp	r3, #8
 8000ba4:	d112      	bne.n	8000bcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ba6:	4b9d      	ldr	r3, [pc, #628]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000bb2:	d10b      	bne.n	8000bcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bb4:	4b99      	ldr	r3, [pc, #612]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d05b      	beq.n	8000c78 <HAL_RCC_OscConfig+0x108>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d157      	bne.n	8000c78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e236      	b.n	800103a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bd4:	d106      	bne.n	8000be4 <HAL_RCC_OscConfig+0x74>
 8000bd6:	4b91      	ldr	r3, [pc, #580]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a90      	ldr	r2, [pc, #576]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000be0:	6013      	str	r3, [r2, #0]
 8000be2:	e01d      	b.n	8000c20 <HAL_RCC_OscConfig+0xb0>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bec:	d10c      	bne.n	8000c08 <HAL_RCC_OscConfig+0x98>
 8000bee:	4b8b      	ldr	r3, [pc, #556]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a8a      	ldr	r2, [pc, #552]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bf8:	6013      	str	r3, [r2, #0]
 8000bfa:	4b88      	ldr	r3, [pc, #544]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4a87      	ldr	r2, [pc, #540]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c04:	6013      	str	r3, [r2, #0]
 8000c06:	e00b      	b.n	8000c20 <HAL_RCC_OscConfig+0xb0>
 8000c08:	4b84      	ldr	r3, [pc, #528]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a83      	ldr	r2, [pc, #524]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c12:	6013      	str	r3, [r2, #0]
 8000c14:	4b81      	ldr	r3, [pc, #516]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a80      	ldr	r2, [pc, #512]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d013      	beq.n	8000c50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c28:	f7ff feb4 	bl	8000994 <HAL_GetTick>
 8000c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c2e:	e008      	b.n	8000c42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c30:	f7ff feb0 	bl	8000994 <HAL_GetTick>
 8000c34:	4602      	mov	r2, r0
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	2b64      	cmp	r3, #100	; 0x64
 8000c3c:	d901      	bls.n	8000c42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	e1fb      	b.n	800103a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c42:	4b76      	ldr	r3, [pc, #472]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d0f0      	beq.n	8000c30 <HAL_RCC_OscConfig+0xc0>
 8000c4e:	e014      	b.n	8000c7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c50:	f7ff fea0 	bl	8000994 <HAL_GetTick>
 8000c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c56:	e008      	b.n	8000c6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c58:	f7ff fe9c 	bl	8000994 <HAL_GetTick>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	2b64      	cmp	r3, #100	; 0x64
 8000c64:	d901      	bls.n	8000c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c66:	2303      	movs	r3, #3
 8000c68:	e1e7      	b.n	800103a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c6a:	4b6c      	ldr	r3, [pc, #432]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d1f0      	bne.n	8000c58 <HAL_RCC_OscConfig+0xe8>
 8000c76:	e000      	b.n	8000c7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d063      	beq.n	8000d4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c86:	4b65      	ldr	r3, [pc, #404]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	f003 030c 	and.w	r3, r3, #12
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d00b      	beq.n	8000caa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c92:	4b62      	ldr	r3, [pc, #392]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c9a:	2b08      	cmp	r3, #8
 8000c9c:	d11c      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c9e:	4b5f      	ldr	r3, [pc, #380]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d116      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000caa:	4b5c      	ldr	r3, [pc, #368]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d005      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x152>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d001      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e1bb      	b.n	800103a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cc2:	4b56      	ldr	r3, [pc, #344]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	691b      	ldr	r3, [r3, #16]
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	4952      	ldr	r1, [pc, #328]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cd6:	e03a      	b.n	8000d4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d020      	beq.n	8000d22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ce0:	4b4f      	ldr	r3, [pc, #316]	; (8000e20 <HAL_RCC_OscConfig+0x2b0>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ce6:	f7ff fe55 	bl	8000994 <HAL_GetTick>
 8000cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cec:	e008      	b.n	8000d00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cee:	f7ff fe51 	bl	8000994 <HAL_GetTick>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d901      	bls.n	8000d00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	e19c      	b.n	800103a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d00:	4b46      	ldr	r3, [pc, #280]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	f003 0302 	and.w	r3, r3, #2
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d0f0      	beq.n	8000cee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d0c:	4b43      	ldr	r3, [pc, #268]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	691b      	ldr	r3, [r3, #16]
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	4940      	ldr	r1, [pc, #256]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	600b      	str	r3, [r1, #0]
 8000d20:	e015      	b.n	8000d4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d22:	4b3f      	ldr	r3, [pc, #252]	; (8000e20 <HAL_RCC_OscConfig+0x2b0>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d28:	f7ff fe34 	bl	8000994 <HAL_GetTick>
 8000d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d2e:	e008      	b.n	8000d42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d30:	f7ff fe30 	bl	8000994 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d901      	bls.n	8000d42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	e17b      	b.n	800103a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d42:	4b36      	ldr	r3, [pc, #216]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d1f0      	bne.n	8000d30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 0308 	and.w	r3, r3, #8
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d030      	beq.n	8000dbc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d016      	beq.n	8000d90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d62:	4b30      	ldr	r3, [pc, #192]	; (8000e24 <HAL_RCC_OscConfig+0x2b4>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d68:	f7ff fe14 	bl	8000994 <HAL_GetTick>
 8000d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d6e:	e008      	b.n	8000d82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d70:	f7ff fe10 	bl	8000994 <HAL_GetTick>
 8000d74:	4602      	mov	r2, r0
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d901      	bls.n	8000d82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	e15b      	b.n	800103a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d82:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000d84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0f0      	beq.n	8000d70 <HAL_RCC_OscConfig+0x200>
 8000d8e:	e015      	b.n	8000dbc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d90:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <HAL_RCC_OscConfig+0x2b4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d96:	f7ff fdfd 	bl	8000994 <HAL_GetTick>
 8000d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d9c:	e008      	b.n	8000db0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d9e:	f7ff fdf9 	bl	8000994 <HAL_GetTick>
 8000da2:	4602      	mov	r2, r0
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d901      	bls.n	8000db0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000dac:	2303      	movs	r3, #3
 8000dae:	e144      	b.n	800103a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000db0:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1f0      	bne.n	8000d9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 0304 	and.w	r3, r3, #4
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	f000 80a0 	beq.w	8000f0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d10f      	bne.n	8000dfa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <HAL_RCC_OscConfig+0x2ac>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000df6:	2301      	movs	r3, #1
 8000df8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_RCC_OscConfig+0x2b8>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d121      	bne.n	8000e4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_RCC_OscConfig+0x2b8>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <HAL_RCC_OscConfig+0x2b8>)
 8000e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e12:	f7ff fdbf 	bl	8000994 <HAL_GetTick>
 8000e16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e18:	e011      	b.n	8000e3e <HAL_RCC_OscConfig+0x2ce>
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	42470000 	.word	0x42470000
 8000e24:	42470e80 	.word	0x42470e80
 8000e28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e2c:	f7ff fdb2 	bl	8000994 <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d901      	bls.n	8000e3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	e0fd      	b.n	800103a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e3e:	4b81      	ldr	r3, [pc, #516]	; (8001044 <HAL_RCC_OscConfig+0x4d4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d0f0      	beq.n	8000e2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d106      	bne.n	8000e60 <HAL_RCC_OscConfig+0x2f0>
 8000e52:	4b7d      	ldr	r3, [pc, #500]	; (8001048 <HAL_RCC_OscConfig+0x4d8>)
 8000e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e56:	4a7c      	ldr	r2, [pc, #496]	; (8001048 <HAL_RCC_OscConfig+0x4d8>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8000e5e:	e01c      	b.n	8000e9a <HAL_RCC_OscConfig+0x32a>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	2b05      	cmp	r3, #5
 8000e66:	d10c      	bne.n	8000e82 <HAL_RCC_OscConfig+0x312>
 8000e68:	4b77      	ldr	r3, [pc, #476]	; (8001048 <HAL_RCC_OscConfig+0x4d8>)
 8000e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e6c:	4a76      	ldr	r2, [pc, #472]	; (8001048 <HAL_RCC_OscConfig+0x4d8>)
 8000e6e:	f043 0304 	orr.w	r3, r3, #4
 8000e72:	6713      	str	r3, [r2, #112]	; 0x70
 8000e74:	4b74      	ldr	r3, [pc, #464]	; (8001048 <HAL_RCC_OscConfig+0x4d8>)
 8000e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e78:	4a73      	ldr	r2, [pc, #460]	; (8001048 <HAL_RCC_OscConfig+0x4d8>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8000e80:	e00b      	b.n	8000e9a <HAL_RCC_OscConfig+0x32a>
 8000e82:	4b71      	ldr	r3, [pc, #452]	; (8001048 <HAL_RCC_OscConfig+0x4d8>)
 8000e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e86:	4a70      	ldr	r2, [pc, #448]	; (8001048 <HAL_RCC_OscConfig+0x4d8>)
 8000e88:	f023 0301 	bic.w	r3, r3, #1
 8000e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8000e8e:	4b6e      	ldr	r3, [pc, #440]	; (8001048 <HAL_RCC_OscConfig+0x4d8>)
 8000e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e92:	4a6d      	ldr	r2, [pc, #436]	; (8001048 <HAL_RCC_OscConfig+0x4d8>)
 8000e94:	f023 0304 	bic.w	r3, r3, #4
 8000e98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d015      	beq.n	8000ece <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ea2:	f7ff fd77 	bl	8000994 <HAL_GetTick>
 8000ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ea8:	e00a      	b.n	8000ec0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eaa:	f7ff fd73 	bl	8000994 <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d901      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e0bc      	b.n	800103a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec0:	4b61      	ldr	r3, [pc, #388]	; (8001048 <HAL_RCC_OscConfig+0x4d8>)
 8000ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d0ee      	beq.n	8000eaa <HAL_RCC_OscConfig+0x33a>
 8000ecc:	e014      	b.n	8000ef8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ece:	f7ff fd61 	bl	8000994 <HAL_GetTick>
 8000ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ed4:	e00a      	b.n	8000eec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ed6:	f7ff fd5d 	bl	8000994 <HAL_GetTick>
 8000eda:	4602      	mov	r2, r0
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d901      	bls.n	8000eec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e0a6      	b.n	800103a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eec:	4b56      	ldr	r3, [pc, #344]	; (8001048 <HAL_RCC_OscConfig+0x4d8>)
 8000eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1ee      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ef8:	7dfb      	ldrb	r3, [r7, #23]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d105      	bne.n	8000f0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000efe:	4b52      	ldr	r3, [pc, #328]	; (8001048 <HAL_RCC_OscConfig+0x4d8>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a51      	ldr	r2, [pc, #324]	; (8001048 <HAL_RCC_OscConfig+0x4d8>)
 8000f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f000 8092 	beq.w	8001038 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f14:	4b4c      	ldr	r3, [pc, #304]	; (8001048 <HAL_RCC_OscConfig+0x4d8>)
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f003 030c 	and.w	r3, r3, #12
 8000f1c:	2b08      	cmp	r3, #8
 8000f1e:	d05c      	beq.n	8000fda <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d141      	bne.n	8000fac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f28:	4b48      	ldr	r3, [pc, #288]	; (800104c <HAL_RCC_OscConfig+0x4dc>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2e:	f7ff fd31 	bl	8000994 <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f34:	e008      	b.n	8000f48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f36:	f7ff fd2d 	bl	8000994 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e078      	b.n	800103a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f48:	4b3f      	ldr	r3, [pc, #252]	; (8001048 <HAL_RCC_OscConfig+0x4d8>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1f0      	bne.n	8000f36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69da      	ldr	r2, [r3, #28]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a1b      	ldr	r3, [r3, #32]
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f62:	019b      	lsls	r3, r3, #6
 8000f64:	431a      	orrs	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6a:	085b      	lsrs	r3, r3, #1
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	041b      	lsls	r3, r3, #16
 8000f70:	431a      	orrs	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f76:	061b      	lsls	r3, r3, #24
 8000f78:	4933      	ldr	r1, [pc, #204]	; (8001048 <HAL_RCC_OscConfig+0x4d8>)
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f7e:	4b33      	ldr	r3, [pc, #204]	; (800104c <HAL_RCC_OscConfig+0x4dc>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f84:	f7ff fd06 	bl	8000994 <HAL_GetTick>
 8000f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f8a:	e008      	b.n	8000f9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f8c:	f7ff fd02 	bl	8000994 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d901      	bls.n	8000f9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e04d      	b.n	800103a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f9e:	4b2a      	ldr	r3, [pc, #168]	; (8001048 <HAL_RCC_OscConfig+0x4d8>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0f0      	beq.n	8000f8c <HAL_RCC_OscConfig+0x41c>
 8000faa:	e045      	b.n	8001038 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fac:	4b27      	ldr	r3, [pc, #156]	; (800104c <HAL_RCC_OscConfig+0x4dc>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb2:	f7ff fcef 	bl	8000994 <HAL_GetTick>
 8000fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fb8:	e008      	b.n	8000fcc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fba:	f7ff fceb 	bl	8000994 <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d901      	bls.n	8000fcc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e036      	b.n	800103a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fcc:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <HAL_RCC_OscConfig+0x4d8>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1f0      	bne.n	8000fba <HAL_RCC_OscConfig+0x44a>
 8000fd8:	e02e      	b.n	8001038 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d101      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e029      	b.n	800103a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000fe6:	4b18      	ldr	r3, [pc, #96]	; (8001048 <HAL_RCC_OscConfig+0x4d8>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d11c      	bne.n	8001034 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001004:	429a      	cmp	r2, r3
 8001006:	d115      	bne.n	8001034 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800100e:	4013      	ands	r3, r2
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001014:	4293      	cmp	r3, r2
 8001016:	d10d      	bne.n	8001034 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001022:	429a      	cmp	r2, r3
 8001024:	d106      	bne.n	8001034 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001030:	429a      	cmp	r2, r3
 8001032:	d001      	beq.n	8001038 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40007000 	.word	0x40007000
 8001048:	40023800 	.word	0x40023800
 800104c:	42470060 	.word	0x42470060

08001050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d101      	bne.n	8001064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e0cc      	b.n	80011fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001064:	4b68      	ldr	r3, [pc, #416]	; (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 030f 	and.w	r3, r3, #15
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d90c      	bls.n	800108c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001072:	4b65      	ldr	r3, [pc, #404]	; (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800107a:	4b63      	ldr	r3, [pc, #396]	; (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	429a      	cmp	r2, r3
 8001086:	d001      	beq.n	800108c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e0b8      	b.n	80011fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d020      	beq.n	80010da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d005      	beq.n	80010b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010a4:	4b59      	ldr	r3, [pc, #356]	; (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	4a58      	ldr	r2, [pc, #352]	; (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80010aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0308 	and.w	r3, r3, #8
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d005      	beq.n	80010c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010bc:	4b53      	ldr	r3, [pc, #332]	; (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	4a52      	ldr	r2, [pc, #328]	; (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80010c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010c8:	4b50      	ldr	r3, [pc, #320]	; (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	494d      	ldr	r1, [pc, #308]	; (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80010d6:	4313      	orrs	r3, r2
 80010d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d044      	beq.n	8001170 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d107      	bne.n	80010fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ee:	4b47      	ldr	r3, [pc, #284]	; (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d119      	bne.n	800112e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e07f      	b.n	80011fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b02      	cmp	r3, #2
 8001104:	d003      	beq.n	800110e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800110a:	2b03      	cmp	r3, #3
 800110c:	d107      	bne.n	800111e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800110e:	4b3f      	ldr	r3, [pc, #252]	; (800120c <HAL_RCC_ClockConfig+0x1bc>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d109      	bne.n	800112e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e06f      	b.n	80011fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800111e:	4b3b      	ldr	r3, [pc, #236]	; (800120c <HAL_RCC_ClockConfig+0x1bc>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e067      	b.n	80011fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800112e:	4b37      	ldr	r3, [pc, #220]	; (800120c <HAL_RCC_ClockConfig+0x1bc>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f023 0203 	bic.w	r2, r3, #3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	4934      	ldr	r1, [pc, #208]	; (800120c <HAL_RCC_ClockConfig+0x1bc>)
 800113c:	4313      	orrs	r3, r2
 800113e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001140:	f7ff fc28 	bl	8000994 <HAL_GetTick>
 8001144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001146:	e00a      	b.n	800115e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001148:	f7ff fc24 	bl	8000994 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	f241 3288 	movw	r2, #5000	; 0x1388
 8001156:	4293      	cmp	r3, r2
 8001158:	d901      	bls.n	800115e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e04f      	b.n	80011fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800115e:	4b2b      	ldr	r3, [pc, #172]	; (800120c <HAL_RCC_ClockConfig+0x1bc>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 020c 	and.w	r2, r3, #12
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	429a      	cmp	r2, r3
 800116e:	d1eb      	bne.n	8001148 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001170:	4b25      	ldr	r3, [pc, #148]	; (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 030f 	and.w	r3, r3, #15
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	429a      	cmp	r2, r3
 800117c:	d20c      	bcs.n	8001198 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800117e:	4b22      	ldr	r3, [pc, #136]	; (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	b2d2      	uxtb	r2, r2
 8001184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001186:	4b20      	ldr	r3, [pc, #128]	; (8001208 <HAL_RCC_ClockConfig+0x1b8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	d001      	beq.n	8001198 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e032      	b.n	80011fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d008      	beq.n	80011b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	4916      	ldr	r1, [pc, #88]	; (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d009      	beq.n	80011d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	490e      	ldr	r1, [pc, #56]	; (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011d6:	f000 f821 	bl	800121c <HAL_RCC_GetSysClockFreq>
 80011da:	4601      	mov	r1, r0
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <HAL_RCC_ClockConfig+0x1bc>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	091b      	lsrs	r3, r3, #4
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <HAL_RCC_ClockConfig+0x1c0>)
 80011e8:	5cd3      	ldrb	r3, [r2, r3]
 80011ea:	fa21 f303 	lsr.w	r3, r1, r3
 80011ee:	4a09      	ldr	r2, [pc, #36]	; (8001214 <HAL_RCC_ClockConfig+0x1c4>)
 80011f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <HAL_RCC_ClockConfig+0x1c8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff faae 	bl	8000758 <HAL_InitTick>

  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40023c00 	.word	0x40023c00
 800120c:	40023800 	.word	0x40023800
 8001210:	08004408 	.word	0x08004408
 8001214:	20000000 	.word	0x20000000
 8001218:	20000004 	.word	0x20000004

0800121c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800121c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	2300      	movs	r3, #0
 800122c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001232:	4b50      	ldr	r3, [pc, #320]	; (8001374 <HAL_RCC_GetSysClockFreq+0x158>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f003 030c 	and.w	r3, r3, #12
 800123a:	2b04      	cmp	r3, #4
 800123c:	d007      	beq.n	800124e <HAL_RCC_GetSysClockFreq+0x32>
 800123e:	2b08      	cmp	r3, #8
 8001240:	d008      	beq.n	8001254 <HAL_RCC_GetSysClockFreq+0x38>
 8001242:	2b00      	cmp	r3, #0
 8001244:	f040 808d 	bne.w	8001362 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001248:	4b4b      	ldr	r3, [pc, #300]	; (8001378 <HAL_RCC_GetSysClockFreq+0x15c>)
 800124a:	60bb      	str	r3, [r7, #8]
       break;
 800124c:	e08c      	b.n	8001368 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800124e:	4b4b      	ldr	r3, [pc, #300]	; (800137c <HAL_RCC_GetSysClockFreq+0x160>)
 8001250:	60bb      	str	r3, [r7, #8]
      break;
 8001252:	e089      	b.n	8001368 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001254:	4b47      	ldr	r3, [pc, #284]	; (8001374 <HAL_RCC_GetSysClockFreq+0x158>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800125c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800125e:	4b45      	ldr	r3, [pc, #276]	; (8001374 <HAL_RCC_GetSysClockFreq+0x158>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d023      	beq.n	80012b2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800126a:	4b42      	ldr	r3, [pc, #264]	; (8001374 <HAL_RCC_GetSysClockFreq+0x158>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	099b      	lsrs	r3, r3, #6
 8001270:	f04f 0400 	mov.w	r4, #0
 8001274:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	ea03 0501 	and.w	r5, r3, r1
 8001280:	ea04 0602 	and.w	r6, r4, r2
 8001284:	4a3d      	ldr	r2, [pc, #244]	; (800137c <HAL_RCC_GetSysClockFreq+0x160>)
 8001286:	fb02 f106 	mul.w	r1, r2, r6
 800128a:	2200      	movs	r2, #0
 800128c:	fb02 f205 	mul.w	r2, r2, r5
 8001290:	440a      	add	r2, r1
 8001292:	493a      	ldr	r1, [pc, #232]	; (800137c <HAL_RCC_GetSysClockFreq+0x160>)
 8001294:	fba5 0101 	umull	r0, r1, r5, r1
 8001298:	1853      	adds	r3, r2, r1
 800129a:	4619      	mov	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f04f 0400 	mov.w	r4, #0
 80012a2:	461a      	mov	r2, r3
 80012a4:	4623      	mov	r3, r4
 80012a6:	f7fe ff9b 	bl	80001e0 <__aeabi_uldivmod>
 80012aa:	4603      	mov	r3, r0
 80012ac:	460c      	mov	r4, r1
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	e049      	b.n	8001346 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012b2:	4b30      	ldr	r3, [pc, #192]	; (8001374 <HAL_RCC_GetSysClockFreq+0x158>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	099b      	lsrs	r3, r3, #6
 80012b8:	f04f 0400 	mov.w	r4, #0
 80012bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012c0:	f04f 0200 	mov.w	r2, #0
 80012c4:	ea03 0501 	and.w	r5, r3, r1
 80012c8:	ea04 0602 	and.w	r6, r4, r2
 80012cc:	4629      	mov	r1, r5
 80012ce:	4632      	mov	r2, r6
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	f04f 0400 	mov.w	r4, #0
 80012d8:	0154      	lsls	r4, r2, #5
 80012da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012de:	014b      	lsls	r3, r1, #5
 80012e0:	4619      	mov	r1, r3
 80012e2:	4622      	mov	r2, r4
 80012e4:	1b49      	subs	r1, r1, r5
 80012e6:	eb62 0206 	sbc.w	r2, r2, r6
 80012ea:	f04f 0300 	mov.w	r3, #0
 80012ee:	f04f 0400 	mov.w	r4, #0
 80012f2:	0194      	lsls	r4, r2, #6
 80012f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80012f8:	018b      	lsls	r3, r1, #6
 80012fa:	1a5b      	subs	r3, r3, r1
 80012fc:	eb64 0402 	sbc.w	r4, r4, r2
 8001300:	f04f 0100 	mov.w	r1, #0
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	00e2      	lsls	r2, r4, #3
 800130a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800130e:	00d9      	lsls	r1, r3, #3
 8001310:	460b      	mov	r3, r1
 8001312:	4614      	mov	r4, r2
 8001314:	195b      	adds	r3, r3, r5
 8001316:	eb44 0406 	adc.w	r4, r4, r6
 800131a:	f04f 0100 	mov.w	r1, #0
 800131e:	f04f 0200 	mov.w	r2, #0
 8001322:	02a2      	lsls	r2, r4, #10
 8001324:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001328:	0299      	lsls	r1, r3, #10
 800132a:	460b      	mov	r3, r1
 800132c:	4614      	mov	r4, r2
 800132e:	4618      	mov	r0, r3
 8001330:	4621      	mov	r1, r4
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f04f 0400 	mov.w	r4, #0
 8001338:	461a      	mov	r2, r3
 800133a:	4623      	mov	r3, r4
 800133c:	f7fe ff50 	bl	80001e0 <__aeabi_uldivmod>
 8001340:	4603      	mov	r3, r0
 8001342:	460c      	mov	r4, r1
 8001344:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <HAL_RCC_GetSysClockFreq+0x158>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	0c1b      	lsrs	r3, r3, #16
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	3301      	adds	r3, #1
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	fbb2 f3f3 	udiv	r3, r2, r3
 800135e:	60bb      	str	r3, [r7, #8]
      break;
 8001360:	e002      	b.n	8001368 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001364:	60bb      	str	r3, [r7, #8]
      break;
 8001366:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001368:	68bb      	ldr	r3, [r7, #8]
}
 800136a:	4618      	mov	r0, r3
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	00f42400 	.word	0x00f42400
 800137c:	017d7840 	.word	0x017d7840

08001380 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <HAL_RCC_GetHCLKFreq+0x14>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000000 	.word	0x20000000

08001398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800139c:	f7ff fff0 	bl	8001380 <HAL_RCC_GetHCLKFreq>
 80013a0:	4601      	mov	r1, r0
 80013a2:	4b05      	ldr	r3, [pc, #20]	; (80013b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	0a9b      	lsrs	r3, r3, #10
 80013a8:	f003 0307 	and.w	r3, r3, #7
 80013ac:	4a03      	ldr	r2, [pc, #12]	; (80013bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80013ae:	5cd3      	ldrb	r3, [r2, r3]
 80013b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40023800 	.word	0x40023800
 80013bc:	08004418 	.word	0x08004418

080013c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	220f      	movs	r2, #15
 80013ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_RCC_GetClockConfig+0x5c>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f003 0203 	and.w	r2, r3, #3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <HAL_RCC_GetClockConfig+0x5c>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <HAL_RCC_GetClockConfig+0x5c>)
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_RCC_GetClockConfig+0x5c>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	08db      	lsrs	r3, r3, #3
 80013fa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001402:	4b07      	ldr	r3, [pc, #28]	; (8001420 <HAL_RCC_GetClockConfig+0x60>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 020f 	and.w	r2, r3, #15
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	601a      	str	r2, [r3, #0]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	40023c00 	.word	0x40023c00

08001424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e01d      	b.n	8001472 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d106      	bne.n	8001450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 f815 	bl	800147a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2202      	movs	r2, #2
 8001454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3304      	adds	r3, #4
 8001460:	4619      	mov	r1, r3
 8001462:	4610      	mov	r0, r2
 8001464:	f000 f968 	bl	8001738 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800148e:	b480      	push	{r7}
 8001490:	b085      	sub	sp, #20
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f042 0201 	orr.w	r2, r2, #1
 80014a4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2b06      	cmp	r3, #6
 80014b6:	d007      	beq.n	80014c8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 0201 	orr.w	r2, r2, #1
 80014c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d122      	bne.n	8001532 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d11b      	bne.n	8001532 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f06f 0202 	mvn.w	r2, #2
 8001502:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 f8ee 	bl	80016fa <HAL_TIM_IC_CaptureCallback>
 800151e:	e005      	b.n	800152c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f000 f8e0 	bl	80016e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 f8f1 	bl	800170e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	2b04      	cmp	r3, #4
 800153e:	d122      	bne.n	8001586 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	2b04      	cmp	r3, #4
 800154c:	d11b      	bne.n	8001586 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f06f 0204 	mvn.w	r2, #4
 8001556:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2202      	movs	r2, #2
 800155c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f000 f8c4 	bl	80016fa <HAL_TIM_IC_CaptureCallback>
 8001572:	e005      	b.n	8001580 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 f8b6 	bl	80016e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 f8c7 	bl	800170e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	f003 0308 	and.w	r3, r3, #8
 8001590:	2b08      	cmp	r3, #8
 8001592:	d122      	bne.n	80015da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d11b      	bne.n	80015da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f06f 0208 	mvn.w	r2, #8
 80015aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2204      	movs	r2, #4
 80015b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 f89a 	bl	80016fa <HAL_TIM_IC_CaptureCallback>
 80015c6:	e005      	b.n	80015d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 f88c 	bl	80016e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f89d 	bl	800170e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	f003 0310 	and.w	r3, r3, #16
 80015e4:	2b10      	cmp	r3, #16
 80015e6:	d122      	bne.n	800162e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	f003 0310 	and.w	r3, r3, #16
 80015f2:	2b10      	cmp	r3, #16
 80015f4:	d11b      	bne.n	800162e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f06f 0210 	mvn.w	r2, #16
 80015fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2208      	movs	r2, #8
 8001604:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 f870 	bl	80016fa <HAL_TIM_IC_CaptureCallback>
 800161a:	e005      	b.n	8001628 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 f862 	bl	80016e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 f873 	bl	800170e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b01      	cmp	r3, #1
 800163a:	d10e      	bne.n	800165a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b01      	cmp	r3, #1
 8001648:	d107      	bne.n	800165a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f06f 0201 	mvn.w	r2, #1
 8001652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff f841 	bl	80006dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001664:	2b80      	cmp	r3, #128	; 0x80
 8001666:	d10e      	bne.n	8001686 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001672:	2b80      	cmp	r3, #128	; 0x80
 8001674:	d107      	bne.n	8001686 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800167e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 f8e3 	bl	800184c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001690:	2b40      	cmp	r3, #64	; 0x40
 8001692:	d10e      	bne.n	80016b2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800169e:	2b40      	cmp	r3, #64	; 0x40
 80016a0:	d107      	bne.n	80016b2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 f838 	bl	8001722 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	f003 0320 	and.w	r3, r3, #32
 80016bc:	2b20      	cmp	r3, #32
 80016be:	d10e      	bne.n	80016de <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	f003 0320 	and.w	r3, r3, #32
 80016ca:	2b20      	cmp	r3, #32
 80016cc:	d107      	bne.n	80016de <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f06f 0220 	mvn.w	r2, #32
 80016d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 f8ad 	bl	8001838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80016fa:	b480      	push	{r7}
 80016fc:	b083      	sub	sp, #12
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4a34      	ldr	r2, [pc, #208]	; (800181c <TIM_Base_SetConfig+0xe4>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d00f      	beq.n	8001770 <TIM_Base_SetConfig+0x38>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001756:	d00b      	beq.n	8001770 <TIM_Base_SetConfig+0x38>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a31      	ldr	r2, [pc, #196]	; (8001820 <TIM_Base_SetConfig+0xe8>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d007      	beq.n	8001770 <TIM_Base_SetConfig+0x38>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a30      	ldr	r2, [pc, #192]	; (8001824 <TIM_Base_SetConfig+0xec>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d003      	beq.n	8001770 <TIM_Base_SetConfig+0x38>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a2f      	ldr	r2, [pc, #188]	; (8001828 <TIM_Base_SetConfig+0xf0>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d108      	bne.n	8001782 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	4313      	orrs	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a25      	ldr	r2, [pc, #148]	; (800181c <TIM_Base_SetConfig+0xe4>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d01b      	beq.n	80017c2 <TIM_Base_SetConfig+0x8a>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001790:	d017      	beq.n	80017c2 <TIM_Base_SetConfig+0x8a>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a22      	ldr	r2, [pc, #136]	; (8001820 <TIM_Base_SetConfig+0xe8>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d013      	beq.n	80017c2 <TIM_Base_SetConfig+0x8a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a21      	ldr	r2, [pc, #132]	; (8001824 <TIM_Base_SetConfig+0xec>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d00f      	beq.n	80017c2 <TIM_Base_SetConfig+0x8a>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a20      	ldr	r2, [pc, #128]	; (8001828 <TIM_Base_SetConfig+0xf0>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d00b      	beq.n	80017c2 <TIM_Base_SetConfig+0x8a>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a1f      	ldr	r2, [pc, #124]	; (800182c <TIM_Base_SetConfig+0xf4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d007      	beq.n	80017c2 <TIM_Base_SetConfig+0x8a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a1e      	ldr	r2, [pc, #120]	; (8001830 <TIM_Base_SetConfig+0xf8>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d003      	beq.n	80017c2 <TIM_Base_SetConfig+0x8a>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a1d      	ldr	r2, [pc, #116]	; (8001834 <TIM_Base_SetConfig+0xfc>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d108      	bne.n	80017d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	4313      	orrs	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a08      	ldr	r2, [pc, #32]	; (800181c <TIM_Base_SetConfig+0xe4>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d103      	bne.n	8001808 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	691a      	ldr	r2, [r3, #16]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	615a      	str	r2, [r3, #20]
}
 800180e:	bf00      	nop
 8001810:	3714      	adds	r7, #20
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40010000 	.word	0x40010000
 8001820:	40000400 	.word	0x40000400
 8001824:	40000800 	.word	0x40000800
 8001828:	40000c00 	.word	0x40000c00
 800182c:	40014000 	.word	0x40014000
 8001830:	40014400 	.word	0x40014400
 8001834:	40014800 	.word	0x40014800

08001838 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f103 0208 	add.w	r2, r3, #8
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001878:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f103 0208 	add.w	r2, r3, #8
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f103 0208 	add.w	r2, r3, #8
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80018ba:	b480      	push	{r7}
 80018bc:	b085      	sub	sp, #20
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	601a      	str	r2, [r3, #0]
}
 80018f6:	bf00      	nop
 80018f8:	3714      	adds	r7, #20
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001902:	b480      	push	{r7}
 8001904:	b085      	sub	sp, #20
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001918:	d103      	bne.n	8001922 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	e00c      	b.n	800193c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3308      	adds	r3, #8
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	e002      	b.n	8001930 <vListInsert+0x2e>
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	429a      	cmp	r2, r3
 800193a:	d2f6      	bcs.n	800192a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	601a      	str	r2, [r3, #0]
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6892      	ldr	r2, [r2, #8]
 800198a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6852      	ldr	r2, [r2, #4]
 8001994:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	429a      	cmp	r2, r3
 800199e:	d103      	bne.n	80019a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	1e5a      	subs	r2, r3, #1
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d109      	bne.n	80019f0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80019dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019e0:	f383 8811 	msr	BASEPRI, r3
 80019e4:	f3bf 8f6f 	isb	sy
 80019e8:	f3bf 8f4f 	dsb	sy
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	e7fe      	b.n	80019ee <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80019f0:	f002 f90c 	bl	8003c0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019fc:	68f9      	ldr	r1, [r7, #12]
 80019fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a00:	fb01 f303 	mul.w	r3, r1, r3
 8001a04:	441a      	add	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a20:	3b01      	subs	r3, #1
 8001a22:	68f9      	ldr	r1, [r7, #12]
 8001a24:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a26:	fb01 f303 	mul.w	r3, r1, r3
 8001a2a:	441a      	add	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	22ff      	movs	r2, #255	; 0xff
 8001a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	22ff      	movs	r2, #255	; 0xff
 8001a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d114      	bne.n	8001a70 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d01a      	beq.n	8001a84 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	3310      	adds	r3, #16
 8001a52:	4618      	mov	r0, r3
 8001a54:	f001 f91c 	bl	8002c90 <xTaskRemoveFromEventList>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d012      	beq.n	8001a84 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <xQueueGenericReset+0xcc>)
 8001a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	f3bf 8f4f 	dsb	sy
 8001a6a:	f3bf 8f6f 	isb	sy
 8001a6e:	e009      	b.n	8001a84 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	3310      	adds	r3, #16
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fef3 	bl	8001860 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	3324      	adds	r3, #36	; 0x24
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff feee 	bl	8001860 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001a84:	f002 f8f0 	bl	8003c68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001a88:	2301      	movs	r3, #1
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	e000ed04 	.word	0xe000ed04

08001a98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d109      	bne.n	8001ac0 <xQueueGenericCreate+0x28>
 8001aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ab0:	f383 8811 	msr	BASEPRI, r3
 8001ab4:	f3bf 8f6f 	isb	sy
 8001ab8:	f3bf 8f4f 	dsb	sy
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	e7fe      	b.n	8001abe <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d102      	bne.n	8001acc <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
 8001aca:	e004      	b.n	8001ad6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	fb02 f303 	mul.w	r3, r2, r3
 8001ad4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3350      	adds	r3, #80	; 0x50
 8001ada:	4618      	mov	r0, r3
 8001adc:	f002 f9b0 	bl	8003e40 <pvPortMalloc>
 8001ae0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00d      	beq.n	8001b04 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	3350      	adds	r3, #80	; 0x50
 8001af0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001af2:	79fa      	ldrb	r2, [r7, #7]
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	4613      	mov	r3, r2
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 f805 	bl	8001b0e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001b04:	69bb      	ldr	r3, [r7, #24]
	}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3720      	adds	r7, #32
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b084      	sub	sp, #16
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
 8001b1a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d103      	bne.n	8001b2a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	e002      	b.n	8001b30 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	68ba      	ldr	r2, [r7, #8]
 8001b3a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	69b8      	ldr	r0, [r7, #24]
 8001b40:	f7ff ff42 	bl	80019c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	78fa      	ldrb	r2, [r7, #3]
 8001b48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001b4c:	bf00      	nop
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08e      	sub	sp, #56	; 0x38
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
 8001b60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001b62:	2300      	movs	r3, #0
 8001b64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d109      	bne.n	8001b84 <xQueueGenericSend+0x30>
 8001b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b74:	f383 8811 	msr	BASEPRI, r3
 8001b78:	f3bf 8f6f 	isb	sy
 8001b7c:	f3bf 8f4f 	dsb	sy
 8001b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b82:	e7fe      	b.n	8001b82 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d103      	bne.n	8001b92 <xQueueGenericSend+0x3e>
 8001b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <xQueueGenericSend+0x42>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <xQueueGenericSend+0x44>
 8001b96:	2300      	movs	r3, #0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d109      	bne.n	8001bb0 <xQueueGenericSend+0x5c>
 8001b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ba0:	f383 8811 	msr	BASEPRI, r3
 8001ba4:	f3bf 8f6f 	isb	sy
 8001ba8:	f3bf 8f4f 	dsb	sy
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
 8001bae:	e7fe      	b.n	8001bae <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d103      	bne.n	8001bbe <xQueueGenericSend+0x6a>
 8001bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d101      	bne.n	8001bc2 <xQueueGenericSend+0x6e>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <xQueueGenericSend+0x70>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d109      	bne.n	8001bdc <xQueueGenericSend+0x88>
 8001bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bcc:	f383 8811 	msr	BASEPRI, r3
 8001bd0:	f3bf 8f6f 	isb	sy
 8001bd4:	f3bf 8f4f 	dsb	sy
 8001bd8:	623b      	str	r3, [r7, #32]
 8001bda:	e7fe      	b.n	8001bda <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001bdc:	f001 f9f0 	bl	8002fc0 <xTaskGetSchedulerState>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d102      	bne.n	8001bec <xQueueGenericSend+0x98>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <xQueueGenericSend+0x9c>
 8001bec:	2301      	movs	r3, #1
 8001bee:	e000      	b.n	8001bf2 <xQueueGenericSend+0x9e>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d109      	bne.n	8001c0a <xQueueGenericSend+0xb6>
 8001bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bfa:	f383 8811 	msr	BASEPRI, r3
 8001bfe:	f3bf 8f6f 	isb	sy
 8001c02:	f3bf 8f4f 	dsb	sy
 8001c06:	61fb      	str	r3, [r7, #28]
 8001c08:	e7fe      	b.n	8001c08 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001c0a:	f001 ffff 	bl	8003c0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d302      	bcc.n	8001c20 <xQueueGenericSend+0xcc>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d129      	bne.n	8001c74 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	68b9      	ldr	r1, [r7, #8]
 8001c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c26:	f000 fb1f 	bl	8002268 <prvCopyDataToQueue>
 8001c2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d010      	beq.n	8001c56 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c36:	3324      	adds	r3, #36	; 0x24
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f001 f829 	bl	8002c90 <xTaskRemoveFromEventList>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d013      	beq.n	8001c6c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001c44:	4b3f      	ldr	r3, [pc, #252]	; (8001d44 <xQueueGenericSend+0x1f0>)
 8001c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	f3bf 8f4f 	dsb	sy
 8001c50:	f3bf 8f6f 	isb	sy
 8001c54:	e00a      	b.n	8001c6c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d007      	beq.n	8001c6c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001c5c:	4b39      	ldr	r3, [pc, #228]	; (8001d44 <xQueueGenericSend+0x1f0>)
 8001c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	f3bf 8f4f 	dsb	sy
 8001c68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001c6c:	f001 fffc 	bl	8003c68 <vPortExitCritical>
				return pdPASS;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e063      	b.n	8001d3c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d103      	bne.n	8001c82 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001c7a:	f001 fff5 	bl	8003c68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e05c      	b.n	8001d3c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d106      	bne.n	8001c96 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f001 f861 	bl	8002d54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001c92:	2301      	movs	r3, #1
 8001c94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001c96:	f001 ffe7 	bl	8003c68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001c9a:	f000 fddf 	bl	800285c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001c9e:	f001 ffb5 	bl	8003c0c <vPortEnterCritical>
 8001ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ca8:	b25b      	sxtb	r3, r3
 8001caa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cae:	d103      	bne.n	8001cb8 <xQueueGenericSend+0x164>
 8001cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cbe:	b25b      	sxtb	r3, r3
 8001cc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cc4:	d103      	bne.n	8001cce <xQueueGenericSend+0x17a>
 8001cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001cce:	f001 ffcb 	bl	8003c68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001cd2:	1d3a      	adds	r2, r7, #4
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4611      	mov	r1, r2
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f001 f850 	bl	8002d80 <xTaskCheckForTimeOut>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d124      	bne.n	8001d30 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001ce6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ce8:	f000 fbb6 	bl	8002458 <prvIsQueueFull>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d018      	beq.n	8001d24 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf4:	3310      	adds	r3, #16
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 ff7a 	bl	8002bf4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d02:	f000 fb41 	bl	8002388 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001d06:	f000 fdb7 	bl	8002878 <xTaskResumeAll>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f47f af7c 	bne.w	8001c0a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8001d12:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <xQueueGenericSend+0x1f0>)
 8001d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	f3bf 8f4f 	dsb	sy
 8001d1e:	f3bf 8f6f 	isb	sy
 8001d22:	e772      	b.n	8001c0a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001d24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d26:	f000 fb2f 	bl	8002388 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001d2a:	f000 fda5 	bl	8002878 <xTaskResumeAll>
 8001d2e:	e76c      	b.n	8001c0a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001d30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d32:	f000 fb29 	bl	8002388 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001d36:	f000 fd9f 	bl	8002878 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001d3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3738      	adds	r7, #56	; 0x38
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	e000ed04 	.word	0xe000ed04

08001d48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08e      	sub	sp, #56	; 0x38
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
 8001d54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d109      	bne.n	8001d74 <xQueueGenericSendFromISR+0x2c>
 8001d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d64:	f383 8811 	msr	BASEPRI, r3
 8001d68:	f3bf 8f6f 	isb	sy
 8001d6c:	f3bf 8f4f 	dsb	sy
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
 8001d72:	e7fe      	b.n	8001d72 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d103      	bne.n	8001d82 <xQueueGenericSendFromISR+0x3a>
 8001d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <xQueueGenericSendFromISR+0x3e>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <xQueueGenericSendFromISR+0x40>
 8001d86:	2300      	movs	r3, #0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d109      	bne.n	8001da0 <xQueueGenericSendFromISR+0x58>
 8001d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d90:	f383 8811 	msr	BASEPRI, r3
 8001d94:	f3bf 8f6f 	isb	sy
 8001d98:	f3bf 8f4f 	dsb	sy
 8001d9c:	623b      	str	r3, [r7, #32]
 8001d9e:	e7fe      	b.n	8001d9e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d103      	bne.n	8001dae <xQueueGenericSendFromISR+0x66>
 8001da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <xQueueGenericSendFromISR+0x6a>
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <xQueueGenericSendFromISR+0x6c>
 8001db2:	2300      	movs	r3, #0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d109      	bne.n	8001dcc <xQueueGenericSendFromISR+0x84>
 8001db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dbc:	f383 8811 	msr	BASEPRI, r3
 8001dc0:	f3bf 8f6f 	isb	sy
 8001dc4:	f3bf 8f4f 	dsb	sy
 8001dc8:	61fb      	str	r3, [r7, #28]
 8001dca:	e7fe      	b.n	8001dca <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001dcc:	f001 fffa 	bl	8003dc4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001dd0:	f3ef 8211 	mrs	r2, BASEPRI
 8001dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dd8:	f383 8811 	msr	BASEPRI, r3
 8001ddc:	f3bf 8f6f 	isb	sy
 8001de0:	f3bf 8f4f 	dsb	sy
 8001de4:	61ba      	str	r2, [r7, #24]
 8001de6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001de8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d302      	bcc.n	8001dfe <xQueueGenericSendFromISR+0xb6>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d12c      	bne.n	8001e58 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	68b9      	ldr	r1, [r7, #8]
 8001e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e0e:	f000 fa2b 	bl	8002268 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001e12:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001e16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e1a:	d112      	bne.n	8001e42 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d016      	beq.n	8001e52 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e26:	3324      	adds	r3, #36	; 0x24
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 ff31 	bl	8002c90 <xTaskRemoveFromEventList>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00e      	beq.n	8001e52 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00b      	beq.n	8001e52 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	e007      	b.n	8001e52 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001e42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001e46:	3301      	adds	r3, #1
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	b25a      	sxtb	r2, r3
 8001e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001e52:	2301      	movs	r3, #1
 8001e54:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8001e56:	e001      	b.n	8001e5c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8001e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3738      	adds	r7, #56	; 0x38
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08c      	sub	sp, #48	; 0x30
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d109      	bne.n	8001e9e <xQueueReceive+0x2e>
	__asm volatile
 8001e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e8e:	f383 8811 	msr	BASEPRI, r3
 8001e92:	f3bf 8f6f 	isb	sy
 8001e96:	f3bf 8f4f 	dsb	sy
 8001e9a:	623b      	str	r3, [r7, #32]
 8001e9c:	e7fe      	b.n	8001e9c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d103      	bne.n	8001eac <xQueueReceive+0x3c>
 8001ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d101      	bne.n	8001eb0 <xQueueReceive+0x40>
 8001eac:	2301      	movs	r3, #1
 8001eae:	e000      	b.n	8001eb2 <xQueueReceive+0x42>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d109      	bne.n	8001eca <xQueueReceive+0x5a>
 8001eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eba:	f383 8811 	msr	BASEPRI, r3
 8001ebe:	f3bf 8f6f 	isb	sy
 8001ec2:	f3bf 8f4f 	dsb	sy
 8001ec6:	61fb      	str	r3, [r7, #28]
 8001ec8:	e7fe      	b.n	8001ec8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001eca:	f001 f879 	bl	8002fc0 <xTaskGetSchedulerState>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d102      	bne.n	8001eda <xQueueReceive+0x6a>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <xQueueReceive+0x6e>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <xQueueReceive+0x70>
 8001ede:	2300      	movs	r3, #0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d109      	bne.n	8001ef8 <xQueueReceive+0x88>
 8001ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee8:	f383 8811 	msr	BASEPRI, r3
 8001eec:	f3bf 8f6f 	isb	sy
 8001ef0:	f3bf 8f4f 	dsb	sy
 8001ef4:	61bb      	str	r3, [r7, #24]
 8001ef6:	e7fe      	b.n	8001ef6 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001ef8:	f001 fe88 	bl	8003c0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d01f      	beq.n	8001f48 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001f08:	68b9      	ldr	r1, [r7, #8]
 8001f0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f0c:	f000 fa16 	bl	800233c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	1e5a      	subs	r2, r3, #1
 8001f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f16:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00f      	beq.n	8001f40 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f22:	3310      	adds	r3, #16
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 feb3 	bl	8002c90 <xTaskRemoveFromEventList>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d007      	beq.n	8001f40 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001f30:	4b3c      	ldr	r3, [pc, #240]	; (8002024 <xQueueReceive+0x1b4>)
 8001f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	f3bf 8f4f 	dsb	sy
 8001f3c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001f40:	f001 fe92 	bl	8003c68 <vPortExitCritical>
				return pdPASS;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e069      	b.n	800201c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d103      	bne.n	8001f56 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001f4e:	f001 fe8b 	bl	8003c68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001f52:	2300      	movs	r3, #0
 8001f54:	e062      	b.n	800201c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d106      	bne.n	8001f6a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001f5c:	f107 0310 	add.w	r3, r7, #16
 8001f60:	4618      	mov	r0, r3
 8001f62:	f000 fef7 	bl	8002d54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001f66:	2301      	movs	r3, #1
 8001f68:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001f6a:	f001 fe7d 	bl	8003c68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001f6e:	f000 fc75 	bl	800285c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001f72:	f001 fe4b 	bl	8003c0c <vPortEnterCritical>
 8001f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f7c:	b25b      	sxtb	r3, r3
 8001f7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f82:	d103      	bne.n	8001f8c <xQueueReceive+0x11c>
 8001f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f92:	b25b      	sxtb	r3, r3
 8001f94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f98:	d103      	bne.n	8001fa2 <xQueueReceive+0x132>
 8001f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001fa2:	f001 fe61 	bl	8003c68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001fa6:	1d3a      	adds	r2, r7, #4
 8001fa8:	f107 0310 	add.w	r3, r7, #16
 8001fac:	4611      	mov	r1, r2
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 fee6 	bl	8002d80 <xTaskCheckForTimeOut>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d123      	bne.n	8002002 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001fba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fbc:	f000 fa36 	bl	800242c <prvIsQueueEmpty>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d017      	beq.n	8001ff6 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc8:	3324      	adds	r3, #36	; 0x24
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 fe10 	bl	8002bf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001fd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fd6:	f000 f9d7 	bl	8002388 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001fda:	f000 fc4d 	bl	8002878 <xTaskResumeAll>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d189      	bne.n	8001ef8 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <xQueueReceive+0x1b4>)
 8001fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	f3bf 8f4f 	dsb	sy
 8001ff0:	f3bf 8f6f 	isb	sy
 8001ff4:	e780      	b.n	8001ef8 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8001ff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ff8:	f000 f9c6 	bl	8002388 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001ffc:	f000 fc3c 	bl	8002878 <xTaskResumeAll>
 8002000:	e77a      	b.n	8001ef8 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002002:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002004:	f000 f9c0 	bl	8002388 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002008:	f000 fc36 	bl	8002878 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800200c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800200e:	f000 fa0d 	bl	800242c <prvIsQueueEmpty>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	f43f af6f 	beq.w	8001ef8 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800201a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800201c:	4618      	mov	r0, r3
 800201e:	3730      	adds	r7, #48	; 0x30
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	e000ed04 	.word	0xe000ed04

08002028 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08e      	sub	sp, #56	; 0x38
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002032:	2300      	movs	r3, #0
 8002034:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800203a:	2300      	movs	r3, #0
 800203c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800203e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002040:	2b00      	cmp	r3, #0
 8002042:	d109      	bne.n	8002058 <xQueueSemaphoreTake+0x30>
 8002044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002048:	f383 8811 	msr	BASEPRI, r3
 800204c:	f3bf 8f6f 	isb	sy
 8002050:	f3bf 8f4f 	dsb	sy
 8002054:	623b      	str	r3, [r7, #32]
 8002056:	e7fe      	b.n	8002056 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	2b00      	cmp	r3, #0
 800205e:	d009      	beq.n	8002074 <xQueueSemaphoreTake+0x4c>
 8002060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002064:	f383 8811 	msr	BASEPRI, r3
 8002068:	f3bf 8f6f 	isb	sy
 800206c:	f3bf 8f4f 	dsb	sy
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	e7fe      	b.n	8002072 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002074:	f000 ffa4 	bl	8002fc0 <xTaskGetSchedulerState>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d102      	bne.n	8002084 <xQueueSemaphoreTake+0x5c>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <xQueueSemaphoreTake+0x60>
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <xQueueSemaphoreTake+0x62>
 8002088:	2300      	movs	r3, #0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d109      	bne.n	80020a2 <xQueueSemaphoreTake+0x7a>
 800208e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002092:	f383 8811 	msr	BASEPRI, r3
 8002096:	f3bf 8f6f 	isb	sy
 800209a:	f3bf 8f4f 	dsb	sy
 800209e:	61bb      	str	r3, [r7, #24]
 80020a0:	e7fe      	b.n	80020a0 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80020a2:	f001 fdb3 	bl	8003c0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80020a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020aa:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80020ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d024      	beq.n	80020fc <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80020b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b4:	1e5a      	subs	r2, r3, #1
 80020b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80020ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d104      	bne.n	80020cc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80020c2:	f001 f937 	bl	8003334 <pvTaskIncrementMutexHeldCount>
 80020c6:	4602      	mov	r2, r0
 80020c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ca:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00f      	beq.n	80020f4 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d6:	3310      	adds	r3, #16
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 fdd9 	bl	8002c90 <xTaskRemoveFromEventList>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d007      	beq.n	80020f4 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80020e4:	4b53      	ldr	r3, [pc, #332]	; (8002234 <xQueueSemaphoreTake+0x20c>)
 80020e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	f3bf 8f4f 	dsb	sy
 80020f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80020f4:	f001 fdb8 	bl	8003c68 <vPortExitCritical>
				return pdPASS;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e096      	b.n	800222a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d110      	bne.n	8002124 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002104:	2b00      	cmp	r3, #0
 8002106:	d009      	beq.n	800211c <xQueueSemaphoreTake+0xf4>
 8002108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800210c:	f383 8811 	msr	BASEPRI, r3
 8002110:	f3bf 8f6f 	isb	sy
 8002114:	f3bf 8f4f 	dsb	sy
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	e7fe      	b.n	800211a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800211c:	f001 fda4 	bl	8003c68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002120:	2300      	movs	r3, #0
 8002122:	e082      	b.n	800222a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800212a:	f107 030c 	add.w	r3, r7, #12
 800212e:	4618      	mov	r0, r3
 8002130:	f000 fe10 	bl	8002d54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002134:	2301      	movs	r3, #1
 8002136:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002138:	f001 fd96 	bl	8003c68 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800213c:	f000 fb8e 	bl	800285c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002140:	f001 fd64 	bl	8003c0c <vPortEnterCritical>
 8002144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002146:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800214a:	b25b      	sxtb	r3, r3
 800214c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002150:	d103      	bne.n	800215a <xQueueSemaphoreTake+0x132>
 8002152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800215a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002160:	b25b      	sxtb	r3, r3
 8002162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002166:	d103      	bne.n	8002170 <xQueueSemaphoreTake+0x148>
 8002168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800216a:	2200      	movs	r2, #0
 800216c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002170:	f001 fd7a 	bl	8003c68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002174:	463a      	mov	r2, r7
 8002176:	f107 030c 	add.w	r3, r7, #12
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f000 fdff 	bl	8002d80 <xTaskCheckForTimeOut>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d132      	bne.n	80021ee <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002188:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800218a:	f000 f94f 	bl	800242c <prvIsQueueEmpty>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d026      	beq.n	80021e2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d109      	bne.n	80021b0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800219c:	f001 fd36 	bl	8003c0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80021a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 ff29 	bl	8002ffc <xTaskPriorityInherit>
 80021aa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80021ac:	f001 fd5c 	bl	8003c68 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80021b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b2:	3324      	adds	r3, #36	; 0x24
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	4611      	mov	r1, r2
 80021b8:	4618      	mov	r0, r3
 80021ba:	f000 fd1b 	bl	8002bf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80021be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80021c0:	f000 f8e2 	bl	8002388 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80021c4:	f000 fb58 	bl	8002878 <xTaskResumeAll>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f47f af69 	bne.w	80020a2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80021d0:	4b18      	ldr	r3, [pc, #96]	; (8002234 <xQueueSemaphoreTake+0x20c>)
 80021d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	f3bf 8f4f 	dsb	sy
 80021dc:	f3bf 8f6f 	isb	sy
 80021e0:	e75f      	b.n	80020a2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80021e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80021e4:	f000 f8d0 	bl	8002388 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80021e8:	f000 fb46 	bl	8002878 <xTaskResumeAll>
 80021ec:	e759      	b.n	80020a2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80021ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80021f0:	f000 f8ca 	bl	8002388 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80021f4:	f000 fb40 	bl	8002878 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80021f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80021fa:	f000 f917 	bl	800242c <prvIsQueueEmpty>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	f43f af4e 	beq.w	80020a2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00d      	beq.n	8002228 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800220c:	f001 fcfe 	bl	8003c0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002210:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002212:	f000 f811 	bl	8002238 <prvGetDisinheritPriorityAfterTimeout>
 8002216:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800221e:	4618      	mov	r0, r3
 8002220:	f000 fff0 	bl	8003204 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002224:	f001 fd20 	bl	8003c68 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002228:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800222a:	4618      	mov	r0, r3
 800222c:	3738      	adds	r7, #56	; 0x38
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	e000ed04 	.word	0xe000ed04

08002238 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	2b00      	cmp	r3, #0
 8002246:	d006      	beq.n	8002256 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f1c3 0305 	rsb	r3, r3, #5
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	e001      	b.n	800225a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002256:	2300      	movs	r3, #0
 8002258:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800225a:	68fb      	ldr	r3, [r7, #12]
	}
 800225c:	4618      	mov	r0, r3
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10d      	bne.n	80022a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d14d      	bne.n	800232a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	4618      	mov	r0, r3
 8002294:	f000 ff32 	bl	80030fc <xTaskPriorityDisinherit>
 8002298:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	e043      	b.n	800232a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d119      	bne.n	80022dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6858      	ldr	r0, [r3, #4]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	461a      	mov	r2, r3
 80022b2:	68b9      	ldr	r1, [r7, #8]
 80022b4:	f001 ffc4 	bl	8004240 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	685a      	ldr	r2, [r3, #4]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	441a      	add	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d32b      	bcc.n	800232a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	e026      	b.n	800232a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	68d8      	ldr	r0, [r3, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	461a      	mov	r2, r3
 80022e6:	68b9      	ldr	r1, [r7, #8]
 80022e8:	f001 ffaa 	bl	8004240 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	425b      	negs	r3, r3
 80022f6:	441a      	add	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d207      	bcs.n	8002318 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	425b      	negs	r3, r3
 8002312:	441a      	add	r2, r3
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b02      	cmp	r3, #2
 800231c:	d105      	bne.n	800232a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d002      	beq.n	800232a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	3b01      	subs	r3, #1
 8002328:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002332:	697b      	ldr	r3, [r7, #20]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	2b00      	cmp	r3, #0
 800234c:	d018      	beq.n	8002380 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	441a      	add	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68da      	ldr	r2, [r3, #12]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	429a      	cmp	r2, r3
 8002366:	d303      	bcc.n	8002370 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68d9      	ldr	r1, [r3, #12]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	461a      	mov	r2, r3
 800237a:	6838      	ldr	r0, [r7, #0]
 800237c:	f001 ff60 	bl	8004240 <memcpy>
	}
}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002390:	f001 fc3c 	bl	8003c0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800239a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800239c:	e011      	b.n	80023c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d012      	beq.n	80023cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3324      	adds	r3, #36	; 0x24
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 fc70 	bl	8002c90 <xTaskRemoveFromEventList>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80023b6:	f000 fd43 	bl	8002e40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	3b01      	subs	r3, #1
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80023c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	dce9      	bgt.n	800239e <prvUnlockQueue+0x16>
 80023ca:	e000      	b.n	80023ce <prvUnlockQueue+0x46>
					break;
 80023cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	22ff      	movs	r2, #255	; 0xff
 80023d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80023d6:	f001 fc47 	bl	8003c68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80023da:	f001 fc17 	bl	8003c0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023e6:	e011      	b.n	800240c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d012      	beq.n	8002416 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3310      	adds	r3, #16
 80023f4:	4618      	mov	r0, r3
 80023f6:	f000 fc4b 	bl	8002c90 <xTaskRemoveFromEventList>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002400:	f000 fd1e 	bl	8002e40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002404:	7bbb      	ldrb	r3, [r7, #14]
 8002406:	3b01      	subs	r3, #1
 8002408:	b2db      	uxtb	r3, r3
 800240a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800240c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002410:	2b00      	cmp	r3, #0
 8002412:	dce9      	bgt.n	80023e8 <prvUnlockQueue+0x60>
 8002414:	e000      	b.n	8002418 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002416:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	22ff      	movs	r2, #255	; 0xff
 800241c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002420:	f001 fc22 	bl	8003c68 <vPortExitCritical>
}
 8002424:	bf00      	nop
 8002426:	3710      	adds	r7, #16
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002434:	f001 fbea 	bl	8003c0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	2b00      	cmp	r3, #0
 800243e:	d102      	bne.n	8002446 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002440:	2301      	movs	r3, #1
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	e001      	b.n	800244a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800244a:	f001 fc0d 	bl	8003c68 <vPortExitCritical>

	return xReturn;
 800244e:	68fb      	ldr	r3, [r7, #12]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002460:	f001 fbd4 	bl	8003c0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246c:	429a      	cmp	r2, r3
 800246e:	d102      	bne.n	8002476 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002470:	2301      	movs	r3, #1
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	e001      	b.n	800247a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800247a:	f001 fbf5 	bl	8003c68 <vPortExitCritical>

	return xReturn;
 800247e:	68fb      	ldr	r3, [r7, #12]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	e014      	b.n	80024c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002498:	4a0e      	ldr	r2, [pc, #56]	; (80024d4 <vQueueAddToRegistry+0x4c>)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10b      	bne.n	80024bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80024a4:	490b      	ldr	r1, [pc, #44]	; (80024d4 <vQueueAddToRegistry+0x4c>)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80024ae:	4a09      	ldr	r2, [pc, #36]	; (80024d4 <vQueueAddToRegistry+0x4c>)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	4413      	add	r3, r2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80024ba:	e005      	b.n	80024c8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	3301      	adds	r3, #1
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2b07      	cmp	r3, #7
 80024c6:	d9e7      	bls.n	8002498 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	20012e50 	.word	0x20012e50

080024d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80024e8:	f001 fb90 	bl	8003c0c <vPortEnterCritical>
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024f2:	b25b      	sxtb	r3, r3
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024f8:	d103      	bne.n	8002502 <vQueueWaitForMessageRestricted+0x2a>
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002508:	b25b      	sxtb	r3, r3
 800250a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800250e:	d103      	bne.n	8002518 <vQueueWaitForMessageRestricted+0x40>
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002518:	f001 fba6 	bl	8003c68 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002520:	2b00      	cmp	r3, #0
 8002522:	d106      	bne.n	8002532 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	3324      	adds	r3, #36	; 0x24
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	68b9      	ldr	r1, [r7, #8]
 800252c:	4618      	mov	r0, r3
 800252e:	f000 fb85 	bl	8002c3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002532:	6978      	ldr	r0, [r7, #20]
 8002534:	f7ff ff28 	bl	8002388 <prvUnlockQueue>
	}
 8002538:	bf00      	nop
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08c      	sub	sp, #48	; 0x30
 8002544:	af04      	add	r7, sp, #16
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	603b      	str	r3, [r7, #0]
 800254c:	4613      	mov	r3, r2
 800254e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002550:	88fb      	ldrh	r3, [r7, #6]
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4618      	mov	r0, r3
 8002556:	f001 fc73 	bl	8003e40 <pvPortMalloc>
 800255a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00e      	beq.n	8002580 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002562:	2058      	movs	r0, #88	; 0x58
 8002564:	f001 fc6c 	bl	8003e40 <pvPortMalloc>
 8002568:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	631a      	str	r2, [r3, #48]	; 0x30
 8002576:	e005      	b.n	8002584 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002578:	6978      	ldr	r0, [r7, #20]
 800257a:	f001 fd23 	bl	8003fc4 <vPortFree>
 800257e:	e001      	b.n	8002584 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002580:	2300      	movs	r3, #0
 8002582:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d013      	beq.n	80025b2 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800258a:	88fa      	ldrh	r2, [r7, #6]
 800258c:	2300      	movs	r3, #0
 800258e:	9303      	str	r3, [sp, #12]
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	9302      	str	r3, [sp, #8]
 8002594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002596:	9301      	str	r3, [sp, #4]
 8002598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	68b9      	ldr	r1, [r7, #8]
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f000 f80e 	bl	80025c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80025a6:	69f8      	ldr	r0, [r7, #28]
 80025a8:	f000 f89e 	bl	80026e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80025ac:	2301      	movs	r3, #1
 80025ae:	61bb      	str	r3, [r7, #24]
 80025b0:	e002      	b.n	80025b8 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80025b8:	69bb      	ldr	r3, [r7, #24]
	}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3720      	adds	r7, #32
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b088      	sub	sp, #32
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	60f8      	str	r0, [r7, #12]
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <prvInitialiseNewTask+0x28>
 80025d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025da:	f383 8811 	msr	BASEPRI, r3
 80025de:	f3bf 8f6f 	isb	sy
 80025e2:	f3bf 8f4f 	dsb	sy
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	e7fe      	b.n	80025e8 <prvInitialiseNewTask+0x26>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80025ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	461a      	mov	r2, r3
 80025f4:	21a5      	movs	r1, #165	; 0xa5
 80025f6:	f001 fe2e 	bl	8004256 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80025fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002604:	3b01      	subs	r3, #1
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	f023 0307 	bic.w	r3, r3, #7
 8002612:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	2b00      	cmp	r3, #0
 800261c:	d009      	beq.n	8002632 <prvInitialiseNewTask+0x70>
 800261e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002622:	f383 8811 	msr	BASEPRI, r3
 8002626:	f3bf 8f6f 	isb	sy
 800262a:	f3bf 8f4f 	dsb	sy
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	e7fe      	b.n	8002630 <prvInitialiseNewTask+0x6e>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	e012      	b.n	800265e <prvInitialiseNewTask+0x9c>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002638:	68ba      	ldr	r2, [r7, #8]
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	4413      	add	r3, r2
 800263e:	7819      	ldrb	r1, [r3, #0]
 8002640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	4413      	add	r3, r2
 8002646:	3334      	adds	r3, #52	; 0x34
 8002648:	460a      	mov	r2, r1
 800264a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	4413      	add	r3, r2
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d006      	beq.n	8002666 <prvInitialiseNewTask+0xa4>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	3301      	adds	r3, #1
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	2b09      	cmp	r3, #9
 8002662:	d9e9      	bls.n	8002638 <prvInitialiseNewTask+0x76>
 8002664:	e000      	b.n	8002668 <prvInitialiseNewTask+0xa6>
		{
			break;
 8002666:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002672:	2b04      	cmp	r3, #4
 8002674:	d901      	bls.n	800267a <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002676:	2304      	movs	r3, #4
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800267a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800267e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002684:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8002686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002688:	2200      	movs	r2, #0
 800268a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800268c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268e:	3304      	adds	r3, #4
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff f905 	bl	80018a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002698:	3318      	adds	r3, #24
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff f900 	bl	80018a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80026a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a8:	f1c3 0205 	rsb	r2, r3, #5
 80026ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80026b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026b4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80026b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b8:	2200      	movs	r2, #0
 80026ba:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80026bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	68f9      	ldr	r1, [r7, #12]
 80026c8:	69b8      	ldr	r0, [r7, #24]
 80026ca:	f001 f979 	bl	80039c0 <pxPortInitialiseStack>
 80026ce:	4602      	mov	r2, r0
 80026d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80026d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80026da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80026e0:	bf00      	nop
 80026e2:	3720      	adds	r7, #32
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80026f0:	f001 fa8c 	bl	8003c0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80026f4:	4b2c      	ldr	r3, [pc, #176]	; (80027a8 <prvAddNewTaskToReadyList+0xc0>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	3301      	adds	r3, #1
 80026fa:	4a2b      	ldr	r2, [pc, #172]	; (80027a8 <prvAddNewTaskToReadyList+0xc0>)
 80026fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80026fe:	4b2b      	ldr	r3, [pc, #172]	; (80027ac <prvAddNewTaskToReadyList+0xc4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d109      	bne.n	800271a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002706:	4a29      	ldr	r2, [pc, #164]	; (80027ac <prvAddNewTaskToReadyList+0xc4>)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800270c:	4b26      	ldr	r3, [pc, #152]	; (80027a8 <prvAddNewTaskToReadyList+0xc0>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d110      	bne.n	8002736 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002714:	f000 fbb8 	bl	8002e88 <prvInitialiseTaskLists>
 8002718:	e00d      	b.n	8002736 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800271a:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <prvAddNewTaskToReadyList+0xc8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d109      	bne.n	8002736 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002722:	4b22      	ldr	r3, [pc, #136]	; (80027ac <prvAddNewTaskToReadyList+0xc4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	429a      	cmp	r2, r3
 800272e:	d802      	bhi.n	8002736 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002730:	4a1e      	ldr	r2, [pc, #120]	; (80027ac <prvAddNewTaskToReadyList+0xc4>)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002736:	4b1f      	ldr	r3, [pc, #124]	; (80027b4 <prvAddNewTaskToReadyList+0xcc>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	3301      	adds	r3, #1
 800273c:	4a1d      	ldr	r2, [pc, #116]	; (80027b4 <prvAddNewTaskToReadyList+0xcc>)
 800273e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002740:	4b1c      	ldr	r3, [pc, #112]	; (80027b4 <prvAddNewTaskToReadyList+0xcc>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	2201      	movs	r2, #1
 800274e:	409a      	lsls	r2, r3
 8002750:	4b19      	ldr	r3, [pc, #100]	; (80027b8 <prvAddNewTaskToReadyList+0xd0>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4313      	orrs	r3, r2
 8002756:	4a18      	ldr	r2, [pc, #96]	; (80027b8 <prvAddNewTaskToReadyList+0xd0>)
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4a15      	ldr	r2, [pc, #84]	; (80027bc <prvAddNewTaskToReadyList+0xd4>)
 8002768:	441a      	add	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3304      	adds	r3, #4
 800276e:	4619      	mov	r1, r3
 8002770:	4610      	mov	r0, r2
 8002772:	f7ff f8a2 	bl	80018ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002776:	f001 fa77 	bl	8003c68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800277a:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <prvAddNewTaskToReadyList+0xc8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00e      	beq.n	80027a0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002782:	4b0a      	ldr	r3, [pc, #40]	; (80027ac <prvAddNewTaskToReadyList+0xc4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278c:	429a      	cmp	r2, r3
 800278e:	d207      	bcs.n	80027a0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <prvAddNewTaskToReadyList+0xd8>)
 8002792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	f3bf 8f4f 	dsb	sy
 800279c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	2000017c 	.word	0x2000017c
 80027ac:	200000a4 	.word	0x200000a4
 80027b0:	20000188 	.word	0x20000188
 80027b4:	20000198 	.word	0x20000198
 80027b8:	20000184 	.word	0x20000184
 80027bc:	200000a8 	.word	0x200000a8
 80027c0:	e000ed04 	.word	0xe000ed04

080027c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80027ca:	4b1e      	ldr	r3, [pc, #120]	; (8002844 <vTaskStartScheduler+0x80>)
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	2300      	movs	r3, #0
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	2300      	movs	r3, #0
 80027d4:	2282      	movs	r2, #130	; 0x82
 80027d6:	491c      	ldr	r1, [pc, #112]	; (8002848 <vTaskStartScheduler+0x84>)
 80027d8:	481c      	ldr	r0, [pc, #112]	; (800284c <vTaskStartScheduler+0x88>)
 80027da:	f7ff feb1 	bl	8002540 <xTaskCreate>
 80027de:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d102      	bne.n	80027ec <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80027e6:	f000 fe1f 	bl	8003428 <xTimerCreateTimerTask>
 80027ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d115      	bne.n	800281e <vTaskStartScheduler+0x5a>
 80027f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f6:	f383 8811 	msr	BASEPRI, r3
 80027fa:	f3bf 8f6f 	isb	sy
 80027fe:	f3bf 8f4f 	dsb	sy
 8002802:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002804:	4b12      	ldr	r3, [pc, #72]	; (8002850 <vTaskStartScheduler+0x8c>)
 8002806:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800280a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800280c:	4b11      	ldr	r3, [pc, #68]	; (8002854 <vTaskStartScheduler+0x90>)
 800280e:	2201      	movs	r2, #1
 8002810:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002812:	4b11      	ldr	r3, [pc, #68]	; (8002858 <vTaskStartScheduler+0x94>)
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002818:	f001 f95a 	bl	8003ad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800281c:	e00d      	b.n	800283a <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002824:	d109      	bne.n	800283a <vTaskStartScheduler+0x76>
 8002826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282a:	f383 8811 	msr	BASEPRI, r3
 800282e:	f3bf 8f6f 	isb	sy
 8002832:	f3bf 8f4f 	dsb	sy
 8002836:	607b      	str	r3, [r7, #4]
 8002838:	e7fe      	b.n	8002838 <vTaskStartScheduler+0x74>
}
 800283a:	bf00      	nop
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	200001a0 	.word	0x200001a0
 8002848:	080043f0 	.word	0x080043f0
 800284c:	08002e59 	.word	0x08002e59
 8002850:	2000019c 	.word	0x2000019c
 8002854:	20000188 	.word	0x20000188
 8002858:	20000180 	.word	0x20000180

0800285c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002860:	4b04      	ldr	r3, [pc, #16]	; (8002874 <vTaskSuspendAll+0x18>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	3301      	adds	r3, #1
 8002866:	4a03      	ldr	r2, [pc, #12]	; (8002874 <vTaskSuspendAll+0x18>)
 8002868:	6013      	str	r3, [r2, #0]
}
 800286a:	bf00      	nop
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	200001a4 	.word	0x200001a4

08002878 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002882:	2300      	movs	r3, #0
 8002884:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002886:	4b41      	ldr	r3, [pc, #260]	; (800298c <xTaskResumeAll+0x114>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d109      	bne.n	80028a2 <xTaskResumeAll+0x2a>
 800288e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002892:	f383 8811 	msr	BASEPRI, r3
 8002896:	f3bf 8f6f 	isb	sy
 800289a:	f3bf 8f4f 	dsb	sy
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	e7fe      	b.n	80028a0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80028a2:	f001 f9b3 	bl	8003c0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80028a6:	4b39      	ldr	r3, [pc, #228]	; (800298c <xTaskResumeAll+0x114>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	4a37      	ldr	r2, [pc, #220]	; (800298c <xTaskResumeAll+0x114>)
 80028ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028b0:	4b36      	ldr	r3, [pc, #216]	; (800298c <xTaskResumeAll+0x114>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d161      	bne.n	800297c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80028b8:	4b35      	ldr	r3, [pc, #212]	; (8002990 <xTaskResumeAll+0x118>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d05d      	beq.n	800297c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028c0:	e02e      	b.n	8002920 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028c2:	4b34      	ldr	r3, [pc, #208]	; (8002994 <xTaskResumeAll+0x11c>)
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3318      	adds	r3, #24
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff f850 	bl	8001974 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	3304      	adds	r3, #4
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff f84b 	bl	8001974 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e2:	2201      	movs	r2, #1
 80028e4:	409a      	lsls	r2, r3
 80028e6:	4b2c      	ldr	r3, [pc, #176]	; (8002998 <xTaskResumeAll+0x120>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	4a2a      	ldr	r2, [pc, #168]	; (8002998 <xTaskResumeAll+0x120>)
 80028ee:	6013      	str	r3, [r2, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4a27      	ldr	r2, [pc, #156]	; (800299c <xTaskResumeAll+0x124>)
 80028fe:	441a      	add	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	3304      	adds	r3, #4
 8002904:	4619      	mov	r1, r3
 8002906:	4610      	mov	r0, r2
 8002908:	f7fe ffd7 	bl	80018ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002910:	4b23      	ldr	r3, [pc, #140]	; (80029a0 <xTaskResumeAll+0x128>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	429a      	cmp	r2, r3
 8002918:	d302      	bcc.n	8002920 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800291a:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <xTaskResumeAll+0x12c>)
 800291c:	2201      	movs	r2, #1
 800291e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002920:	4b1c      	ldr	r3, [pc, #112]	; (8002994 <xTaskResumeAll+0x11c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1cc      	bne.n	80028c2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800292e:	f000 fb27 	bl	8002f80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002932:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <xTaskResumeAll+0x130>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d010      	beq.n	8002960 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800293e:	f000 f847 	bl	80029d0 <xTaskIncrementTick>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002948:	4b16      	ldr	r3, [pc, #88]	; (80029a4 <xTaskResumeAll+0x12c>)
 800294a:	2201      	movs	r2, #1
 800294c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3b01      	subs	r3, #1
 8002952:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f1      	bne.n	800293e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800295a:	4b13      	ldr	r3, [pc, #76]	; (80029a8 <xTaskResumeAll+0x130>)
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002960:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <xTaskResumeAll+0x12c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d009      	beq.n	800297c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002968:	2301      	movs	r3, #1
 800296a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800296c:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <xTaskResumeAll+0x134>)
 800296e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	f3bf 8f4f 	dsb	sy
 8002978:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800297c:	f001 f974 	bl	8003c68 <vPortExitCritical>

	return xAlreadyYielded;
 8002980:	68bb      	ldr	r3, [r7, #8]
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	200001a4 	.word	0x200001a4
 8002990:	2000017c 	.word	0x2000017c
 8002994:	2000013c 	.word	0x2000013c
 8002998:	20000184 	.word	0x20000184
 800299c:	200000a8 	.word	0x200000a8
 80029a0:	200000a4 	.word	0x200000a4
 80029a4:	20000190 	.word	0x20000190
 80029a8:	2000018c 	.word	0x2000018c
 80029ac:	e000ed04 	.word	0xe000ed04

080029b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80029b6:	4b05      	ldr	r3, [pc, #20]	; (80029cc <xTaskGetTickCount+0x1c>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80029bc:	687b      	ldr	r3, [r7, #4]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	20000180 	.word	0x20000180

080029d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029da:	4b4e      	ldr	r3, [pc, #312]	; (8002b14 <xTaskIncrementTick+0x144>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f040 8087 	bne.w	8002af2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80029e4:	4b4c      	ldr	r3, [pc, #304]	; (8002b18 <xTaskIncrementTick+0x148>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	3301      	adds	r3, #1
 80029ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80029ec:	4a4a      	ldr	r2, [pc, #296]	; (8002b18 <xTaskIncrementTick+0x148>)
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d11f      	bne.n	8002a38 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80029f8:	4b48      	ldr	r3, [pc, #288]	; (8002b1c <xTaskIncrementTick+0x14c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d009      	beq.n	8002a16 <xTaskIncrementTick+0x46>
 8002a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a06:	f383 8811 	msr	BASEPRI, r3
 8002a0a:	f3bf 8f6f 	isb	sy
 8002a0e:	f3bf 8f4f 	dsb	sy
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	e7fe      	b.n	8002a14 <xTaskIncrementTick+0x44>
 8002a16:	4b41      	ldr	r3, [pc, #260]	; (8002b1c <xTaskIncrementTick+0x14c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	4b40      	ldr	r3, [pc, #256]	; (8002b20 <xTaskIncrementTick+0x150>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a3e      	ldr	r2, [pc, #248]	; (8002b1c <xTaskIncrementTick+0x14c>)
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	4a3e      	ldr	r2, [pc, #248]	; (8002b20 <xTaskIncrementTick+0x150>)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	4b3e      	ldr	r3, [pc, #248]	; (8002b24 <xTaskIncrementTick+0x154>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	4a3c      	ldr	r2, [pc, #240]	; (8002b24 <xTaskIncrementTick+0x154>)
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	f000 faa4 	bl	8002f80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002a38:	4b3b      	ldr	r3, [pc, #236]	; (8002b28 <xTaskIncrementTick+0x158>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d348      	bcc.n	8002ad4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a42:	4b36      	ldr	r3, [pc, #216]	; (8002b1c <xTaskIncrementTick+0x14c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d104      	bne.n	8002a56 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a4c:	4b36      	ldr	r3, [pc, #216]	; (8002b28 <xTaskIncrementTick+0x158>)
 8002a4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a52:	601a      	str	r2, [r3, #0]
					break;
 8002a54:	e03e      	b.n	8002ad4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a56:	4b31      	ldr	r3, [pc, #196]	; (8002b1c <xTaskIncrementTick+0x14c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d203      	bcs.n	8002a76 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002a6e:	4a2e      	ldr	r2, [pc, #184]	; (8002b28 <xTaskIncrementTick+0x158>)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002a74:	e02e      	b.n	8002ad4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	3304      	adds	r3, #4
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe ff7a 	bl	8001974 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d004      	beq.n	8002a92 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	3318      	adds	r3, #24
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7fe ff71 	bl	8001974 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	2201      	movs	r2, #1
 8002a98:	409a      	lsls	r2, r3
 8002a9a:	4b24      	ldr	r3, [pc, #144]	; (8002b2c <xTaskIncrementTick+0x15c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	4a22      	ldr	r2, [pc, #136]	; (8002b2c <xTaskIncrementTick+0x15c>)
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4a1f      	ldr	r2, [pc, #124]	; (8002b30 <xTaskIncrementTick+0x160>)
 8002ab2:	441a      	add	r2, r3
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4610      	mov	r0, r2
 8002abc:	f7fe fefd 	bl	80018ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac4:	4b1b      	ldr	r3, [pc, #108]	; (8002b34 <xTaskIncrementTick+0x164>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d3b9      	bcc.n	8002a42 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ad2:	e7b6      	b.n	8002a42 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ad4:	4b17      	ldr	r3, [pc, #92]	; (8002b34 <xTaskIncrementTick+0x164>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ada:	4915      	ldr	r1, [pc, #84]	; (8002b30 <xTaskIncrementTick+0x160>)
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d907      	bls.n	8002afc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8002aec:	2301      	movs	r3, #1
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	e004      	b.n	8002afc <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002af2:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <xTaskIncrementTick+0x168>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	3301      	adds	r3, #1
 8002af8:	4a0f      	ldr	r2, [pc, #60]	; (8002b38 <xTaskIncrementTick+0x168>)
 8002afa:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002afc:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <xTaskIncrementTick+0x16c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8002b04:	2301      	movs	r3, #1
 8002b06:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002b08:	697b      	ldr	r3, [r7, #20]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	200001a4 	.word	0x200001a4
 8002b18:	20000180 	.word	0x20000180
 8002b1c:	20000134 	.word	0x20000134
 8002b20:	20000138 	.word	0x20000138
 8002b24:	20000194 	.word	0x20000194
 8002b28:	2000019c 	.word	0x2000019c
 8002b2c:	20000184 	.word	0x20000184
 8002b30:	200000a8 	.word	0x200000a8
 8002b34:	200000a4 	.word	0x200000a4
 8002b38:	2000018c 	.word	0x2000018c
 8002b3c:	20000190 	.word	0x20000190

08002b40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002b40:	b480      	push	{r7}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b46:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <vTaskSwitchContext+0xa0>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002b4e:	4b25      	ldr	r3, [pc, #148]	; (8002be4 <vTaskSwitchContext+0xa4>)
 8002b50:	2201      	movs	r2, #1
 8002b52:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002b54:	e03e      	b.n	8002bd4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8002b56:	4b23      	ldr	r3, [pc, #140]	; (8002be4 <vTaskSwitchContext+0xa4>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b5c:	4b22      	ldr	r3, [pc, #136]	; (8002be8 <vTaskSwitchContext+0xa8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	fab3 f383 	clz	r3, r3
 8002b68:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002b6a:	7afb      	ldrb	r3, [r7, #11]
 8002b6c:	f1c3 031f 	rsb	r3, r3, #31
 8002b70:	617b      	str	r3, [r7, #20]
 8002b72:	491e      	ldr	r1, [pc, #120]	; (8002bec <vTaskSwitchContext+0xac>)
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	4613      	mov	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <vTaskSwitchContext+0x5a>
	__asm volatile
 8002b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8a:	f383 8811 	msr	BASEPRI, r3
 8002b8e:	f3bf 8f6f 	isb	sy
 8002b92:	f3bf 8f4f 	dsb	sy
 8002b96:	607b      	str	r3, [r7, #4]
 8002b98:	e7fe      	b.n	8002b98 <vTaskSwitchContext+0x58>
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4a11      	ldr	r2, [pc, #68]	; (8002bec <vTaskSwitchContext+0xac>)
 8002ba6:	4413      	add	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	605a      	str	r2, [r3, #4]
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	3308      	adds	r3, #8
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d104      	bne.n	8002bca <vTaskSwitchContext+0x8a>
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	4a07      	ldr	r2, [pc, #28]	; (8002bf0 <vTaskSwitchContext+0xb0>)
 8002bd2:	6013      	str	r3, [r2, #0]
}
 8002bd4:	bf00      	nop
 8002bd6:	371c      	adds	r7, #28
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	200001a4 	.word	0x200001a4
 8002be4:	20000190 	.word	0x20000190
 8002be8:	20000184 	.word	0x20000184
 8002bec:	200000a8 	.word	0x200000a8
 8002bf0:	200000a4 	.word	0x200000a4

08002bf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d109      	bne.n	8002c18 <vTaskPlaceOnEventList+0x24>
 8002c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c08:	f383 8811 	msr	BASEPRI, r3
 8002c0c:	f3bf 8f6f 	isb	sy
 8002c10:	f3bf 8f4f 	dsb	sy
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	e7fe      	b.n	8002c16 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002c18:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <vTaskPlaceOnEventList+0x44>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	3318      	adds	r3, #24
 8002c1e:	4619      	mov	r1, r3
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7fe fe6e 	bl	8001902 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002c26:	2101      	movs	r1, #1
 8002c28:	6838      	ldr	r0, [r7, #0]
 8002c2a:	f000 fb97 	bl	800335c <prvAddCurrentTaskToDelayedList>
}
 8002c2e:	bf00      	nop
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	200000a4 	.word	0x200000a4

08002c3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d109      	bne.n	8002c62 <vTaskPlaceOnEventListRestricted+0x26>
 8002c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c52:	f383 8811 	msr	BASEPRI, r3
 8002c56:	f3bf 8f6f 	isb	sy
 8002c5a:	f3bf 8f4f 	dsb	sy
 8002c5e:	617b      	str	r3, [r7, #20]
 8002c60:	e7fe      	b.n	8002c60 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002c62:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <vTaskPlaceOnEventListRestricted+0x50>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3318      	adds	r3, #24
 8002c68:	4619      	mov	r1, r3
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f7fe fe25 	bl	80018ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8002c76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c7a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	68b8      	ldr	r0, [r7, #8]
 8002c80:	f000 fb6c 	bl	800335c <prvAddCurrentTaskToDelayedList>
	}
 8002c84:	bf00      	nop
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	200000a4 	.word	0x200000a4

08002c90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d109      	bne.n	8002cba <xTaskRemoveFromEventList+0x2a>
 8002ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002caa:	f383 8811 	msr	BASEPRI, r3
 8002cae:	f3bf 8f6f 	isb	sy
 8002cb2:	f3bf 8f4f 	dsb	sy
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	e7fe      	b.n	8002cb8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	3318      	adds	r3, #24
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fe fe58 	bl	8001974 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cc4:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <xTaskRemoveFromEventList+0xac>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d11c      	bne.n	8002d06 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	3304      	adds	r3, #4
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fe fe4f 	bl	8001974 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cda:	2201      	movs	r2, #1
 8002cdc:	409a      	lsls	r2, r3
 8002cde:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <xTaskRemoveFromEventList+0xb0>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	4a16      	ldr	r2, [pc, #88]	; (8002d40 <xTaskRemoveFromEventList+0xb0>)
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4a13      	ldr	r2, [pc, #76]	; (8002d44 <xTaskRemoveFromEventList+0xb4>)
 8002cf6:	441a      	add	r2, r3
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4610      	mov	r0, r2
 8002d00:	f7fe fddb 	bl	80018ba <vListInsertEnd>
 8002d04:	e005      	b.n	8002d12 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	3318      	adds	r3, #24
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	480e      	ldr	r0, [pc, #56]	; (8002d48 <xTaskRemoveFromEventList+0xb8>)
 8002d0e:	f7fe fdd4 	bl	80018ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d16:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <xTaskRemoveFromEventList+0xbc>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d905      	bls.n	8002d2c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002d20:	2301      	movs	r3, #1
 8002d22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002d24:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <xTaskRemoveFromEventList+0xc0>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	e001      	b.n	8002d30 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002d30:	697b      	ldr	r3, [r7, #20]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	200001a4 	.word	0x200001a4
 8002d40:	20000184 	.word	0x20000184
 8002d44:	200000a8 	.word	0x200000a8
 8002d48:	2000013c 	.word	0x2000013c
 8002d4c:	200000a4 	.word	0x200000a4
 8002d50:	20000190 	.word	0x20000190

08002d54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <vTaskInternalSetTimeOutState+0x24>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002d64:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <vTaskInternalSetTimeOutState+0x28>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	605a      	str	r2, [r3, #4]
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	20000194 	.word	0x20000194
 8002d7c:	20000180 	.word	0x20000180

08002d80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d109      	bne.n	8002da4 <xTaskCheckForTimeOut+0x24>
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	e7fe      	b.n	8002da2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d109      	bne.n	8002dbe <xTaskCheckForTimeOut+0x3e>
 8002daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dae:	f383 8811 	msr	BASEPRI, r3
 8002db2:	f3bf 8f6f 	isb	sy
 8002db6:	f3bf 8f4f 	dsb	sy
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	e7fe      	b.n	8002dbc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8002dbe:	f000 ff25 	bl	8003c0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002dc2:	4b1d      	ldr	r3, [pc, #116]	; (8002e38 <xTaskCheckForTimeOut+0xb8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dda:	d102      	bne.n	8002de2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61fb      	str	r3, [r7, #28]
 8002de0:	e023      	b.n	8002e2a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	4b15      	ldr	r3, [pc, #84]	; (8002e3c <xTaskCheckForTimeOut+0xbc>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d007      	beq.n	8002dfe <xTaskCheckForTimeOut+0x7e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d302      	bcc.n	8002dfe <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	61fb      	str	r3, [r7, #28]
 8002dfc:	e015      	b.n	8002e2a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d20b      	bcs.n	8002e20 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	1ad2      	subs	r2, r2, r3
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff ff9d 	bl	8002d54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61fb      	str	r3, [r7, #28]
 8002e1e:	e004      	b.n	8002e2a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002e26:	2301      	movs	r3, #1
 8002e28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002e2a:	f000 ff1d 	bl	8003c68 <vPortExitCritical>

	return xReturn;
 8002e2e:	69fb      	ldr	r3, [r7, #28]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3720      	adds	r7, #32
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	20000180 	.word	0x20000180
 8002e3c:	20000194 	.word	0x20000194

08002e40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002e44:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <vTaskMissedYield+0x14>)
 8002e46:	2201      	movs	r2, #1
 8002e48:	601a      	str	r2, [r3, #0]
}
 8002e4a:	bf00      	nop
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	20000190 	.word	0x20000190

08002e58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002e60:	f000 f852 	bl	8002f08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <prvIdleTask+0x28>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d9f9      	bls.n	8002e60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002e6c:	4b05      	ldr	r3, [pc, #20]	; (8002e84 <prvIdleTask+0x2c>)
 8002e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002e7c:	e7f0      	b.n	8002e60 <prvIdleTask+0x8>
 8002e7e:	bf00      	nop
 8002e80:	200000a8 	.word	0x200000a8
 8002e84:	e000ed04 	.word	0xe000ed04

08002e88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e8e:	2300      	movs	r3, #0
 8002e90:	607b      	str	r3, [r7, #4]
 8002e92:	e00c      	b.n	8002eae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4a12      	ldr	r2, [pc, #72]	; (8002ee8 <prvInitialiseTaskLists+0x60>)
 8002ea0:	4413      	add	r3, r2
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe fcdc 	bl	8001860 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	607b      	str	r3, [r7, #4]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	d9ef      	bls.n	8002e94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002eb4:	480d      	ldr	r0, [pc, #52]	; (8002eec <prvInitialiseTaskLists+0x64>)
 8002eb6:	f7fe fcd3 	bl	8001860 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002eba:	480d      	ldr	r0, [pc, #52]	; (8002ef0 <prvInitialiseTaskLists+0x68>)
 8002ebc:	f7fe fcd0 	bl	8001860 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002ec0:	480c      	ldr	r0, [pc, #48]	; (8002ef4 <prvInitialiseTaskLists+0x6c>)
 8002ec2:	f7fe fccd 	bl	8001860 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002ec6:	480c      	ldr	r0, [pc, #48]	; (8002ef8 <prvInitialiseTaskLists+0x70>)
 8002ec8:	f7fe fcca 	bl	8001860 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002ecc:	480b      	ldr	r0, [pc, #44]	; (8002efc <prvInitialiseTaskLists+0x74>)
 8002ece:	f7fe fcc7 	bl	8001860 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <prvInitialiseTaskLists+0x78>)
 8002ed4:	4a05      	ldr	r2, [pc, #20]	; (8002eec <prvInitialiseTaskLists+0x64>)
 8002ed6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ed8:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <prvInitialiseTaskLists+0x7c>)
 8002eda:	4a05      	ldr	r2, [pc, #20]	; (8002ef0 <prvInitialiseTaskLists+0x68>)
 8002edc:	601a      	str	r2, [r3, #0]
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	200000a8 	.word	0x200000a8
 8002eec:	2000010c 	.word	0x2000010c
 8002ef0:	20000120 	.word	0x20000120
 8002ef4:	2000013c 	.word	0x2000013c
 8002ef8:	20000150 	.word	0x20000150
 8002efc:	20000168 	.word	0x20000168
 8002f00:	20000134 	.word	0x20000134
 8002f04:	20000138 	.word	0x20000138

08002f08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f0e:	e019      	b.n	8002f44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002f10:	f000 fe7c 	bl	8003c0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f14:	4b0f      	ldr	r3, [pc, #60]	; (8002f54 <prvCheckTasksWaitingTermination+0x4c>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3304      	adds	r3, #4
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fe fd27 	bl	8001974 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002f26:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <prvCheckTasksWaitingTermination+0x50>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	4a0a      	ldr	r2, [pc, #40]	; (8002f58 <prvCheckTasksWaitingTermination+0x50>)
 8002f2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002f30:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <prvCheckTasksWaitingTermination+0x54>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	3b01      	subs	r3, #1
 8002f36:	4a09      	ldr	r2, [pc, #36]	; (8002f5c <prvCheckTasksWaitingTermination+0x54>)
 8002f38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002f3a:	f000 fe95 	bl	8003c68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f80e 	bl	8002f60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <prvCheckTasksWaitingTermination+0x54>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1e1      	bne.n	8002f10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002f4c:	bf00      	nop
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20000150 	.word	0x20000150
 8002f58:	2000017c 	.word	0x2000017c
 8002f5c:	20000164 	.word	0x20000164

08002f60 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f001 f829 	bl	8003fc4 <vPortFree>
			vPortFree( pxTCB );
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f001 f826 	bl	8003fc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f86:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <prvResetNextTaskUnblockTime+0x38>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d104      	bne.n	8002f9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002f90:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <prvResetNextTaskUnblockTime+0x3c>)
 8002f92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002f98:	e008      	b.n	8002fac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f9a:	4b07      	ldr	r3, [pc, #28]	; (8002fb8 <prvResetNextTaskUnblockTime+0x38>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	4a04      	ldr	r2, [pc, #16]	; (8002fbc <prvResetNextTaskUnblockTime+0x3c>)
 8002faa:	6013      	str	r3, [r2, #0]
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	20000134 	.word	0x20000134
 8002fbc:	2000019c 	.word	0x2000019c

08002fc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002fc6:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <xTaskGetSchedulerState+0x34>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d102      	bne.n	8002fd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	607b      	str	r3, [r7, #4]
 8002fd2:	e008      	b.n	8002fe6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fd4:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <xTaskGetSchedulerState+0x38>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d102      	bne.n	8002fe2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002fdc:	2302      	movs	r3, #2
 8002fde:	607b      	str	r3, [r7, #4]
 8002fe0:	e001      	b.n	8002fe6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002fe6:	687b      	ldr	r3, [r7, #4]
	}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	20000188 	.word	0x20000188
 8002ff8:	200001a4 	.word	0x200001a4

08002ffc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d069      	beq.n	80030e6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003016:	4b36      	ldr	r3, [pc, #216]	; (80030f0 <xTaskPriorityInherit+0xf4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	429a      	cmp	r2, r3
 800301e:	d259      	bcs.n	80030d4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	2b00      	cmp	r3, #0
 8003026:	db06      	blt.n	8003036 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003028:	4b31      	ldr	r3, [pc, #196]	; (80030f0 <xTaskPriorityInherit+0xf4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302e:	f1c3 0205 	rsb	r2, r3, #5
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	6959      	ldr	r1, [r3, #20]
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4a2b      	ldr	r2, [pc, #172]	; (80030f4 <xTaskPriorityInherit+0xf8>)
 8003048:	4413      	add	r3, r2
 800304a:	4299      	cmp	r1, r3
 800304c:	d13a      	bne.n	80030c4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	3304      	adds	r3, #4
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe fc8e 	bl	8001974 <uxListRemove>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d115      	bne.n	800308a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003062:	4924      	ldr	r1, [pc, #144]	; (80030f4 <xTaskPriorityInherit+0xf8>)
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10a      	bne.n	800308a <xTaskPriorityInherit+0x8e>
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	2201      	movs	r2, #1
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43da      	mvns	r2, r3
 8003080:	4b1d      	ldr	r3, [pc, #116]	; (80030f8 <xTaskPriorityInherit+0xfc>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4013      	ands	r3, r2
 8003086:	4a1c      	ldr	r2, [pc, #112]	; (80030f8 <xTaskPriorityInherit+0xfc>)
 8003088:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800308a:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <xTaskPriorityInherit+0xf4>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	62da      	str	r2, [r3, #44]	; 0x2c
					prvReaddTaskToReadyList( pxMutexHolderTCB );
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003098:	2201      	movs	r2, #1
 800309a:	409a      	lsls	r2, r3
 800309c:	4b16      	ldr	r3, [pc, #88]	; (80030f8 <xTaskPriorityInherit+0xfc>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	4a15      	ldr	r2, [pc, #84]	; (80030f8 <xTaskPriorityInherit+0xfc>)
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4a10      	ldr	r2, [pc, #64]	; (80030f4 <xTaskPriorityInherit+0xf8>)
 80030b4:	441a      	add	r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	3304      	adds	r3, #4
 80030ba:	4619      	mov	r1, r3
 80030bc:	4610      	mov	r0, r2
 80030be:	f7fe fbfc 	bl	80018ba <vListInsertEnd>
 80030c2:	e004      	b.n	80030ce <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80030c4:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <xTaskPriorityInherit+0xf4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80030ce:	2301      	movs	r3, #1
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	e008      	b.n	80030e6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030d8:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <xTaskPriorityInherit+0xf4>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030de:	429a      	cmp	r2, r3
 80030e0:	d201      	bcs.n	80030e6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80030e2:	2301      	movs	r3, #1
 80030e4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80030e6:	68fb      	ldr	r3, [r7, #12]
	}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	200000a4 	.word	0x200000a4
 80030f4:	200000a8 	.word	0x200000a8
 80030f8:	20000184 	.word	0x20000184

080030fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d06c      	beq.n	80031ec <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003112:	4b39      	ldr	r3, [pc, #228]	; (80031f8 <xTaskPriorityDisinherit+0xfc>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	429a      	cmp	r2, r3
 800311a:	d009      	beq.n	8003130 <xTaskPriorityDisinherit+0x34>
 800311c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003120:	f383 8811 	msr	BASEPRI, r3
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	60fb      	str	r3, [r7, #12]
 800312e:	e7fe      	b.n	800312e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003134:	2b00      	cmp	r3, #0
 8003136:	d109      	bne.n	800314c <xTaskPriorityDisinherit+0x50>
 8003138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313c:	f383 8811 	msr	BASEPRI, r3
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	e7fe      	b.n	800314a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003150:	1e5a      	subs	r2, r3, #1
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800315e:	429a      	cmp	r2, r3
 8003160:	d044      	beq.n	80031ec <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003166:	2b00      	cmp	r3, #0
 8003168:	d140      	bne.n	80031ec <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	3304      	adds	r3, #4
 800316e:	4618      	mov	r0, r3
 8003170:	f7fe fc00 	bl	8001974 <uxListRemove>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d115      	bne.n	80031a6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800317e:	491f      	ldr	r1, [pc, #124]	; (80031fc <xTaskPriorityDisinherit+0x100>)
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10a      	bne.n	80031a6 <xTaskPriorityDisinherit+0xaa>
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003194:	2201      	movs	r2, #1
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43da      	mvns	r2, r3
 800319c:	4b18      	ldr	r3, [pc, #96]	; (8003200 <xTaskPriorityDisinherit+0x104>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4013      	ands	r3, r2
 80031a2:	4a17      	ldr	r2, [pc, #92]	; (8003200 <xTaskPriorityDisinherit+0x104>)
 80031a4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	f1c3 0205 	rsb	r2, r3, #5
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	619a      	str	r2, [r3, #24]
					prvReaddTaskToReadyList( pxTCB );
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031be:	2201      	movs	r2, #1
 80031c0:	409a      	lsls	r2, r3
 80031c2:	4b0f      	ldr	r3, [pc, #60]	; (8003200 <xTaskPriorityDisinherit+0x104>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	4a0d      	ldr	r2, [pc, #52]	; (8003200 <xTaskPriorityDisinherit+0x104>)
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4a08      	ldr	r2, [pc, #32]	; (80031fc <xTaskPriorityDisinherit+0x100>)
 80031da:	441a      	add	r2, r3
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	3304      	adds	r3, #4
 80031e0:	4619      	mov	r1, r3
 80031e2:	4610      	mov	r0, r2
 80031e4:	f7fe fb69 	bl	80018ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80031e8:	2301      	movs	r3, #1
 80031ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80031ec:	697b      	ldr	r3, [r7, #20]
	}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	200000a4 	.word	0x200000a4
 80031fc:	200000a8 	.word	0x200000a8
 8003200:	20000184 	.word	0x20000184

08003204 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003204:	b580      	push	{r7, lr}
 8003206:	b088      	sub	sp, #32
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003212:	2301      	movs	r3, #1
 8003214:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 8081 	beq.w	8003320 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003222:	2b00      	cmp	r3, #0
 8003224:	d109      	bne.n	800323a <vTaskPriorityDisinheritAfterTimeout+0x36>
 8003226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322a:	f383 8811 	msr	BASEPRI, r3
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	e7fe      	b.n	8003238 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d902      	bls.n	800324a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	61fb      	str	r3, [r7, #28]
 8003248:	e002      	b.n	8003250 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800324e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	69fa      	ldr	r2, [r7, #28]
 8003256:	429a      	cmp	r2, r3
 8003258:	d062      	beq.n	8003320 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	429a      	cmp	r2, r3
 8003262:	d15d      	bne.n	8003320 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003264:	4b30      	ldr	r3, [pc, #192]	; (8003328 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	429a      	cmp	r2, r3
 800326c:	d109      	bne.n	8003282 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800326e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003272:	f383 8811 	msr	BASEPRI, r3
 8003276:	f3bf 8f6f 	isb	sy
 800327a:	f3bf 8f4f 	dsb	sy
 800327e:	60bb      	str	r3, [r7, #8]
 8003280:	e7fe      	b.n	8003280 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	69fa      	ldr	r2, [r7, #28]
 800328c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	2b00      	cmp	r3, #0
 8003294:	db04      	blt.n	80032a0 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	f1c3 0205 	rsb	r2, r3, #5
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	6959      	ldr	r1, [r3, #20]
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4a1f      	ldr	r2, [pc, #124]	; (800332c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80032b0:	4413      	add	r3, r2
 80032b2:	4299      	cmp	r1, r3
 80032b4:	d134      	bne.n	8003320 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	3304      	adds	r3, #4
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fe fb5a 	bl	8001974 <uxListRemove>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d115      	bne.n	80032f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ca:	4918      	ldr	r1, [pc, #96]	; (800332c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10a      	bne.n	80032f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	2201      	movs	r2, #1
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	43da      	mvns	r2, r3
 80032e8:	4b11      	ldr	r3, [pc, #68]	; (8003330 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4013      	ands	r3, r2
 80032ee:	4a10      	ldr	r2, [pc, #64]	; (8003330 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80032f0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f6:	2201      	movs	r2, #1
 80032f8:	409a      	lsls	r2, r3
 80032fa:	4b0d      	ldr	r3, [pc, #52]	; (8003330 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4313      	orrs	r3, r2
 8003300:	4a0b      	ldr	r2, [pc, #44]	; (8003330 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8003302:	6013      	str	r3, [r2, #0]
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4a06      	ldr	r2, [pc, #24]	; (800332c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8003312:	441a      	add	r2, r3
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	3304      	adds	r3, #4
 8003318:	4619      	mov	r1, r3
 800331a:	4610      	mov	r0, r2
 800331c:	f7fe facd 	bl	80018ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003320:	bf00      	nop
 8003322:	3720      	adds	r7, #32
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	200000a4 	.word	0x200000a4
 800332c:	200000a8 	.word	0x200000a8
 8003330:	20000184 	.word	0x20000184

08003334 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003338:	4b07      	ldr	r3, [pc, #28]	; (8003358 <pvTaskIncrementMutexHeldCount+0x24>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d004      	beq.n	800334a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003340:	4b05      	ldr	r3, [pc, #20]	; (8003358 <pvTaskIncrementMutexHeldCount+0x24>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003346:	3201      	adds	r2, #1
 8003348:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 800334a:	4b03      	ldr	r3, [pc, #12]	; (8003358 <pvTaskIncrementMutexHeldCount+0x24>)
 800334c:	681b      	ldr	r3, [r3, #0]
	}
 800334e:	4618      	mov	r0, r3
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	200000a4 	.word	0x200000a4

0800335c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003366:	4b29      	ldr	r3, [pc, #164]	; (800340c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800336c:	4b28      	ldr	r3, [pc, #160]	; (8003410 <prvAddCurrentTaskToDelayedList+0xb4>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3304      	adds	r3, #4
 8003372:	4618      	mov	r0, r3
 8003374:	f7fe fafe 	bl	8001974 <uxListRemove>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10b      	bne.n	8003396 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800337e:	4b24      	ldr	r3, [pc, #144]	; (8003410 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	2201      	movs	r2, #1
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43da      	mvns	r2, r3
 800338c:	4b21      	ldr	r3, [pc, #132]	; (8003414 <prvAddCurrentTaskToDelayedList+0xb8>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4013      	ands	r3, r2
 8003392:	4a20      	ldr	r2, [pc, #128]	; (8003414 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003394:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800339c:	d10a      	bne.n	80033b4 <prvAddCurrentTaskToDelayedList+0x58>
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d007      	beq.n	80033b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033a4:	4b1a      	ldr	r3, [pc, #104]	; (8003410 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3304      	adds	r3, #4
 80033aa:	4619      	mov	r1, r3
 80033ac:	481a      	ldr	r0, [pc, #104]	; (8003418 <prvAddCurrentTaskToDelayedList+0xbc>)
 80033ae:	f7fe fa84 	bl	80018ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80033b2:	e026      	b.n	8003402 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4413      	add	r3, r2
 80033ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033bc:	4b14      	ldr	r3, [pc, #80]	; (8003410 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d209      	bcs.n	80033e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033cc:	4b13      	ldr	r3, [pc, #76]	; (800341c <prvAddCurrentTaskToDelayedList+0xc0>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4b0f      	ldr	r3, [pc, #60]	; (8003410 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	3304      	adds	r3, #4
 80033d6:	4619      	mov	r1, r3
 80033d8:	4610      	mov	r0, r2
 80033da:	f7fe fa92 	bl	8001902 <vListInsert>
}
 80033de:	e010      	b.n	8003402 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033e0:	4b0f      	ldr	r3, [pc, #60]	; (8003420 <prvAddCurrentTaskToDelayedList+0xc4>)
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <prvAddCurrentTaskToDelayedList+0xb4>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	3304      	adds	r3, #4
 80033ea:	4619      	mov	r1, r3
 80033ec:	4610      	mov	r0, r2
 80033ee:	f7fe fa88 	bl	8001902 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80033f2:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <prvAddCurrentTaskToDelayedList+0xc8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d202      	bcs.n	8003402 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80033fc:	4a09      	ldr	r2, [pc, #36]	; (8003424 <prvAddCurrentTaskToDelayedList+0xc8>)
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	6013      	str	r3, [r2, #0]
}
 8003402:	bf00      	nop
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20000180 	.word	0x20000180
 8003410:	200000a4 	.word	0x200000a4
 8003414:	20000184 	.word	0x20000184
 8003418:	20000168 	.word	0x20000168
 800341c:	20000138 	.word	0x20000138
 8003420:	20000134 	.word	0x20000134
 8003424:	2000019c 	.word	0x2000019c

08003428 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800342e:	2300      	movs	r3, #0
 8003430:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003432:	f000 fa8f 	bl	8003954 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003436:	4b11      	ldr	r3, [pc, #68]	; (800347c <xTimerCreateTimerTask+0x54>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00b      	beq.n	8003456 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800343e:	4b10      	ldr	r3, [pc, #64]	; (8003480 <xTimerCreateTimerTask+0x58>)
 8003440:	9301      	str	r3, [sp, #4]
 8003442:	2302      	movs	r3, #2
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	2300      	movs	r3, #0
 8003448:	f44f 7282 	mov.w	r2, #260	; 0x104
 800344c:	490d      	ldr	r1, [pc, #52]	; (8003484 <xTimerCreateTimerTask+0x5c>)
 800344e:	480e      	ldr	r0, [pc, #56]	; (8003488 <xTimerCreateTimerTask+0x60>)
 8003450:	f7ff f876 	bl	8002540 <xTaskCreate>
 8003454:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d109      	bne.n	8003470 <xTimerCreateTimerTask+0x48>
 800345c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003460:	f383 8811 	msr	BASEPRI, r3
 8003464:	f3bf 8f6f 	isb	sy
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	603b      	str	r3, [r7, #0]
 800346e:	e7fe      	b.n	800346e <xTimerCreateTimerTask+0x46>
	return xReturn;
 8003470:	687b      	ldr	r3, [r7, #4]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	200001d8 	.word	0x200001d8
 8003480:	200001dc 	.word	0x200001dc
 8003484:	080043f8 	.word	0x080043f8
 8003488:	080035a5 	.word	0x080035a5

0800348c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	; 0x28
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800349a:	2300      	movs	r3, #0
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d109      	bne.n	80034b8 <xTimerGenericCommand+0x2c>
 80034a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	623b      	str	r3, [r7, #32]
 80034b6:	e7fe      	b.n	80034b6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80034b8:	4b19      	ldr	r3, [pc, #100]	; (8003520 <xTimerGenericCommand+0x94>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d02a      	beq.n	8003516 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	2b05      	cmp	r3, #5
 80034d0:	dc18      	bgt.n	8003504 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80034d2:	f7ff fd75 	bl	8002fc0 <xTaskGetSchedulerState>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d109      	bne.n	80034f0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80034dc:	4b10      	ldr	r3, [pc, #64]	; (8003520 <xTimerGenericCommand+0x94>)
 80034de:	6818      	ldr	r0, [r3, #0]
 80034e0:	f107 0114 	add.w	r1, r7, #20
 80034e4:	2300      	movs	r3, #0
 80034e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034e8:	f7fe fb34 	bl	8001b54 <xQueueGenericSend>
 80034ec:	6278      	str	r0, [r7, #36]	; 0x24
 80034ee:	e012      	b.n	8003516 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80034f0:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <xTimerGenericCommand+0x94>)
 80034f2:	6818      	ldr	r0, [r3, #0]
 80034f4:	f107 0114 	add.w	r1, r7, #20
 80034f8:	2300      	movs	r3, #0
 80034fa:	2200      	movs	r2, #0
 80034fc:	f7fe fb2a 	bl	8001b54 <xQueueGenericSend>
 8003500:	6278      	str	r0, [r7, #36]	; 0x24
 8003502:	e008      	b.n	8003516 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003504:	4b06      	ldr	r3, [pc, #24]	; (8003520 <xTimerGenericCommand+0x94>)
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	f107 0114 	add.w	r1, r7, #20
 800350c:	2300      	movs	r3, #0
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	f7fe fc1a 	bl	8001d48 <xQueueGenericSendFromISR>
 8003514:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003518:	4618      	mov	r0, r3
 800351a:	3728      	adds	r7, #40	; 0x28
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	200001d8 	.word	0x200001d8

08003524 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af02      	add	r7, sp, #8
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800352e:	4b1c      	ldr	r3, [pc, #112]	; (80035a0 <prvProcessExpiredTimer+0x7c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	3304      	adds	r3, #4
 800353c:	4618      	mov	r0, r3
 800353e:	f7fe fa19 	bl	8001974 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d121      	bne.n	800358e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	699a      	ldr	r2, [r3, #24]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	18d1      	adds	r1, r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	6978      	ldr	r0, [r7, #20]
 8003558:	f000 f8c8 	bl	80036ec <prvInsertTimerInActiveList>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d015      	beq.n	800358e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003562:	2300      	movs	r3, #0
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	2300      	movs	r3, #0
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	2100      	movs	r1, #0
 800356c:	6978      	ldr	r0, [r7, #20]
 800356e:	f7ff ff8d 	bl	800348c <xTimerGenericCommand>
 8003572:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <prvProcessExpiredTimer+0x6a>
 800357a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357e:	f383 8811 	msr	BASEPRI, r3
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	e7fe      	b.n	800358c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	6978      	ldr	r0, [r7, #20]
 8003594:	4798      	blx	r3
}
 8003596:	bf00      	nop
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	200001d0 	.word	0x200001d0

080035a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80035ac:	f107 0308 	add.w	r3, r7, #8
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 f857 	bl	8003664 <prvGetNextExpireTime>
 80035b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	4619      	mov	r1, r3
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 f803 	bl	80035c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80035c2:	f000 f8d5 	bl	8003770 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80035c6:	e7f1      	b.n	80035ac <prvTimerTask+0x8>

080035c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80035d2:	f7ff f943 	bl	800285c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80035d6:	f107 0308 	add.w	r3, r7, #8
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 f866 	bl	80036ac <prvSampleTimeNow>
 80035e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d130      	bne.n	800364a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10a      	bne.n	8003604 <prvProcessTimerOrBlockTask+0x3c>
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d806      	bhi.n	8003604 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80035f6:	f7ff f93f 	bl	8002878 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80035fa:	68f9      	ldr	r1, [r7, #12]
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7ff ff91 	bl	8003524 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003602:	e024      	b.n	800364e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d008      	beq.n	800361c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800360a:	4b13      	ldr	r3, [pc, #76]	; (8003658 <prvProcessTimerOrBlockTask+0x90>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <prvProcessTimerOrBlockTask+0x50>
 8003614:	2301      	movs	r3, #1
 8003616:	e000      	b.n	800361a <prvProcessTimerOrBlockTask+0x52>
 8003618:	2300      	movs	r3, #0
 800361a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800361c:	4b0f      	ldr	r3, [pc, #60]	; (800365c <prvProcessTimerOrBlockTask+0x94>)
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	4619      	mov	r1, r3
 800362a:	f7fe ff55 	bl	80024d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800362e:	f7ff f923 	bl	8002878 <xTaskResumeAll>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003638:	4b09      	ldr	r3, [pc, #36]	; (8003660 <prvProcessTimerOrBlockTask+0x98>)
 800363a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	f3bf 8f6f 	isb	sy
}
 8003648:	e001      	b.n	800364e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800364a:	f7ff f915 	bl	8002878 <xTaskResumeAll>
}
 800364e:	bf00      	nop
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	200001d4 	.word	0x200001d4
 800365c:	200001d8 	.word	0x200001d8
 8003660:	e000ed04 	.word	0xe000ed04

08003664 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800366c:	4b0e      	ldr	r3, [pc, #56]	; (80036a8 <prvGetNextExpireTime+0x44>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <prvGetNextExpireTime+0x16>
 8003676:	2201      	movs	r2, #1
 8003678:	e000      	b.n	800367c <prvGetNextExpireTime+0x18>
 800367a:	2200      	movs	r2, #0
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d105      	bne.n	8003694 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003688:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <prvGetNextExpireTime+0x44>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	e001      	b.n	8003698 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003698:	68fb      	ldr	r3, [r7, #12]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	200001d0 	.word	0x200001d0

080036ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80036b4:	f7ff f97c 	bl	80029b0 <xTaskGetTickCount>
 80036b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80036ba:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <prvSampleTimeNow+0x3c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d205      	bcs.n	80036d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80036c4:	f000 f8e6 	bl	8003894 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	e002      	b.n	80036d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80036d6:	4a04      	ldr	r2, [pc, #16]	; (80036e8 <prvSampleTimeNow+0x3c>)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80036dc:	68fb      	ldr	r3, [r7, #12]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	200001e0 	.word	0x200001e0

080036ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	429a      	cmp	r2, r3
 8003710:	d812      	bhi.n	8003738 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	1ad2      	subs	r2, r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	429a      	cmp	r2, r3
 800371e:	d302      	bcc.n	8003726 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003720:	2301      	movs	r3, #1
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	e01b      	b.n	800375e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003726:	4b10      	ldr	r3, [pc, #64]	; (8003768 <prvInsertTimerInActiveList+0x7c>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3304      	adds	r3, #4
 800372e:	4619      	mov	r1, r3
 8003730:	4610      	mov	r0, r2
 8003732:	f7fe f8e6 	bl	8001902 <vListInsert>
 8003736:	e012      	b.n	800375e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d206      	bcs.n	800374e <prvInsertTimerInActiveList+0x62>
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	429a      	cmp	r2, r3
 8003746:	d302      	bcc.n	800374e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003748:	2301      	movs	r3, #1
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	e007      	b.n	800375e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800374e:	4b07      	ldr	r3, [pc, #28]	; (800376c <prvInsertTimerInActiveList+0x80>)
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	3304      	adds	r3, #4
 8003756:	4619      	mov	r1, r3
 8003758:	4610      	mov	r0, r2
 800375a:	f7fe f8d2 	bl	8001902 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800375e:	697b      	ldr	r3, [r7, #20]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3718      	adds	r7, #24
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	200001d4 	.word	0x200001d4
 800376c:	200001d0 	.word	0x200001d0

08003770 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b08c      	sub	sp, #48	; 0x30
 8003774:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003776:	e07a      	b.n	800386e <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	db76      	blt.n	800386c <prvProcessReceivedCommands+0xfc>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d004      	beq.n	8003794 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	3304      	adds	r3, #4
 800378e:	4618      	mov	r0, r3
 8003790:	f7fe f8f0 	bl	8001974 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003794:	1d3b      	adds	r3, r7, #4
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff ff88 	bl	80036ac <prvSampleTimeNow>
 800379c:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b09      	cmp	r3, #9
 80037a2:	d864      	bhi.n	800386e <prvProcessReceivedCommands+0xfe>
 80037a4:	a201      	add	r2, pc, #4	; (adr r2, 80037ac <prvProcessReceivedCommands+0x3c>)
 80037a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037aa:	bf00      	nop
 80037ac:	080037d5 	.word	0x080037d5
 80037b0:	080037d5 	.word	0x080037d5
 80037b4:	080037d5 	.word	0x080037d5
 80037b8:	0800386f 	.word	0x0800386f
 80037bc:	0800382f 	.word	0x0800382f
 80037c0:	08003865 	.word	0x08003865
 80037c4:	080037d5 	.word	0x080037d5
 80037c8:	080037d5 	.word	0x080037d5
 80037cc:	0800386f 	.word	0x0800386f
 80037d0:	0800382f 	.word	0x0800382f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	18d1      	adds	r1, r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a3a      	ldr	r2, [r7, #32]
 80037e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037e2:	f7ff ff83 	bl	80036ec <prvInsertTimerInActiveList>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d040      	beq.n	800386e <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037f2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d138      	bne.n	800386e <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	441a      	add	r2, r3
 8003804:	2300      	movs	r3, #0
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	2300      	movs	r3, #0
 800380a:	2100      	movs	r1, #0
 800380c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800380e:	f7ff fe3d 	bl	800348c <xTimerGenericCommand>
 8003812:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d129      	bne.n	800386e <prvProcessReceivedCommands+0xfe>
 800381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	61bb      	str	r3, [r7, #24]
 800382c:	e7fe      	b.n	800382c <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d109      	bne.n	8003850 <prvProcessReceivedCommands+0xe0>
 800383c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	e7fe      	b.n	800384e <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	699a      	ldr	r2, [r3, #24]
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	18d1      	adds	r1, r2, r3
 8003858:	6a3b      	ldr	r3, [r7, #32]
 800385a:	6a3a      	ldr	r2, [r7, #32]
 800385c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800385e:	f7ff ff45 	bl	80036ec <prvInsertTimerInActiveList>
					break;
 8003862:	e004      	b.n	800386e <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8003864:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003866:	f000 fbad 	bl	8003fc4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800386a:	e000      	b.n	800386e <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800386c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800386e:	4b08      	ldr	r3, [pc, #32]	; (8003890 <prvProcessReceivedCommands+0x120>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f107 0108 	add.w	r1, r7, #8
 8003876:	2200      	movs	r2, #0
 8003878:	4618      	mov	r0, r3
 800387a:	f7fe faf9 	bl	8001e70 <xQueueReceive>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	f47f af79 	bne.w	8003778 <prvProcessReceivedCommands+0x8>
	}
}
 8003886:	bf00      	nop
 8003888:	3728      	adds	r7, #40	; 0x28
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	200001d8 	.word	0x200001d8

08003894 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800389a:	e044      	b.n	8003926 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800389c:	4b2b      	ldr	r3, [pc, #172]	; (800394c <prvSwitchTimerLists+0xb8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038a6:	4b29      	ldr	r3, [pc, #164]	; (800394c <prvSwitchTimerLists+0xb8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	3304      	adds	r3, #4
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fe f85d 	bl	8001974 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d12d      	bne.n	8003926 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4413      	add	r3, r2
 80038d2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d90e      	bls.n	80038fa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038e8:	4b18      	ldr	r3, [pc, #96]	; (800394c <prvSwitchTimerLists+0xb8>)
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	3304      	adds	r3, #4
 80038f0:	4619      	mov	r1, r3
 80038f2:	4610      	mov	r0, r2
 80038f4:	f7fe f805 	bl	8001902 <vListInsert>
 80038f8:	e015      	b.n	8003926 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80038fa:	2300      	movs	r3, #0
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	2300      	movs	r3, #0
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	2100      	movs	r1, #0
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f7ff fdc1 	bl	800348c <xTimerGenericCommand>
 800390a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <prvSwitchTimerLists+0x92>
 8003912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003916:	f383 8811 	msr	BASEPRI, r3
 800391a:	f3bf 8f6f 	isb	sy
 800391e:	f3bf 8f4f 	dsb	sy
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	e7fe      	b.n	8003924 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003926:	4b09      	ldr	r3, [pc, #36]	; (800394c <prvSwitchTimerLists+0xb8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1b5      	bne.n	800389c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003930:	4b06      	ldr	r3, [pc, #24]	; (800394c <prvSwitchTimerLists+0xb8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003936:	4b06      	ldr	r3, [pc, #24]	; (8003950 <prvSwitchTimerLists+0xbc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a04      	ldr	r2, [pc, #16]	; (800394c <prvSwitchTimerLists+0xb8>)
 800393c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800393e:	4a04      	ldr	r2, [pc, #16]	; (8003950 <prvSwitchTimerLists+0xbc>)
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	6013      	str	r3, [r2, #0]
}
 8003944:	bf00      	nop
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	200001d0 	.word	0x200001d0
 8003950:	200001d4 	.word	0x200001d4

08003954 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003958:	f000 f958 	bl	8003c0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800395c:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <prvCheckForValidListAndQueue+0x54>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d11d      	bne.n	80039a0 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8003964:	4811      	ldr	r0, [pc, #68]	; (80039ac <prvCheckForValidListAndQueue+0x58>)
 8003966:	f7fd ff7b 	bl	8001860 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800396a:	4811      	ldr	r0, [pc, #68]	; (80039b0 <prvCheckForValidListAndQueue+0x5c>)
 800396c:	f7fd ff78 	bl	8001860 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003970:	4b10      	ldr	r3, [pc, #64]	; (80039b4 <prvCheckForValidListAndQueue+0x60>)
 8003972:	4a0e      	ldr	r2, [pc, #56]	; (80039ac <prvCheckForValidListAndQueue+0x58>)
 8003974:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003976:	4b10      	ldr	r3, [pc, #64]	; (80039b8 <prvCheckForValidListAndQueue+0x64>)
 8003978:	4a0d      	ldr	r2, [pc, #52]	; (80039b0 <prvCheckForValidListAndQueue+0x5c>)
 800397a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800397c:	2200      	movs	r2, #0
 800397e:	210c      	movs	r1, #12
 8003980:	200a      	movs	r0, #10
 8003982:	f7fe f889 	bl	8001a98 <xQueueGenericCreate>
 8003986:	4602      	mov	r2, r0
 8003988:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <prvCheckForValidListAndQueue+0x54>)
 800398a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800398c:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <prvCheckForValidListAndQueue+0x54>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003994:	4b04      	ldr	r3, [pc, #16]	; (80039a8 <prvCheckForValidListAndQueue+0x54>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4908      	ldr	r1, [pc, #32]	; (80039bc <prvCheckForValidListAndQueue+0x68>)
 800399a:	4618      	mov	r0, r3
 800399c:	f7fe fd74 	bl	8002488 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039a0:	f000 f962 	bl	8003c68 <vPortExitCritical>
}
 80039a4:	bf00      	nop
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	200001d8 	.word	0x200001d8
 80039ac:	200001a8 	.word	0x200001a8
 80039b0:	200001bc 	.word	0x200001bc
 80039b4:	200001d0 	.word	0x200001d0
 80039b8:	200001d4 	.word	0x200001d4
 80039bc:	08004400 	.word	0x08004400

080039c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t* pxPortInitialiseStack(StackType_t *pxTopOfStack,
		TaskFunction_t pxCode, void *pvParameters) {
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	 interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	 of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	3b04      	subs	r3, #4
 80039d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR; /* xPSR */
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	3b04      	subs	r3, #4
 80039de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ((StackType_t) pxCode) & portSTART_ADDRESS_MASK; /* PC */
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f023 0201 	bic.w	r2, r3, #1
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	3b04      	subs	r3, #4
 80039ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (StackType_t) portTASK_RETURN_ADDRESS; /* LR */
 80039f0:	4a0c      	ldr	r2, [pc, #48]	; (8003a24 <pxPortInitialiseStack+0x64>)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5; /* R12, R3, R2 and R1. */
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	3b14      	subs	r3, #20
 80039fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = (StackType_t) pvParameters; /* R0 */
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	 own exec return value. */
	pxTopOfStack--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	3b04      	subs	r3, #4
 8003a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f06f 0202 	mvn.w	r2, #2
 8003a0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	3b20      	subs	r3, #32
 8003a14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003a16:	68fb      	ldr	r3, [r7, #12]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	08003a29 	.word	0x08003a29

08003a28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError(void) {
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
	volatile uint32_t ulDummy = 0;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	607b      	str	r3, [r7, #4]
	 its caller as there is nothing to return to.  If a task wants to exit it
	 should instead call vTaskDelete( NULL ).

	 Artificially force an assert() to be triggered if configASSERT() is
	 defined, then stop here so application writers can catch the error. */
	configASSERT(uxCriticalNesting == ~0UL);
 8003a32:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <prvTaskExitError+0x50>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a3a:	d009      	beq.n	8003a50 <prvTaskExitError+0x28>
 8003a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a40:	f383 8811 	msr	BASEPRI, r3
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	e7fe      	b.n	8003a4e <prvTaskExitError+0x26>
 8003a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a54:	f383 8811 	msr	BASEPRI, r3
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while (ulDummy == 0) {
 8003a62:	bf00      	nop
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0fc      	beq.n	8003a64 <prvTaskExitError+0x3c>
		 about code appearing after this function is called - making ulDummy
		 volatile makes the compiler think the function could return and
		 therefore not output an 'unreachable code' warning for code that appears
		 after it. */
	}
}
 8003a6a:	bf00      	nop
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	2000000c 	.word	0x2000000c
 8003a7c:	00000000 	.word	0x00000000

08003a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler(void) {
	__asm volatile (
 8003a80:	4b07      	ldr	r3, [pc, #28]	; (8003aa0 <pxCurrentTCBConst2>)
 8003a82:	6819      	ldr	r1, [r3, #0]
 8003a84:	6808      	ldr	r0, [r1, #0]
 8003a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a8a:	f380 8809 	msr	PSP, r0
 8003a8e:	f3bf 8f6f 	isb	sy
 8003a92:	f04f 0000 	mov.w	r0, #0
 8003a96:	f380 8811 	msr	BASEPRI, r0
 8003a9a:	4770      	bx	lr
 8003a9c:	f3af 8000 	nop.w

08003aa0 <pxCurrentTCBConst2>:
 8003aa0:	200000a4 	.word	0x200000a4
			"	bx r14							\n"
			"									\n"
			"	.align 4						\n"
			"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
	);
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop

08003aa8 <prvPortStartFirstTask>:
static void prvPortStartFirstTask(void) {
	/* Start the first task.  This also clears the bit that indicates the FPU is
	 in use in case the FPU was used before the scheduler was started - which
	 would otherwise result in the unnecessary leaving of space in the SVC stack
	 for lazy saving of FPU registers. */
	__asm volatile(
 8003aa8:	4808      	ldr	r0, [pc, #32]	; (8003acc <prvPortStartFirstTask+0x24>)
 8003aaa:	6800      	ldr	r0, [r0, #0]
 8003aac:	6800      	ldr	r0, [r0, #0]
 8003aae:	f380 8808 	msr	MSP, r0
 8003ab2:	f04f 0000 	mov.w	r0, #0
 8003ab6:	f380 8814 	msr	CONTROL, r0
 8003aba:	b662      	cpsie	i
 8003abc:	b661      	cpsie	f
 8003abe:	f3bf 8f4f 	dsb	sy
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	df00      	svc	0
 8003ac8:	bf00      	nop
			" dsb					\n"
			" isb					\n"
			" svc 0					\n" /* System call to start first task. */
			" nop					\n"
	);
}
 8003aca:	bf00      	nop
 8003acc:	e000ed08 	.word	0xe000ed08

08003ad0 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler(void) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
	configASSERT(configMAX_SYSCALL_INTERRUPT_PRIORITY);

	/* This port can be used on all revisions of the Cortex-M7 core other than
	 the r0p1 parts.  r0p1 parts should use the port from the
	 /source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT(portCPUID != portCORTEX_M7_r0p1_ID);
 8003ad6:	4b44      	ldr	r3, [pc, #272]	; (8003be8 <xPortStartScheduler+0x118>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a44      	ldr	r2, [pc, #272]	; (8003bec <xPortStartScheduler+0x11c>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d109      	bne.n	8003af4 <xPortStartScheduler+0x24>
 8003ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae4:	f383 8811 	msr	BASEPRI, r3
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	e7fe      	b.n	8003af2 <xPortStartScheduler+0x22>
	configASSERT(portCPUID != portCORTEX_M7_r0p0_ID);
 8003af4:	4b3c      	ldr	r3, [pc, #240]	; (8003be8 <xPortStartScheduler+0x118>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a3d      	ldr	r2, [pc, #244]	; (8003bf0 <xPortStartScheduler+0x120>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d109      	bne.n	8003b12 <xPortStartScheduler+0x42>
 8003afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b02:	f383 8811 	msr	BASEPRI, r3
 8003b06:	f3bf 8f6f 	isb	sy
 8003b0a:	f3bf 8f4f 	dsb	sy
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	e7fe      	b.n	8003b10 <xPortStartScheduler+0x40>

#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t *const pucFirstUserPriorityRegister =
 8003b12:	4b38      	ldr	r3, [pc, #224]	; (8003bf4 <xPortStartScheduler+0x124>)
 8003b14:	617b      	str	r3, [r7, #20]
		 functions can be called.  ISR safe functions are those that end in
		 "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		 ensure interrupt entry is as fast and simple as possible.

		 Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		 possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	22ff      	movs	r2, #255	; 0xff
 8003b22:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY
				& ucMaxPriorityValue;
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b34:	b2da      	uxtb	r2, r3
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY
 8003b36:	4b30      	ldr	r3, [pc, #192]	; (8003bf8 <xPortStartScheduler+0x128>)
 8003b38:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		 of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003b3a:	4b30      	ldr	r3, [pc, #192]	; (8003bfc <xPortStartScheduler+0x12c>)
 8003b3c:	2207      	movs	r2, #7
 8003b3e:	601a      	str	r2, [r3, #0]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 8003b40:	e009      	b.n	8003b56 <xPortStartScheduler+0x86>
			ulMaxPRIGROUPValue--;
 8003b42:	4b2e      	ldr	r3, [pc, #184]	; (8003bfc <xPortStartScheduler+0x12c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3b01      	subs	r3, #1
 8003b48:	4a2c      	ldr	r2, [pc, #176]	; (8003bfc <xPortStartScheduler+0x12c>)
 8003b4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= (uint8_t) 0x01;
 8003b4c:	78fb      	ldrb	r3, [r7, #3]
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	70fb      	strb	r3, [r7, #3]
		while ((ucMaxPriorityValue & portTOP_BIT_OF_BYTE) == portTOP_BIT_OF_BYTE) {
 8003b56:	78fb      	ldrb	r3, [r7, #3]
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b5e:	2b80      	cmp	r3, #128	; 0x80
 8003b60:	d0ef      	beq.n	8003b42 <xPortStartScheduler+0x72>
#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			 priority bits matches the number of priority bits actually queried
			 from the hardware. */
			configASSERT(
 8003b62:	4b26      	ldr	r3, [pc, #152]	; (8003bfc <xPortStartScheduler+0x12c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f1c3 0307 	rsb	r3, r3, #7
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d009      	beq.n	8003b82 <xPortStartScheduler+0xb2>
 8003b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	60bb      	str	r3, [r7, #8]
 8003b80:	e7fe      	b.n	8003b80 <xPortStartScheduler+0xb0>
		}
#endif

		/* Shift the priority group value back to its position within the AIRCR
		 register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003b82:	4b1e      	ldr	r3, [pc, #120]	; (8003bfc <xPortStartScheduler+0x12c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	021b      	lsls	r3, r3, #8
 8003b88:	4a1c      	ldr	r2, [pc, #112]	; (8003bfc <xPortStartScheduler+0x12c>)
 8003b8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003b8c:	4b1b      	ldr	r3, [pc, #108]	; (8003bfc <xPortStartScheduler+0x12c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b94:	4a19      	ldr	r2, [pc, #100]	; (8003bfc <xPortStartScheduler+0x12c>)
 8003b96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		 value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	701a      	strb	r2, [r3, #0]
	}
#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003ba0:	4b17      	ldr	r3, [pc, #92]	; (8003c00 <xPortStartScheduler+0x130>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a16      	ldr	r2, [pc, #88]	; (8003c00 <xPortStartScheduler+0x130>)
 8003ba6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003baa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003bac:	4b14      	ldr	r3, [pc, #80]	; (8003c00 <xPortStartScheduler+0x130>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a13      	ldr	r2, [pc, #76]	; (8003c00 <xPortStartScheduler+0x130>)
 8003bb2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003bb6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	 here already. */
	vPortSetupTimerInterrupt();
 8003bb8:	f000 f8d6 	bl	8003d68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003bbc:	4b11      	ldr	r3, [pc, #68]	; (8003c04 <xPortStartScheduler+0x134>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003bc2:	f000 f8f5 	bl	8003db0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR) |= portASPEN_AND_LSPEN_BITS;
 8003bc6:	4b10      	ldr	r3, [pc, #64]	; (8003c08 <xPortStartScheduler+0x138>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a0f      	ldr	r2, [pc, #60]	; (8003c08 <xPortStartScheduler+0x138>)
 8003bcc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003bd0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003bd2:	f7ff ff69 	bl	8003aa8 <prvPortStartFirstTask>
	 exit error function to prevent compiler warnings about a static function
	 not being called in the case that the application writer overrides this
	 functionality by defining configTASK_RETURN_ADDRESS.  Call
	 vTaskSwitchContext() so link time optimisation does not remove the
	 symbol. */
	vTaskSwitchContext();
 8003bd6:	f7fe ffb3 	bl	8002b40 <vTaskSwitchContext>
	prvTaskExitError();
 8003bda:	f7ff ff25 	bl	8003a28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	e000ed00 	.word	0xe000ed00
 8003bec:	410fc271 	.word	0x410fc271
 8003bf0:	410fc270 	.word	0x410fc270
 8003bf4:	e000e400 	.word	0xe000e400
 8003bf8:	200001e4 	.word	0x200001e4
 8003bfc:	200001e8 	.word	0x200001e8
 8003c00:	e000ed20 	.word	0xe000ed20
 8003c04:	2000000c 	.word	0x2000000c
 8003c08:	e000ef34 	.word	0xe000ef34

08003c0c <vPortEnterCritical>:
	 Artificially force an assert. */
	configASSERT(uxCriticalNesting == 1000UL);
}
/*-----------------------------------------------------------*/

void vPortEnterCritical(void) {
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c16:	f383 8811 	msr	BASEPRI, r3
 8003c1a:	f3bf 8f6f 	isb	sy
 8003c1e:	f3bf 8f4f 	dsb	sy
 8003c22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003c24:	4b0e      	ldr	r3, [pc, #56]	; (8003c60 <vPortEnterCritical+0x54>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	4a0d      	ldr	r2, [pc, #52]	; (8003c60 <vPortEnterCritical+0x54>)
 8003c2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	 assert() if it is being called from an interrupt context.  Only API
	 functions that end in "FromISR" can be used in an interrupt.  Only assert if
	 the critical nesting count is 1 to protect against recursive calls if the
	 assert function also uses a critical section. */
	if (uxCriticalNesting == 1) {
 8003c2e:	4b0c      	ldr	r3, [pc, #48]	; (8003c60 <vPortEnterCritical+0x54>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d10e      	bne.n	8003c54 <vPortEnterCritical+0x48>
		configASSERT(( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0);
 8003c36:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <vPortEnterCritical+0x58>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d009      	beq.n	8003c54 <vPortEnterCritical+0x48>
 8003c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	603b      	str	r3, [r7, #0]
 8003c52:	e7fe      	b.n	8003c52 <vPortEnterCritical+0x46>
	}
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	2000000c 	.word	0x2000000c
 8003c64:	e000ed04 	.word	0xe000ed04

08003c68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical(void) {
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
	configASSERT(uxCriticalNesting);
 8003c6e:	4b11      	ldr	r3, [pc, #68]	; (8003cb4 <vPortExitCritical+0x4c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d109      	bne.n	8003c8a <vPortExitCritical+0x22>
 8003c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	607b      	str	r3, [r7, #4]
 8003c88:	e7fe      	b.n	8003c88 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003c8a:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <vPortExitCritical+0x4c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	4a08      	ldr	r2, [pc, #32]	; (8003cb4 <vPortExitCritical+0x4c>)
 8003c92:	6013      	str	r3, [r2, #0]
	if (uxCriticalNesting == 0) {
 8003c94:	4b07      	ldr	r3, [pc, #28]	; (8003cb4 <vPortExitCritical+0x4c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d104      	bne.n	8003ca6 <vPortExitCritical+0x3e>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	f383 8811 	msr	BASEPRI, r3
		portENABLE_INTERRUPTS();
	}
}
 8003ca6:	bf00      	nop
 8003ca8:	370c      	adds	r7, #12
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	2000000c 	.word	0x2000000c
	...

08003cc0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void xPortPendSVHandler(void) {
	/* This is a naked function. */

	__asm volatile
 8003cc0:	f3ef 8009 	mrs	r0, PSP
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	4b15      	ldr	r3, [pc, #84]	; (8003d20 <pxCurrentTCBConst>)
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	f01e 0f10 	tst.w	lr, #16
 8003cd0:	bf08      	it	eq
 8003cd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003cd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cda:	6010      	str	r0, [r2, #0]
 8003cdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003ce0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003ce4:	f380 8811 	msr	BASEPRI, r0
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f7fe ff26 	bl	8002b40 <vTaskSwitchContext>
 8003cf4:	f04f 0000 	mov.w	r0, #0
 8003cf8:	f380 8811 	msr	BASEPRI, r0
 8003cfc:	bc09      	pop	{r0, r3}
 8003cfe:	6819      	ldr	r1, [r3, #0]
 8003d00:	6808      	ldr	r0, [r1, #0]
 8003d02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d06:	f01e 0f10 	tst.w	lr, #16
 8003d0a:	bf08      	it	eq
 8003d0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003d10:	f380 8809 	msr	PSP, r0
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	f3af 8000 	nop.w

08003d20 <pxCurrentTCBConst>:
 8003d20:	200000a4 	.word	0x200000a4
			"										\n"
			"	.align 4							\n"
			"pxCurrentTCBConst: .word pxCurrentTCB	\n"
			::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003d24:	bf00      	nop
 8003d26:	bf00      	nop

08003d28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler(void) {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
	__asm volatile
 8003d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d32:	f383 8811 	msr	BASEPRI, r3
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	607b      	str	r3, [r7, #4]
	 known. */
	portDISABLE_INTERRUPTS();
	traceISR_ENTER();
	{
		/* Increment the RTOS tick. */
		if (xTaskIncrementTick() != pdFALSE) {
 8003d40:	f7fe fe46 	bl	80029d0 <xTaskIncrementTick>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <SysTick_Handler+0x2a>
			traceISR_EXIT_TO_SCHEDULER();
			/* A context switch is required.  Context switching is performed in
			 the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003d4a:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <SysTick_Handler+0x3c>)
 8003d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	2300      	movs	r3, #0
 8003d54:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	f383 8811 	msr	BASEPRI, r3
		} else {
			traceISR_EXIT();
		}
	}
	portENABLE_INTERRUPTS();
}
 8003d5c:	bf00      	nop
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	e000ed04 	.word	0xe000ed04

08003d68 <vPortSetupTimerInterrupt>:

/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt(void) {
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003d6c:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <vPortSetupTimerInterrupt+0x34>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003d72:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <vPortSetupTimerInterrupt+0x38>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ)
 8003d78:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <vPortSetupTimerInterrupt+0x3c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a0a      	ldr	r2, [pc, #40]	; (8003da8 <vPortSetupTimerInterrupt+0x40>)
 8003d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d82:	099b      	lsrs	r3, r3, #6
 8003d84:	4a09      	ldr	r2, [pc, #36]	; (8003dac <vPortSetupTimerInterrupt+0x44>)
			- 1UL;
 8003d86:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ)
 8003d88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT
 8003d8a:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <vPortSetupTimerInterrupt+0x34>)
 8003d8c:	2207      	movs	r2, #7
 8003d8e:	601a      	str	r2, [r3, #0]
			| portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT);
}
 8003d90:	bf00      	nop
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	e000e010 	.word	0xe000e010
 8003da0:	e000e018 	.word	0xe000e018
 8003da4:	20000000 	.word	0x20000000
 8003da8:	10624dd3 	.word	0x10624dd3
 8003dac:	e000e014 	.word	0xe000e014

08003db0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP(void) {
	__asm volatile
 8003db0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003dc0 <vPortEnableVFP+0x10>
 8003db4:	6801      	ldr	r1, [r0, #0]
 8003db6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003dba:	6001      	str	r1, [r0, #0]
 8003dbc:	4770      	bx	lr
			"								\n"
			"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
			"	str r1, [r0]				\n"
			"	bx r14						"
	);
}
 8003dbe:	bf00      	nop
 8003dc0:	e000ed88 	.word	0xe000ed88

08003dc4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

void vPortValidateInterruptPriority(void) {
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003dca:	f3ef 8305 	mrs	r3, IPSR
 8003dce:	60fb      	str	r3, [r7, #12]

	/* Is the interrupt number a user defined interrupt? */
	if (ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER) {
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2b0f      	cmp	r3, #15
 8003dd4:	d913      	bls.n	8003dfe <vPortValidateInterruptPriority+0x3a>
		/* Look up the interrupt's priority. */
		ucCurrentPriority = pcInterruptPriorityRegisters[ulCurrentInterrupt];
 8003dd6:	4a16      	ldr	r2, [pc, #88]	; (8003e30 <vPortValidateInterruptPriority+0x6c>)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4413      	add	r3, r2
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	72fb      	strb	r3, [r7, #11]
		 interrupt entry is as fast and simple as possible.

		 The following links provide detailed information:
		 http://www.freertos.org/RTOS-Cortex-M3-M4.html
		 http://www.freertos.org/FAQHelp.html */
		configASSERT(ucCurrentPriority >= ucMaxSysCallPriority);
 8003de0:	4b14      	ldr	r3, [pc, #80]	; (8003e34 <vPortValidateInterruptPriority+0x70>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	7afa      	ldrb	r2, [r7, #11]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d209      	bcs.n	8003dfe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8003dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dee:	f383 8811 	msr	BASEPRI, r3
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	607b      	str	r3, [r7, #4]
 8003dfc:	e7fe      	b.n	8003dfc <vPortValidateInterruptPriority+0x38>
	 configuration then the correct setting can be achieved on all Cortex-M
	 devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
	 scheduler.  Note however that some vendor specific peripheral libraries
	 assume a non-zero priority group setting, in which cases using a value
	 of zero will result in unpredictable behaviour. */
	configASSERT(
 8003dfe:	4b0e      	ldr	r3, [pc, #56]	; (8003e38 <vPortValidateInterruptPriority+0x74>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e06:	4b0d      	ldr	r3, [pc, #52]	; (8003e3c <vPortValidateInterruptPriority+0x78>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d909      	bls.n	8003e22 <vPortValidateInterruptPriority+0x5e>
 8003e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e12:	f383 8811 	msr	BASEPRI, r3
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	603b      	str	r3, [r7, #0]
 8003e20:	e7fe      	b.n	8003e20 <vPortValidateInterruptPriority+0x5c>
			( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue);
}
 8003e22:	bf00      	nop
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	e000e3f0 	.word	0xe000e3f0
 8003e34:	200001e4 	.word	0x200001e4
 8003e38:	e000ed0c 	.word	0xe000ed0c
 8003e3c:	200001e8 	.word	0x200001e8

08003e40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08a      	sub	sp, #40	; 0x28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003e4c:	f7fe fd06 	bl	800285c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003e50:	4b57      	ldr	r3, [pc, #348]	; (8003fb0 <pvPortMalloc+0x170>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003e58:	f000 f90c 	bl	8004074 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003e5c:	4b55      	ldr	r3, [pc, #340]	; (8003fb4 <pvPortMalloc+0x174>)
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4013      	ands	r3, r2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f040 808c 	bne.w	8003f82 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d01c      	beq.n	8003eaa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8003e70:	2208      	movs	r2, #8
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4413      	add	r3, r2
 8003e76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d013      	beq.n	8003eaa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f023 0307 	bic.w	r3, r3, #7
 8003e88:	3308      	adds	r3, #8
 8003e8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d009      	beq.n	8003eaa <pvPortMalloc+0x6a>
 8003e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	617b      	str	r3, [r7, #20]
 8003ea8:	e7fe      	b.n	8003ea8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d068      	beq.n	8003f82 <pvPortMalloc+0x142>
 8003eb0:	4b41      	ldr	r3, [pc, #260]	; (8003fb8 <pvPortMalloc+0x178>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d863      	bhi.n	8003f82 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003eba:	4b40      	ldr	r3, [pc, #256]	; (8003fbc <pvPortMalloc+0x17c>)
 8003ebc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003ebe:	4b3f      	ldr	r3, [pc, #252]	; (8003fbc <pvPortMalloc+0x17c>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ec4:	e004      	b.n	8003ed0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d903      	bls.n	8003ee2 <pvPortMalloc+0xa2>
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1f1      	bne.n	8003ec6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003ee2:	4b33      	ldr	r3, [pc, #204]	; (8003fb0 <pvPortMalloc+0x170>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d04a      	beq.n	8003f82 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2208      	movs	r2, #8
 8003ef2:	4413      	add	r3, r2
 8003ef4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	1ad2      	subs	r2, r2, r3
 8003f06:	2308      	movs	r3, #8
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d91e      	bls.n	8003f4c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4413      	add	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d009      	beq.n	8003f34 <pvPortMalloc+0xf4>
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	613b      	str	r3, [r7, #16]
 8003f32:	e7fe      	b.n	8003f32 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	1ad2      	subs	r2, r2, r3
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003f46:	69b8      	ldr	r0, [r7, #24]
 8003f48:	f000 f8f6 	bl	8004138 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003f4c:	4b1a      	ldr	r3, [pc, #104]	; (8003fb8 <pvPortMalloc+0x178>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	4a18      	ldr	r2, [pc, #96]	; (8003fb8 <pvPortMalloc+0x178>)
 8003f58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003f5a:	4b17      	ldr	r3, [pc, #92]	; (8003fb8 <pvPortMalloc+0x178>)
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	4b18      	ldr	r3, [pc, #96]	; (8003fc0 <pvPortMalloc+0x180>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d203      	bcs.n	8003f6e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003f66:	4b14      	ldr	r3, [pc, #80]	; (8003fb8 <pvPortMalloc+0x178>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a15      	ldr	r2, [pc, #84]	; (8003fc0 <pvPortMalloc+0x180>)
 8003f6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	4b10      	ldr	r3, [pc, #64]	; (8003fb4 <pvPortMalloc+0x174>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003f82:	f7fe fc79 	bl	8002878 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d009      	beq.n	8003fa4 <pvPortMalloc+0x164>
 8003f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f94:	f383 8811 	msr	BASEPRI, r3
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	60fb      	str	r3, [r7, #12]
 8003fa2:	e7fe      	b.n	8003fa2 <pvPortMalloc+0x162>
	return pvReturn;
 8003fa4:	69fb      	ldr	r3, [r7, #28]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3728      	adds	r7, #40	; 0x28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	20012df4 	.word	0x20012df4
 8003fb4:	20012e00 	.word	0x20012e00
 8003fb8:	20012df8 	.word	0x20012df8
 8003fbc:	20012dec 	.word	0x20012dec
 8003fc0:	20012dfc 	.word	0x20012dfc

08003fc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d046      	beq.n	8004064 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003fd6:	2308      	movs	r3, #8
 8003fd8:	425b      	negs	r3, r3
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	4413      	add	r3, r2
 8003fde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	4b20      	ldr	r3, [pc, #128]	; (800406c <vPortFree+0xa8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4013      	ands	r3, r2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d109      	bne.n	8004006 <vPortFree+0x42>
 8003ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	e7fe      	b.n	8004004 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d009      	beq.n	8004022 <vPortFree+0x5e>
 800400e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004012:	f383 8811 	msr	BASEPRI, r3
 8004016:	f3bf 8f6f 	isb	sy
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	60bb      	str	r3, [r7, #8]
 8004020:	e7fe      	b.n	8004020 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	4b11      	ldr	r3, [pc, #68]	; (800406c <vPortFree+0xa8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4013      	ands	r3, r2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d019      	beq.n	8004064 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d115      	bne.n	8004064 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	4b0b      	ldr	r3, [pc, #44]	; (800406c <vPortFree+0xa8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	43db      	mvns	r3, r3
 8004042:	401a      	ands	r2, r3
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004048:	f7fe fc08 	bl	800285c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	4b07      	ldr	r3, [pc, #28]	; (8004070 <vPortFree+0xac>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4413      	add	r3, r2
 8004056:	4a06      	ldr	r2, [pc, #24]	; (8004070 <vPortFree+0xac>)
 8004058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800405a:	6938      	ldr	r0, [r7, #16]
 800405c:	f000 f86c 	bl	8004138 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004060:	f7fe fc0a 	bl	8002878 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004064:	bf00      	nop
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	20012e00 	.word	0x20012e00
 8004070:	20012df8 	.word	0x20012df8

08004074 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800407a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800407e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004080:	4b27      	ldr	r3, [pc, #156]	; (8004120 <prvHeapInit+0xac>)
 8004082:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00c      	beq.n	80040a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3307      	adds	r3, #7
 8004092:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0307 	bic.w	r3, r3, #7
 800409a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	4a1f      	ldr	r2, [pc, #124]	; (8004120 <prvHeapInit+0xac>)
 80040a4:	4413      	add	r3, r2
 80040a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80040ac:	4a1d      	ldr	r2, [pc, #116]	; (8004124 <prvHeapInit+0xb0>)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80040b2:	4b1c      	ldr	r3, [pc, #112]	; (8004124 <prvHeapInit+0xb0>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	4413      	add	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80040c0:	2208      	movs	r2, #8
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	1a9b      	subs	r3, r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f023 0307 	bic.w	r3, r3, #7
 80040ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4a15      	ldr	r2, [pc, #84]	; (8004128 <prvHeapInit+0xb4>)
 80040d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80040d6:	4b14      	ldr	r3, [pc, #80]	; (8004128 <prvHeapInit+0xb4>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2200      	movs	r2, #0
 80040dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80040de:	4b12      	ldr	r3, [pc, #72]	; (8004128 <prvHeapInit+0xb4>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	1ad2      	subs	r2, r2, r3
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80040f4:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <prvHeapInit+0xb4>)
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	4a0a      	ldr	r2, [pc, #40]	; (800412c <prvHeapInit+0xb8>)
 8004102:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	4a09      	ldr	r2, [pc, #36]	; (8004130 <prvHeapInit+0xbc>)
 800410a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800410c:	4b09      	ldr	r3, [pc, #36]	; (8004134 <prvHeapInit+0xc0>)
 800410e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004112:	601a      	str	r2, [r3, #0]
}
 8004114:	bf00      	nop
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	200001ec 	.word	0x200001ec
 8004124:	20012dec 	.word	0x20012dec
 8004128:	20012df4 	.word	0x20012df4
 800412c:	20012dfc 	.word	0x20012dfc
 8004130:	20012df8 	.word	0x20012df8
 8004134:	20012e00 	.word	0x20012e00

08004138 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004140:	4b28      	ldr	r3, [pc, #160]	; (80041e4 <prvInsertBlockIntoFreeList+0xac>)
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	e002      	b.n	800414c <prvInsertBlockIntoFreeList+0x14>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	429a      	cmp	r2, r3
 8004154:	d8f7      	bhi.n	8004146 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	4413      	add	r3, r2
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	429a      	cmp	r2, r3
 8004166:	d108      	bne.n	800417a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	685a      	ldr	r2, [r3, #4]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	441a      	add	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	441a      	add	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d118      	bne.n	80041c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <prvInsertBlockIntoFreeList+0xb0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	429a      	cmp	r2, r3
 8004198:	d00d      	beq.n	80041b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685a      	ldr	r2, [r3, #4]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	441a      	add	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	e008      	b.n	80041c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80041b6:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <prvInsertBlockIntoFreeList+0xb0>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	e003      	b.n	80041c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d002      	beq.n	80041d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041d6:	bf00      	nop
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	20012dec 	.word	0x20012dec
 80041e8:	20012df4 	.word	0x20012df4

080041ec <__errno>:
 80041ec:	4b01      	ldr	r3, [pc, #4]	; (80041f4 <__errno+0x8>)
 80041ee:	6818      	ldr	r0, [r3, #0]
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	20000010 	.word	0x20000010

080041f8 <__libc_init_array>:
 80041f8:	b570      	push	{r4, r5, r6, lr}
 80041fa:	4e0d      	ldr	r6, [pc, #52]	; (8004230 <__libc_init_array+0x38>)
 80041fc:	4c0d      	ldr	r4, [pc, #52]	; (8004234 <__libc_init_array+0x3c>)
 80041fe:	1ba4      	subs	r4, r4, r6
 8004200:	10a4      	asrs	r4, r4, #2
 8004202:	2500      	movs	r5, #0
 8004204:	42a5      	cmp	r5, r4
 8004206:	d109      	bne.n	800421c <__libc_init_array+0x24>
 8004208:	4e0b      	ldr	r6, [pc, #44]	; (8004238 <__libc_init_array+0x40>)
 800420a:	4c0c      	ldr	r4, [pc, #48]	; (800423c <__libc_init_array+0x44>)
 800420c:	f000 f8d4 	bl	80043b8 <_init>
 8004210:	1ba4      	subs	r4, r4, r6
 8004212:	10a4      	asrs	r4, r4, #2
 8004214:	2500      	movs	r5, #0
 8004216:	42a5      	cmp	r5, r4
 8004218:	d105      	bne.n	8004226 <__libc_init_array+0x2e>
 800421a:	bd70      	pop	{r4, r5, r6, pc}
 800421c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004220:	4798      	blx	r3
 8004222:	3501      	adds	r5, #1
 8004224:	e7ee      	b.n	8004204 <__libc_init_array+0xc>
 8004226:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800422a:	4798      	blx	r3
 800422c:	3501      	adds	r5, #1
 800422e:	e7f2      	b.n	8004216 <__libc_init_array+0x1e>
 8004230:	08004428 	.word	0x08004428
 8004234:	08004428 	.word	0x08004428
 8004238:	08004428 	.word	0x08004428
 800423c:	0800442c 	.word	0x0800442c

08004240 <memcpy>:
 8004240:	b510      	push	{r4, lr}
 8004242:	1e43      	subs	r3, r0, #1
 8004244:	440a      	add	r2, r1
 8004246:	4291      	cmp	r1, r2
 8004248:	d100      	bne.n	800424c <memcpy+0xc>
 800424a:	bd10      	pop	{r4, pc}
 800424c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004250:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004254:	e7f7      	b.n	8004246 <memcpy+0x6>

08004256 <memset>:
 8004256:	4402      	add	r2, r0
 8004258:	4603      	mov	r3, r0
 800425a:	4293      	cmp	r3, r2
 800425c:	d100      	bne.n	8004260 <memset+0xa>
 800425e:	4770      	bx	lr
 8004260:	f803 1b01 	strb.w	r1, [r3], #1
 8004264:	e7f9      	b.n	800425a <memset+0x4>
	...

08004268 <rand>:
 8004268:	b538      	push	{r3, r4, r5, lr}
 800426a:	4b13      	ldr	r3, [pc, #76]	; (80042b8 <rand+0x50>)
 800426c:	681c      	ldr	r4, [r3, #0]
 800426e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004270:	b97b      	cbnz	r3, 8004292 <rand+0x2a>
 8004272:	2018      	movs	r0, #24
 8004274:	f000 f82c 	bl	80042d0 <malloc>
 8004278:	4a10      	ldr	r2, [pc, #64]	; (80042bc <rand+0x54>)
 800427a:	4b11      	ldr	r3, [pc, #68]	; (80042c0 <rand+0x58>)
 800427c:	63a0      	str	r0, [r4, #56]	; 0x38
 800427e:	e9c0 2300 	strd	r2, r3, [r0]
 8004282:	4b10      	ldr	r3, [pc, #64]	; (80042c4 <rand+0x5c>)
 8004284:	6083      	str	r3, [r0, #8]
 8004286:	230b      	movs	r3, #11
 8004288:	8183      	strh	r3, [r0, #12]
 800428a:	2201      	movs	r2, #1
 800428c:	2300      	movs	r3, #0
 800428e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004292:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004294:	480c      	ldr	r0, [pc, #48]	; (80042c8 <rand+0x60>)
 8004296:	690a      	ldr	r2, [r1, #16]
 8004298:	694b      	ldr	r3, [r1, #20]
 800429a:	4c0c      	ldr	r4, [pc, #48]	; (80042cc <rand+0x64>)
 800429c:	4350      	muls	r0, r2
 800429e:	fb04 0003 	mla	r0, r4, r3, r0
 80042a2:	fba2 2304 	umull	r2, r3, r2, r4
 80042a6:	4403      	add	r3, r0
 80042a8:	1c54      	adds	r4, r2, #1
 80042aa:	f143 0500 	adc.w	r5, r3, #0
 80042ae:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80042b2:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80042b6:	bd38      	pop	{r3, r4, r5, pc}
 80042b8:	20000010 	.word	0x20000010
 80042bc:	abcd330e 	.word	0xabcd330e
 80042c0:	e66d1234 	.word	0xe66d1234
 80042c4:	0005deec 	.word	0x0005deec
 80042c8:	5851f42d 	.word	0x5851f42d
 80042cc:	4c957f2d 	.word	0x4c957f2d

080042d0 <malloc>:
 80042d0:	4b02      	ldr	r3, [pc, #8]	; (80042dc <malloc+0xc>)
 80042d2:	4601      	mov	r1, r0
 80042d4:	6818      	ldr	r0, [r3, #0]
 80042d6:	f000 b803 	b.w	80042e0 <_malloc_r>
 80042da:	bf00      	nop
 80042dc:	20000010 	.word	0x20000010

080042e0 <_malloc_r>:
 80042e0:	b570      	push	{r4, r5, r6, lr}
 80042e2:	1ccd      	adds	r5, r1, #3
 80042e4:	f025 0503 	bic.w	r5, r5, #3
 80042e8:	3508      	adds	r5, #8
 80042ea:	2d0c      	cmp	r5, #12
 80042ec:	bf38      	it	cc
 80042ee:	250c      	movcc	r5, #12
 80042f0:	2d00      	cmp	r5, #0
 80042f2:	4606      	mov	r6, r0
 80042f4:	db01      	blt.n	80042fa <_malloc_r+0x1a>
 80042f6:	42a9      	cmp	r1, r5
 80042f8:	d903      	bls.n	8004302 <_malloc_r+0x22>
 80042fa:	230c      	movs	r3, #12
 80042fc:	6033      	str	r3, [r6, #0]
 80042fe:	2000      	movs	r0, #0
 8004300:	bd70      	pop	{r4, r5, r6, pc}
 8004302:	f000 f857 	bl	80043b4 <__malloc_lock>
 8004306:	4a21      	ldr	r2, [pc, #132]	; (800438c <_malloc_r+0xac>)
 8004308:	6814      	ldr	r4, [r2, #0]
 800430a:	4621      	mov	r1, r4
 800430c:	b991      	cbnz	r1, 8004334 <_malloc_r+0x54>
 800430e:	4c20      	ldr	r4, [pc, #128]	; (8004390 <_malloc_r+0xb0>)
 8004310:	6823      	ldr	r3, [r4, #0]
 8004312:	b91b      	cbnz	r3, 800431c <_malloc_r+0x3c>
 8004314:	4630      	mov	r0, r6
 8004316:	f000 f83d 	bl	8004394 <_sbrk_r>
 800431a:	6020      	str	r0, [r4, #0]
 800431c:	4629      	mov	r1, r5
 800431e:	4630      	mov	r0, r6
 8004320:	f000 f838 	bl	8004394 <_sbrk_r>
 8004324:	1c43      	adds	r3, r0, #1
 8004326:	d124      	bne.n	8004372 <_malloc_r+0x92>
 8004328:	230c      	movs	r3, #12
 800432a:	6033      	str	r3, [r6, #0]
 800432c:	4630      	mov	r0, r6
 800432e:	f000 f842 	bl	80043b6 <__malloc_unlock>
 8004332:	e7e4      	b.n	80042fe <_malloc_r+0x1e>
 8004334:	680b      	ldr	r3, [r1, #0]
 8004336:	1b5b      	subs	r3, r3, r5
 8004338:	d418      	bmi.n	800436c <_malloc_r+0x8c>
 800433a:	2b0b      	cmp	r3, #11
 800433c:	d90f      	bls.n	800435e <_malloc_r+0x7e>
 800433e:	600b      	str	r3, [r1, #0]
 8004340:	50cd      	str	r5, [r1, r3]
 8004342:	18cc      	adds	r4, r1, r3
 8004344:	4630      	mov	r0, r6
 8004346:	f000 f836 	bl	80043b6 <__malloc_unlock>
 800434a:	f104 000b 	add.w	r0, r4, #11
 800434e:	1d23      	adds	r3, r4, #4
 8004350:	f020 0007 	bic.w	r0, r0, #7
 8004354:	1ac3      	subs	r3, r0, r3
 8004356:	d0d3      	beq.n	8004300 <_malloc_r+0x20>
 8004358:	425a      	negs	r2, r3
 800435a:	50e2      	str	r2, [r4, r3]
 800435c:	e7d0      	b.n	8004300 <_malloc_r+0x20>
 800435e:	428c      	cmp	r4, r1
 8004360:	684b      	ldr	r3, [r1, #4]
 8004362:	bf16      	itet	ne
 8004364:	6063      	strne	r3, [r4, #4]
 8004366:	6013      	streq	r3, [r2, #0]
 8004368:	460c      	movne	r4, r1
 800436a:	e7eb      	b.n	8004344 <_malloc_r+0x64>
 800436c:	460c      	mov	r4, r1
 800436e:	6849      	ldr	r1, [r1, #4]
 8004370:	e7cc      	b.n	800430c <_malloc_r+0x2c>
 8004372:	1cc4      	adds	r4, r0, #3
 8004374:	f024 0403 	bic.w	r4, r4, #3
 8004378:	42a0      	cmp	r0, r4
 800437a:	d005      	beq.n	8004388 <_malloc_r+0xa8>
 800437c:	1a21      	subs	r1, r4, r0
 800437e:	4630      	mov	r0, r6
 8004380:	f000 f808 	bl	8004394 <_sbrk_r>
 8004384:	3001      	adds	r0, #1
 8004386:	d0cf      	beq.n	8004328 <_malloc_r+0x48>
 8004388:	6025      	str	r5, [r4, #0]
 800438a:	e7db      	b.n	8004344 <_malloc_r+0x64>
 800438c:	20012e04 	.word	0x20012e04
 8004390:	20012e08 	.word	0x20012e08

08004394 <_sbrk_r>:
 8004394:	b538      	push	{r3, r4, r5, lr}
 8004396:	4c06      	ldr	r4, [pc, #24]	; (80043b0 <_sbrk_r+0x1c>)
 8004398:	2300      	movs	r3, #0
 800439a:	4605      	mov	r5, r0
 800439c:	4608      	mov	r0, r1
 800439e:	6023      	str	r3, [r4, #0]
 80043a0:	f7fc fa56 	bl	8000850 <_sbrk>
 80043a4:	1c43      	adds	r3, r0, #1
 80043a6:	d102      	bne.n	80043ae <_sbrk_r+0x1a>
 80043a8:	6823      	ldr	r3, [r4, #0]
 80043aa:	b103      	cbz	r3, 80043ae <_sbrk_r+0x1a>
 80043ac:	602b      	str	r3, [r5, #0]
 80043ae:	bd38      	pop	{r3, r4, r5, pc}
 80043b0:	20012e90 	.word	0x20012e90

080043b4 <__malloc_lock>:
 80043b4:	4770      	bx	lr

080043b6 <__malloc_unlock>:
 80043b6:	4770      	bx	lr

080043b8 <_init>:
 80043b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ba:	bf00      	nop
 80043bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043be:	bc08      	pop	{r3}
 80043c0:	469e      	mov	lr, r3
 80043c2:	4770      	bx	lr

080043c4 <_fini>:
 80043c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c6:	bf00      	nop
 80043c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ca:	bc08      	pop	{r3}
 80043cc:	469e      	mov	lr, r3
 80043ce:	4770      	bx	lr
